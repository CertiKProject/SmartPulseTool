This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 03:02:09,476 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 03:02:09,478 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 03:02:09,490 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 03:02:09,490 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 03:02:09,490 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 03:02:09,492 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 03:02:09,493 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 03:02:09,495 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 03:02:09,495 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 03:02:09,496 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 03:02:09,496 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 03:02:09,497 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 03:02:09,498 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 03:02:09,499 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 03:02:09,500 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 03:02:09,501 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 03:02:09,502 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 03:02:09,503 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 03:02:09,504 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 03:02:09,505 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 03:02:09,506 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 03:02:09,508 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 03:02:09,508 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 03:02:09,508 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 03:02:09,509 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 03:02:09,509 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 03:02:09,510 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 03:02:09,510 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 03:02:09,510 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 03:02:09,511 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 03:02:09,511 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 03:02:09,512 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 03:02:09,512 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 03:02:09,513 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 03:02:09,513 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 03:02:09,514 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 03:02:09,514 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 03:02:09,514 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 03:02:09,515 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 03:02:09,515 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 03:02:09,515 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 03:02:09,523 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 03:02:09,523 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 03:02:09,524 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 03:02:09,524 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 03:02:09,525 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 03:02:09,525 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 03:02:09,525 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 03:02:09,525 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 03:02:09,525 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 03:02:09,525 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 03:02:09,525 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 03:02:09,525 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 03:02:09,525 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 03:02:09,526 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 03:02:09,526 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 03:02:09,526 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 03:02:09,526 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 03:02:09,526 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 03:02:09,526 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 03:02:09,526 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 03:02:09,526 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 03:02:09,526 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 03:02:09,526 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 03:02:09,527 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 03:02:09,527 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 03:02:09,527 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 03:02:09,552 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 03:02:09,564 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 03:02:09,567 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 03:02:09,568 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 03:02:09,568 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 03:02:09,569 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self-fail.bpl
[2020-11-25 03:02:09,569 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self-fail.bpl'
[2020-11-25 03:02:09,709 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 03:02:09,711 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 03:02:09,711 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 03:02:09,711 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 03:02:09,711 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 03:02:09,728 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:02:09" (1/1) ...
[2020-11-25 03:02:09,730 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:02:09" (1/1) ...
[2020-11-25 03:02:09,784 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:02:09" (1/1) ...
[2020-11-25 03:02:09,785 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:02:09" (1/1) ...
[2020-11-25 03:02:09,822 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:02:09" (1/1) ...
[2020-11-25 03:02:09,846 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:02:09" (1/1) ...
[2020-11-25 03:02:09,864 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:02:09" (1/1) ...
[2020-11-25 03:02:09,886 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 03:02:09,887 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 03:02:09,887 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 03:02:09,889 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 03:02:09,893 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:02:09" (1/1) ...
[2020-11-25 03:02:09,920 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ONIT.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ONIT.transferFrom)))
[2020-11-25 03:02:09,926 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ONIT.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ONIT.transferFrom)))
[2020-11-25 03:02:09,933 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ONIT.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ONIT.transferFrom)))
[2020-11-25 03:02:09,944 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( from_s1322==to_s1322 && ( value_s1322>_balances_ERC20[this][from_s1322] || value_s1322>_allowed_ERC20[this][from_s1322][msg.sender] ) ) && value_s1322>=0 ) && value_s1322<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s1322]>=0 ) && _balances_ERC20[this][to_s1322]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][from_s1322]>=0 ) && _balances_ERC20[this][from_s1322]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowed_ERC20[this][from_s1322][msg.sender]>=0 ) && _allowed_ERC20[this][from_s1322][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>],IdentifierExpression[to_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[value_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]]],BinaryExpression[COMPGT,IdentifierExpression[value_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],[IdentifierExpression[to_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],[IdentifierExpression[to_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 03:02:09,952 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ONIT.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ONIT.transferFrom)))
[2020-11-25 03:02:09,952 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ONIT0) ==> ( <>AP(fail_transferFrom_ONIT0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 03:02:09,976 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:02:09 PropertyContainer
[2020-11-25 03:02:09,976 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 03:02:09,977 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 03:02:09,977 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 03:02:09,977 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 03:02:09,978 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:02:09" (1/2) ...
[2020-11-25 03:02:09,978 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 03:02:09,978 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 03:02:10,008 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:02:09" (2/2) ...
[2020-11-25 03:02:10,008 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 03:02:10,009 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 03:02:10,010 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 03:02:10,010 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 03:02:10,011 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:02:09" (1/2) ...
[2020-11-25 03:02:10,092 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 03:02:10,092 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 03:02:10,092 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT.LockInfo_ctor__success
[2020-11-25 03:02:10,092 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 03:02:10,092 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 03:02:10,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 03:02:10,093 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 03:02:10,093 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 03:02:10,093 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 03:02:10,093 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 03:02:10,093 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 03:02:10,093 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 03:02:10,093 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 03:02:10,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 03:02:10,094 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 03:02:10,094 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 03:02:10,094 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 03:02:10,094 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 03:02:10,094 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 03:02:10,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 03:02:10,094 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_Ownable
[2020-11-25 03:02:10,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_Ownable
[2020-11-25 03:02:10,095 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 03:02:10,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 03:02:10,095 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Ownable
[2020-11-25 03:02:10,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Ownable
[2020-11-25 03:02:10,095 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 03:02:10,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 03:02:10,095 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Ownable
[2020-11-25 03:02:10,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Ownable
[2020-11-25 03:02:10,095 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 03:02:10,096 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 03:02:10,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 03:02:10,096 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 03:02:10,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 03:02:10,096 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 03:02:10,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 03:02:10,096 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole
[2020-11-25 03:02:10,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole
[2020-11-25 03:02:10,096 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 03:02:10,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 03:02:10,097 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 03:02:10,097 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 03:02:10,097 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 03:02:10,097 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 03:02:10,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 03:02:10,097 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 03:02:10,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 03:02:10,097 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 03:02:10,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 03:02:10,097 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 03:02:10,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 03:02:10,098 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 03:02:10,098 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 03:02:10,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 03:02:10,098 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 03:02:10,098 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 03:02:10,098 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 03:02:10,098 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 03:02:10,098 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 03:02:10,098 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 03:02:10,098 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 03:02:10,099 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 03:02:10,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 03:02:10,099 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 03:02:10,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 03:02:10,099 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 03:02:10,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 03:02:10,099 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 03:02:10,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 03:02:10,099 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 03:02:10,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 03:02:10,100 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 03:02:10,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 03:02:10,100 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 03:02:10,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 03:02:10,101 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 03:02:10,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 03:02:10,101 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 03:02:10,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 03:02:10,101 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 03:02:10,102 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 03:02:10,102 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 03:02:10,102 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 03:02:10,102 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 03:02:10,102 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 03:02:10,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 03:02:10,103 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 03:02:10,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 03:02:10,103 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 03:02:10,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 03:02:10,103 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 03:02:10,104 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 03:02:10,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 03:02:10,104 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 03:02:10,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 03:02:10,104 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 03:02:10,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 03:02:10,104 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 03:02:10,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 03:02:10,105 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT_NoBaseCtor__success
[2020-11-25 03:02:10,105 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT
[2020-11-25 03:02:10,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT
[2020-11-25 03:02:10,105 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ONIT
[2020-11-25 03:02:10,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ONIT
[2020-11-25 03:02:10,106 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ONIT
[2020-11-25 03:02:10,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ONIT
[2020-11-25 03:02:10,106 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ONIT
[2020-11-25 03:02:10,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ONIT
[2020-11-25 03:02:10,106 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_ONIT
[2020-11-25 03:02:10,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_ONIT
[2020-11-25 03:02:10,107 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_ONIT
[2020-11-25 03:02:10,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_ONIT
[2020-11-25 03:02:10,107 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ONIT
[2020-11-25 03:02:10,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ONIT
[2020-11-25 03:02:10,107 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_ONIT
[2020-11-25 03:02:10,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_ONIT
[2020-11-25 03:02:10,108 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_ONIT
[2020-11-25 03:02:10,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_ONIT
[2020-11-25 03:02:10,108 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_ONIT
[2020-11-25 03:02:10,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_ONIT
[2020-11-25 03:02:10,108 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_ONIT__success
[2020-11-25 03:02:10,109 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_ONIT__success
[2020-11-25 03:02:10,109 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_ONIT__success
[2020-11-25 03:02:10,109 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~uint256_ONIT
[2020-11-25 03:02:10,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~uint256_ONIT
[2020-11-25 03:02:10,109 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_ONIT__success
[2020-11-25 03:02:10,110 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ONIT__success
[2020-11-25 03:02:10,110 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_ONIT
[2020-11-25 03:02:10,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_ONIT
[2020-11-25 03:02:10,110 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_ONIT
[2020-11-25 03:02:10,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_ONIT
[2020-11-25 03:02:10,110 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ONIT
[2020-11-25 03:02:10,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ONIT
[2020-11-25 03:02:10,111 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 03:02:10,111 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 03:02:10,111 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 03:02:10,111 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 03:02:10,112 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__success
[2020-11-25 03:02:10,112 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 03:02:10,112 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 03:02:10,112 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 03:02:10,112 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__success
[2020-11-25 03:02:10,112 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 03:02:10,113 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 03:02:10,113 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 03:02:10,113 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 03:02:10,113 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 03:02:10,114 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 03:02:10,114 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 03:02:10,114 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 03:02:10,114 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 03:02:10,114 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 03:02:10,114 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 03:02:10,114 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 03:02:10,115 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 03:02:10,115 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 03:02:10,115 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 03:02:10,115 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 03:02:10,115 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 03:02:10,115 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 03:02:10,115 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ONIT
[2020-11-25 03:02:10,115 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 03:02:10,115 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 03:02:10,116 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 03:02:10,116 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT.LockInfo_ctor__fail
[2020-11-25 03:02:10,116 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 03:02:10,116 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 03:02:10,116 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 03:02:10,116 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 03:02:10,116 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 03:02:10,116 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 03:02:10,116 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 03:02:10,116 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 03:02:10,116 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 03:02:10,117 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 03:02:10,117 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 03:02:10,117 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 03:02:10,117 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 03:02:10,117 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 03:02:10,117 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 03:02:10,117 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 03:02:10,117 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 03:02:10,117 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_Ownable__success
[2020-11-25 03:02:10,117 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_Ownable__fail
[2020-11-25 03:02:10,117 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 03:02:10,117 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 03:02:10,118 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Ownable__success
[2020-11-25 03:02:10,118 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Ownable__fail
[2020-11-25 03:02:10,118 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 03:02:10,118 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 03:02:10,118 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Ownable__success
[2020-11-25 03:02:10,118 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Ownable__fail
[2020-11-25 03:02:10,118 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 03:02:10,118 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 03:02:10,118 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 03:02:10,118 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 03:02:10,118 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 03:02:10,118 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 03:02:10,119 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 03:02:10,119 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__success
[2020-11-25 03:02:10,119 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__fail
[2020-11-25 03:02:10,119 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 03:02:10,119 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 03:02:10,119 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 03:02:10,119 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 03:02:10,119 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 03:02:10,119 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 03:02:10,119 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 03:02:10,119 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 03:02:10,120 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 03:02:10,120 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 03:02:10,120 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 03:02:10,120 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 03:02:10,120 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 03:02:10,120 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 03:02:10,120 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 03:02:10,120 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 03:02:10,120 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 03:02:10,120 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 03:02:10,120 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 03:02:10,120 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 03:02:10,121 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 03:02:10,121 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 03:02:10,121 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 03:02:10,121 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 03:02:10,121 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 03:02:10,121 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 03:02:10,121 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 03:02:10,121 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 03:02:10,121 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 03:02:10,121 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 03:02:10,121 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 03:02:10,122 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:02:10,122 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:02:10,122 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:02:10,122 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:02:10,122 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 03:02:10,122 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 03:02:10,122 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 03:02:10,122 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 03:02:10,122 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 03:02:10,122 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 03:02:10,122 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 03:02:10,122 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 03:02:10,123 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 03:02:10,123 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 03:02:10,123 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 03:02:10,123 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 03:02:10,123 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 03:02:10,123 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 03:02:10,123 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 03:02:10,123 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 03:02:10,123 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 03:02:10,123 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 03:02:10,123 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 03:02:10,123 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 03:02:10,124 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT_NoBaseCtor__fail
[2020-11-25 03:02:10,124 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT__success
[2020-11-25 03:02:10,124 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT__fail
[2020-11-25 03:02:10,124 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ONIT__success
[2020-11-25 03:02:10,124 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ONIT__fail
[2020-11-25 03:02:10,124 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ONIT__success
[2020-11-25 03:02:10,124 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ONIT__fail
[2020-11-25 03:02:10,124 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ONIT__success
[2020-11-25 03:02:10,124 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ONIT__fail
[2020-11-25 03:02:10,124 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_ONIT__success
[2020-11-25 03:02:10,124 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_ONIT__fail
[2020-11-25 03:02:10,124 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_ONIT__success
[2020-11-25 03:02:10,125 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_ONIT__fail
[2020-11-25 03:02:10,125 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ONIT__success
[2020-11-25 03:02:10,125 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ONIT__fail
[2020-11-25 03:02:10,125 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_ONIT__success
[2020-11-25 03:02:10,125 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_ONIT__fail
[2020-11-25 03:02:10,125 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_ONIT__success
[2020-11-25 03:02:10,125 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_ONIT__fail
[2020-11-25 03:02:10,125 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_ONIT__success
[2020-11-25 03:02:10,125 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_ONIT__fail
[2020-11-25 03:02:10,125 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_ONIT__fail
[2020-11-25 03:02:10,125 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_ONIT__fail
[2020-11-25 03:02:10,126 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_ONIT__fail
[2020-11-25 03:02:10,126 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~uint256_ONIT__success
[2020-11-25 03:02:10,126 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~uint256_ONIT__fail
[2020-11-25 03:02:10,126 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_ONIT__fail
[2020-11-25 03:02:10,126 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ONIT__fail
[2020-11-25 03:02:10,126 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_ONIT__success
[2020-11-25 03:02:10,126 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_ONIT__fail
[2020-11-25 03:02:10,126 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_ONIT__success
[2020-11-25 03:02:10,126 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_ONIT__fail
[2020-11-25 03:02:10,126 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ONIT__success
[2020-11-25 03:02:10,126 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ONIT__fail
[2020-11-25 03:02:10,127 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 03:02:10,127 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 03:02:10,127 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 03:02:10,127 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 03:02:10,127 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__fail
[2020-11-25 03:02:10,127 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 03:02:10,127 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 03:02:10,127 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 03:02:10,127 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__fail
[2020-11-25 03:02:10,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 03:02:10,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 03:02:10,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 03:02:10,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 03:02:10,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT.LockInfo_ctor__fail
[2020-11-25 03:02:10,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT.LockInfo_ctor__success
[2020-11-25 03:02:10,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 03:02:10,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 03:02:10,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 03:02:10,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 03:02:10,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 03:02:10,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 03:02:10,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 03:02:10,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 03:02:10,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 03:02:10,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 03:02:10,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 03:02:10,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 03:02:10,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 03:02:10,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 03:02:10,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 03:02:10,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 03:02:10,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 03:02:10,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 03:02:10,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 03:02:10,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 03:02:10,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 03:02:10,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 03:02:10,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 03:02:10,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 03:02:10,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 03:02:10,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 03:02:10,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 03:02:10,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 03:02:10,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_Ownable__fail
[2020-11-25 03:02:10,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_Ownable__success
[2020-11-25 03:02:10,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 03:02:10,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 03:02:10,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Ownable__fail
[2020-11-25 03:02:10,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Ownable__success
[2020-11-25 03:02:10,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 03:02:10,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 03:02:10,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Ownable__fail
[2020-11-25 03:02:10,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Ownable__success
[2020-11-25 03:02:10,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 03:02:10,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 03:02:10,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 03:02:10,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 03:02:10,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 03:02:10,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 03:02:10,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 03:02:10,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 03:02:10,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__fail
[2020-11-25 03:02:10,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__success
[2020-11-25 03:02:10,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 03:02:10,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 03:02:10,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 03:02:10,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 03:02:10,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 03:02:10,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 03:02:10,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 03:02:10,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 03:02:10,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 03:02:10,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 03:02:10,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 03:02:10,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 03:02:10,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 03:02:10,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 03:02:10,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 03:02:10,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 03:02:10,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 03:02:10,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 03:02:10,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 03:02:10,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 03:02:10,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 03:02:10,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 03:02:10,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 03:02:10,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 03:02:10,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 03:02:10,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 03:02:10,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 03:02:10,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 03:02:10,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 03:02:10,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 03:02:10,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 03:02:10,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 03:02:10,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 03:02:10,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 03:02:10,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 03:02:10,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 03:02:10,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:02:10,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:02:10,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:02:10,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:02:10,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 03:02:10,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 03:02:10,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 03:02:10,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 03:02:10,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 03:02:10,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 03:02:10,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 03:02:10,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 03:02:10,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 03:02:10,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 03:02:10,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 03:02:10,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 03:02:10,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 03:02:10,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 03:02:10,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 03:02:10,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 03:02:10,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 03:02:10,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 03:02:10,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 03:02:10,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 03:02:10,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 03:02:10,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 03:02:10,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 03:02:10,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 03:02:10,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 03:02:10,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 03:02:10,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT_NoBaseCtor__fail
[2020-11-25 03:02:10,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT_NoBaseCtor__success
[2020-11-25 03:02:10,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT__fail
[2020-11-25 03:02:10,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT__success
[2020-11-25 03:02:10,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ONIT__fail
[2020-11-25 03:02:10,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ONIT__success
[2020-11-25 03:02:10,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ONIT__fail
[2020-11-25 03:02:10,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ONIT__success
[2020-11-25 03:02:10,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ONIT__fail
[2020-11-25 03:02:10,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ONIT__success
[2020-11-25 03:02:10,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_ONIT__fail
[2020-11-25 03:02:10,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_ONIT__success
[2020-11-25 03:02:10,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_ONIT__fail
[2020-11-25 03:02:10,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_ONIT__success
[2020-11-25 03:02:10,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ONIT__fail
[2020-11-25 03:02:10,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ONIT__success
[2020-11-25 03:02:10,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_ONIT__fail
[2020-11-25 03:02:10,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_ONIT__success
[2020-11-25 03:02:10,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_ONIT__fail
[2020-11-25 03:02:10,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_ONIT__success
[2020-11-25 03:02:10,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_ONIT__fail
[2020-11-25 03:02:10,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_ONIT__success
[2020-11-25 03:02:10,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_ONIT__fail
[2020-11-25 03:02:10,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_ONIT__success
[2020-11-25 03:02:10,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_ONIT__fail
[2020-11-25 03:02:10,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_ONIT__success
[2020-11-25 03:02:10,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_ONIT__fail
[2020-11-25 03:02:10,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_ONIT__success
[2020-11-25 03:02:10,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~uint256_ONIT__fail
[2020-11-25 03:02:10,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~uint256_ONIT__success
[2020-11-25 03:02:10,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_ONIT__fail
[2020-11-25 03:02:10,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_ONIT__success
[2020-11-25 03:02:10,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ONIT__fail
[2020-11-25 03:02:10,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ONIT__success
[2020-11-25 03:02:10,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_ONIT__fail
[2020-11-25 03:02:10,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_ONIT__success
[2020-11-25 03:02:10,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_ONIT__fail
[2020-11-25 03:02:10,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_ONIT__success
[2020-11-25 03:02:10,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ONIT__fail
[2020-11-25 03:02:10,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ONIT__success
[2020-11-25 03:02:10,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 03:02:10,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 03:02:10,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 03:02:10,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 03:02:10,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 03:02:10,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 03:02:10,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 03:02:10,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 03:02:10,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__fail
[2020-11-25 03:02:10,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__success
[2020-11-25 03:02:10,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 03:02:10,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 03:02:10,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 03:02:10,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 03:02:10,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 03:02:10,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 03:02:10,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__fail
[2020-11-25 03:02:10,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__success
[2020-11-25 03:02:10,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 03:02:10,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 03:02:10,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 03:02:10,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 03:02:10,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 03:02:10,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 03:02:10,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 03:02:10,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 03:02:10,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 03:02:10,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 03:02:10,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 03:02:10,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 03:02:10,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 03:02:10,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 03:02:10,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 03:02:10,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 03:02:10,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 03:02:10,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 03:02:10,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ONIT
[2020-11-25 03:02:10,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 03:02:10,142 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 03:02:10,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 03:02:10,999 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:02:10,999 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:02:11,558 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 03:02:11,558 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 03:02:11,561 INFO  L202        PluginConnector]: Adding new model ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:02:11 BoogieIcfgContainer
[2020-11-25 03:02:11,561 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:02:09" (2/2) ...
[2020-11-25 03:02:11,561 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 03:02:11,561 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@458a323a and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:02:11, skipping insertion in model container
[2020-11-25 03:02:11,561 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 03:02:11,562 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 03:02:11,562 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 03:02:11,563 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 03:02:11,563 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:02:09" (1/3) ...
[2020-11-25 03:02:11,563 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@70f2b30e and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:02:11, skipping insertion in model container
[2020-11-25 03:02:11,563 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:02:09" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 03:02:11,595 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:02:11 NWAContainer
[2020-11-25 03:02:11,595 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 03:02:11,596 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 03:02:11,596 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 03:02:11,596 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 03:02:11,597 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:02:11" (3/4) ...
[2020-11-25 03:02:11,598 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@6b8918dd and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:02:11, skipping insertion in model container
[2020-11-25 03:02:11,598 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:02:11" (4/4) ...
[2020-11-25 03:02:11,601 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 03:02:11,608 INFO  L110   BuchiProductObserver]: Initial RCFG 4667 locations, 6453 edges
[2020-11-25 03:02:11,609 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 03:02:11,623 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 03:02:14,852 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 03:02:14,865 INFO  L110   BuchiProductObserver]: BuchiProgram size 11590 locations, 20993 edges
[2020-11-25 03:02:14,866 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:02:14 BoogieIcfgContainer
[2020-11-25 03:02:14,866 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 03:02:14,866 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 03:02:14,866 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 03:02:14,867 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 03:02:14,868 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:02:14" (1/1) ...
[2020-11-25 03:02:15,042 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 03:02:15,044 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 03:02:15,066 INFO  L313           BlockEncoder]: Initial Icfg 11590 locations, 20993 edges
[2020-11-25 03:02:15,066 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 03:02:15,067 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 03:02:15,067 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 03:02:15,067 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 03:02:15,087 INFO  L70    emoveInfeasibleEdges]: Removed 219 edges and 23 locations because of local infeasibility
[2020-11-25 03:02:15,108 INFO  L70        RemoveSinkStates]: Removed 172 edges and 103 locations by removing sink states
[2020-11-25 03:02:15,130 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 03:02:15,138 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 03:02:15,144 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 03:02:15,145 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 03:02:15,151 INFO  L313           BlockEncoder]: Encoded RCFG 11410 locations, 20522 edges
[2020-11-25 03:02:15,151 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:02:15 BasicIcfg
[2020-11-25 03:02:15,151 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 03:02:15,151 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 03:02:15,151 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 03:02:15,153 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 03:02:15,153 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:02:15,153 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:02:09" (1/6) ...
[2020-11-25 03:02:15,155 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@17af4380 and model type ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:02:15, skipping insertion in model container
[2020-11-25 03:02:15,155 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:02:15,155 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:02:09" (2/6) ...
[2020-11-25 03:02:15,155 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@17af4380 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:02:15, skipping insertion in model container
[2020-11-25 03:02:15,155 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:02:15,156 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:02:11" (3/6) ...
[2020-11-25 03:02:15,156 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@17af4380 and model type ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:02:15, skipping insertion in model container
[2020-11-25 03:02:15,156 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:02:15,156 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:02:11" (4/6) ...
[2020-11-25 03:02:15,156 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@17af4380 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:02:15, skipping insertion in model container
[2020-11-25 03:02:15,156 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:02:15,156 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:02:14" (5/6) ...
[2020-11-25 03:02:15,157 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@17af4380 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 03:02:15, skipping insertion in model container
[2020-11-25 03:02:15,157 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:02:15,157 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:02:15" (6/6) ...
[2020-11-25 03:02:15,158 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self-fail.bpl_BEv2
[2020-11-25 03:02:15,192 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 03:02:15,193 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 03:02:15,193 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 03:02:15,193 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 03:02:15,193 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 03:02:15,193 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 03:02:15,193 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 03:02:15,193 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 03:02:15,193 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 03:02:15,270 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11410 states.
[2020-11-25 03:02:15,356 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:02:15,356 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:02:15,356 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:02:15,364 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:02:15,365 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:02:15,365 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 03:02:15,365 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11410 states.
[2020-11-25 03:02:15,408 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:02:15,408 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:02:15,408 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:02:15,410 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:02:15,410 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND TRUE   revert
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND TRUE   revert
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:02:15,426 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:02:15,426 INFO  L82        PathProgramCache]: Analyzing trace with hash 359739188, now seen corresponding path program 1 times
[2020-11-25 03:02:15,432 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:02:15,454 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:02:15,556 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 03:02:15,558 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:02:15,558 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 03:02:16,051 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:02:16,063 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:02:16,063 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:02:16,065 INFO  L87              Difference]: Start difference. First operand 11410 states. Second operand 4 states.
[2020-11-25 03:02:17,146 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:02:17,146 INFO  L93              Difference]: Finished difference Result 7242 states and 8469 transitions.
[2020-11-25 03:02:17,146 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 03:02:17,148 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7242 states and 8469 transitions.
[2020-11-25 03:02:17,188 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:02:17,221 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7242 states to 7242 states and 8469 transitions.
[2020-11-25 03:02:17,222 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 03:02:17,225 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1336
[2020-11-25 03:02:17,225 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7242 states and 8469 transitions.
[2020-11-25 03:02:17,240 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:02:17,240 INFO  L728         BuchiCegarLoop]: Abstraction has 7242 states and 8469 transitions.
[2020-11-25 03:02:17,263 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7242 states and 8469 transitions.
[2020-11-25 03:02:17,357 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7242 to 7242.
[2020-11-25 03:02:17,357 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7242 states.
[2020-11-25 03:02:17,369 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7242 states to 7242 states and 8469 transitions.
[2020-11-25 03:02:17,370 INFO  L751         BuchiCegarLoop]: Abstraction has 7242 states and 8469 transitions.
[2020-11-25 03:02:17,370 INFO  L631         BuchiCegarLoop]: Abstraction has 7242 states and 8469 transitions.
[2020-11-25 03:02:17,370 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 03:02:17,370 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7242 states and 8469 transitions.
[2020-11-25 03:02:17,382 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:02:17,382 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:02:17,382 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:02:17,385 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:02:17,385 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND TRUE   revert
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND TRUE   revert
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND TRUE   revert
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:02:17,389 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:02:17,389 INFO  L82        PathProgramCache]: Analyzing trace with hash -1103708312, now seen corresponding path program 1 times
[2020-11-25 03:02:17,390 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:02:17,404 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:02:17,429 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 03:02:17,429 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:02:17,429 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:02:17,430 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:02:17,430 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:02:17,431 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:02:17,431 INFO  L87              Difference]: Start difference. First operand 7242 states and 8469 transitions. cyclomatic complexity: 1237 Second operand 3 states.
[2020-11-25 03:02:17,610 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:02:17,610 INFO  L93              Difference]: Finished difference Result 9237 states and 10779 transitions.
[2020-11-25 03:02:17,610 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:02:17,611 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9237 states and 10779 transitions.
[2020-11-25 03:02:17,639 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:02:17,678 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9237 states to 9237 states and 10779 transitions.
[2020-11-25 03:02:17,679 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1857
[2020-11-25 03:02:17,680 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1857
[2020-11-25 03:02:17,680 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9237 states and 10779 transitions.
[2020-11-25 03:02:17,690 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:02:17,690 INFO  L728         BuchiCegarLoop]: Abstraction has 9237 states and 10779 transitions.
[2020-11-25 03:02:17,700 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9237 states and 10779 transitions.
[2020-11-25 03:02:17,811 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9237 to 8373.
[2020-11-25 03:02:17,812 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8373 states.
[2020-11-25 03:02:17,826 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8373 states to 8373 states and 9738 transitions.
[2020-11-25 03:02:17,826 INFO  L751         BuchiCegarLoop]: Abstraction has 8373 states and 9738 transitions.
[2020-11-25 03:02:17,826 INFO  L631         BuchiCegarLoop]: Abstraction has 8373 states and 9738 transitions.
[2020-11-25 03:02:17,826 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 03:02:17,826 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8373 states and 9738 transitions.
[2020-11-25 03:02:17,843 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:02:17,843 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:02:17,843 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:02:17,846 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:02:17,846 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND TRUE   DType[this] == Pausable
[L6125]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND TRUE   !(account_s164 != null)
[L5838]               revert := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND TRUE   revert
[L6125]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6126]   COND TRUE   revert
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND TRUE   revert
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND TRUE   revert
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10932]              revert := true;
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND TRUE   revert
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10932]              revert := true;
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND TRUE   revert
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:02:17,852 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:02:17,852 INFO  L82        PathProgramCache]: Analyzing trace with hash -1039941798, now seen corresponding path program 1 times
[2020-11-25 03:02:17,853 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:02:17,868 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:02:17,941 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 03:02:17,942 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:02:17,942 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 03:02:17,942 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:02:17,942 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 03:02:17,942 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 03:02:17,943 INFO  L87              Difference]: Start difference. First operand 8373 states and 9738 transitions. cyclomatic complexity: 1375 Second operand 9 states.
[2020-11-25 03:02:18,114 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:02:18,115 INFO  L93              Difference]: Finished difference Result 8419 states and 9813 transitions.
[2020-11-25 03:02:18,115 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 03:02:18,115 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8419 states and 9813 transitions.
[2020-11-25 03:02:18,139 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:02:18,172 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8419 states to 8419 states and 9813 transitions.
[2020-11-25 03:02:18,172 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1717
[2020-11-25 03:02:18,173 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1717
[2020-11-25 03:02:18,173 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8419 states and 9813 transitions.
[2020-11-25 03:02:18,183 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:02:18,183 INFO  L728         BuchiCegarLoop]: Abstraction has 8419 states and 9813 transitions.
[2020-11-25 03:02:18,193 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8419 states and 9813 transitions.
[2020-11-25 03:02:18,275 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8419 to 8410.
[2020-11-25 03:02:18,275 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8410 states.
[2020-11-25 03:02:18,287 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8410 states to 8410 states and 9797 transitions.
[2020-11-25 03:02:18,287 INFO  L751         BuchiCegarLoop]: Abstraction has 8410 states and 9797 transitions.
[2020-11-25 03:02:18,287 INFO  L631         BuchiCegarLoop]: Abstraction has 8410 states and 9797 transitions.
[2020-11-25 03:02:18,287 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 03:02:18,287 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8410 states and 9797 transitions.
[2020-11-25 03:02:18,301 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:02:18,301 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:02:18,301 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:02:18,303 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:02:18,304 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND TRUE   DType[this] == ERC20Pausable
[L6120]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND TRUE   !(account_s218 != null)
[L5909]               revert := true;
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND TRUE   revert
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND TRUE   revert
[L6120]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6121]   COND TRUE   revert
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND TRUE   revert
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND TRUE   revert
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10932]              revert := true;
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND TRUE   revert
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10932]              revert := true;
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND TRUE   revert
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:02:18,308 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:02:18,308 INFO  L82        PathProgramCache]: Analyzing trace with hash -1287460248, now seen corresponding path program 1 times
[2020-11-25 03:02:18,309 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:02:18,321 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:02:18,423 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 03:02:18,423 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:02:18,423 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 03:02:18,424 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:02:18,424 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 03:02:18,424 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 03:02:18,424 INFO  L87              Difference]: Start difference. First operand 8410 states and 9797 transitions. cyclomatic complexity: 1397 Second operand 10 states.
[2020-11-25 03:02:18,535 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:02:18,535 INFO  L93              Difference]: Finished difference Result 8470 states and 9888 transitions.
[2020-11-25 03:02:18,535 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 03:02:18,535 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8470 states and 9888 transitions.
[2020-11-25 03:02:18,552 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:02:18,572 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8470 states to 8470 states and 9888 transitions.
[2020-11-25 03:02:18,572 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1724
[2020-11-25 03:02:18,573 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1724
[2020-11-25 03:02:18,573 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8470 states and 9888 transitions.
[2020-11-25 03:02:18,579 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:02:18,579 INFO  L728         BuchiCegarLoop]: Abstraction has 8470 states and 9888 transitions.
[2020-11-25 03:02:18,588 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8470 states and 9888 transitions.
[2020-11-25 03:02:18,643 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8470 to 8417.
[2020-11-25 03:02:18,644 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8417 states.
[2020-11-25 03:02:18,653 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8417 states to 8417 states and 9805 transitions.
[2020-11-25 03:02:18,653 INFO  L751         BuchiCegarLoop]: Abstraction has 8417 states and 9805 transitions.
[2020-11-25 03:02:18,653 INFO  L631         BuchiCegarLoop]: Abstraction has 8417 states and 9805 transitions.
[2020-11-25 03:02:18,653 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 03:02:18,653 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8417 states and 9805 transitions.
[2020-11-25 03:02:18,663 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:02:18,663 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:02:18,663 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:02:18,664 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:02:18,664 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND TRUE   DType[this] == ERC20Pausable
[L6120]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND TRUE   !!__var_2
[L5846]               revert := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND TRUE   revert
[L6120]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6121]   COND TRUE   revert
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND TRUE   revert
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND TRUE   revert
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10932]              revert := true;
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND TRUE   revert
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10932]              revert := true;
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND TRUE   revert
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:02:18,668 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:02:18,668 INFO  L82        PathProgramCache]: Analyzing trace with hash -1198190555, now seen corresponding path program 1 times
[2020-11-25 03:02:18,669 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:02:18,678 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:02:18,714 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 51 trivial. 0 not checked.
[2020-11-25 03:02:18,715 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:02:18,715 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:02:18,715 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:02:18,716 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:02:18,716 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:02:18,716 INFO  L87              Difference]: Start difference. First operand 8417 states and 9805 transitions. cyclomatic complexity: 1398 Second operand 3 states.
[2020-11-25 03:02:18,829 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:02:18,829 INFO  L93              Difference]: Finished difference Result 9260 states and 10467 transitions.
[2020-11-25 03:02:18,830 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:02:18,830 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9260 states and 10467 transitions.
[2020-11-25 03:02:18,847 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:02:18,867 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9260 states to 8566 states and 9645 transitions.
[2020-11-25 03:02:18,868 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1648
[2020-11-25 03:02:18,868 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1726
[2020-11-25 03:02:18,869 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8566 states and 9645 transitions.
[2020-11-25 03:02:18,874 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:02:18,874 INFO  L728         BuchiCegarLoop]: Abstraction has 8566 states and 9645 transitions.
[2020-11-25 03:02:18,881 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8566 states and 9645 transitions.
[2020-11-25 03:02:18,923 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8566 to 7879.
[2020-11-25 03:02:18,923 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7879 states.
[2020-11-25 03:02:18,931 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7879 states to 7879 states and 8781 transitions.
[2020-11-25 03:02:18,931 INFO  L751         BuchiCegarLoop]: Abstraction has 7879 states and 8781 transitions.
[2020-11-25 03:02:18,931 INFO  L631         BuchiCegarLoop]: Abstraction has 7879 states and 8781 transitions.
[2020-11-25 03:02:18,931 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 03:02:18,931 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7879 states and 8781 transitions.
[2020-11-25 03:02:18,939 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:02:18,940 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:02:18,940 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:02:18,943 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:02:18,943 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND TRUE   DType[this] == ERC20Pausable
[L6120]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6120]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6121]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND TRUE   DType[this] == ERC20Pausable
[L6120]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6120]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6121]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND TRUE   DType[this] == ERC20Pausable
[L6120]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6120]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6121]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND TRUE   DType[this] == ERC20Pausable
[L6120]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6120]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6121]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:02:18,958 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:02:18,958 INFO  L82        PathProgramCache]: Analyzing trace with hash -1720603971, now seen corresponding path program 1 times
[2020-11-25 03:02:18,960 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:02:18,978 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:02:19,168 INFO  L134       CoverageAnalysis]: Checked inductivity of 941 backedges. 0 proven. 27 refuted. 0 times theorem prover too weak. 914 trivial. 0 not checked.
[2020-11-25 03:02:19,168 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:02:19,168 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 03:02:19,169 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:02:19,169 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 03:02:19,169 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 03:02:19,169 INFO  L87              Difference]: Start difference. First operand 7879 states and 8781 transitions. cyclomatic complexity: 912 Second operand 7 states.
[2020-11-25 03:02:19,289 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:02:19,289 INFO  L93              Difference]: Finished difference Result 7902 states and 8808 transitions.
[2020-11-25 03:02:19,289 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 03:02:19,289 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7902 states and 8808 transitions.
[2020-11-25 03:02:19,303 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:02:19,320 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7902 states to 7885 states and 8788 transitions.
[2020-11-25 03:02:19,320 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1659
[2020-11-25 03:02:19,320 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1659
[2020-11-25 03:02:19,320 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7885 states and 8788 transitions.
[2020-11-25 03:02:19,325 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:02:19,325 INFO  L728         BuchiCegarLoop]: Abstraction has 7885 states and 8788 transitions.
[2020-11-25 03:02:19,331 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7885 states and 8788 transitions.
[2020-11-25 03:02:19,367 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7885 to 7885.
[2020-11-25 03:02:19,367 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7885 states.
[2020-11-25 03:02:19,375 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7885 states to 7885 states and 8788 transitions.
[2020-11-25 03:02:19,375 INFO  L751         BuchiCegarLoop]: Abstraction has 7885 states and 8788 transitions.
[2020-11-25 03:02:19,375 INFO  L631         BuchiCegarLoop]: Abstraction has 7885 states and 8788 transitions.
[2020-11-25 03:02:19,375 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 03:02:19,375 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7885 states and 8788 transitions.
[2020-11-25 03:02:19,383 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:02:19,383 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:02:19,383 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:02:19,385 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:02:19,385 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND TRUE   DType[this] == ERC20Pausable
[L6120]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6120]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6121]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND TRUE   DType[this] == ERC20Pausable
[L6120]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6120]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6121]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND TRUE   DType[this] == ERC20Pausable
[L6120]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6120]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6121]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND FALSE  !(DType[this] == ONIT)
[L7233]   COND TRUE   DType[this] == ERC20Pausable
[L7234]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7234]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7235]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND FALSE  !(DType[this] == ONIT)
[L7233]   COND TRUE   DType[this] == ERC20Pausable
[L7234]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7234]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7235]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:02:19,398 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:02:19,399 INFO  L82        PathProgramCache]: Analyzing trace with hash -100568076, now seen corresponding path program 1 times
[2020-11-25 03:02:19,400 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:02:19,419 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:02:19,636 INFO  L134       CoverageAnalysis]: Checked inductivity of 926 backedges. 6 proven. 25 refuted. 0 times theorem prover too weak. 895 trivial. 0 not checked.
[2020-11-25 03:02:19,637 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:02:19,637 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 03:02:19,637 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:02:19,637 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 03:02:19,638 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 03:02:19,638 INFO  L87              Difference]: Start difference. First operand 7885 states and 8788 transitions. cyclomatic complexity: 913 Second operand 8 states.
[2020-11-25 03:02:19,791 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:02:19,791 INFO  L93              Difference]: Finished difference Result 7906 states and 8812 transitions.
[2020-11-25 03:02:19,791 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 03:02:19,791 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7906 states and 8812 transitions.
[2020-11-25 03:02:19,808 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:02:19,844 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7906 states to 7892 states and 8796 transitions.
[2020-11-25 03:02:19,844 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1659
[2020-11-25 03:02:19,845 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1659
[2020-11-25 03:02:19,845 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7892 states and 8796 transitions.
[2020-11-25 03:02:19,849 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:02:19,849 INFO  L728         BuchiCegarLoop]: Abstraction has 7892 states and 8796 transitions.
[2020-11-25 03:02:19,855 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7892 states and 8796 transitions.
[2020-11-25 03:02:19,895 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7892 to 7892.
[2020-11-25 03:02:19,895 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7892 states.
[2020-11-25 03:02:19,903 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7892 states to 7892 states and 8796 transitions.
[2020-11-25 03:02:19,903 INFO  L751         BuchiCegarLoop]: Abstraction has 7892 states and 8796 transitions.
[2020-11-25 03:02:19,903 INFO  L631         BuchiCegarLoop]: Abstraction has 7892 states and 8796 transitions.
[2020-11-25 03:02:19,903 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 03:02:19,903 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7892 states and 8796 transitions.
[2020-11-25 03:02:19,912 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:02:19,912 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:02:19,912 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:02:19,914 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:02:19,914 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND TRUE   __exception
[L3017]               __tmp__Balance := Balance;
[L3018]               __tmp__DType := DType;
[L3019]               __tmp__Alloc := Alloc;
[L3020]               __tmp__balance_ADDR := balance_ADDR;
[L3021]               __tmp__M_Ref_bool := M_Ref_bool;
[L3022]               __tmp__sum := sum;
[L3023]               __tmp__M_Ref_int := M_Ref_int;
[L3024]               __tmp__sum__balances0 := sum__balances0;
[L3025]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3026]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3027]               __tmp__sum__allowed1 := sum__allowed1;
[L3028]               __tmp__M_int_Ref := M_int_Ref;
[L3029]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3030]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3031]               __tmp__Length := Length;
[L3032]               __tmp__now := now;
[L3033]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3034]               __tmp__owner_Ownable := owner_Ownable;
[L3035]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3036]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3037]               __tmp___paused_Pausable := _paused_Pausable;
[L3038]               __tmp___balances_ERC20 := _balances_ERC20;
[L3039]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3040]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3041]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3042]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3043]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3044]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3045]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3046]               __tmp__implementation_ONIT := implementation_ONIT;
[L3047]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3048]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3049]   CALL        call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L7395]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7395]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7396]   COND FALSE  !(revert)
[L7399]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7275]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7275]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7276]   COND FALSE  !(revert)
[L7279]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7248]               assume msgsender_MSG != null;
[L7249]               __tmp__Balance[this] := 0;
[L7250]               __tmp___name_ERC20Detailed[this] := -1540954157;
[L7251]               __tmp___symbol_ERC20Detailed[this] := -1540954157;
[L7252]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7254]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7255]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7256]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7279]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7280]   COND FALSE  !(revert)
[L7399]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7400]   COND FALSE  !(revert)
[L7403]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6577]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L6577]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   COND FALSE  !(revert)
[L6581]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6552]               assume msgsender_MSG != null;
[L6553]               __tmp__Balance[this] := 0;
[L6554]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6555]               __tmp__sum__balances0[this] := 0;
[L6556]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6557]               __tmp__sum__allowed1[this] := 0;
[L6558]               __tmp___totalSupply_ERC20[this] := 0;
[L6581]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6582]   COND FALSE  !(revert)
[L7403]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7404]   COND FALSE  !(revert)
[L7407]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L7407]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7408]   COND FALSE  !(revert)
[L7411]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6081]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L6086]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L6091]   COND TRUE   __tmp__DType[this] == PauserRole
[L6092]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6092]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6093]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L7411]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7412]   COND FALSE  !(revert)
[L7415]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6421]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6425]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6081]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L6086]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L6091]   COND TRUE   __tmp__DType[this] == PauserRole
[L6092]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6092]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6093]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L6425]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6426]   COND FALSE  !(revert)
[L6429]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               __tmp__Balance[this] := 0;
[L6404]               __tmp___paused_Pausable[this] := false;
[L6406]               __tmp___paused_Pausable[this] := false;
[L6429]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7415]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7416]   COND FALSE  !(revert)
[L7419]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7091]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7091]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7095]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6577]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L6577]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   COND FALSE  !(revert)
[L6581]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6552]               assume msgsender_MSG != null;
[L6553]               __tmp__Balance[this] := 0;
[L6554]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6555]               __tmp__sum__balances0[this] := 0;
[L6556]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6557]               __tmp__sum__allowed1[this] := 0;
[L6558]               __tmp___totalSupply_ERC20[this] := 0;
[L6581]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6582]   COND FALSE  !(revert)
[L7095]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7096]   COND FALSE  !(revert)
[L7099]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L7099]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7100]   COND FALSE  !(revert)
[L7103]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6081]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L6086]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L6091]   COND TRUE   __tmp__DType[this] == PauserRole
[L6092]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6092]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6093]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L7103]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7104]   COND FALSE  !(revert)
[L7107]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6421]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6425]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6081]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L6086]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L6091]   COND TRUE   __tmp__DType[this] == PauserRole
[L6092]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6092]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6093]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L6425]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6426]   COND FALSE  !(revert)
[L6429]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               __tmp__Balance[this] := 0;
[L6404]               __tmp___paused_Pausable[this] := false;
[L6406]               __tmp___paused_Pausable[this] := false;
[L6429]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7107]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7108]   COND FALSE  !(revert)
[L7111]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7076]               assume msgsender_MSG != null;
[L7077]               __tmp__Balance[this] := 0;
[L7111]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7112]   COND FALSE  !(revert)
[L7419]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7420]   COND FALSE  !(revert)
[L7423]   CALL        call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7338]               assume msgsender_MSG != null;
[L7339]               __tmp__Balance[this] := 0;
[L7340]               __tmp__implementation_ONIT[this] := null;
[L7342]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L7342]   RET         call __var_36 := FreshRefGenerator__fail();
[L7343]   COND FALSE  !(revert)
[L7346]               __tmp__timelockList_ONIT[this] := __var_36;
[L7348]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]] := zeroRefboolArr();
[L7349]               __tmp__frozenAccount_ONIT[this] := zeroRefboolArr();
[L7351]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7352]   COND TRUE   __tmp__DType[this] == ONIT
[L7353]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6919]               __var_23 := null;
[L6920]   COND FALSE  !(!(account_s946 != null))
[L6924]   CALL        call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND FALSE  !(!(c_s106 >= a_s106))
[L5744]               __ret_0_ := c_s106;
[L6924]   RET         call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L6925]   COND FALSE  !(revert)
[L6928]               __tmp___totalSupply_ERC20[this] := __var_24;
[L6929]   CALL        call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND FALSE  !(!(c_s106 >= a_s106))
[L5744]               __ret_0_ := c_s106;
[L6929]   RET         call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L6930]   COND FALSE  !(revert)
[L6933]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s946];
[L6934]               __tmp___balances_ERC20[this][account_s946] := __var_25;
[L6935]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s946];
[L7353]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7354]   COND FALSE  !(revert)
[L7423]   RET         call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7424]   COND FALSE  !(revert)
[L3049]   RET         call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L3050]               assume revert || gas < 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND FALSE  !(DType[this] == ONIT)
[L7233]   COND TRUE   DType[this] == ERC20Pausable
[L7234]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND FALSE  !(DType[this] == ONIT)
[L6761]   COND TRUE   DType[this] == ERC20Pausable
[L6762]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6762]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6763]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7234]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7235]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND FALSE  !(DType[this] == ONIT)
[L7233]   COND TRUE   DType[this] == ERC20Pausable
[L7234]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND FALSE  !(DType[this] == ONIT)
[L6761]   COND TRUE   DType[this] == ERC20Pausable
[L6762]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6762]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6763]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7234]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7235]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:02:19,920 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:02:19,921 INFO  L82        PathProgramCache]: Analyzing trace with hash -1778196274, now seen corresponding path program 1 times
[2020-11-25 03:02:19,921 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:02:19,935 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:02:20,126 INFO  L134       CoverageAnalysis]: Checked inductivity of 917 backedges. 0 proven. 36 refuted. 0 times theorem prover too weak. 881 trivial. 0 not checked.
[2020-11-25 03:02:20,126 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:02:20,127 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 03:02:20,127 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:02:20,128 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 03:02:20,128 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 03:02:20,128 INFO  L87              Difference]: Start difference. First operand 7892 states and 8796 transitions. cyclomatic complexity: 914 Second operand 8 states.
[2020-11-25 03:02:21,521 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:02:21,521 INFO  L93              Difference]: Finished difference Result 10897 states and 12327 transitions.
[2020-11-25 03:02:21,521 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 03:02:21,521 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10897 states and 12327 transitions.
[2020-11-25 03:02:21,540 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:02:21,561 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10897 states to 10880 states and 12307 transitions.
[2020-11-25 03:02:21,561 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2266
[2020-11-25 03:02:21,562 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2266
[2020-11-25 03:02:21,562 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10880 states and 12307 transitions.
[2020-11-25 03:02:21,567 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:02:21,568 INFO  L728         BuchiCegarLoop]: Abstraction has 10880 states and 12307 transitions.
[2020-11-25 03:02:21,573 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10880 states and 12307 transitions.
[2020-11-25 03:02:21,622 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10880 to 10750.
[2020-11-25 03:02:21,623 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10750 states.
[2020-11-25 03:02:21,634 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10750 states to 10750 states and 12177 transitions.
[2020-11-25 03:02:21,634 INFO  L751         BuchiCegarLoop]: Abstraction has 10750 states and 12177 transitions.
[2020-11-25 03:02:21,634 INFO  L631         BuchiCegarLoop]: Abstraction has 10750 states and 12177 transitions.
[2020-11-25 03:02:21,634 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 03:02:21,634 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10750 states and 12177 transitions.
[2020-11-25 03:02:21,644 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:02:21,644 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:02:21,645 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:02:21,647 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:02:21,647 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND FALSE  !(DType[this] == ONIT)
[L6761]   COND TRUE   DType[this] == ERC20Pausable
[L6762]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6762]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6763]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND FALSE  !(DType[this] == ONIT)
[L6761]   COND TRUE   DType[this] == ERC20Pausable
[L6762]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6762]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6763]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:02:21,653 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:02:21,653 INFO  L82        PathProgramCache]: Analyzing trace with hash 612988588, now seen corresponding path program 1 times
[2020-11-25 03:02:21,654 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:02:21,666 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:02:21,836 INFO  L134       CoverageAnalysis]: Checked inductivity of 953 backedges. 0 proven. 36 refuted. 0 times theorem prover too weak. 917 trivial. 0 not checked.
[2020-11-25 03:02:21,836 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:02:21,836 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 03:02:21,836 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:02:21,837 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 03:02:21,837 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 03:02:21,837 INFO  L87              Difference]: Start difference. First operand 10750 states and 12177 transitions. cyclomatic complexity: 1443 Second operand 7 states.
[2020-11-25 03:02:21,957 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:02:21,957 INFO  L93              Difference]: Finished difference Result 10773 states and 12204 transitions.
[2020-11-25 03:02:21,957 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 03:02:21,958 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10773 states and 12204 transitions.
[2020-11-25 03:02:21,976 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:02:21,997 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10773 states to 10756 states and 12184 transitions.
[2020-11-25 03:02:21,997 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2242
[2020-11-25 03:02:21,998 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2242
[2020-11-25 03:02:21,998 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10756 states and 12184 transitions.
[2020-11-25 03:02:22,004 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:02:22,004 INFO  L728         BuchiCegarLoop]: Abstraction has 10756 states and 12184 transitions.
[2020-11-25 03:02:22,010 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10756 states and 12184 transitions.
[2020-11-25 03:02:22,062 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10756 to 10756.
[2020-11-25 03:02:22,062 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10756 states.
[2020-11-25 03:02:22,074 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10756 states to 10756 states and 12184 transitions.
[2020-11-25 03:02:22,074 INFO  L751         BuchiCegarLoop]: Abstraction has 10756 states and 12184 transitions.
[2020-11-25 03:02:22,074 INFO  L631         BuchiCegarLoop]: Abstraction has 10756 states and 12184 transitions.
[2020-11-25 03:02:22,074 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 03:02:22,074 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10756 states and 12184 transitions.
[2020-11-25 03:02:22,084 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:02:22,084 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:02:22,084 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:02:22,086 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:02:22,087 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND TRUE   __exception
[L3017]               __tmp__Balance := Balance;
[L3018]               __tmp__DType := DType;
[L3019]               __tmp__Alloc := Alloc;
[L3020]               __tmp__balance_ADDR := balance_ADDR;
[L3021]               __tmp__M_Ref_bool := M_Ref_bool;
[L3022]               __tmp__sum := sum;
[L3023]               __tmp__M_Ref_int := M_Ref_int;
[L3024]               __tmp__sum__balances0 := sum__balances0;
[L3025]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3026]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3027]               __tmp__sum__allowed1 := sum__allowed1;
[L3028]               __tmp__M_int_Ref := M_int_Ref;
[L3029]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3030]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3031]               __tmp__Length := Length;
[L3032]               __tmp__now := now;
[L3033]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3034]               __tmp__owner_Ownable := owner_Ownable;
[L3035]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3036]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3037]               __tmp___paused_Pausable := _paused_Pausable;
[L3038]               __tmp___balances_ERC20 := _balances_ERC20;
[L3039]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3040]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3041]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3042]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3043]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3044]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3045]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3046]               __tmp__implementation_ONIT := implementation_ONIT;
[L3047]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3048]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3049]   CALL        call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L7395]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7395]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7396]   COND FALSE  !(revert)
[L7399]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7275]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7275]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7276]   COND FALSE  !(revert)
[L7279]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7248]               assume msgsender_MSG != null;
[L7249]               __tmp__Balance[this] := 0;
[L7250]               __tmp___name_ERC20Detailed[this] := -1540954157;
[L7251]               __tmp___symbol_ERC20Detailed[this] := -1540954157;
[L7252]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7254]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7255]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7256]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7279]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7280]   COND FALSE  !(revert)
[L7399]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7400]   COND FALSE  !(revert)
[L7403]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6577]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L6577]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   COND FALSE  !(revert)
[L6581]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6552]               assume msgsender_MSG != null;
[L6553]               __tmp__Balance[this] := 0;
[L6554]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6555]               __tmp__sum__balances0[this] := 0;
[L6556]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6557]               __tmp__sum__allowed1[this] := 0;
[L6558]               __tmp___totalSupply_ERC20[this] := 0;
[L6581]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6582]   COND FALSE  !(revert)
[L7403]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7404]   COND FALSE  !(revert)
[L7407]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L7407]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7408]   COND FALSE  !(revert)
[L7411]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND TRUE   __tmp__DType[this] == ONIT
[L6077]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6077]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6078]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L7411]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7412]   COND FALSE  !(revert)
[L7415]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6421]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6425]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND TRUE   __tmp__DType[this] == ONIT
[L6077]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6077]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6078]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L6425]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6426]   COND FALSE  !(revert)
[L6429]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               __tmp__Balance[this] := 0;
[L6404]               __tmp___paused_Pausable[this] := false;
[L6406]               __tmp___paused_Pausable[this] := false;
[L6429]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7415]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7416]   COND FALSE  !(revert)
[L7419]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7091]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7091]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7095]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6577]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L6577]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   COND FALSE  !(revert)
[L6581]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6552]               assume msgsender_MSG != null;
[L6553]               __tmp__Balance[this] := 0;
[L6554]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6555]               __tmp__sum__balances0[this] := 0;
[L6556]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6557]               __tmp__sum__allowed1[this] := 0;
[L6558]               __tmp___totalSupply_ERC20[this] := 0;
[L6581]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6582]   COND FALSE  !(revert)
[L7095]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7096]   COND FALSE  !(revert)
[L7099]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L7099]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7100]   COND FALSE  !(revert)
[L7103]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND TRUE   __tmp__DType[this] == ONIT
[L6077]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6077]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6078]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L7103]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7104]   COND FALSE  !(revert)
[L7107]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6421]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6425]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND TRUE   __tmp__DType[this] == ONIT
[L6077]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6077]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6078]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L6425]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6426]   COND FALSE  !(revert)
[L6429]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               __tmp__Balance[this] := 0;
[L6404]               __tmp___paused_Pausable[this] := false;
[L6406]               __tmp___paused_Pausable[this] := false;
[L6429]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7107]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7108]   COND FALSE  !(revert)
[L7111]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7076]               assume msgsender_MSG != null;
[L7077]               __tmp__Balance[this] := 0;
[L7111]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7112]   COND FALSE  !(revert)
[L7419]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7420]   COND FALSE  !(revert)
[L7423]   CALL        call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7338]               assume msgsender_MSG != null;
[L7339]               __tmp__Balance[this] := 0;
[L7340]               __tmp__implementation_ONIT[this] := null;
[L7342]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L7342]   RET         call __var_36 := FreshRefGenerator__fail();
[L7343]   COND FALSE  !(revert)
[L7346]               __tmp__timelockList_ONIT[this] := __var_36;
[L7348]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]] := zeroRefboolArr();
[L7349]               __tmp__frozenAccount_ONIT[this] := zeroRefboolArr();
[L7351]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7352]   COND TRUE   __tmp__DType[this] == ONIT
[L7353]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6919]               __var_23 := null;
[L6920]   COND FALSE  !(!(account_s946 != null))
[L6924]   CALL        call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND FALSE  !(!(c_s106 >= a_s106))
[L5744]               __ret_0_ := c_s106;
[L6924]   RET         call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L6925]   COND FALSE  !(revert)
[L6928]               __tmp___totalSupply_ERC20[this] := __var_24;
[L6929]   CALL        call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND FALSE  !(!(c_s106 >= a_s106))
[L5744]               __ret_0_ := c_s106;
[L6929]   RET         call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L6930]   COND FALSE  !(revert)
[L6933]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s946];
[L6934]               __tmp___balances_ERC20[this][account_s946] := __var_25;
[L6935]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s946];
[L7353]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7354]   COND FALSE  !(revert)
[L7423]   RET         call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7424]   COND FALSE  !(revert)
[L3049]   RET         call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L3050]               assume revert || gas < 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:02:22,092 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:02:22,092 INFO  L82        PathProgramCache]: Analyzing trace with hash -1103919958, now seen corresponding path program 1 times
[2020-11-25 03:02:22,093 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:02:22,116 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:02:22,393 INFO  L134       CoverageAnalysis]: Checked inductivity of 899 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 899 trivial. 0 not checked.
[2020-11-25 03:02:22,394 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:02:22,394 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 03:02:22,394 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:02:22,394 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:02:22,394 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:02:22,395 INFO  L87              Difference]: Start difference. First operand 10756 states and 12184 transitions. cyclomatic complexity: 1444 Second operand 4 states.
[2020-11-25 03:02:22,758 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:02:22,758 INFO  L93              Difference]: Finished difference Result 12968 states and 14794 transitions.
[2020-11-25 03:02:22,758 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 03:02:22,758 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12968 states and 14794 transitions.
[2020-11-25 03:02:22,787 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 12
[2020-11-25 03:02:22,812 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12968 states to 12157 states and 13902 transitions.
[2020-11-25 03:02:22,812 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2485
[2020-11-25 03:02:22,813 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2542
[2020-11-25 03:02:22,813 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12157 states and 13902 transitions.
[2020-11-25 03:02:22,820 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:02:22,820 INFO  L728         BuchiCegarLoop]: Abstraction has 12157 states and 13902 transitions.
[2020-11-25 03:02:22,826 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12157 states and 13902 transitions.
[2020-11-25 03:02:22,878 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12157 to 11314.
[2020-11-25 03:02:22,878 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11314 states.
[2020-11-25 03:02:22,891 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11314 states to 11314 states and 12847 transitions.
[2020-11-25 03:02:22,891 INFO  L751         BuchiCegarLoop]: Abstraction has 11314 states and 12847 transitions.
[2020-11-25 03:02:22,891 INFO  L631         BuchiCegarLoop]: Abstraction has 11314 states and 12847 transitions.
[2020-11-25 03:02:22,891 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 03:02:22,891 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11314 states and 12847 transitions.
[2020-11-25 03:02:22,902 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:02:22,902 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:02:22,902 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:02:22,904 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:02:22,904 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND TRUE   DType[this] == Pausable
[L6125]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6125]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6126]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND TRUE   DType[this] == Pausable
[L6125]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6125]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6126]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND TRUE   DType[this] == ERC20Pausable
[L6120]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6120]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6121]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND FALSE  !(DType[this] == ONIT)
[L7233]   COND TRUE   DType[this] == ERC20Pausable
[L7234]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7234]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7235]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND FALSE  !(DType[this] == ONIT)
[L7233]   COND TRUE   DType[this] == ERC20Pausable
[L7234]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7234]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7235]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:02:22,909 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:02:22,909 INFO  L82        PathProgramCache]: Analyzing trace with hash -1384865848, now seen corresponding path program 1 times
[2020-11-25 03:02:22,910 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:02:22,924 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:02:23,092 INFO  L134       CoverageAnalysis]: Checked inductivity of 919 backedges. 6 proven. 25 refuted. 0 times theorem prover too weak. 888 trivial. 0 not checked.
[2020-11-25 03:02:23,092 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:02:23,092 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 03:02:23,093 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:02:23,093 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 03:02:23,093 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 03:02:23,093 INFO  L87              Difference]: Start difference. First operand 11314 states and 12847 transitions. cyclomatic complexity: 1549 Second operand 8 states.
[2020-11-25 03:02:23,236 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:02:23,236 INFO  L93              Difference]: Finished difference Result 11335 states and 12871 transitions.
[2020-11-25 03:02:23,237 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 03:02:23,237 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11335 states and 12871 transitions.
[2020-11-25 03:02:23,256 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:02:23,278 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11335 states to 11321 states and 12855 transitions.
[2020-11-25 03:02:23,278 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2447
[2020-11-25 03:02:23,279 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2447
[2020-11-25 03:02:23,279 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11321 states and 12855 transitions.
[2020-11-25 03:02:23,285 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:02:23,285 INFO  L728         BuchiCegarLoop]: Abstraction has 11321 states and 12855 transitions.
[2020-11-25 03:02:23,291 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11321 states and 12855 transitions.
[2020-11-25 03:02:23,347 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11321 to 11308.
[2020-11-25 03:02:23,347 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11308 states.
[2020-11-25 03:02:23,361 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11308 states to 11308 states and 12840 transitions.
[2020-11-25 03:02:23,361 INFO  L751         BuchiCegarLoop]: Abstraction has 11308 states and 12840 transitions.
[2020-11-25 03:02:23,361 INFO  L631         BuchiCegarLoop]: Abstraction has 11308 states and 12840 transitions.
[2020-11-25 03:02:23,361 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 03:02:23,361 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11308 states and 12840 transitions.
[2020-11-25 03:02:23,373 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:02:23,373 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:02:23,373 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:02:23,375 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:02:23,375 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND TRUE   DType[this] == ERC20Pausable
[L6120]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6120]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6121]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND FALSE  !(DType[this] == ONIT)
[L7233]   COND TRUE   DType[this] == ERC20Pausable
[L7234]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND FALSE  !(DType[this] == ONIT)
[L6761]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6766]   COND TRUE   DType[this] == ERC20
[L6767]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6767]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6768]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7234]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7235]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:02:23,379 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:02:23,380 INFO  L82        PathProgramCache]: Analyzing trace with hash 1394584740, now seen corresponding path program 1 times
[2020-11-25 03:02:23,380 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:02:23,395 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:02:23,589 INFO  L134       CoverageAnalysis]: Checked inductivity of 923 backedges. 12 proven. 6 refuted. 0 times theorem prover too weak. 905 trivial. 0 not checked.
[2020-11-25 03:02:23,589 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:02:23,590 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 03:02:23,590 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:02:23,590 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 03:02:23,590 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 03:02:23,590 INFO  L87              Difference]: Start difference. First operand 11308 states and 12840 transitions. cyclomatic complexity: 1548 Second operand 8 states.
[2020-11-25 03:02:23,716 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:02:23,717 INFO  L93              Difference]: Finished difference Result 11335 states and 12871 transitions.
[2020-11-25 03:02:23,717 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 03:02:23,717 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11335 states and 12871 transitions.
[2020-11-25 03:02:23,736 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:02:23,756 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11335 states to 11314 states and 12846 transitions.
[2020-11-25 03:02:23,756 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2447
[2020-11-25 03:02:23,757 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2447
[2020-11-25 03:02:23,757 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11314 states and 12846 transitions.
[2020-11-25 03:02:23,762 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:02:23,762 INFO  L728         BuchiCegarLoop]: Abstraction has 11314 states and 12846 transitions.
[2020-11-25 03:02:23,768 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11314 states and 12846 transitions.
[2020-11-25 03:02:23,812 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11314 to 11314.
[2020-11-25 03:02:23,812 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11314 states.
[2020-11-25 03:02:23,825 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11314 states to 11314 states and 12846 transitions.
[2020-11-25 03:02:23,825 INFO  L751         BuchiCegarLoop]: Abstraction has 11314 states and 12846 transitions.
[2020-11-25 03:02:23,825 INFO  L631         BuchiCegarLoop]: Abstraction has 11314 states and 12846 transitions.
[2020-11-25 03:02:23,825 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 03:02:23,825 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11314 states and 12846 transitions.
[2020-11-25 03:02:23,835 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:02:23,835 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:02:23,835 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:02:23,837 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:02:23,837 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND TRUE   DType[this] == Pausable
[L6125]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6125]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6126]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND TRUE   DType[this] == ERC20Pausable
[L6120]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6120]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6121]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND FALSE  !(DType[this] == ONIT)
[L7233]   COND TRUE   DType[this] == ERC20Pausable
[L7234]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND FALSE  !(DType[this] == ONIT)
[L6761]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6766]   COND TRUE   DType[this] == ERC20
[L6767]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6767]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6768]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7234]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7235]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND FALSE  !(DType[this] == ONIT)
[L7233]   COND TRUE   DType[this] == ERC20Pausable
[L7234]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND FALSE  !(DType[this] == ONIT)
[L6761]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6766]   COND TRUE   DType[this] == ERC20
[L6767]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6767]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6768]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7234]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7235]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:02:23,842 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:02:23,842 INFO  L82        PathProgramCache]: Analyzing trace with hash -1702030319, now seen corresponding path program 1 times
[2020-11-25 03:02:23,843 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:02:23,857 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:02:24,021 INFO  L134       CoverageAnalysis]: Checked inductivity of 916 backedges. 12 proven. 7 refuted. 0 times theorem prover too weak. 897 trivial. 0 not checked.
[2020-11-25 03:02:24,021 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:02:24,021 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 03:02:24,021 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:02:24,022 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 03:02:24,022 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 03:02:24,022 INFO  L87              Difference]: Start difference. First operand 11314 states and 12846 transitions. cyclomatic complexity: 1548 Second operand 8 states.
[2020-11-25 03:02:24,148 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:02:24,148 INFO  L93              Difference]: Finished difference Result 11335 states and 12870 transitions.
[2020-11-25 03:02:24,148 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 03:02:24,148 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11335 states and 12870 transitions.
[2020-11-25 03:02:24,167 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:02:24,186 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11335 states to 11314 states and 12845 transitions.
[2020-11-25 03:02:24,186 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2447
[2020-11-25 03:02:24,187 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2447
[2020-11-25 03:02:24,187 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11314 states and 12845 transitions.
[2020-11-25 03:02:24,193 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:02:24,193 INFO  L728         BuchiCegarLoop]: Abstraction has 11314 states and 12845 transitions.
[2020-11-25 03:02:24,199 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11314 states and 12845 transitions.
[2020-11-25 03:02:24,242 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11314 to 11308.
[2020-11-25 03:02:24,242 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11308 states.
[2020-11-25 03:02:24,255 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11308 states to 11308 states and 12839 transitions.
[2020-11-25 03:02:24,255 INFO  L751         BuchiCegarLoop]: Abstraction has 11308 states and 12839 transitions.
[2020-11-25 03:02:24,255 INFO  L631         BuchiCegarLoop]: Abstraction has 11308 states and 12839 transitions.
[2020-11-25 03:02:24,255 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 03:02:24,255 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11308 states and 12839 transitions.
[2020-11-25 03:02:24,266 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:02:24,266 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:02:24,266 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:02:24,267 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:02:24,267 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND TRUE   DType[this] == ERC20Pausable
[L6120]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6120]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6121]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND FALSE  !(DType[this] == ONIT)
[L7233]   COND TRUE   DType[this] == ERC20Pausable
[L7234]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7234]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7235]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND FALSE  !(DType[this] == ONIT)
[L7233]   COND TRUE   DType[this] == ERC20Pausable
[L7234]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7234]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7235]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:02:24,272 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:02:24,272 INFO  L82        PathProgramCache]: Analyzing trace with hash -1519609688, now seen corresponding path program 2 times
[2020-11-25 03:02:24,273 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:02:24,292 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:02:24,589 INFO  L134       CoverageAnalysis]: Checked inductivity of 923 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 898 trivial. 0 not checked.
[2020-11-25 03:02:24,589 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:02:24,589 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 03:02:24,589 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:02:24,590 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 03:02:24,590 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 03:02:24,590 INFO  L87              Difference]: Start difference. First operand 11308 states and 12839 transitions. cyclomatic complexity: 1547 Second operand 9 states.
[2020-11-25 03:02:24,729 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:02:24,729 INFO  L93              Difference]: Finished difference Result 11339 states and 12872 transitions.
[2020-11-25 03:02:24,729 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 03:02:24,729 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11339 states and 12872 transitions.
[2020-11-25 03:02:24,748 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:02:24,768 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11339 states to 11304 states and 12833 transitions.
[2020-11-25 03:02:24,768 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2447
[2020-11-25 03:02:24,769 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2447
[2020-11-25 03:02:24,769 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11304 states and 12833 transitions.
[2020-11-25 03:02:24,774 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:02:24,774 INFO  L728         BuchiCegarLoop]: Abstraction has 11304 states and 12833 transitions.
[2020-11-25 03:02:24,780 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11304 states and 12833 transitions.
[2020-11-25 03:02:24,826 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11304 to 11304.
[2020-11-25 03:02:24,826 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11304 states.
[2020-11-25 03:02:24,838 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11304 states to 11304 states and 12833 transitions.
[2020-11-25 03:02:24,838 INFO  L751         BuchiCegarLoop]: Abstraction has 11304 states and 12833 transitions.
[2020-11-25 03:02:24,838 INFO  L631         BuchiCegarLoop]: Abstraction has 11304 states and 12833 transitions.
[2020-11-25 03:02:24,838 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 03:02:24,838 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11304 states and 12833 transitions.
[2020-11-25 03:02:24,849 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:02:24,849 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:02:24,849 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:02:24,850 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:02:24,850 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND FALSE  !(DType[this] == ONIT)
[L6761]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6766]   COND TRUE   DType[this] == ERC20
[L6767]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6767]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6768]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND FALSE  !(DType[this] == ONIT)
[L6761]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6766]   COND TRUE   DType[this] == ERC20
[L6767]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6767]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6768]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:02:24,855 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:02:24,855 INFO  L82        PathProgramCache]: Analyzing trace with hash -347904262, now seen corresponding path program 1 times
[2020-11-25 03:02:24,856 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:02:24,875 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:02:25,049 INFO  L134       CoverageAnalysis]: Checked inductivity of 923 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 898 trivial. 0 not checked.
[2020-11-25 03:02:25,049 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:02:25,049 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 03:02:25,050 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:02:25,050 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 03:02:25,050 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 03:02:25,050 INFO  L87              Difference]: Start difference. First operand 11304 states and 12833 transitions. cyclomatic complexity: 1545 Second operand 9 states.
[2020-11-25 03:02:25,193 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:02:25,193 INFO  L93              Difference]: Finished difference Result 11322 states and 12852 transitions.
[2020-11-25 03:02:25,193 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 03:02:25,194 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11322 states and 12852 transitions.
[2020-11-25 03:02:25,213 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:02:25,234 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11322 states to 11280 states and 12804 transitions.
[2020-11-25 03:02:25,234 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2447
[2020-11-25 03:02:25,235 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2447
[2020-11-25 03:02:25,235 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11280 states and 12804 transitions.
[2020-11-25 03:02:25,241 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:02:25,241 INFO  L728         BuchiCegarLoop]: Abstraction has 11280 states and 12804 transitions.
[2020-11-25 03:02:25,247 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11280 states and 12804 transitions.
[2020-11-25 03:02:25,289 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11280 to 11280.
[2020-11-25 03:02:25,289 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11280 states.
[2020-11-25 03:02:25,301 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11280 states to 11280 states and 12804 transitions.
[2020-11-25 03:02:25,301 INFO  L751         BuchiCegarLoop]: Abstraction has 11280 states and 12804 transitions.
[2020-11-25 03:02:25,301 INFO  L631         BuchiCegarLoop]: Abstraction has 11280 states and 12804 transitions.
[2020-11-25 03:02:25,301 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 03:02:25,301 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11280 states and 12804 transitions.
[2020-11-25 03:02:25,312 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:02:25,313 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:02:25,313 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:02:25,314 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:02:25,314 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND FALSE  !(DType[this] == ONIT)
[L6761]   COND TRUE   DType[this] == ERC20Pausable
[L6762]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6762]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6763]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:02:25,318 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:02:25,318 INFO  L82        PathProgramCache]: Analyzing trace with hash -889578064, now seen corresponding path program 1 times
[2020-11-25 03:02:25,319 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:02:25,337 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:02:25,528 INFO  L134       CoverageAnalysis]: Checked inductivity of 935 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 935 trivial. 0 not checked.
[2020-11-25 03:02:25,528 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:02:25,528 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 03:02:25,529 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:02:25,529 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 03:02:25,529 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 03:02:25,529 INFO  L87              Difference]: Start difference. First operand 11280 states and 12804 transitions. cyclomatic complexity: 1540 Second operand 8 states.
[2020-11-25 03:02:25,670 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:02:25,670 INFO  L93              Difference]: Finished difference Result 11392 states and 12918 transitions.
[2020-11-25 03:02:25,670 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 03:02:25,671 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11392 states and 12918 transitions.
[2020-11-25 03:02:25,690 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:02:25,709 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11392 states to 11220 states and 12720 transitions.
[2020-11-25 03:02:25,709 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2435
[2020-11-25 03:02:25,710 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2435
[2020-11-25 03:02:25,710 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11220 states and 12720 transitions.
[2020-11-25 03:02:25,715 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:02:25,716 INFO  L728         BuchiCegarLoop]: Abstraction has 11220 states and 12720 transitions.
[2020-11-25 03:02:25,721 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11220 states and 12720 transitions.
[2020-11-25 03:02:25,763 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11220 to 11220.
[2020-11-25 03:02:25,763 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11220 states.
[2020-11-25 03:02:25,775 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11220 states to 11220 states and 12720 transitions.
[2020-11-25 03:02:25,775 INFO  L751         BuchiCegarLoop]: Abstraction has 11220 states and 12720 transitions.
[2020-11-25 03:02:25,775 INFO  L631         BuchiCegarLoop]: Abstraction has 11220 states and 12720 transitions.
[2020-11-25 03:02:25,775 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 03:02:25,775 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11220 states and 12720 transitions.
[2020-11-25 03:02:25,785 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:02:25,785 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:02:25,785 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:02:25,787 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:02:25,787 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:02:25,791 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:02:25,791 INFO  L82        PathProgramCache]: Analyzing trace with hash 717461049, now seen corresponding path program 1 times
[2020-11-25 03:02:25,791 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:02:25,810 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:02:26,068 INFO  L134       CoverageAnalysis]: Checked inductivity of 935 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 935 trivial. 0 not checked.
[2020-11-25 03:02:26,068 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:02:26,068 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 03:02:26,068 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:02:26,069 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 03:02:26,069 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=155, Unknown=0, NotChecked=0, Total=182
[2020-11-25 03:02:26,069 INFO  L87              Difference]: Start difference. First operand 11220 states and 12720 transitions. cyclomatic complexity: 1516 Second operand 14 states.
[2020-11-25 03:02:31,415 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:02:31,415 INFO  L93              Difference]: Finished difference Result 12042 states and 13746 transitions.
[2020-11-25 03:02:31,415 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 03:02:31,415 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12042 states and 13746 transitions.
[2020-11-25 03:02:31,439 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:02:31,463 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12042 states to 12042 states and 13746 transitions.
[2020-11-25 03:02:31,463 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2631
[2020-11-25 03:02:31,465 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2631
[2020-11-25 03:02:31,465 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12042 states and 13746 transitions.
[2020-11-25 03:02:31,471 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:02:31,472 INFO  L728         BuchiCegarLoop]: Abstraction has 12042 states and 13746 transitions.
[2020-11-25 03:02:31,478 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12042 states and 13746 transitions.
[2020-11-25 03:02:31,535 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12042 to 11808.
[2020-11-25 03:02:31,535 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11808 states.
[2020-11-25 03:02:31,549 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11808 states to 11808 states and 13464 transitions.
[2020-11-25 03:02:31,549 INFO  L751         BuchiCegarLoop]: Abstraction has 11808 states and 13464 transitions.
[2020-11-25 03:02:31,549 INFO  L631         BuchiCegarLoop]: Abstraction has 11808 states and 13464 transitions.
[2020-11-25 03:02:31,549 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 03:02:31,549 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11808 states and 13464 transitions.
[2020-11-25 03:02:31,560 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:02:31,560 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:02:31,560 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:02:31,561 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:02:31,561 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false
[L7733]   CALL        call __var_45 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7733]   RET         call __var_45 := FreshRefGenerator__success();
[L7734]   COND FALSE  !(revert)
[L7737]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == 0;
[L7738]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] := true;
[L7739]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == zerointRefArr();
[L7740]               assume M_Ref_Ref[timelockList_ONIT[this]][from_s1322] == __var_45;
[L7741]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == 0;
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false
[L7733]   CALL        call __var_45 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7733]   RET         call __var_45 := FreshRefGenerator__success();
[L7734]   COND FALSE  !(revert)
[L7737]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == 0;
[L7738]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] := true;
[L7739]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == zerointRefArr();
[L7740]               assume M_Ref_Ref[timelockList_ONIT[this]][from_s1322] == __var_45;
[L7741]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == 0;
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:02:31,566 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:02:31,566 INFO  L82        PathProgramCache]: Analyzing trace with hash 1029207546, now seen corresponding path program 1 times
[2020-11-25 03:02:31,567 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:02:31,590 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:02:31,896 INFO  L134       CoverageAnalysis]: Checked inductivity of 935 backedges. 8 proven. 4 refuted. 0 times theorem prover too weak. 923 trivial. 0 not checked.
[2020-11-25 03:02:31,896 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:02:31,896 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [16] total 16
[2020-11-25 03:02:31,897 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:02:31,897 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 03:02:31,897 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=32, Invalid=240, Unknown=0, NotChecked=0, Total=272
[2020-11-25 03:02:31,897 INFO  L87              Difference]: Start difference. First operand 11808 states and 13464 transitions. cyclomatic complexity: 1682 Second operand 17 states.
[2020-11-25 03:02:38,673 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:02:38,673 INFO  L93              Difference]: Finished difference Result 11976 states and 13702 transitions.
[2020-11-25 03:02:38,673 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 03:02:38,673 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11976 states and 13702 transitions.
[2020-11-25 03:02:38,697 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:02:38,720 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11976 states to 11976 states and 13702 transitions.
[2020-11-25 03:02:38,720 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2639
[2020-11-25 03:02:38,721 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2639
[2020-11-25 03:02:38,721 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11976 states and 13702 transitions.
[2020-11-25 03:02:38,728 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:02:38,728 INFO  L728         BuchiCegarLoop]: Abstraction has 11976 states and 13702 transitions.
[2020-11-25 03:02:38,734 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11976 states and 13702 transitions.
[2020-11-25 03:02:38,792 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11976 to 11652.
[2020-11-25 03:02:38,792 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11652 states.
[2020-11-25 03:02:38,806 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11652 states to 11652 states and 13310 transitions.
[2020-11-25 03:02:38,807 INFO  L751         BuchiCegarLoop]: Abstraction has 11652 states and 13310 transitions.
[2020-11-25 03:02:38,807 INFO  L631         BuchiCegarLoop]: Abstraction has 11652 states and 13310 transitions.
[2020-11-25 03:02:38,807 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 03:02:38,807 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11652 states and 13310 transitions.
[2020-11-25 03:02:38,818 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:02:38,818 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:02:38,818 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:02:38,820 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:02:38,820 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND TRUE   choice == 20
[L12210]              gas := gas - 21000;
[L12211]  COND TRUE   gas >= 0
[L12212]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12213]              assume msgvalue_MSG == 0;
[L12214]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6701]               __var_14 := null;
[L6702]   COND FALSE  !(!(spender_s711 != null))
[L6706]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6707]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6708]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6709]               assert { :EventEmitted "Approval_ERC20" } true;
[L6710]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12214]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false
[L7733]   CALL        call __var_45 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7733]   RET         call __var_45 := FreshRefGenerator__success();
[L7734]   COND FALSE  !(revert)
[L7737]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == 0;
[L7738]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] := true;
[L7739]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == zerointRefArr();
[L7740]               assume M_Ref_Ref[timelockList_ONIT[this]][from_s1322] == __var_45;
[L7741]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == 0;
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:02:38,825 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:02:38,825 INFO  L82        PathProgramCache]: Analyzing trace with hash 34931883, now seen corresponding path program 1 times
[2020-11-25 03:02:38,826 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:02:38,850 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:02:39,171 INFO  L134       CoverageAnalysis]: Checked inductivity of 1035 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1035 trivial. 0 not checked.
[2020-11-25 03:02:39,172 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:02:39,172 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 03:02:39,172 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:02:39,172 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 03:02:39,173 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=126, Unknown=0, NotChecked=0, Total=156
[2020-11-25 03:02:39,173 INFO  L87              Difference]: Start difference. First operand 11652 states and 13310 transitions. cyclomatic complexity: 1684 Second operand 13 states.
[2020-11-25 03:02:44,488 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:02:44,488 INFO  L93              Difference]: Finished difference Result 11896 states and 13642 transitions.
[2020-11-25 03:02:44,488 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 03:02:44,489 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11896 states and 13642 transitions.
[2020-11-25 03:02:44,514 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:02:44,539 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11896 states to 11896 states and 13642 transitions.
[2020-11-25 03:02:44,539 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2501
[2020-11-25 03:02:44,541 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2501
[2020-11-25 03:02:44,541 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11896 states and 13642 transitions.
[2020-11-25 03:02:44,548 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:02:44,548 INFO  L728         BuchiCegarLoop]: Abstraction has 11896 states and 13642 transitions.
[2020-11-25 03:02:44,554 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11896 states and 13642 transitions.
[2020-11-25 03:02:44,614 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11896 to 11786.
[2020-11-25 03:02:44,614 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11786 states.
[2020-11-25 03:02:44,628 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11786 states to 11786 states and 13488 transitions.
[2020-11-25 03:02:44,628 INFO  L751         BuchiCegarLoop]: Abstraction has 11786 states and 13488 transitions.
[2020-11-25 03:02:44,628 INFO  L631         BuchiCegarLoop]: Abstraction has 11786 states and 13488 transitions.
[2020-11-25 03:02:44,628 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 03:02:44,628 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11786 states and 13488 transitions.
[2020-11-25 03:02:44,639 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:02:44,639 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:02:44,640 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:02:44,641 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:02:44,641 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND TRUE   choice == 20
[L12210]              gas := gas - 21000;
[L12211]  COND TRUE   gas >= 0
[L12212]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12213]              assume msgvalue_MSG == 0;
[L12214]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6701]               __var_14 := null;
[L6702]   COND FALSE  !(!(spender_s711 != null))
[L6706]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6707]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6708]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6709]               assert { :EventEmitted "Approval_ERC20" } true;
[L6710]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12214]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false
[L7733]   CALL        call __var_45 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7733]   RET         call __var_45 := FreshRefGenerator__success();
[L7734]   COND FALSE  !(revert)
[L7737]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == 0;
[L7738]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] := true;
[L7739]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == zerointRefArr();
[L7740]               assume M_Ref_Ref[timelockList_ONIT[this]][from_s1322] == __var_45;
[L7741]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == 0;
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND FALSE  !(__var_69)
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:02:44,646 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:02:44,647 INFO  L82        PathProgramCache]: Analyzing trace with hash -344316222, now seen corresponding path program 1 times
[2020-11-25 03:02:44,647 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:02:44,690 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:02:45,026 INFO  L134       CoverageAnalysis]: Checked inductivity of 1051 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1051 trivial. 0 not checked.
[2020-11-25 03:02:45,026 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:02:45,026 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:02:45,026 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:02:45,027 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:02:45,027 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:02:45,027 INFO  L87              Difference]: Start difference. First operand 11786 states and 13488 transitions. cyclomatic complexity: 1734 Second operand 3 states.
[2020-11-25 03:02:45,123 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:02:45,124 INFO  L93              Difference]: Finished difference Result 11728 states and 13395 transitions.
[2020-11-25 03:02:45,124 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:02:45,124 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11728 states and 13395 transitions.
[2020-11-25 03:02:45,145 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:02:45,168 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11728 states to 11728 states and 13395 transitions.
[2020-11-25 03:02:45,168 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2469
[2020-11-25 03:02:45,169 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2469
[2020-11-25 03:02:45,169 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11728 states and 13395 transitions.
[2020-11-25 03:02:45,176 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:02:45,176 INFO  L728         BuchiCegarLoop]: Abstraction has 11728 states and 13395 transitions.
[2020-11-25 03:02:45,182 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11728 states and 13395 transitions.
[2020-11-25 03:02:45,231 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11728 to 11714.
[2020-11-25 03:02:45,231 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11714 states.
[2020-11-25 03:02:45,244 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11714 states to 11714 states and 13379 transitions.
[2020-11-25 03:02:45,245 INFO  L751         BuchiCegarLoop]: Abstraction has 11714 states and 13379 transitions.
[2020-11-25 03:02:45,245 INFO  L631         BuchiCegarLoop]: Abstraction has 11714 states and 13379 transitions.
[2020-11-25 03:02:45,245 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-25 03:02:45,245 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11714 states and 13379 transitions.
[2020-11-25 03:02:45,256 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:02:45,256 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:02:45,256 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:02:45,258 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:02:45,258 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false
[L7733]   CALL        call __var_45 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7733]   RET         call __var_45 := FreshRefGenerator__success();
[L7734]   COND FALSE  !(revert)
[L7737]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == 0;
[L7738]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] := true;
[L7739]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == zerointRefArr();
[L7740]               assume M_Ref_Ref[timelockList_ONIT[this]][from_s1322] == __var_45;
[L7741]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == 0;
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND FALSE  !(__var_69)
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND FALSE  !(__var_69)
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:02:45,264 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:02:45,264 INFO  L82        PathProgramCache]: Analyzing trace with hash 1421292237, now seen corresponding path program 1 times
[2020-11-25 03:02:45,265 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:02:45,290 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:02:45,552 INFO  L134       CoverageAnalysis]: Checked inductivity of 1112 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1111 trivial. 0 not checked.
[2020-11-25 03:02:45,552 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:02:45,552 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 03:02:45,553 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:02:45,553 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:02:45,553 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:02:45,553 INFO  L87              Difference]: Start difference. First operand 11714 states and 13379 transitions. cyclomatic complexity: 1697 Second operand 4 states.
[2020-11-25 03:02:45,596 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:02:45,596 INFO  L93              Difference]: Finished difference Result 11720 states and 13389 transitions.
[2020-11-25 03:02:45,596 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 03:02:45,596 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11720 states and 13389 transitions.
[2020-11-25 03:02:45,617 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:02:45,640 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11720 states to 11720 states and 13389 transitions.
[2020-11-25 03:02:45,640 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2459
[2020-11-25 03:02:45,641 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2459
[2020-11-25 03:02:45,641 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11720 states and 13389 transitions.
[2020-11-25 03:02:45,647 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:02:45,647 INFO  L728         BuchiCegarLoop]: Abstraction has 11720 states and 13389 transitions.
[2020-11-25 03:02:45,653 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11720 states and 13389 transitions.
[2020-11-25 03:02:45,702 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11720 to 11714.
[2020-11-25 03:02:45,702 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11714 states.
[2020-11-25 03:02:45,716 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11714 states to 11714 states and 13373 transitions.
[2020-11-25 03:02:45,716 INFO  L751         BuchiCegarLoop]: Abstraction has 11714 states and 13373 transitions.
[2020-11-25 03:02:45,716 INFO  L631         BuchiCegarLoop]: Abstraction has 11714 states and 13373 transitions.
[2020-11-25 03:02:45,717 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-11-25 03:02:45,717 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11714 states and 13373 transitions.
[2020-11-25 03:02:45,728 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:02:45,728 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:02:45,728 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:02:45,730 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:02:45,730 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false
[L7733]   CALL        call __var_45 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7733]   RET         call __var_45 := FreshRefGenerator__success();
[L7734]   COND FALSE  !(revert)
[L7737]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == 0;
[L7738]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] := true;
[L7739]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == zerointRefArr();
[L7740]               assume M_Ref_Ref[timelockList_ONIT[this]][from_s1322] == __var_45;
[L7741]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == 0;
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:02:45,736 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:02:45,736 INFO  L82        PathProgramCache]: Analyzing trace with hash 973208904, now seen corresponding path program 1 times
[2020-11-25 03:02:45,737 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:02:45,763 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:02:46,502 INFO  L134       CoverageAnalysis]: Checked inductivity of 1112 backedges. 109 proven. 10 refuted. 0 times theorem prover too weak. 993 trivial. 0 not checked.
[2020-11-25 03:02:46,502 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:02:46,502 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 03:02:46,503 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:02:46,503 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 03:02:46,503 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=69, Invalid=581, Unknown=0, NotChecked=0, Total=650
[2020-11-25 03:02:46,503 INFO  L87              Difference]: Start difference. First operand 11714 states and 13373 transitions. cyclomatic complexity: 1691 Second operand 26 states.
[2020-11-25 03:02:59,853 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:02:59,853 INFO  L93              Difference]: Finished difference Result 12316 states and 14129 transitions.
[2020-11-25 03:02:59,853 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 03:02:59,853 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12316 states and 14129 transitions.
[2020-11-25 03:02:59,878 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:02:59,904 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12316 states to 12316 states and 14129 transitions.
[2020-11-25 03:02:59,904 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2713
[2020-11-25 03:02:59,905 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2713
[2020-11-25 03:02:59,905 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12316 states and 14129 transitions.
[2020-11-25 03:02:59,912 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:02:59,912 INFO  L728         BuchiCegarLoop]: Abstraction has 12316 states and 14129 transitions.
[2020-11-25 03:02:59,918 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12316 states and 14129 transitions.
[2020-11-25 03:02:59,973 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12316 to 11956.
[2020-11-25 03:02:59,973 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11956 states.
[2020-11-25 03:02:59,987 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11956 states to 11956 states and 13699 transitions.
[2020-11-25 03:02:59,987 INFO  L751         BuchiCegarLoop]: Abstraction has 11956 states and 13699 transitions.
[2020-11-25 03:02:59,987 INFO  L631         BuchiCegarLoop]: Abstraction has 11956 states and 13699 transitions.
[2020-11-25 03:02:59,987 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-11-25 03:02:59,987 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11956 states and 13699 transitions.
[2020-11-25 03:02:59,998 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:02:59,998 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:02:59,998 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:03:00,000 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:03:00,000 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false
[L7733]   CALL        call __var_45 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7733]   RET         call __var_45 := FreshRefGenerator__success();
[L7734]   COND FALSE  !(revert)
[L7737]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == 0;
[L7738]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] := true;
[L7739]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == zerointRefArr();
[L7740]               assume M_Ref_Ref[timelockList_ONIT[this]][from_s1322] == __var_45;
[L7741]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == 0;
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false
[L8198]   CALL        call __var_59 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8198]   RET         call __var_59 := FreshRefGenerator__success();
[L8199]   COND FALSE  !(revert)
[L8202]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] == 0;
[L8203]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] := true;
[L8204]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] == zerointRefArr();
[L8205]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1600] == __var_59;
[L8206]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] == 0;
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:03:00,005 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:03:00,005 INFO  L82        PathProgramCache]: Analyzing trace with hash -1369734875, now seen corresponding path program 1 times
[2020-11-25 03:03:00,006 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:03:00,030 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:03:00,362 INFO  L134       CoverageAnalysis]: Checked inductivity of 1112 backedges. 1 proven. 8 refuted. 0 times theorem prover too weak. 1103 trivial. 0 not checked.
[2020-11-25 03:03:00,362 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:03:00,362 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-11-25 03:03:00,363 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:03:00,363 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:03:00,363 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:03:00,363 INFO  L87              Difference]: Start difference. First operand 11956 states and 13699 transitions. cyclomatic complexity: 1781 Second operand 4 states.
[2020-11-25 03:03:00,473 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:03:00,474 INFO  L93              Difference]: Finished difference Result 11820 states and 13529 transitions.
[2020-11-25 03:03:00,474 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 03:03:00,474 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11820 states and 13529 transitions.
[2020-11-25 03:03:00,494 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:03:00,516 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11820 states to 11652 states and 13329 transitions.
[2020-11-25 03:03:00,516 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2483
[2020-11-25 03:03:00,517 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2483
[2020-11-25 03:03:00,517 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11652 states and 13329 transitions.
[2020-11-25 03:03:00,523 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:03:00,524 INFO  L728         BuchiCegarLoop]: Abstraction has 11652 states and 13329 transitions.
[2020-11-25 03:03:00,529 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11652 states and 13329 transitions.
[2020-11-25 03:03:00,581 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11652 to 11640.
[2020-11-25 03:03:00,581 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11640 states.
[2020-11-25 03:03:00,595 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11640 states to 11640 states and 13313 transitions.
[2020-11-25 03:03:00,595 INFO  L751         BuchiCegarLoop]: Abstraction has 11640 states and 13313 transitions.
[2020-11-25 03:03:00,595 INFO  L631         BuchiCegarLoop]: Abstraction has 11640 states and 13313 transitions.
[2020-11-25 03:03:00,595 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-11-25 03:03:00,595 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11640 states and 13313 transitions.
[2020-11-25 03:03:00,606 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:03:00,606 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:03:00,606 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:03:00,608 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:03:00,608 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false
[L7733]   CALL        call __var_45 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7733]   RET         call __var_45 := FreshRefGenerator__success();
[L7734]   COND FALSE  !(revert)
[L7737]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == 0;
[L7738]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] := true;
[L7739]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == zerointRefArr();
[L7740]               assume M_Ref_Ref[timelockList_ONIT[this]][from_s1322] == __var_45;
[L7741]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == 0;
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false
[L8353]   CALL        call __var_68 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8353]   RET         call __var_68 := FreshRefGenerator__success();
[L8354]   COND FALSE  !(revert)
[L8357]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8358]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] := true;
[L8359]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == zerointRefArr();
[L8360]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1645] == __var_68;
[L8361]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false
[L8353]   CALL        call __var_68 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8353]   RET         call __var_68 := FreshRefGenerator__success();
[L8354]   COND FALSE  !(revert)
[L8357]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8358]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] := true;
[L8359]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == zerointRefArr();
[L8360]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1645] == __var_68;
[L8361]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:03:00,614 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:03:00,615 INFO  L82        PathProgramCache]: Analyzing trace with hash 359645063, now seen corresponding path program 1 times
[2020-11-25 03:03:00,615 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:03:00,640 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:03:00,903 INFO  L134       CoverageAnalysis]: Checked inductivity of 1112 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1111 trivial. 0 not checked.
[2020-11-25 03:03:00,903 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:03:00,903 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:03:00,903 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:03:00,903 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:03:00,903 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:03:00,904 INFO  L87              Difference]: Start difference. First operand 11640 states and 13313 transitions. cyclomatic complexity: 1711 Second operand 3 states.
[2020-11-25 03:03:00,971 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:03:00,971 INFO  L93              Difference]: Finished difference Result 11664 states and 13345 transitions.
[2020-11-25 03:03:00,971 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:03:00,972 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11664 states and 13345 transitions.
[2020-11-25 03:03:00,992 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:03:01,014 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11664 states to 11664 states and 13345 transitions.
[2020-11-25 03:03:01,014 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2483
[2020-11-25 03:03:01,015 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2483
[2020-11-25 03:03:01,015 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11664 states and 13345 transitions.
[2020-11-25 03:03:01,021 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:03:01,021 INFO  L728         BuchiCegarLoop]: Abstraction has 11664 states and 13345 transitions.
[2020-11-25 03:03:01,027 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11664 states and 13345 transitions.
[2020-11-25 03:03:01,078 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11664 to 11624.
[2020-11-25 03:03:01,078 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11624 states.
[2020-11-25 03:03:01,092 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11624 states to 11624 states and 13289 transitions.
[2020-11-25 03:03:01,092 INFO  L751         BuchiCegarLoop]: Abstraction has 11624 states and 13289 transitions.
[2020-11-25 03:03:01,092 INFO  L631         BuchiCegarLoop]: Abstraction has 11624 states and 13289 transitions.
[2020-11-25 03:03:01,092 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-11-25 03:03:01,092 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11624 states and 13289 transitions.
[2020-11-25 03:03:01,102 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:03:01,103 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:03:01,103 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:03:01,104 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:03:01,104 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false
[L7733]   CALL        call __var_45 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7733]   RET         call __var_45 := FreshRefGenerator__success();
[L7734]   COND FALSE  !(revert)
[L7737]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == 0;
[L7738]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] := true;
[L7739]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == zerointRefArr();
[L7740]               assume M_Ref_Ref[timelockList_ONIT[this]][from_s1322] == __var_45;
[L7741]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == 0;
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false
[L8339]   CALL        call __var_67 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8339]   RET         call __var_67 := FreshRefGenerator__success();
[L8340]   COND FALSE  !(revert)
[L8343]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8344]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] := true;
[L8345]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == zerointRefArr();
[L8346]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1645] == __var_67;
[L8347]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:03:01,109 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:03:01,110 INFO  L82        PathProgramCache]: Analyzing trace with hash 452785618, now seen corresponding path program 1 times
[2020-11-25 03:03:01,110 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:03:01,136 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:03:01,440 INFO  L134       CoverageAnalysis]: Checked inductivity of 1112 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1112 trivial. 0 not checked.
[2020-11-25 03:03:01,440 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:03:01,440 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 03:03:01,441 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:03:01,441 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 03:03:01,441 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=19, Unknown=0, NotChecked=0, Total=30
[2020-11-25 03:03:01,441 INFO  L87              Difference]: Start difference. First operand 11624 states and 13289 transitions. cyclomatic complexity: 1703 Second operand 6 states.
[2020-11-25 03:03:02,931 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:03:02,931 INFO  L93              Difference]: Finished difference Result 11786 states and 13469 transitions.
[2020-11-25 03:03:02,931 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 03:03:02,931 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11786 states and 13469 transitions.
[2020-11-25 03:03:02,956 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:03:02,979 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11786 states to 11786 states and 13469 transitions.
[2020-11-25 03:03:02,979 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2623
[2020-11-25 03:03:02,980 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2623
[2020-11-25 03:03:02,980 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11786 states and 13469 transitions.
[2020-11-25 03:03:02,987 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:03:02,987 INFO  L728         BuchiCegarLoop]: Abstraction has 11786 states and 13469 transitions.
[2020-11-25 03:03:02,993 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11786 states and 13469 transitions.
[2020-11-25 03:03:03,043 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11786 to 11502.
[2020-11-25 03:03:03,043 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11502 states.
[2020-11-25 03:03:03,057 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11502 states to 11502 states and 13121 transitions.
[2020-11-25 03:03:03,057 INFO  L751         BuchiCegarLoop]: Abstraction has 11502 states and 13121 transitions.
[2020-11-25 03:03:03,057 INFO  L631         BuchiCegarLoop]: Abstraction has 11502 states and 13121 transitions.
[2020-11-25 03:03:03,057 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-11-25 03:03:03,057 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11502 states and 13121 transitions.
[2020-11-25 03:03:03,069 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:03:03,069 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:03:03,069 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:03:03,071 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:03:03,071 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND TRUE   choice == 20
[L12210]              gas := gas - 21000;
[L12211]  COND TRUE   gas >= 0
[L12212]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12213]              assume msgvalue_MSG == 0;
[L12214]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6701]               __var_14 := null;
[L6702]   COND FALSE  !(!(spender_s711 != null))
[L6706]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6707]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6708]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6709]               assert { :EventEmitted "Approval_ERC20" } true;
[L6710]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12214]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:03:03,077 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:03:03,077 INFO  L82        PathProgramCache]: Analyzing trace with hash 1278568808, now seen corresponding path program 1 times
[2020-11-25 03:03:03,078 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:03:03,104 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:03:03,913 INFO  L134       CoverageAnalysis]: Checked inductivity of 1291 backedges. 199 proven. 14 refuted. 0 times theorem prover too weak. 1078 trivial. 0 not checked.
[2020-11-25 03:03:03,913 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:03:03,913 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 03:03:03,914 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:03:03,914 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 03:03:03,914 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=69, Invalid=581, Unknown=0, NotChecked=0, Total=650
[2020-11-25 03:03:03,914 INFO  L87              Difference]: Start difference. First operand 11502 states and 13121 transitions. cyclomatic complexity: 1653 Second operand 26 states.
[2020-11-25 03:03:16,529 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:03:16,529 INFO  L93              Difference]: Finished difference Result 11836 states and 13590 transitions.
[2020-11-25 03:03:16,530 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 03:03:16,530 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11836 states and 13590 transitions.
[2020-11-25 03:03:16,554 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:03:16,577 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11836 states to 11836 states and 13590 transitions.
[2020-11-25 03:03:16,578 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2669
[2020-11-25 03:03:16,579 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2669
[2020-11-25 03:03:16,579 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11836 states and 13590 transitions.
[2020-11-25 03:03:16,586 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:03:16,586 INFO  L728         BuchiCegarLoop]: Abstraction has 11836 states and 13590 transitions.
[2020-11-25 03:03:16,591 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11836 states and 13590 transitions.
[2020-11-25 03:03:16,641 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11836 to 11512.
[2020-11-25 03:03:16,641 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11512 states.
[2020-11-25 03:03:16,655 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11512 states to 11512 states and 13171 transitions.
[2020-11-25 03:03:16,655 INFO  L751         BuchiCegarLoop]: Abstraction has 11512 states and 13171 transitions.
[2020-11-25 03:03:16,655 INFO  L631         BuchiCegarLoop]: Abstraction has 11512 states and 13171 transitions.
[2020-11-25 03:03:16,655 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-11-25 03:03:16,655 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11512 states and 13171 transitions.
[2020-11-25 03:03:16,666 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:03:16,666 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:03:16,666 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:03:16,668 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:03:16,668 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND TRUE   choice == 20
[L12210]              gas := gas - 21000;
[L12211]  COND TRUE   gas >= 0
[L12212]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12213]              assume msgvalue_MSG == 0;
[L12214]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6701]               __var_14 := null;
[L6702]   COND FALSE  !(!(spender_s711 != null))
[L6706]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6707]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6708]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6709]               assert { :EventEmitted "Approval_ERC20" } true;
[L6710]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12214]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false
[L7554]   CALL        call __var_38 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7554]   RET         call __var_38 := FreshRefGenerator__success();
[L7555]   COND FALSE  !(revert)
[L7558]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] == 0;
[L7559]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] := true;
[L7560]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] == zerointRefArr();
[L7561]               assume M_Ref_Ref[timelockList_ONIT[this]][owner_s1254] == __var_38;
[L7562]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] == 0;
[L7564]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0)
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:03:16,673 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:03:16,673 INFO  L82        PathProgramCache]: Analyzing trace with hash -13169141, now seen corresponding path program 1 times
[2020-11-25 03:03:16,674 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:03:16,701 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:03:17,463 INFO  L134       CoverageAnalysis]: Checked inductivity of 1291 backedges. 199 proven. 14 refuted. 0 times theorem prover too weak. 1078 trivial. 0 not checked.
[2020-11-25 03:03:17,463 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:03:17,464 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 03:03:17,464 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:03:17,464 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 03:03:17,464 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=69, Invalid=581, Unknown=0, NotChecked=0, Total=650
[2020-11-25 03:03:17,464 INFO  L87              Difference]: Start difference. First operand 11512 states and 13171 transitions. cyclomatic complexity: 1695 Second operand 26 states.
[2020-11-25 03:03:30,289 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:03:30,290 INFO  L93              Difference]: Finished difference Result 11822 states and 13616 transitions.
[2020-11-25 03:03:30,290 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 03:03:30,290 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11822 states and 13616 transitions.
[2020-11-25 03:03:30,315 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:03:30,340 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11822 states to 11822 states and 13616 transitions.
[2020-11-25 03:03:30,340 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2669
[2020-11-25 03:03:30,342 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2685
[2020-11-25 03:03:30,342 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11822 states and 13616 transitions.
[2020-11-25 03:03:30,349 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:03:30,349 INFO  L728         BuchiCegarLoop]: Abstraction has 11822 states and 13616 transitions.
[2020-11-25 03:03:30,355 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11822 states and 13616 transitions.
[2020-11-25 03:03:30,405 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11822 to 11512.
[2020-11-25 03:03:30,405 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11512 states.
[2020-11-25 03:03:30,419 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11512 states to 11512 states and 13167 transitions.
[2020-11-25 03:03:30,419 INFO  L751         BuchiCegarLoop]: Abstraction has 11512 states and 13167 transitions.
[2020-11-25 03:03:30,419 INFO  L631         BuchiCegarLoop]: Abstraction has 11512 states and 13167 transitions.
[2020-11-25 03:03:30,419 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-11-25 03:03:30,419 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11512 states and 13167 transitions.
[2020-11-25 03:03:30,430 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:03:30,430 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:03:30,430 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:03:30,432 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:03:30,432 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND TRUE   choice == 20
[L12210]              gas := gas - 21000;
[L12211]  COND TRUE   gas >= 0
[L12212]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12213]              assume msgvalue_MSG == 0;
[L12214]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6701]               __var_14 := null;
[L6702]   COND FALSE  !(!(spender_s711 != null))
[L6706]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6707]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6708]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6709]               assert { :EventEmitted "Approval_ERC20" } true;
[L6710]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12214]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND TRUE   choice == 6
[L12299]              gas := gas - 21000;
[L12300]  COND TRUE   gas >= 0
[L12301]              assume msgvalue_MSG == 0;
[L12302]  CALL        call __ret_0_unfreezeAccount := unfreezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L3432]               havoc __exception;
[L3433]               revert := false;
[L3434]   COND FALSE  !(__exception)
[L3470]   CALL        call __ret_0_ := unfreezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L7809]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND FALSE  !(DType[this] == ONIT)
[L10842]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10847]  COND FALSE  !(DType[this] == Pausable)
[L10852]  COND TRUE   DType[this] == PauserRole
[L10853]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10853]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10854]  COND FALSE  !(revert)
[L10860]  COND TRUE   DType[this] == ONIT
[L10861]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND FALSE  !(account_s293 == owner_Ownable[this])
[L5979]               __ret_0_ := false;
[L10861]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10862]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7809]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7810]   COND FALSE  !(revert)
[L7813]   COND FALSE  !(!frozenAccount_ONIT[this][holder_s1379])
[L7817]               frozenAccount_ONIT[this][holder_s1379] := false;
[L7818]               assert { :EventEmitted "Unfreeze_ONIT" } true;
[L7819]               __ret_0_ := true;
[L3470]   RET         call __ret_0_ := unfreezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L3471]               assume !revert && gas >= 0;
[L12302]  RET         call __ret_0_unfreezeAccount := unfreezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:03:30,438 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:03:30,438 INFO  L82        PathProgramCache]: Analyzing trace with hash 1378634718, now seen corresponding path program 1 times
[2020-11-25 03:03:30,439 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:03:30,464 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:03:30,801 INFO  L134       CoverageAnalysis]: Checked inductivity of 1275 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 1270 trivial. 0 not checked.
[2020-11-25 03:03:30,801 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:03:30,801 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:03:30,801 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:03:30,802 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:03:30,802 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:03:30,802 INFO  L87              Difference]: Start difference. First operand 11512 states and 13167 transitions. cyclomatic complexity: 1691 Second operand 3 states.
[2020-11-25 03:03:30,875 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:03:30,875 INFO  L93              Difference]: Finished difference Result 11528 states and 13211 transitions.
[2020-11-25 03:03:30,875 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:03:30,875 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11528 states and 13211 transitions.
[2020-11-25 03:03:30,895 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:03:30,917 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11528 states to 11528 states and 13211 transitions.
[2020-11-25 03:03:30,918 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2475
[2020-11-25 03:03:30,919 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2475
[2020-11-25 03:03:30,919 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11528 states and 13211 transitions.
[2020-11-25 03:03:30,925 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:03:30,925 INFO  L728         BuchiCegarLoop]: Abstraction has 11528 states and 13211 transitions.
[2020-11-25 03:03:30,931 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11528 states and 13211 transitions.
[2020-11-25 03:03:30,979 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11528 to 11516.
[2020-11-25 03:03:30,979 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11516 states.
[2020-11-25 03:03:30,993 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11516 states to 11516 states and 13171 transitions.
[2020-11-25 03:03:30,993 INFO  L751         BuchiCegarLoop]: Abstraction has 11516 states and 13171 transitions.
[2020-11-25 03:03:30,993 INFO  L631         BuchiCegarLoop]: Abstraction has 11516 states and 13171 transitions.
[2020-11-25 03:03:30,993 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-11-25 03:03:30,993 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11516 states and 13171 transitions.
[2020-11-25 03:03:31,004 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:03:31,004 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:03:31,004 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:03:31,006 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:03:31,006 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND TRUE   choice == 20
[L12210]              gas := gas - 21000;
[L12211]  COND TRUE   gas >= 0
[L12212]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12213]              assume msgvalue_MSG == 0;
[L12214]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6701]               __var_14 := null;
[L6702]   COND FALSE  !(!(spender_s711 != null))
[L6706]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6707]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6708]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6709]               assert { :EventEmitted "Approval_ERC20" } true;
[L6710]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12214]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND TRUE   choice == 7
[L12293]              gas := gas - 21000;
[L12294]  COND TRUE   gas >= 0
[L12295]              assume msgvalue_MSG == 0;
[L12296]  CALL        call __ret_0_freezeAccount := freezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3351]               havoc __exception;
[L3352]               revert := false;
[L3353]   COND FALSE  !(__exception)
[L3389]   CALL        call __ret_0_ := freezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L7778]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND FALSE  !(DType[this] == ONIT)
[L10842]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10847]  COND FALSE  !(DType[this] == Pausable)
[L10852]  COND TRUE   DType[this] == PauserRole
[L10853]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10853]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10854]  COND FALSE  !(revert)
[L10860]  COND FALSE  !(DType[this] == ONIT)
[L10865]  COND TRUE   DType[this] == ERC20Pausable
[L10866]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND FALSE  !(account_s293 == owner_Ownable[this])
[L5979]               __ret_0_ := false;
[L10866]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10867]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7778]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7779]   COND FALSE  !(revert)
[L7782]   COND FALSE  !(!!frozenAccount_ONIT[this][holder_s1351])
[L7786]               frozenAccount_ONIT[this][holder_s1351] := true;
[L7787]               assert { :EventEmitted "Freeze_ONIT" } true;
[L7788]               __ret_0_ := true;
[L3389]   RET         call __ret_0_ := freezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3390]               assume !revert && gas >= 0;
[L12296]  RET         call __ret_0_freezeAccount := freezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:03:31,011 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:03:31,011 INFO  L82        PathProgramCache]: Analyzing trace with hash 437860690, now seen corresponding path program 1 times
[2020-11-25 03:03:31,012 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:03:31,038 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:03:31,330 INFO  L134       CoverageAnalysis]: Checked inductivity of 1275 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 1270 trivial. 0 not checked.
[2020-11-25 03:03:31,330 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:03:31,330 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:03:31,330 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:03:31,331 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:03:31,331 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:03:31,331 INFO  L87              Difference]: Start difference. First operand 11516 states and 13171 transitions. cyclomatic complexity: 1691 Second operand 3 states.
[2020-11-25 03:03:31,386 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:03:31,386 INFO  L93              Difference]: Finished difference Result 11536 states and 13219 transitions.
[2020-11-25 03:03:31,386 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:03:31,386 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11536 states and 13219 transitions.
[2020-11-25 03:03:31,406 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:03:31,429 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11536 states to 11536 states and 13219 transitions.
[2020-11-25 03:03:31,429 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2475
[2020-11-25 03:03:31,430 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2475
[2020-11-25 03:03:31,430 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11536 states and 13219 transitions.
[2020-11-25 03:03:31,436 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:03:31,436 INFO  L728         BuchiCegarLoop]: Abstraction has 11536 states and 13219 transitions.
[2020-11-25 03:03:31,442 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11536 states and 13219 transitions.
[2020-11-25 03:03:31,490 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11536 to 11524.
[2020-11-25 03:03:31,490 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11524 states.
[2020-11-25 03:03:31,504 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11524 states to 11524 states and 13179 transitions.
[2020-11-25 03:03:31,505 INFO  L751         BuchiCegarLoop]: Abstraction has 11524 states and 13179 transitions.
[2020-11-25 03:03:31,505 INFO  L631         BuchiCegarLoop]: Abstraction has 11524 states and 13179 transitions.
[2020-11-25 03:03:31,505 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-11-25 03:03:31,505 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11524 states and 13179 transitions.
[2020-11-25 03:03:31,515 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:03:31,515 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:03:31,515 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:03:31,517 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:03:31,517 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND TRUE   choice == 20
[L12210]              gas := gas - 21000;
[L12211]  COND TRUE   gas >= 0
[L12212]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12213]              assume msgvalue_MSG == 0;
[L12214]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6701]               __var_14 := null;
[L6702]   COND FALSE  !(!(spender_s711 != null))
[L6706]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6707]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6708]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6709]               assert { :EventEmitted "Approval_ERC20" } true;
[L6710]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12214]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND TRUE   choice == 6
[L12299]              gas := gas - 21000;
[L12300]  COND TRUE   gas >= 0
[L12301]              assume msgvalue_MSG == 0;
[L12302]  CALL        call __ret_0_unfreezeAccount := unfreezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L3432]               havoc __exception;
[L3433]               revert := false;
[L3434]   COND FALSE  !(__exception)
[L3470]   CALL        call __ret_0_ := unfreezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L7809]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND TRUE   DType[this] == ONIT
[L10861]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND FALSE  !(account_s293 == owner_Ownable[this])
[L5979]               __ret_0_ := false;
[L10861]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10862]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7809]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7810]   COND FALSE  !(revert)
[L7813]   COND FALSE  !(!frozenAccount_ONIT[this][holder_s1379])
[L7817]               frozenAccount_ONIT[this][holder_s1379] := false;
[L7818]               assert { :EventEmitted "Unfreeze_ONIT" } true;
[L7819]               __ret_0_ := true;
[L3470]   RET         call __ret_0_ := unfreezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L3471]               assume !revert && gas >= 0;
[L12302]  RET         call __ret_0_unfreezeAccount := unfreezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:03:31,522 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:03:31,522 INFO  L82        PathProgramCache]: Analyzing trace with hash 1398778097, now seen corresponding path program 1 times
[2020-11-25 03:03:31,522 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:03:31,548 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:03:31,930 INFO  L134       CoverageAnalysis]: Checked inductivity of 1275 backedges. 3 proven. 201 refuted. 0 times theorem prover too weak. 1071 trivial. 0 not checked.
[2020-11-25 03:03:31,931 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:03:31,931 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-11-25 03:03:31,932 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:03:31,932 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 03:03:31,932 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-11-25 03:03:31,932 INFO  L87              Difference]: Start difference. First operand 11524 states and 13179 transitions. cyclomatic complexity: 1691 Second operand 11 states.
[2020-11-25 03:03:35,653 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:03:35,653 INFO  L93              Difference]: Finished difference Result 11558 states and 13322 transitions.
[2020-11-25 03:03:35,654 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 03:03:35,654 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11558 states and 13322 transitions.
[2020-11-25 03:03:35,683 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 03:03:35,709 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11558 states to 11558 states and 13322 transitions.
[2020-11-25 03:03:35,710 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2489
[2020-11-25 03:03:35,711 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2489
[2020-11-25 03:03:35,711 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11558 states and 13322 transitions.
[2020-11-25 03:03:35,718 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:03:35,718 INFO  L728         BuchiCegarLoop]: Abstraction has 11558 states and 13322 transitions.
[2020-11-25 03:03:35,724 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11558 states and 13322 transitions.
[2020-11-25 03:03:35,786 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11558 to 11558.
[2020-11-25 03:03:35,786 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11558 states.
[2020-11-25 03:03:35,802 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11558 states to 11558 states and 13322 transitions.
[2020-11-25 03:03:35,802 INFO  L751         BuchiCegarLoop]: Abstraction has 11558 states and 13322 transitions.
[2020-11-25 03:03:35,802 INFO  L631         BuchiCegarLoop]: Abstraction has 11558 states and 13322 transitions.
[2020-11-25 03:03:35,802 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-11-25 03:03:35,802 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11558 states and 13322 transitions.
[2020-11-25 03:03:35,814 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 03:03:35,814 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:03:35,814 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:03:35,816 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:03:35,816 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND TRUE   choice == 20
[L12210]              gas := gas - 21000;
[L12211]  COND TRUE   gas >= 0
[L12212]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12213]              assume msgvalue_MSG == 0;
[L12214]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6701]               __var_14 := null;
[L6702]   COND FALSE  !(!(spender_s711 != null))
[L6706]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6707]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6708]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6709]               assert { :EventEmitted "Approval_ERC20" } true;
[L6710]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12214]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false
[L7655]   CALL        call __var_41 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7655]   RET         call __var_41 := FreshRefGenerator__success();
[L7656]   COND FALSE  !(revert)
[L7659]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7660]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] := true;
[L7661]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7662]               assume M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7663]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND FALSE  !(DType[this] == ONIT)
[L7183]   COND TRUE   DType[this] == ERC20Pausable
[L7184]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND FALSE  !(DType[this] == ONIT)
[L6666]   COND TRUE   DType[this] == ERC20Pausable
[L6667]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6667]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6668]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7184]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7185]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:03:35,821 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:03:35,821 INFO  L82        PathProgramCache]: Analyzing trace with hash -1735239204, now seen corresponding path program 1 times
[2020-11-25 03:03:35,822 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:03:35,851 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:03:36,171 INFO  L134       CoverageAnalysis]: Checked inductivity of 1298 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 1293 trivial. 0 not checked.
[2020-11-25 03:03:36,171 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:03:36,172 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 03:03:36,172 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:03:36,172 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:03:36,172 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:03:36,172 INFO  L87              Difference]: Start difference. First operand 11558 states and 13322 transitions. cyclomatic complexity: 1806 Second operand 4 states.
[2020-11-25 03:03:36,250 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:03:36,250 INFO  L93              Difference]: Finished difference Result 11570 states and 13330 transitions.
[2020-11-25 03:03:36,251 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 03:03:36,251 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11570 states and 13330 transitions.
[2020-11-25 03:03:36,274 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 03:03:36,299 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11570 states to 11538 states and 13294 transitions.
[2020-11-25 03:03:36,299 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2485
[2020-11-25 03:03:36,300 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2485
[2020-11-25 03:03:36,300 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11538 states and 13294 transitions.
[2020-11-25 03:03:36,307 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:03:36,307 INFO  L728         BuchiCegarLoop]: Abstraction has 11538 states and 13294 transitions.
[2020-11-25 03:03:36,313 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11538 states and 13294 transitions.
[2020-11-25 03:03:36,409 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11538 to 11538.
[2020-11-25 03:03:36,409 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11538 states.
[2020-11-25 03:03:36,424 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11538 states to 11538 states and 13294 transitions.
[2020-11-25 03:03:36,424 INFO  L751         BuchiCegarLoop]: Abstraction has 11538 states and 13294 transitions.
[2020-11-25 03:03:36,424 INFO  L631         BuchiCegarLoop]: Abstraction has 11538 states and 13294 transitions.
[2020-11-25 03:03:36,424 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-11-25 03:03:36,424 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11538 states and 13294 transitions.
[2020-11-25 03:03:36,435 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 03:03:36,435 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:03:36,435 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:03:36,437 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:03:36,437 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND TRUE   choice == 20
[L12210]              gas := gas - 21000;
[L12211]  COND TRUE   gas >= 0
[L12212]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12213]              assume msgvalue_MSG == 0;
[L12214]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6701]               __var_14 := null;
[L6702]   COND FALSE  !(!(spender_s711 != null))
[L6706]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6707]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6708]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6709]               assert { :EventEmitted "Approval_ERC20" } true;
[L6710]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12214]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false
[L7655]   CALL        call __var_41 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7655]   RET         call __var_41 := FreshRefGenerator__success();
[L7656]   COND FALSE  !(revert)
[L7659]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7660]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] := true;
[L7661]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7662]               assume M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7663]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND FALSE  !(DType[this] == ONIT)
[L6666]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6671]   COND TRUE   DType[this] == ERC20
[L6672]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6672]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6673]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:03:36,460 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:03:36,460 INFO  L82        PathProgramCache]: Analyzing trace with hash -1845795529, now seen corresponding path program 1 times
[2020-11-25 03:03:36,461 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:03:36,489 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:03:36,802 INFO  L134       CoverageAnalysis]: Checked inductivity of 1298 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 1293 trivial. 0 not checked.
[2020-11-25 03:03:36,802 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:03:36,803 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 03:03:36,803 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:03:36,803 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 03:03:36,803 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 03:03:36,803 INFO  L87              Difference]: Start difference. First operand 11538 states and 13294 transitions. cyclomatic complexity: 1798 Second operand 5 states.
[2020-11-25 03:03:36,884 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:03:36,884 INFO  L93              Difference]: Finished difference Result 11570 states and 13322 transitions.
[2020-11-25 03:03:36,884 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 03:03:36,885 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11570 states and 13322 transitions.
[2020-11-25 03:03:36,907 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 03:03:36,932 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11570 states to 11518 states and 13266 transitions.
[2020-11-25 03:03:36,932 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2481
[2020-11-25 03:03:36,933 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2481
[2020-11-25 03:03:36,933 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11518 states and 13266 transitions.
[2020-11-25 03:03:36,940 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:03:36,940 INFO  L728         BuchiCegarLoop]: Abstraction has 11518 states and 13266 transitions.
[2020-11-25 03:03:36,946 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11518 states and 13266 transitions.
[2020-11-25 03:03:37,028 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11518 to 11518.
[2020-11-25 03:03:37,028 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11518 states.
[2020-11-25 03:03:37,051 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11518 states to 11518 states and 13266 transitions.
[2020-11-25 03:03:37,051 INFO  L751         BuchiCegarLoop]: Abstraction has 11518 states and 13266 transitions.
[2020-11-25 03:03:37,051 INFO  L631         BuchiCegarLoop]: Abstraction has 11518 states and 13266 transitions.
[2020-11-25 03:03:37,051 INFO  L445         BuchiCegarLoop]: ======== Iteration 33============
[2020-11-25 03:03:37,052 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11518 states and 13266 transitions.
[2020-11-25 03:03:37,068 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 03:03:37,068 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:03:37,069 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:03:37,071 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:03:37,071 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND TRUE   choice == 20
[L12210]              gas := gas - 21000;
[L12211]  COND TRUE   gas >= 0
[L12212]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12213]              assume msgvalue_MSG == 0;
[L12214]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6701]               __var_14 := null;
[L6702]   COND FALSE  !(!(spender_s711 != null))
[L6706]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6707]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6708]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6709]               assert { :EventEmitted "Approval_ERC20" } true;
[L6710]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12214]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false
[L7655]   CALL        call __var_41 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7655]   RET         call __var_41 := FreshRefGenerator__success();
[L7656]   COND FALSE  !(revert)
[L7659]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7660]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] := true;
[L7661]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7662]               assume M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7663]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:03:37,079 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:03:37,079 INFO  L82        PathProgramCache]: Analyzing trace with hash -1508513217, now seen corresponding path program 1 times
[2020-11-25 03:03:37,080 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:03:37,125 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:03:37,970 INFO  L134       CoverageAnalysis]: Checked inductivity of 1298 backedges. 197 proven. 14 refuted. 0 times theorem prover too weak. 1087 trivial. 0 not checked.
[2020-11-25 03:03:37,970 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:03:37,970 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 03:03:37,970 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:03:37,971 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 03:03:37,971 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=69, Invalid=581, Unknown=0, NotChecked=0, Total=650
[2020-11-25 03:03:37,971 INFO  L87              Difference]: Start difference. First operand 11518 states and 13266 transitions. cyclomatic complexity: 1790 Second operand 26 states.
[2020-11-25 03:03:50,675 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:03:50,675 INFO  L93              Difference]: Finished difference Result 11864 states and 13740 transitions.
[2020-11-25 03:03:50,675 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 03:03:50,676 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11864 states and 13740 transitions.
[2020-11-25 03:03:50,703 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 03:03:50,731 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11864 states to 11864 states and 13740 transitions.
[2020-11-25 03:03:50,731 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2707
[2020-11-25 03:03:50,732 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2707
[2020-11-25 03:03:50,732 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11864 states and 13740 transitions.
[2020-11-25 03:03:50,739 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:03:50,739 INFO  L728         BuchiCegarLoop]: Abstraction has 11864 states and 13740 transitions.
[2020-11-25 03:03:50,745 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11864 states and 13740 transitions.
[2020-11-25 03:03:50,802 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11864 to 11542.
[2020-11-25 03:03:50,802 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11542 states.
[2020-11-25 03:03:50,818 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11542 states to 11542 states and 13284 transitions.
[2020-11-25 03:03:50,818 INFO  L751         BuchiCegarLoop]: Abstraction has 11542 states and 13284 transitions.
[2020-11-25 03:03:50,818 INFO  L631         BuchiCegarLoop]: Abstraction has 11542 states and 13284 transitions.
[2020-11-25 03:03:50,818 INFO  L445         BuchiCegarLoop]: ======== Iteration 34============
[2020-11-25 03:03:50,818 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11542 states and 13284 transitions.
[2020-11-25 03:03:50,829 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 03:03:50,829 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:03:50,829 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:03:50,831 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:03:50,831 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND TRUE   choice == 20
[L12210]              gas := gas - 21000;
[L12211]  COND TRUE   gas >= 0
[L12212]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12213]              assume msgvalue_MSG == 0;
[L12214]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6701]               __var_14 := null;
[L6702]   COND FALSE  !(!(spender_s711 != null))
[L6706]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6707]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6708]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6709]               assert { :EventEmitted "Approval_ERC20" } true;
[L6710]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12214]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false
[L8339]   CALL        call __var_67 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8339]   RET         call __var_67 := FreshRefGenerator__success();
[L8340]   COND FALSE  !(revert)
[L8343]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8344]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] := true;
[L8345]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == zerointRefArr();
[L8346]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1645] == __var_67;
[L8347]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8349]               idx_s1645 := 0;
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:03:50,836 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:03:50,836 INFO  L82        PathProgramCache]: Analyzing trace with hash 374061073, now seen corresponding path program 1 times
[2020-11-25 03:03:50,837 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:03:50,863 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:03:51,404 INFO  L134       CoverageAnalysis]: Checked inductivity of 1298 backedges. 3 proven. 199 refuted. 0 times theorem prover too weak. 1096 trivial. 0 not checked.
[2020-11-25 03:03:51,405 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:03:51,405 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [15] total 15
[2020-11-25 03:03:51,405 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:03:51,405 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 03:03:51,405 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=179, Unknown=0, NotChecked=0, Total=210
[2020-11-25 03:03:51,406 INFO  L87              Difference]: Start difference. First operand 11542 states and 13284 transitions. cyclomatic complexity: 1784 Second operand 15 states.
[2020-11-25 03:03:56,850 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:03:56,850 INFO  L93              Difference]: Finished difference Result 11806 states and 13632 transitions.
[2020-11-25 03:03:56,850 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 03:03:56,850 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11806 states and 13632 transitions.
[2020-11-25 03:03:56,875 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 03:03:56,900 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11806 states to 11806 states and 13632 transitions.
[2020-11-25 03:03:56,900 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2673
[2020-11-25 03:03:56,901 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2673
[2020-11-25 03:03:56,901 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11806 states and 13632 transitions.
[2020-11-25 03:03:56,908 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:03:56,908 INFO  L728         BuchiCegarLoop]: Abstraction has 11806 states and 13632 transitions.
[2020-11-25 03:03:56,914 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11806 states and 13632 transitions.
[2020-11-25 03:03:56,970 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11806 to 11522.
[2020-11-25 03:03:56,971 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11522 states.
[2020-11-25 03:03:56,987 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11522 states to 11522 states and 13294 transitions.
[2020-11-25 03:03:56,987 INFO  L751         BuchiCegarLoop]: Abstraction has 11522 states and 13294 transitions.
[2020-11-25 03:03:56,987 INFO  L631         BuchiCegarLoop]: Abstraction has 11522 states and 13294 transitions.
[2020-11-25 03:03:56,987 INFO  L445         BuchiCegarLoop]: ======== Iteration 35============
[2020-11-25 03:03:56,987 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11522 states and 13294 transitions.
[2020-11-25 03:03:56,998 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 03:03:56,998 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:03:56,998 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:03:57,000 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:03:57,000 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND TRUE   choice == 20
[L12210]              gas := gas - 21000;
[L12211]  COND TRUE   gas >= 0
[L12212]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12213]              assume msgvalue_MSG == 0;
[L12214]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6701]               __var_14 := null;
[L6702]   COND FALSE  !(!(spender_s711 != null))
[L6706]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6707]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6708]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6709]               assert { :EventEmitted "Approval_ERC20" } true;
[L6710]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12214]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND FALSE  !(choice == 6)
[L12304]  COND TRUE   choice == 5
[L12305]              gas := gas - 21000;
[L12306]  COND TRUE   gas >= 0
[L12307]              assume value_s1410 >= 0 && value_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12308]              assume releaseTime_s1410 >= 0 && releaseTime_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12309]              assume msgvalue_MSG == 0;
[L12310]  CALL        call __ret_0_lock := lock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3520]               havoc __exception;
[L3521]               revert := false;
[L3522]   COND FALSE  !(__exception)
[L3558]   CALL        call __ret_0_ := lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7845]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND FALSE  !(DType[this] == ONIT)
[L10842]  COND TRUE   DType[this] == ERC20Pausable
[L10843]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10843]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10844]  COND FALSE  !(revert)
[L10860]  COND FALSE  !(DType[this] == ONIT)
[L10865]  COND TRUE   DType[this] == ERC20Pausable
[L10866]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND FALSE  !(account_s293 == owner_Ownable[this])
[L5979]               __ret_0_ := false;
[L10866]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10867]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7845]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7846]   COND FALSE  !(revert)
[L7849]   COND FALSE  !(!(_balances_ERC20[this][holder_s1410] >= value_s1410))
[L7853]   CALL        call __var_49 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L8052]   CALL        call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8052]   RET         call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L8053]   COND FALSE  !(revert)
[L8056]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1527];
[L8057]               _balances_ERC20[this][holder_s1527] := __var_53;
[L8058]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1527];
[L8059]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] == false
[L8060]   CALL        call __var_54 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8060]   RET         call __var_54 := FreshRefGenerator__success();
[L8061]   COND FALSE  !(revert)
[L8064]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8065]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] := true;
[L8066]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == zerointRefArr();
[L8067]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1527] == __var_54;
[L8068]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8070]   CALL        call __var_56 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8070]   RET         call __var_56 := FreshRefGenerator__success();
[L8071]   COND FALSE  !(revert)
[L8074]               assume DType[__var_56] == ONIT.LockInfo;
[L8075]   CALL        call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5620]               _releaseTime_ONIT.LockInfo[this] := _releaseTime;
[L5621]               _amount_ONIT.LockInfo[this] := _amount;
[L8075]   RET         call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L8076]   COND FALSE  !(revert)
[L8079]               __var_55 := __var_56;
[L8080]               __var_58 := Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]];
[L8081]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]][__var_58] := __var_55;
[L8082]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] := __var_58 + 1;
[L8083]               assert { :EventEmitted "Lock_ONIT" } true;
[L8084]               __ret_0_ := true;
[L7853]   RET         call __var_49 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7854]   COND FALSE  !(revert)
[L7857]               __ret_0_ := true;
[L3558]   RET         call __ret_0_ := lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3559]               assume !revert && gas >= 0;
[L12310]  RET         call __ret_0_lock := lock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:03:57,006 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:03:57,006 INFO  L82        PathProgramCache]: Analyzing trace with hash -1775484838, now seen corresponding path program 1 times
[2020-11-25 03:03:57,007 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:03:57,035 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:03:57,373 INFO  L134       CoverageAnalysis]: Checked inductivity of 1353 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 1348 trivial. 0 not checked.
[2020-11-25 03:03:57,374 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:03:57,374 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 03:03:57,374 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:03:57,374 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 03:03:57,374 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 03:03:57,374 INFO  L87              Difference]: Start difference. First operand 11522 states and 13294 transitions. cyclomatic complexity: 1814 Second operand 7 states.
[2020-11-25 03:03:57,501 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:03:57,501 INFO  L93              Difference]: Finished difference Result 11622 states and 13418 transitions.
[2020-11-25 03:03:57,501 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 03:03:57,501 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11622 states and 13418 transitions.
[2020-11-25 03:03:57,524 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 03:03:57,549 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11622 states to 11534 states and 13326 transitions.
[2020-11-25 03:03:57,549 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2481
[2020-11-25 03:03:57,550 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2481
[2020-11-25 03:03:57,550 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11534 states and 13326 transitions.
[2020-11-25 03:03:57,557 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:03:57,557 INFO  L728         BuchiCegarLoop]: Abstraction has 11534 states and 13326 transitions.
[2020-11-25 03:03:57,563 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11534 states and 13326 transitions.
[2020-11-25 03:03:57,617 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11534 to 11534.
[2020-11-25 03:03:57,617 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11534 states.
[2020-11-25 03:03:57,633 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11534 states to 11534 states and 13326 transitions.
[2020-11-25 03:03:57,633 INFO  L751         BuchiCegarLoop]: Abstraction has 11534 states and 13326 transitions.
[2020-11-25 03:03:57,633 INFO  L631         BuchiCegarLoop]: Abstraction has 11534 states and 13326 transitions.
[2020-11-25 03:03:57,633 INFO  L445         BuchiCegarLoop]: ======== Iteration 36============
[2020-11-25 03:03:57,633 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11534 states and 13326 transitions.
[2020-11-25 03:03:57,644 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 03:03:57,644 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:03:57,644 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:03:57,646 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:03:57,646 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND TRUE   choice == 20
[L12210]              gas := gas - 21000;
[L12211]  COND TRUE   gas >= 0
[L12212]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12213]              assume msgvalue_MSG == 0;
[L12214]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6701]               __var_14 := null;
[L6702]   COND FALSE  !(!(spender_s711 != null))
[L6706]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6707]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6708]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6709]               assert { :EventEmitted "Approval_ERC20" } true;
[L6710]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12214]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND FALSE  !(choice == 6)
[L12304]  COND TRUE   choice == 5
[L12305]              gas := gas - 21000;
[L12306]  COND TRUE   gas >= 0
[L12307]              assume value_s1410 >= 0 && value_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12308]              assume releaseTime_s1410 >= 0 && releaseTime_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12309]              assume msgvalue_MSG == 0;
[L12310]  CALL        call __ret_0_lock := lock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3520]               havoc __exception;
[L3521]               revert := false;
[L3522]   COND FALSE  !(__exception)
[L3558]   CALL        call __ret_0_ := lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7845]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND FALSE  !(DType[this] == ONIT)
[L10842]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10847]  COND FALSE  !(DType[this] == Pausable)
[L10852]  COND TRUE   DType[this] == PauserRole
[L10853]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10853]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10854]  COND FALSE  !(revert)
[L10860]  COND FALSE  !(DType[this] == ONIT)
[L10865]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10870]  COND TRUE   DType[this] == Pausable
[L10871]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND FALSE  !(account_s293 == owner_Ownable[this])
[L5979]               __ret_0_ := false;
[L10871]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10872]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7845]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7846]   COND FALSE  !(revert)
[L7849]   COND FALSE  !(!(_balances_ERC20[this][holder_s1410] >= value_s1410))
[L7853]   CALL        call __var_49 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L8052]   CALL        call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8052]   RET         call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L8053]   COND FALSE  !(revert)
[L8056]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1527];
[L8057]               _balances_ERC20[this][holder_s1527] := __var_53;
[L8058]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1527];
[L8059]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] == false
[L8060]   CALL        call __var_54 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8060]   RET         call __var_54 := FreshRefGenerator__success();
[L8061]   COND FALSE  !(revert)
[L8064]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8065]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] := true;
[L8066]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == zerointRefArr();
[L8067]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1527] == __var_54;
[L8068]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8070]   CALL        call __var_56 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8070]   RET         call __var_56 := FreshRefGenerator__success();
[L8071]   COND FALSE  !(revert)
[L8074]               assume DType[__var_56] == ONIT.LockInfo;
[L8075]   CALL        call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5620]               _releaseTime_ONIT.LockInfo[this] := _releaseTime;
[L5621]               _amount_ONIT.LockInfo[this] := _amount;
[L8075]   RET         call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L8076]   COND FALSE  !(revert)
[L8079]               __var_55 := __var_56;
[L8080]               __var_58 := Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]];
[L8081]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]][__var_58] := __var_55;
[L8082]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] := __var_58 + 1;
[L8083]               assert { :EventEmitted "Lock_ONIT" } true;
[L8084]               __ret_0_ := true;
[L7853]   RET         call __var_49 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7854]   COND FALSE  !(revert)
[L7857]               __ret_0_ := true;
[L3558]   RET         call __ret_0_ := lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3559]               assume !revert && gas >= 0;
[L12310]  RET         call __ret_0_lock := lock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:03:57,651 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:03:57,651 INFO  L82        PathProgramCache]: Analyzing trace with hash -1610330875, now seen corresponding path program 1 times
[2020-11-25 03:03:57,652 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:03:57,679 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:03:58,001 INFO  L134       CoverageAnalysis]: Checked inductivity of 1353 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 1348 trivial. 0 not checked.
[2020-11-25 03:03:58,002 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:03:58,002 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:03:58,002 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:03:58,002 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:03:58,002 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:03:58,002 INFO  L87              Difference]: Start difference. First operand 11534 states and 13326 transitions. cyclomatic complexity: 1834 Second operand 3 states.
[2020-11-25 03:03:58,062 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:03:58,062 INFO  L93              Difference]: Finished difference Result 11558 states and 13378 transitions.
[2020-11-25 03:03:58,062 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:03:58,062 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11558 states and 13378 transitions.
[2020-11-25 03:03:58,084 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 03:03:58,109 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11558 states to 11558 states and 13378 transitions.
[2020-11-25 03:03:58,109 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2481
[2020-11-25 03:03:58,110 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2481
[2020-11-25 03:03:58,110 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11558 states and 13378 transitions.
[2020-11-25 03:03:58,117 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:03:58,117 INFO  L728         BuchiCegarLoop]: Abstraction has 11558 states and 13378 transitions.
[2020-11-25 03:03:58,123 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11558 states and 13378 transitions.
[2020-11-25 03:03:58,177 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11558 to 11546.
[2020-11-25 03:03:58,177 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11546 states.
[2020-11-25 03:03:58,193 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11546 states to 11546 states and 13338 transitions.
[2020-11-25 03:03:58,193 INFO  L751         BuchiCegarLoop]: Abstraction has 11546 states and 13338 transitions.
[2020-11-25 03:03:58,193 INFO  L631         BuchiCegarLoop]: Abstraction has 11546 states and 13338 transitions.
[2020-11-25 03:03:58,193 INFO  L445         BuchiCegarLoop]: ======== Iteration 37============
[2020-11-25 03:03:58,193 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11546 states and 13338 transitions.
[2020-11-25 03:03:58,204 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 03:03:58,204 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:03:58,204 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:03:58,206 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:03:58,206 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND TRUE   choice == 20
[L12210]              gas := gas - 21000;
[L12211]  COND TRUE   gas >= 0
[L12212]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12213]              assume msgvalue_MSG == 0;
[L12214]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6701]               __var_14 := null;
[L6702]   COND FALSE  !(!(spender_s711 != null))
[L6706]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6707]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6708]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6709]               assert { :EventEmitted "Approval_ERC20" } true;
[L6710]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12214]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND FALSE  !(choice == 6)
[L12304]  COND TRUE   choice == 5
[L12305]              gas := gas - 21000;
[L12306]  COND TRUE   gas >= 0
[L12307]              assume value_s1410 >= 0 && value_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12308]              assume releaseTime_s1410 >= 0 && releaseTime_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12309]              assume msgvalue_MSG == 0;
[L12310]  CALL        call __ret_0_lock := lock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3520]               havoc __exception;
[L3521]               revert := false;
[L3522]   COND FALSE  !(__exception)
[L3558]   CALL        call __ret_0_ := lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7845]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND FALSE  !(DType[this] == ONIT)
[L10842]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10847]  COND FALSE  !(DType[this] == Pausable)
[L10852]  COND TRUE   DType[this] == PauserRole
[L10853]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10853]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10854]  COND FALSE  !(revert)
[L10860]  COND FALSE  !(DType[this] == ONIT)
[L10865]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10870]  COND FALSE  !(DType[this] == Pausable)
[L10875]  COND TRUE   DType[this] == PauserRole
[L10876]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND FALSE  !(account_s293 == owner_Ownable[this])
[L5979]               __ret_0_ := false;
[L10876]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10877]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7845]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7846]   COND FALSE  !(revert)
[L7849]   COND FALSE  !(!(_balances_ERC20[this][holder_s1410] >= value_s1410))
[L7853]   CALL        call __var_49 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L8052]   CALL        call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8052]   RET         call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L8053]   COND FALSE  !(revert)
[L8056]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1527];
[L8057]               _balances_ERC20[this][holder_s1527] := __var_53;
[L8058]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1527];
[L8059]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] == false
[L8060]   CALL        call __var_54 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8060]   RET         call __var_54 := FreshRefGenerator__success();
[L8061]   COND FALSE  !(revert)
[L8064]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8065]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] := true;
[L8066]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == zerointRefArr();
[L8067]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1527] == __var_54;
[L8068]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8070]   CALL        call __var_56 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8070]   RET         call __var_56 := FreshRefGenerator__success();
[L8071]   COND FALSE  !(revert)
[L8074]               assume DType[__var_56] == ONIT.LockInfo;
[L8075]   CALL        call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5620]               _releaseTime_ONIT.LockInfo[this] := _releaseTime;
[L5621]               _amount_ONIT.LockInfo[this] := _amount;
[L8075]   RET         call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L8076]   COND FALSE  !(revert)
[L8079]               __var_55 := __var_56;
[L8080]               __var_58 := Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]];
[L8081]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]][__var_58] := __var_55;
[L8082]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] := __var_58 + 1;
[L8083]               assert { :EventEmitted "Lock_ONIT" } true;
[L8084]               __ret_0_ := true;
[L7853]   RET         call __var_49 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7854]   COND FALSE  !(revert)
[L7857]               __ret_0_ := true;
[L3558]   RET         call __ret_0_ := lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3559]               assume !revert && gas >= 0;
[L12310]  RET         call __ret_0_lock := lock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:03:58,211 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:03:58,211 INFO  L82        PathProgramCache]: Analyzing trace with hash -40948273, now seen corresponding path program 1 times
[2020-11-25 03:03:58,212 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:03:58,239 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:03:58,618 INFO  L134       CoverageAnalysis]: Checked inductivity of 1353 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 1348 trivial. 0 not checked.
[2020-11-25 03:03:58,619 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:03:58,619 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 03:03:58,619 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:03:58,619 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 03:03:58,619 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 03:03:58,620 INFO  L87              Difference]: Start difference. First operand 11546 states and 13338 transitions. cyclomatic complexity: 1834 Second operand 7 states.
[2020-11-25 03:03:58,750 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:03:58,750 INFO  L93              Difference]: Finished difference Result 11646 states and 13466 transitions.
[2020-11-25 03:03:58,750 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 03:03:58,750 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11646 states and 13466 transitions.
[2020-11-25 03:03:58,773 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 03:03:58,798 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11646 states to 11558 states and 13374 transitions.
[2020-11-25 03:03:58,798 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2481
[2020-11-25 03:03:58,799 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2481
[2020-11-25 03:03:58,799 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11558 states and 13374 transitions.
[2020-11-25 03:03:58,806 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:03:58,806 INFO  L728         BuchiCegarLoop]: Abstraction has 11558 states and 13374 transitions.
[2020-11-25 03:03:58,812 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11558 states and 13374 transitions.
[2020-11-25 03:03:58,866 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11558 to 11546.
[2020-11-25 03:03:58,866 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11546 states.
[2020-11-25 03:03:58,882 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11546 states to 11546 states and 13338 transitions.
[2020-11-25 03:03:58,882 INFO  L751         BuchiCegarLoop]: Abstraction has 11546 states and 13338 transitions.
[2020-11-25 03:03:58,882 INFO  L631         BuchiCegarLoop]: Abstraction has 11546 states and 13338 transitions.
[2020-11-25 03:03:58,882 INFO  L445         BuchiCegarLoop]: ======== Iteration 38============
[2020-11-25 03:03:58,882 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11546 states and 13338 transitions.
[2020-11-25 03:03:58,893 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 03:03:58,893 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:03:58,894 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:03:58,895 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:03:58,895 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND TRUE   choice == 20
[L12210]              gas := gas - 21000;
[L12211]  COND TRUE   gas >= 0
[L12212]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12213]              assume msgvalue_MSG == 0;
[L12214]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6701]               __var_14 := null;
[L6702]   COND FALSE  !(!(spender_s711 != null))
[L6706]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6707]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6708]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6709]               assert { :EventEmitted "Approval_ERC20" } true;
[L6710]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12214]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND FALSE  !(choice == 6)
[L12304]  COND TRUE   choice == 5
[L12305]              gas := gas - 21000;
[L12306]  COND TRUE   gas >= 0
[L12307]              assume value_s1410 >= 0 && value_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12308]              assume releaseTime_s1410 >= 0 && releaseTime_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12309]              assume msgvalue_MSG == 0;
[L12310]  CALL        call __ret_0_lock := lock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3520]               havoc __exception;
[L3521]               revert := false;
[L3522]   COND FALSE  !(__exception)
[L3558]   CALL        call __ret_0_ := lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7845]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND TRUE   DType[this] == ONIT
[L10861]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND FALSE  !(account_s293 == owner_Ownable[this])
[L5979]               __ret_0_ := false;
[L10861]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10862]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7845]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7846]   COND FALSE  !(revert)
[L7849]   COND FALSE  !(!(_balances_ERC20[this][holder_s1410] >= value_s1410))
[L7853]   CALL        call __var_49 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L8052]   CALL        call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8052]   RET         call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L8053]   COND FALSE  !(revert)
[L8056]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1527];
[L8057]               _balances_ERC20[this][holder_s1527] := __var_53;
[L8058]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1527];
[L8059]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] == false
[L8060]   CALL        call __var_54 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8060]   RET         call __var_54 := FreshRefGenerator__success();
[L8061]   COND FALSE  !(revert)
[L8064]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8065]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] := true;
[L8066]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == zerointRefArr();
[L8067]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1527] == __var_54;
[L8068]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8070]   CALL        call __var_56 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8070]   RET         call __var_56 := FreshRefGenerator__success();
[L8071]   COND FALSE  !(revert)
[L8074]               assume DType[__var_56] == ONIT.LockInfo;
[L8075]   CALL        call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5620]               _releaseTime_ONIT.LockInfo[this] := _releaseTime;
[L5621]               _amount_ONIT.LockInfo[this] := _amount;
[L8075]   RET         call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L8076]   COND FALSE  !(revert)
[L8079]               __var_55 := __var_56;
[L8080]               __var_58 := Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]];
[L8081]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]][__var_58] := __var_55;
[L8082]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] := __var_58 + 1;
[L8083]               assert { :EventEmitted "Lock_ONIT" } true;
[L8084]               __ret_0_ := true;
[L7853]   RET         call __var_49 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7854]   COND FALSE  !(revert)
[L7857]               __ret_0_ := true;
[L3558]   RET         call __ret_0_ := lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3559]               assume !revert && gas >= 0;
[L12310]  RET         call __ret_0_lock := lock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:03:58,901 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:03:58,901 INFO  L82        PathProgramCache]: Analyzing trace with hash 2125030525, now seen corresponding path program 1 times
[2020-11-25 03:03:58,901 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:03:59,056 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:03:59,207 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:03:59,391 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:03:59,392 INFO  L82        PathProgramCache]: Analyzing trace with hash 1432975198, now seen corresponding path program 1 times
[2020-11-25 03:03:59,392 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:03:59,408 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:03:59,425 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:03:59,448 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:03:59,449 INFO  L82        PathProgramCache]: Analyzing trace with hash -1886576678, now seen corresponding path program 1 times
[2020-11-25 03:03:59,449 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:03:59,524 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:04:01,177 INFO  L134       CoverageAnalysis]: Checked inductivity of 1568 backedges. 207 proven. 81 refuted. 0 times theorem prover too weak. 1280 trivial. 0 not checked.
[2020-11-25 03:04:01,177 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:04:01,178 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [37] total 37
[2020-11-25 03:04:01,178 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 38 interpolants.
[2020-11-25 03:04:01,179 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=138, Invalid=1268, Unknown=0, NotChecked=0, Total=1406
[2020-11-25 03:04:01,179 INFO  L87              Difference]: Start difference. First operand 11546 states and 13338 transitions. cyclomatic complexity: 1834 Second operand 38 states.
[2020-11-25 03:04:23,628 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:04:23,628 INFO  L93              Difference]: Finished difference Result 11888 states and 13923 transitions.
[2020-11-25 03:04:23,628 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 29 states. 
[2020-11-25 03:04:23,628 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11888 states and 13923 transitions.
[2020-11-25 03:04:23,666 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 18
[2020-11-25 03:04:23,701 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11888 states to 11888 states and 13923 transitions.
[2020-11-25 03:04:23,701 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2693
[2020-11-25 03:04:23,702 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2693
[2020-11-25 03:04:23,702 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11888 states and 13923 transitions.
[2020-11-25 03:04:23,711 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:04:23,711 INFO  L728         BuchiCegarLoop]: Abstraction has 11888 states and 13923 transitions.
[2020-11-25 03:04:23,719 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11888 states and 13923 transitions.
[2020-11-25 03:04:23,786 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11888 to 11688.
[2020-11-25 03:04:23,786 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11688 states.
[2020-11-25 03:04:23,804 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11688 states to 11688 states and 13625 transitions.
[2020-11-25 03:04:23,804 INFO  L751         BuchiCegarLoop]: Abstraction has 11688 states and 13625 transitions.
[2020-11-25 03:04:23,804 INFO  L631         BuchiCegarLoop]: Abstraction has 11688 states and 13625 transitions.
[2020-11-25 03:04:23,804 INFO  L445         BuchiCegarLoop]: ======== Iteration 39============
[2020-11-25 03:04:23,804 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11688 states and 13625 transitions.
[2020-11-25 03:04:23,817 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 18
[2020-11-25 03:04:23,817 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:04:23,817 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:04:23,819 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:04:23,819 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND TRUE   choice == 20
[L12210]              gas := gas - 21000;
[L12211]  COND TRUE   gas >= 0
[L12212]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12213]              assume msgvalue_MSG == 0;
[L12214]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6701]               __var_14 := null;
[L6702]   COND FALSE  !(!(spender_s711 != null))
[L6706]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6707]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6708]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6709]               assert { :EventEmitted "Approval_ERC20" } true;
[L6710]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12214]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND FALSE  !(choice == 6)
[L12304]  COND FALSE  !(choice == 5)
[L12312]  COND FALSE  !(choice == 4)
[L12320]  COND TRUE   choice == 3
[L12321]              gas := gas - 21000;
[L12322]  COND TRUE   gas >= 0
[L12323]              assume idx_s1468 >= 0 && idx_s1468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12324]              assume msgvalue_MSG == 0;
[L12325]  CALL        call __ret_0_unlock := unlock~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L3694]               havoc __exception;
[L3695]               revert := false;
[L3696]   COND FALSE  !(__exception)
[L3732]   CALL        call __ret_0_ := unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L7942]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND FALSE  !(DType[this] == ONIT)
[L10842]  COND TRUE   DType[this] == ERC20Pausable
[L10843]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10843]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10844]  COND FALSE  !(revert)
[L10860]  COND FALSE  !(DType[this] == ONIT)
[L10865]  COND TRUE   DType[this] == ERC20Pausable
[L10866]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND FALSE  !(account_s293 == owner_Ownable[this])
[L5979]               __ret_0_ := false;
[L10866]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10867]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7942]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7943]   COND FALSE  !(revert)
[L7946]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1468] == false
[L7947]   CALL        call __var_51 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7947]   RET         call __var_51 := FreshRefGenerator__success();
[L7948]   COND FALSE  !(revert)
[L7951]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1468]] == 0;
[L7952]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1468] := true;
[L7953]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1468]] == zerointRefArr();
[L7954]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1468] == __var_51;
[L7955]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1468]] == 0;
[L7957]   COND FALSE  !(!(Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1468]] > idx_s1468))
[L7961]   CALL        call __var_52 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L7961]   RET         call __var_52 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L7962]   COND FALSE  !(revert)
[L7965]               __ret_0_ := true;
[L3732]   RET         call __ret_0_ := unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L3733]               assume !revert && gas >= 0;
[L12325]  RET         call __ret_0_unlock := unlock~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:04:23,824 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:04:23,824 INFO  L82        PathProgramCache]: Analyzing trace with hash -428622758, now seen corresponding path program 1 times
[2020-11-25 03:04:23,825 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:04:23,853 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:04:24,193 INFO  L134       CoverageAnalysis]: Checked inductivity of 1321 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 1316 trivial. 0 not checked.
[2020-11-25 03:04:24,193 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:04:24,193 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 03:04:24,194 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:04:24,194 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 03:04:24,194 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 03:04:24,194 INFO  L87              Difference]: Start difference. First operand 11688 states and 13625 transitions. cyclomatic complexity: 1987 Second operand 7 states.
[2020-11-25 03:04:24,324 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:04:24,324 INFO  L93              Difference]: Finished difference Result 11828 states and 13797 transitions.
[2020-11-25 03:04:24,324 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 03:04:24,324 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11828 states and 13797 transitions.
[2020-11-25 03:04:24,349 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 18
[2020-11-25 03:04:24,377 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11828 states to 11700 states and 13657 transitions.
[2020-11-25 03:04:24,377 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2577
[2020-11-25 03:04:24,378 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2577
[2020-11-25 03:04:24,378 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11700 states and 13657 transitions.
[2020-11-25 03:04:24,385 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:04:24,386 INFO  L728         BuchiCegarLoop]: Abstraction has 11700 states and 13657 transitions.
[2020-11-25 03:04:24,392 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11700 states and 13657 transitions.
[2020-11-25 03:04:24,451 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11700 to 11700.
[2020-11-25 03:04:24,451 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11700 states.
[2020-11-25 03:04:24,468 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11700 states to 11700 states and 13657 transitions.
[2020-11-25 03:04:24,469 INFO  L751         BuchiCegarLoop]: Abstraction has 11700 states and 13657 transitions.
[2020-11-25 03:04:24,469 INFO  L631         BuchiCegarLoop]: Abstraction has 11700 states and 13657 transitions.
[2020-11-25 03:04:24,469 INFO  L445         BuchiCegarLoop]: ======== Iteration 40============
[2020-11-25 03:04:24,469 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11700 states and 13657 transitions.
[2020-11-25 03:04:24,480 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 18
[2020-11-25 03:04:24,480 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:04:24,480 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:04:24,482 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:04:24,482 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND TRUE   choice == 20
[L12210]              gas := gas - 21000;
[L12211]  COND TRUE   gas >= 0
[L12212]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12213]              assume msgvalue_MSG == 0;
[L12214]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6701]               __var_14 := null;
[L6702]   COND FALSE  !(!(spender_s711 != null))
[L6706]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6707]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6708]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6709]               assert { :EventEmitted "Approval_ERC20" } true;
[L6710]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12214]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND FALSE  !(choice == 6)
[L12304]  COND FALSE  !(choice == 5)
[L12312]  COND FALSE  !(choice == 4)
[L12320]  COND TRUE   choice == 3
[L12321]              gas := gas - 21000;
[L12322]  COND TRUE   gas >= 0
[L12323]              assume idx_s1468 >= 0 && idx_s1468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12324]              assume msgvalue_MSG == 0;
[L12325]  CALL        call __ret_0_unlock := unlock~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L3694]               havoc __exception;
[L3695]               revert := false;
[L3696]   COND FALSE  !(__exception)
[L3732]   CALL        call __ret_0_ := unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L7942]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND TRUE   DType[this] == ONIT
[L10861]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND FALSE  !(account_s293 == owner_Ownable[this])
[L5979]               __ret_0_ := false;
[L10861]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10862]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7942]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7943]   COND FALSE  !(revert)
[L7946]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1468] == false
[L7947]   CALL        call __var_51 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7947]   RET         call __var_51 := FreshRefGenerator__success();
[L7948]   COND FALSE  !(revert)
[L7951]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1468]] == 0;
[L7952]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1468] := true;
[L7953]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1468]] == zerointRefArr();
[L7954]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1468] == __var_51;
[L7955]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1468]] == 0;
[L7957]   COND FALSE  !(!(Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1468]] > idx_s1468))
[L7961]   CALL        call __var_52 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L7961]   RET         call __var_52 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L7962]   COND FALSE  !(revert)
[L7965]               __ret_0_ := true;
[L3732]   RET         call __ret_0_ := unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L3733]               assume !revert && gas >= 0;
[L12325]  RET         call __ret_0_unlock := unlock~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:04:24,486 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:04:24,487 INFO  L82        PathProgramCache]: Analyzing trace with hash -968335683, now seen corresponding path program 1 times
[2020-11-25 03:04:24,487 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:04:24,515 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:04:24,873 INFO  L134       CoverageAnalysis]: Checked inductivity of 1321 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 1316 trivial. 0 not checked.
[2020-11-25 03:04:24,873 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:04:24,873 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 03:04:24,873 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:04:24,873 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 03:04:24,874 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=29, Unknown=0, NotChecked=0, Total=42
[2020-11-25 03:04:24,874 INFO  L87              Difference]: Start difference. First operand 11700 states and 13657 transitions. cyclomatic complexity: 2007 Second operand 7 states.
[2020-11-25 03:04:26,679 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:04:26,679 INFO  L93              Difference]: Finished difference Result 11836 states and 14182 transitions.
[2020-11-25 03:04:26,679 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 03:04:26,679 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11836 states and 14182 transitions.
[2020-11-25 03:04:26,708 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 18
[2020-11-25 03:04:26,741 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11836 states to 11792 states and 14130 transitions.
[2020-11-25 03:04:26,741 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2601
[2020-11-25 03:04:26,742 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2601
[2020-11-25 03:04:26,742 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11792 states and 14130 transitions.
[2020-11-25 03:04:26,751 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:04:26,752 INFO  L728         BuchiCegarLoop]: Abstraction has 11792 states and 14130 transitions.
[2020-11-25 03:04:26,758 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11792 states and 14130 transitions.
[2020-11-25 03:04:26,819 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11792 to 11640.
[2020-11-25 03:04:26,819 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11640 states.
[2020-11-25 03:04:26,836 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11640 states to 11640 states and 13587 transitions.
[2020-11-25 03:04:26,836 INFO  L751         BuchiCegarLoop]: Abstraction has 11640 states and 13587 transitions.
[2020-11-25 03:04:26,836 INFO  L631         BuchiCegarLoop]: Abstraction has 11640 states and 13587 transitions.
[2020-11-25 03:04:26,836 INFO  L445         BuchiCegarLoop]: ======== Iteration 41============
[2020-11-25 03:04:26,836 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11640 states and 13587 transitions.
[2020-11-25 03:04:26,847 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 18
[2020-11-25 03:04:26,848 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:04:26,848 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:04:26,850 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:04:26,850 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND TRUE   choice == 20
[L12210]              gas := gas - 21000;
[L12211]  COND TRUE   gas >= 0
[L12212]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12213]              assume msgvalue_MSG == 0;
[L12214]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6701]               __var_14 := null;
[L6702]   COND FALSE  !(!(spender_s711 != null))
[L6706]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6707]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6708]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6709]               assert { :EventEmitted "Approval_ERC20" } true;
[L6710]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12214]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND FALSE  !(choice == 6)
[L12304]  COND FALSE  !(choice == 5)
[L12312]  COND TRUE   choice == 4
[L12313]              gas := gas - 21000;
[L12314]  COND TRUE   gas >= 0
[L12315]              assume value_s1439 >= 0 && value_s1439 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12316]              assume releaseTime_s1439 >= 0 && releaseTime_s1439 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12317]              assume msgvalue_MSG == 0;
[L12318]  CALL        call __ret_0_transferWithLock := transferWithLock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L3608]               havoc __exception;
[L3609]               revert := false;
[L3610]   COND FALSE  !(__exception)
[L3646]   CALL        call __ret_0_ := transferWithLock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L7887]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND FALSE  !(DType[this] == ONIT)
[L10842]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10847]  COND TRUE   DType[this] == Pausable
[L10848]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10848]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10849]  COND FALSE  !(revert)
[L10860]  COND FALSE  !(DType[this] == ONIT)
[L10865]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10870]  COND TRUE   DType[this] == Pausable
[L10871]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND FALSE  !(account_s293 == owner_Ownable[this])
[L5979]               __ret_0_ := false;
[L10871]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10872]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7887]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7888]   COND FALSE  !(revert)
[L7891]   COND TRUE   DType[this] == ONIT
[L7892]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, holder_s1439, value_s1439);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7892]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, holder_s1439, value_s1439);
[L7893]   COND FALSE  !(revert)
[L7899]   CALL        call __var_50 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L8052]   CALL        call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8052]   RET         call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L8053]   COND FALSE  !(revert)
[L8056]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1527];
[L8057]               _balances_ERC20[this][holder_s1527] := __var_53;
[L8058]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1527];
[L8059]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] == false
[L8060]   CALL        call __var_54 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8060]   RET         call __var_54 := FreshRefGenerator__success();
[L8061]   COND FALSE  !(revert)
[L8064]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8065]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] := true;
[L8066]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == zerointRefArr();
[L8067]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1527] == __var_54;
[L8068]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8070]   CALL        call __var_56 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8070]   RET         call __var_56 := FreshRefGenerator__success();
[L8071]   COND FALSE  !(revert)
[L8074]               assume DType[__var_56] == ONIT.LockInfo;
[L8075]   CALL        call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5620]               _releaseTime_ONIT.LockInfo[this] := _releaseTime;
[L5621]               _amount_ONIT.LockInfo[this] := _amount;
[L8075]   RET         call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L8076]   COND FALSE  !(revert)
[L8079]               __var_55 := __var_56;
[L8080]               __var_58 := Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]];
[L8081]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]][__var_58] := __var_55;
[L8082]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] := __var_58 + 1;
[L8083]               assert { :EventEmitted "Lock_ONIT" } true;
[L8084]               __ret_0_ := true;
[L7899]   RET         call __var_50 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L7900]   COND FALSE  !(revert)
[L7903]               __ret_0_ := true;
[L3646]   RET         call __ret_0_ := transferWithLock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L3647]               assume !revert && gas >= 0;
[L12318]  RET         call __ret_0_transferWithLock := transferWithLock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:04:26,855 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:04:26,855 INFO  L82        PathProgramCache]: Analyzing trace with hash -1851532618, now seen corresponding path program 1 times
[2020-11-25 03:04:26,856 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:04:26,885 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:04:27,242 INFO  L134       CoverageAnalysis]: Checked inductivity of 1368 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 1363 trivial. 0 not checked.
[2020-11-25 03:04:27,242 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:04:27,242 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 03:04:27,242 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:04:27,243 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 03:04:27,243 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 03:04:27,243 INFO  L87              Difference]: Start difference. First operand 11640 states and 13587 transitions. cyclomatic complexity: 1997 Second operand 7 states.
[2020-11-25 03:04:27,370 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:04:27,370 INFO  L93              Difference]: Finished difference Result 11664 states and 13627 transitions.
[2020-11-25 03:04:27,370 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 03:04:27,370 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11664 states and 13627 transitions.
[2020-11-25 03:04:27,395 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 18
[2020-11-25 03:04:27,422 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11664 states to 11652 states and 13615 transitions.
[2020-11-25 03:04:27,422 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2577
[2020-11-25 03:04:27,423 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2577
[2020-11-25 03:04:27,423 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11652 states and 13615 transitions.
[2020-11-25 03:04:27,431 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:04:27,431 INFO  L728         BuchiCegarLoop]: Abstraction has 11652 states and 13615 transitions.
[2020-11-25 03:04:27,437 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11652 states and 13615 transitions.
[2020-11-25 03:04:27,494 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11652 to 11652.
[2020-11-25 03:04:27,494 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11652 states.
[2020-11-25 03:04:27,511 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11652 states to 11652 states and 13615 transitions.
[2020-11-25 03:04:27,511 INFO  L751         BuchiCegarLoop]: Abstraction has 11652 states and 13615 transitions.
[2020-11-25 03:04:27,511 INFO  L631         BuchiCegarLoop]: Abstraction has 11652 states and 13615 transitions.
[2020-11-25 03:04:27,511 INFO  L445         BuchiCegarLoop]: ======== Iteration 42============
[2020-11-25 03:04:27,511 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11652 states and 13615 transitions.
[2020-11-25 03:04:27,522 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 18
[2020-11-25 03:04:27,522 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:04:27,522 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:04:27,524 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:04:27,525 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND TRUE   choice == 20
[L12210]              gas := gas - 21000;
[L12211]  COND TRUE   gas >= 0
[L12212]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12213]              assume msgvalue_MSG == 0;
[L12214]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6701]               __var_14 := null;
[L6702]   COND FALSE  !(!(spender_s711 != null))
[L6706]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6707]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6708]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6709]               assert { :EventEmitted "Approval_ERC20" } true;
[L6710]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12214]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND FALSE  !(choice == 6)
[L12304]  COND FALSE  !(choice == 5)
[L12312]  COND TRUE   choice == 4
[L12313]              gas := gas - 21000;
[L12314]  COND TRUE   gas >= 0
[L12315]              assume value_s1439 >= 0 && value_s1439 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12316]              assume releaseTime_s1439 >= 0 && releaseTime_s1439 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12317]              assume msgvalue_MSG == 0;
[L12318]  CALL        call __ret_0_transferWithLock := transferWithLock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L3608]               havoc __exception;
[L3609]               revert := false;
[L3610]   COND FALSE  !(__exception)
[L3646]   CALL        call __ret_0_ := transferWithLock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L7887]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND FALSE  !(DType[this] == ONIT)
[L10842]  COND TRUE   DType[this] == ERC20Pausable
[L10843]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10843]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10844]  COND FALSE  !(revert)
[L10860]  COND FALSE  !(DType[this] == ONIT)
[L10865]  COND TRUE   DType[this] == ERC20Pausable
[L10866]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND FALSE  !(account_s293 == owner_Ownable[this])
[L5979]               __ret_0_ := false;
[L10866]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10867]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7887]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7888]   COND FALSE  !(revert)
[L7891]   COND TRUE   DType[this] == ONIT
[L7892]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, holder_s1439, value_s1439);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7892]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, holder_s1439, value_s1439);
[L7893]   COND FALSE  !(revert)
[L7899]   CALL        call __var_50 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L8052]   CALL        call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8052]   RET         call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L8053]   COND FALSE  !(revert)
[L8056]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1527];
[L8057]               _balances_ERC20[this][holder_s1527] := __var_53;
[L8058]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1527];
[L8059]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] == false
[L8060]   CALL        call __var_54 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8060]   RET         call __var_54 := FreshRefGenerator__success();
[L8061]   COND FALSE  !(revert)
[L8064]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8065]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] := true;
[L8066]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == zerointRefArr();
[L8067]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1527] == __var_54;
[L8068]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8070]   CALL        call __var_56 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8070]   RET         call __var_56 := FreshRefGenerator__success();
[L8071]   COND FALSE  !(revert)
[L8074]               assume DType[__var_56] == ONIT.LockInfo;
[L8075]   CALL        call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5620]               _releaseTime_ONIT.LockInfo[this] := _releaseTime;
[L5621]               _amount_ONIT.LockInfo[this] := _amount;
[L8075]   RET         call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L8076]   COND FALSE  !(revert)
[L8079]               __var_55 := __var_56;
[L8080]               __var_58 := Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]];
[L8081]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]][__var_58] := __var_55;
[L8082]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] := __var_58 + 1;
[L8083]               assert { :EventEmitted "Lock_ONIT" } true;
[L8084]               __ret_0_ := true;
[L7899]   RET         call __var_50 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L7900]   COND FALSE  !(revert)
[L7903]               __ret_0_ := true;
[L3646]   RET         call __ret_0_ := transferWithLock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L3647]               assume !revert && gas >= 0;
[L12318]  RET         call __ret_0_transferWithLock := transferWithLock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:04:27,530 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:04:27,530 INFO  L82        PathProgramCache]: Analyzing trace with hash -1759919339, now seen corresponding path program 1 times
[2020-11-25 03:04:27,531 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:04:27,559 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:04:27,915 INFO  L134       CoverageAnalysis]: Checked inductivity of 1368 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 1363 trivial. 0 not checked.
[2020-11-25 03:04:27,915 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:04:27,915 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 03:04:27,916 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:04:27,916 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 03:04:27,916 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 03:04:27,916 INFO  L87              Difference]: Start difference. First operand 11652 states and 13615 transitions. cyclomatic complexity: 2013 Second operand 7 states.
[2020-11-25 03:04:28,043 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:04:28,043 INFO  L93              Difference]: Finished difference Result 11664 states and 13623 transitions.
[2020-11-25 03:04:28,044 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 03:04:28,044 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11664 states and 13623 transitions.
[2020-11-25 03:04:28,070 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 18
[2020-11-25 03:04:28,099 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11664 states to 11652 states and 13611 transitions.
[2020-11-25 03:04:28,099 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2577
[2020-11-25 03:04:28,100 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2577
[2020-11-25 03:04:28,100 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11652 states and 13611 transitions.
[2020-11-25 03:04:28,108 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:04:28,108 INFO  L728         BuchiCegarLoop]: Abstraction has 11652 states and 13611 transitions.
[2020-11-25 03:04:28,114 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11652 states and 13611 transitions.
[2020-11-25 03:04:28,171 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11652 to 11652.
[2020-11-25 03:04:28,171 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11652 states.
[2020-11-25 03:04:28,188 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11652 states to 11652 states and 13611 transitions.
[2020-11-25 03:04:28,188 INFO  L751         BuchiCegarLoop]: Abstraction has 11652 states and 13611 transitions.
[2020-11-25 03:04:28,188 INFO  L631         BuchiCegarLoop]: Abstraction has 11652 states and 13611 transitions.
[2020-11-25 03:04:28,188 INFO  L445         BuchiCegarLoop]: ======== Iteration 43============
[2020-11-25 03:04:28,188 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11652 states and 13611 transitions.
[2020-11-25 03:04:28,199 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 18
[2020-11-25 03:04:28,199 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:04:28,199 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:04:28,201 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:04:28,201 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND TRUE   choice == 20
[L12210]              gas := gas - 21000;
[L12211]  COND TRUE   gas >= 0
[L12212]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12213]              assume msgvalue_MSG == 0;
[L12214]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6701]               __var_14 := null;
[L6702]   COND FALSE  !(!(spender_s711 != null))
[L6706]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6707]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6708]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6709]               assert { :EventEmitted "Approval_ERC20" } true;
[L6710]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12214]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND FALSE  !(choice == 6)
[L12304]  COND FALSE  !(choice == 5)
[L12312]  COND TRUE   choice == 4
[L12313]              gas := gas - 21000;
[L12314]  COND TRUE   gas >= 0
[L12315]              assume value_s1439 >= 0 && value_s1439 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12316]              assume releaseTime_s1439 >= 0 && releaseTime_s1439 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12317]              assume msgvalue_MSG == 0;
[L12318]  CALL        call __ret_0_transferWithLock := transferWithLock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L3608]               havoc __exception;
[L3609]               revert := false;
[L3610]   COND FALSE  !(__exception)
[L3646]   CALL        call __ret_0_ := transferWithLock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L7887]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND FALSE  !(DType[this] == ONIT)
[L10842]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10847]  COND FALSE  !(DType[this] == Pausable)
[L10852]  COND TRUE   DType[this] == PauserRole
[L10853]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10853]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10854]  COND FALSE  !(revert)
[L10860]  COND FALSE  !(DType[this] == ONIT)
[L10865]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10870]  COND FALSE  !(DType[this] == Pausable)
[L10875]  COND TRUE   DType[this] == PauserRole
[L10876]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND FALSE  !(account_s293 == owner_Ownable[this])
[L5979]               __ret_0_ := false;
[L10876]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10877]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7887]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7888]   COND FALSE  !(revert)
[L7891]   COND TRUE   DType[this] == ONIT
[L7892]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, holder_s1439, value_s1439);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7892]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, holder_s1439, value_s1439);
[L7893]   COND FALSE  !(revert)
[L7899]   CALL        call __var_50 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L8052]   CALL        call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8052]   RET         call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L8053]   COND FALSE  !(revert)
[L8056]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1527];
[L8057]               _balances_ERC20[this][holder_s1527] := __var_53;
[L8058]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1527];
[L8059]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] == false
[L8060]   CALL        call __var_54 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8060]   RET         call __var_54 := FreshRefGenerator__success();
[L8061]   COND FALSE  !(revert)
[L8064]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8065]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] := true;
[L8066]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == zerointRefArr();
[L8067]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1527] == __var_54;
[L8068]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8070]   CALL        call __var_56 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8070]   RET         call __var_56 := FreshRefGenerator__success();
[L8071]   COND FALSE  !(revert)
[L8074]               assume DType[__var_56] == ONIT.LockInfo;
[L8075]   CALL        call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5620]               _releaseTime_ONIT.LockInfo[this] := _releaseTime;
[L5621]               _amount_ONIT.LockInfo[this] := _amount;
[L8075]   RET         call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L8076]   COND FALSE  !(revert)
[L8079]               __var_55 := __var_56;
[L8080]               __var_58 := Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]];
[L8081]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]][__var_58] := __var_55;
[L8082]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] := __var_58 + 1;
[L8083]               assert { :EventEmitted "Lock_ONIT" } true;
[L8084]               __ret_0_ := true;
[L7899]   RET         call __var_50 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L7900]   COND FALSE  !(revert)
[L7903]               __ret_0_ := true;
[L3646]   RET         call __ret_0_ := transferWithLock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L3647]               assume !revert && gas >= 0;
[L12318]  RET         call __ret_0_transferWithLock := transferWithLock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:04:28,206 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:04:28,206 INFO  L82        PathProgramCache]: Analyzing trace with hash -99958464, now seen corresponding path program 1 times
[2020-11-25 03:04:28,206 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:04:28,234 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:04:28,627 INFO  L134       CoverageAnalysis]: Checked inductivity of 1368 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 1363 trivial. 0 not checked.
[2020-11-25 03:04:28,627 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:04:28,627 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 03:04:28,628 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:04:28,628 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 03:04:28,628 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 03:04:28,628 INFO  L87              Difference]: Start difference. First operand 11652 states and 13611 transitions. cyclomatic complexity: 2009 Second operand 7 states.
[2020-11-25 03:04:28,754 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:04:28,755 INFO  L93              Difference]: Finished difference Result 11664 states and 13619 transitions.
[2020-11-25 03:04:28,755 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 03:04:28,755 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11664 states and 13619 transitions.
[2020-11-25 03:04:28,779 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 18
[2020-11-25 03:04:28,806 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11664 states to 11652 states and 13607 transitions.
[2020-11-25 03:04:28,807 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2577
[2020-11-25 03:04:28,808 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2577
[2020-11-25 03:04:28,808 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11652 states and 13607 transitions.
[2020-11-25 03:04:28,816 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:04:28,816 INFO  L728         BuchiCegarLoop]: Abstraction has 11652 states and 13607 transitions.
[2020-11-25 03:04:28,822 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11652 states and 13607 transitions.
[2020-11-25 03:04:28,880 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11652 to 11640.
[2020-11-25 03:04:28,880 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11640 states.
[2020-11-25 03:04:28,897 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11640 states to 11640 states and 13575 transitions.
[2020-11-25 03:04:28,898 INFO  L751         BuchiCegarLoop]: Abstraction has 11640 states and 13575 transitions.
[2020-11-25 03:04:28,898 INFO  L631         BuchiCegarLoop]: Abstraction has 11640 states and 13575 transitions.
[2020-11-25 03:04:28,898 INFO  L445         BuchiCegarLoop]: ======== Iteration 44============
[2020-11-25 03:04:28,898 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11640 states and 13575 transitions.
[2020-11-25 03:04:28,909 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 18
[2020-11-25 03:04:28,909 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:04:28,909 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:04:28,911 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:04:28,911 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND TRUE   choice == 20
[L12210]              gas := gas - 21000;
[L12211]  COND TRUE   gas >= 0
[L12212]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12213]              assume msgvalue_MSG == 0;
[L12214]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6701]               __var_14 := null;
[L6702]   COND FALSE  !(!(spender_s711 != null))
[L6706]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6707]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6708]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6709]               assert { :EventEmitted "Approval_ERC20" } true;
[L6710]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12214]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND FALSE  !(choice == 6)
[L12304]  COND FALSE  !(choice == 5)
[L12312]  COND TRUE   choice == 4
[L12313]              gas := gas - 21000;
[L12314]  COND TRUE   gas >= 0
[L12315]              assume value_s1439 >= 0 && value_s1439 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12316]              assume releaseTime_s1439 >= 0 && releaseTime_s1439 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12317]              assume msgvalue_MSG == 0;
[L12318]  CALL        call __ret_0_transferWithLock := transferWithLock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L3608]               havoc __exception;
[L3609]               revert := false;
[L3610]   COND FALSE  !(__exception)
[L3646]   CALL        call __ret_0_ := transferWithLock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L7887]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND TRUE   DType[this] == ONIT
[L10861]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND FALSE  !(account_s293 == owner_Ownable[this])
[L5979]               __ret_0_ := false;
[L10861]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10862]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7887]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7888]   COND FALSE  !(revert)
[L7891]   COND TRUE   DType[this] == ONIT
[L7892]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, holder_s1439, value_s1439);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7892]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, holder_s1439, value_s1439);
[L7893]   COND FALSE  !(revert)
[L7899]   CALL        call __var_50 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L8052]   CALL        call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8052]   RET         call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L8053]   COND FALSE  !(revert)
[L8056]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1527];
[L8057]               _balances_ERC20[this][holder_s1527] := __var_53;
[L8058]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1527];
[L8059]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] == false
[L8060]   CALL        call __var_54 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8060]   RET         call __var_54 := FreshRefGenerator__success();
[L8061]   COND FALSE  !(revert)
[L8064]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8065]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] := true;
[L8066]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == zerointRefArr();
[L8067]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1527] == __var_54;
[L8068]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8070]   CALL        call __var_56 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8070]   RET         call __var_56 := FreshRefGenerator__success();
[L8071]   COND FALSE  !(revert)
[L8074]               assume DType[__var_56] == ONIT.LockInfo;
[L8075]   CALL        call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5620]               _releaseTime_ONIT.LockInfo[this] := _releaseTime;
[L5621]               _amount_ONIT.LockInfo[this] := _amount;
[L8075]   RET         call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L8076]   COND FALSE  !(revert)
[L8079]               __var_55 := __var_56;
[L8080]               __var_58 := Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]];
[L8081]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]][__var_58] := __var_55;
[L8082]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] := __var_58 + 1;
[L8083]               assert { :EventEmitted "Lock_ONIT" } true;
[L8084]               __ret_0_ := true;
[L7899]   RET         call __var_50 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L7900]   COND FALSE  !(revert)
[L7903]               __ret_0_ := true;
[L3646]   RET         call __ret_0_ := transferWithLock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L3647]               assume !revert && gas >= 0;
[L12318]  RET         call __ret_0_transferWithLock := transferWithLock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:04:28,916 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:04:28,916 INFO  L82        PathProgramCache]: Analyzing trace with hash -866686254, now seen corresponding path program 1 times
[2020-11-25 03:04:28,917 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:04:28,967 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:04:31,089 INFO  L134       CoverageAnalysis]: Checked inductivity of 1368 backedges. 102 proven. 213 refuted. 0 times theorem prover too weak. 1053 trivial. 0 not checked.
[2020-11-25 03:04:31,089 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:04:31,089 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [70] total 70
[2020-11-25 03:04:31,089 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:04:31,090 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 71 interpolants.
[2020-11-25 03:04:31,090 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=265, Invalid=4705, Unknown=0, NotChecked=0, Total=4970
[2020-11-25 03:04:31,090 INFO  L87              Difference]: Start difference. First operand 11640 states and 13575 transitions. cyclomatic complexity: 1985 Second operand 71 states.
[2020-11-25 03:05:06,242 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:05:06,243 INFO  L93              Difference]: Finished difference Result 12305 states and 15009 transitions.
[2020-11-25 03:05:06,243 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 75 states. 
[2020-11-25 03:05:06,243 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12305 states and 15009 transitions.
[2020-11-25 03:05:06,274 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 18
[2020-11-25 03:05:06,309 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12305 states to 12305 states and 15009 transitions.
[2020-11-25 03:05:06,309 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2747
[2020-11-25 03:05:06,310 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2747
[2020-11-25 03:05:06,310 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12305 states and 15009 transitions.
[2020-11-25 03:05:06,319 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:05:06,319 INFO  L728         BuchiCegarLoop]: Abstraction has 12305 states and 15009 transitions.
[2020-11-25 03:05:06,325 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12305 states and 15009 transitions.
[2020-11-25 03:05:06,390 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12305 to 11848.
[2020-11-25 03:05:06,390 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11848 states.
[2020-11-25 03:05:06,409 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11848 states to 11848 states and 14095 transitions.
[2020-11-25 03:05:06,409 INFO  L751         BuchiCegarLoop]: Abstraction has 11848 states and 14095 transitions.
[2020-11-25 03:05:06,410 INFO  L631         BuchiCegarLoop]: Abstraction has 11848 states and 14095 transitions.
[2020-11-25 03:05:06,410 INFO  L445         BuchiCegarLoop]: ======== Iteration 45============
[2020-11-25 03:05:06,410 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11848 states and 14095 transitions.
[2020-11-25 03:05:06,421 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 18
[2020-11-25 03:05:06,421 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:05:06,421 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:05:06,423 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:05:06,423 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ONIT0 := false;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND TRUE   choice == 20
[L12210]              gas := gas - 21000;
[L12211]  COND TRUE   gas >= 0
[L12212]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12213]              assume msgvalue_MSG == 0;
[L12214]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2038]               havoc __exception;
[L2039]               revert := false;
[L2040]   COND FALSE  !(__exception)
[L2076]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6701]               __var_14 := null;
[L6702]   COND FALSE  !(!(spender_s711 != null))
[L6706]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6707]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6708]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6709]               assert { :EventEmitted "Approval_ERC20" } true;
[L6710]               __ret_0_ := true;
[L2076]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2077]               assume !revert && gas >= 0;
[L12214]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND FALSE  !(choice == 6)
[L12304]  COND FALSE  !(choice == 5)
[L12312]  COND TRUE   choice == 4
[L12313]              gas := gas - 21000;
[L12314]  COND TRUE   gas >= 0
[L12315]              assume value_s1439 >= 0 && value_s1439 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12316]              assume releaseTime_s1439 >= 0 && releaseTime_s1439 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12317]              assume msgvalue_MSG == 0;
[L12318]  CALL        call __ret_0_transferWithLock := transferWithLock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L3608]               havoc __exception;
[L3609]               revert := false;
[L3610]   COND FALSE  !(__exception)
[L3646]   CALL        call __ret_0_ := transferWithLock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L7887]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND TRUE   DType[this] == ONIT
[L10861]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10861]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10862]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7887]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7888]   COND FALSE  !(revert)
[L7891]   COND TRUE   DType[this] == ONIT
[L7892]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, holder_s1439, value_s1439);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7892]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, holder_s1439, value_s1439);
[L7893]   COND FALSE  !(revert)
[L7899]   CALL        call __var_50 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L8052]   CALL        call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8052]   RET         call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L8053]   COND FALSE  !(revert)
[L8056]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1527];
[L8057]               _balances_ERC20[this][holder_s1527] := __var_53;
[L8058]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1527];
[L8059]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] == false
[L8060]   CALL        call __var_54 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8060]   RET         call __var_54 := FreshRefGenerator__success();
[L8061]   COND FALSE  !(revert)
[L8064]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8065]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] := true;
[L8066]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == zerointRefArr();
[L8067]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1527] == __var_54;
[L8068]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8070]   CALL        call __var_56 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8070]   RET         call __var_56 := FreshRefGenerator__success();
[L8071]   COND FALSE  !(revert)
[L8074]               assume DType[__var_56] == ONIT.LockInfo;
[L8075]   CALL        call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5620]               _releaseTime_ONIT.LockInfo[this] := _releaseTime;
[L5621]               _amount_ONIT.LockInfo[this] := _amount;
[L8075]   RET         call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L8076]   COND FALSE  !(revert)
[L8079]               __var_55 := __var_56;
[L8080]               __var_58 := Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]];
[L8081]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]][__var_58] := __var_55;
[L8082]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] := __var_58 + 1;
[L8083]               assert { :EventEmitted "Lock_ONIT" } true;
[L8084]               __ret_0_ := true;
[L7899]   RET         call __var_50 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L7900]   COND FALSE  !(revert)
[L7903]               __ret_0_ := true;
[L3646]   RET         call __ret_0_ := transferWithLock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L3647]               assume !revert && gas >= 0;
[L12318]  RET         call __ret_0_transferWithLock := transferWithLock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((from_s1322 == to_s1322 && (value_s1322 > _balances_ERC20[this][from_s1322] || value_s1322 > _allowed_ERC20[this][from_s1322][msgsender_MSG])) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ONIT0 := true;
[L2]                  call_transferFrom_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 03:05:06,428 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:05:06,428 INFO  L82        PathProgramCache]: Analyzing trace with hash -505431721, now seen corresponding path program 1 times
[2020-11-25 03:05:06,429 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:05:06,573 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:05:06,698 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:05:06,825 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:05:06,825 INFO  L82        PathProgramCache]: Analyzing trace with hash 795397429, now seen corresponding path program 1 times
[2020-11-25 03:05:06,826 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:05:06,830 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:05:06,833 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:05:06,841 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:05:06,841 INFO  L82        PathProgramCache]: Analyzing trace with hash 1598211487, now seen corresponding path program 1 times
[2020-11-25 03:05:06,842 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:05:06,992 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:05:07,074 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 29 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3019 to 6037
[2020-11-25 03:05:07,512 WARN  L188               SmtUtils]: Spent 174.00 ms on a formula simplification. DAG size of input: 359 DAG size of output: 286
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3331 to 6661
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2017 to 4027
[2020-11-25 03:05:07,930 WARN  L188               SmtUtils]: Spent 184.00 ms on a formula simplification that was a NOOP. DAG size: 434
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.002s / 0.005s total
Resizing node table from 11177 to 22349
[2020-11-25 03:05:08,069 WARN  L188               SmtUtils]: Spent 123.00 ms on a formula simplification that was a NOOP. DAG size: 360
[2020-11-25 03:05:08,188 WARN  L188               SmtUtils]: Spent 116.00 ms on a formula simplification that was a NOOP. DAG size: 360
Garbage collection #1: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #2: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #3: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #4: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #5: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #6: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #7: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-11-25 03:05:08,244 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-11-25 03:05:09,009 WARN  L188               SmtUtils]: Spent 129.00 ms on a formula simplification. DAG size of input: 231 DAG size of output: 217
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
[2020-11-25 03:05:10,498 WARN  L188               SmtUtils]: Spent 1.25 s on a formula simplification. DAG size of input: 447 DAG size of output: 421
Garbage collection #1: 151 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 151 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
[2020-11-25 03:05:10,824 WARN  L188               SmtUtils]: Spent 137.00 ms on a formula simplification. DAG size of input: 217 DAG size of output: 216
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 03:05:11,064 WARN  L188               SmtUtils]: Spent 199.00 ms on a formula simplification that was a NOOP. DAG size: 415
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
[2020-11-25 03:05:11,236 WARN  L188               SmtUtils]: Spent 166.00 ms on a formula simplification that was a NOOP. DAG size: 375
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-11-25 03:05:11,503 WARN  L188               SmtUtils]: Spent 145.00 ms on a formula simplification. DAG size of input: 313 DAG size of output: 273
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
[2020-11-25 03:05:11,678 WARN  L188               SmtUtils]: Spent 146.00 ms on a formula simplification that was a NOOP. DAG size: 426
Garbage collection #1: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #2: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #3: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #4: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #5: 2647 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2647 to 5281
Garbage collection #6: 5281 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 5281 to 10559
Garbage collection #7: 10559 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 10559 to 21107
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #5: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #4: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-25 03:05:12,416 WARN  L188               SmtUtils]: Spent 276.00 ms on a formula simplification. DAG size of input: 224 DAG size of output: 220
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-11-25 03:05:12,528 WARN  L188               SmtUtils]: Spent 105.00 ms on a formula simplification. DAG size of input: 125 DAG size of output: 115
[2020-11-25 03:05:12,661 WARN  L188               SmtUtils]: Spent 132.00 ms on a formula simplification. DAG size of input: 170 DAG size of output: 165
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 03:05:12,843 WARN  L188               SmtUtils]: Spent 114.00 ms on a formula simplification. DAG size of input: 152 DAG size of output: 151
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-11-25 03:05:13,259 WARN  L188               SmtUtils]: Spent 380.00 ms on a formula simplification. DAG size of input: 332 DAG size of output: 327
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-25 03:05:13,429 WARN  L188               SmtUtils]: Spent 166.00 ms on a formula simplification that was a NOOP. DAG size: 309
[2020-11-25 03:05:14,068 WARN  L188               SmtUtils]: Spent 635.00 ms on a formula simplification. DAG size of input: 452 DAG size of output: 361
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
[2020-11-25 03:05:14,212 WARN  L188               SmtUtils]: Spent 138.00 ms on a formula simplification that was a NOOP. DAG size: 257
[2020-11-25 03:05:14,550 WARN  L188               SmtUtils]: Spent 336.00 ms on a formula simplification that was a NOOP. DAG size: 492
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 12073 to 24137
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-11-25 03:05:14,794 WARN  L188               SmtUtils]: Spent 236.00 ms on a formula simplification that was a NOOP. DAG size: 406
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 03:05:15,393 WARN  L188               SmtUtils]: Spent 123.00 ms on a formula simplification. DAG size of input: 124 DAG size of output: 123
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
[2020-11-25 03:05:15,633 WARN  L188               SmtUtils]: Spent 100.00 ms on a formula simplification. DAG size of input: 119 DAG size of output: 111
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-11-25 03:05:16,080 WARN  L188               SmtUtils]: Spent 308.00 ms on a formula simplification. DAG size of input: 221 DAG size of output: 206
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2017 to 4027
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-11-25 03:05:16,395 WARN  L188               SmtUtils]: Spent 246.00 ms on a formula simplification. DAG size of input: 180 DAG size of output: 175
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-25 03:05:16,571 WARN  L188               SmtUtils]: Spent 173.00 ms on a formula simplification that was a NOOP. DAG size: 157
[2020-11-25 03:05:16,887 WARN  L188               SmtUtils]: Spent 314.00 ms on a formula simplification. DAG size of input: 196 DAG size of output: 183
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 03:05:17,043 WARN  L188               SmtUtils]: Spent 151.00 ms on a formula simplification that was a NOOP. DAG size: 133
[2020-11-25 03:05:17,763 WARN  L188               SmtUtils]: Spent 719.00 ms on a formula simplification. DAG size of input: 363 DAG size of output: 358
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
[2020-11-25 03:05:18,371 WARN  L188               SmtUtils]: Spent 604.00 ms on a formula simplification that was a NOOP. DAG size: 335
[2020-11-25 03:05:20,077 WARN  L188               SmtUtils]: Spent 1.70 s on a formula simplification. DAG size of input: 432 DAG size of output: 387
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
[2020-11-25 03:05:20,494 WARN  L188               SmtUtils]: Spent 407.00 ms on a formula simplification that was a NOOP. DAG size: 275
[2020-11-25 03:05:21,502 WARN  L188               SmtUtils]: Spent 1.01 s on a formula simplification that was a NOOP. DAG size: 506
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
[2020-11-25 03:05:22,367 WARN  L188               SmtUtils]: Spent 855.00 ms on a formula simplification that was a NOOP. DAG size: 413
[2020-11-25 03:05:46,375 WARN  L188               SmtUtils]: Spent 24.00 s on a formula simplification. DAG size of input: 1353 DAG size of output: 1319
Garbage collection #1: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #2: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #3: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #4: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #5: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
Garbage collection #6: 17077 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17077 to 34147
Garbage collection #7: 34147 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 34147 to 68281
Garbage collection #8: 68281 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 68281 to 118277
Garbage collection #9: 118277 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 118277 to 168277
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-11-25 03:05:48,142 WARN  L188               SmtUtils]: Spent 1.67 s on a formula simplification that was a NOOP. DAG size: 491
[2020-11-25 03:05:50,687 WARN  L188               SmtUtils]: Spent 2.51 s on a formula simplification that was a NOOP. DAG size: 616
Garbage collection #1: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #2: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #3: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #4: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #5: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #6: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #7: 12541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12541 to 25073
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 8543 to 17077
[2020-11-25 03:05:52,393 WARN  L188               SmtUtils]: Spent 1.69 s on a formula simplification that was a NOOP. DAG size: 491
[2020-11-25 03:05:58,002 WARN  L188               SmtUtils]: Spent 5.61 s on a formula simplification. DAG size of input: 618 DAG size of output: 617
Garbage collection #1: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #2: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #3: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #4: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #5: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #6: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #7: 12541 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 12541 to 25073
Garbage collection #1: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #2: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #3: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #4: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #5: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #6: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #7: 12541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12541 to 25073
[2020-11-25 03:06:00,763 WARN  L188               SmtUtils]: Spent 2.75 s on a formula simplification that was a NOOP. DAG size: 613
[2020-11-25 03:06:00,793 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:06:00,805 INFO  L216          LassoAnalysis]: Preferences:
[2020-11-25 03:06:00,806 INFO  L124   ssoRankerPreferences]: Compute integeral hull: false
[2020-11-25 03:06:00,806 INFO  L125   ssoRankerPreferences]: Enable LassoPartitioneer: true
[2020-11-25 03:06:00,806 INFO  L126   ssoRankerPreferences]: Term annotations enabled: false
[2020-11-25 03:06:00,806 INFO  L127   ssoRankerPreferences]: Use exernal solver: true
[2020-11-25 03:06:00,806 INFO  L128   ssoRankerPreferences]: SMT solver command: z3 SMTLIB2_COMPLIANT=true -memory:1024 -smt2 -in -t:12000
[2020-11-25 03:06:00,806 INFO  L129   ssoRankerPreferences]: Dump SMT script to file: false
[2020-11-25 03:06:00,806 INFO  L130   ssoRankerPreferences]: Path of dumped script: 
[2020-11-25 03:06:00,806 INFO  L131   ssoRankerPreferences]: Filename of dumped script: ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self-fail.bpl_BEv2_Iteration45_Lasso
[2020-11-25 03:06:00,806 INFO  L132   ssoRankerPreferences]: MapElimAlgo: Frank
[2020-11-25 03:06:00,806 INFO  L282          LassoAnalysis]: Starting lasso preprocessing...
Garbage collection #1: 263 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 263 to 523
Garbage collection #2: 523 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 523 to 1039
Garbage collection #3: 1039 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1039 to 2069
Garbage collection #4: 2069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2069 to 4133
Garbage collection #5: 4133 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4133 to 8263
Garbage collection #6: 8263 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 8263 to 16519
Garbage collection #7: 16519 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 16519 to 33037
Garbage collection #8: 33037 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 33037 to 66071
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-11-25 03:06:01,262 INFO  L141          MapEliminator]: Using MapEliminator with SimplificationTechnique=SIMPLIFY_DDA XnfConversionTechnique=BDD_BASED AddInequalities=false OnlyTrivialImplicationsArrayWrite=false OnlyTrivialImplicationsForModifiedArguments=true OnlyArgumentsInFormula=true
[2020-11-25 03:06:01,295 FATAL L292        ToolchainWalker]: The Plugin de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer has thrown an exception:
java.lang.UnsupportedOperationException: Only formulae in NNF are supported
	at de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.mapelimination.MapEliminator.getRewrittenTransFormula(MapEliminator.java:323)
	at de.uni_freiburg.informatik.ultimate.lassoranker.preprocessors.MapEliminationLassoPreprocessor.process(MapEliminationLassoPreprocessor.java:109)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoBuilder.applyPreprocessor(LassoBuilder.java:154)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoBuilder.preprocess(LassoBuilder.java:262)
	at de.uni_freiburg.informatik.ultimate.lassoranker.LassoAnalysis.preprocess(LassoAnalysis.java:286)
	at de.uni_freiburg.informatik.ultimate.lassoranker.LassoAnalysis.<init>(LassoAnalysis.java:235)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.synthesize(LassoCheck.java:788)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.access$18(LassoCheck.java:715)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkLassoTermination(LassoCheck.java:1163)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:1062)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-25 03:06:01,296 INFO  L168              Benchmark]: Toolchain (without parser) took 231586.08 ms. Allocated memory was 1.0 GB in the beginning and 6.5 GB in the end (delta: 5.4 GB). Free memory was 919.1 MB in the beginning and 2.3 GB in the end (delta: -1.4 GB). Peak memory consumption was 5.7 GB. Max. memory is 15.3 GB.
[2020-11-25 03:06:01,296 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 03:06:01,296 INFO  L168              Benchmark]: Boogie Preprocessor took 175.41 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.0 MB in the end (delta: 27.1 MB). Peak memory consumption was 27.1 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:01,297 INFO  L168              Benchmark]: UtopiaSpecLang took 89.69 ms. Allocated memory is still 1.0 GB. Free memory was 892.0 MB in the beginning and 881.3 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:01,297 INFO  L168              Benchmark]: Boogie Printer took 32.14 ms. Allocated memory is still 1.0 GB. Free memory was 881.3 MB in the beginning and 875.9 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:01,297 INFO  L168              Benchmark]: RCFGBuilder took 1552.12 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 65.5 MB). Free memory was 875.9 MB in the beginning and 769.7 MB in the end (delta: 106.1 MB). Peak memory consumption was 171.7 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:01,297 INFO  L168              Benchmark]: UtopiaLTL2Aut took 33.87 ms. Allocated memory is still 1.1 GB. Free memory was 769.7 MB in the beginning and 766.3 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:01,297 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3270.20 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 448.3 MB). Free memory was 766.3 MB in the beginning and 897.5 MB in the end (delta: -131.2 MB). Peak memory consumption was 364.1 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:01,298 INFO  L168              Benchmark]: BlockEncodingV2 took 284.93 ms. Allocated memory is still 1.5 GB. Free memory was 897.5 MB in the beginning and 745.6 MB in the end (delta: 151.9 MB). Peak memory consumption was 151.9 MB. Max. memory is 15.3 GB.
[2020-11-25 03:06:01,298 INFO  L168              Benchmark]: BuchiAutomizer took 226144.49 ms. Allocated memory was 1.5 GB in the beginning and 6.5 GB in the end (delta: 4.9 GB). Free memory was 745.6 MB in the beginning and 2.3 GB in the end (delta: -1.6 GB). Peak memory consumption was 5.0 GB. Max. memory is 15.3 GB.
[2020-11-25 03:06:01,300 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    11590 locations, 20993 edges
  - StatisticsResult: Encoded RCFG
    11410 locations, 20522 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 175.41 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.0 MB in the end (delta: 27.1 MB). Peak memory consumption was 27.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 89.69 ms. Allocated memory is still 1.0 GB. Free memory was 892.0 MB in the beginning and 881.3 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 32.14 ms. Allocated memory is still 1.0 GB. Free memory was 881.3 MB in the beginning and 875.9 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1552.12 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 65.5 MB). Free memory was 875.9 MB in the beginning and 769.7 MB in the end (delta: 106.1 MB). Peak memory consumption was 171.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 33.87 ms. Allocated memory is still 1.1 GB. Free memory was 769.7 MB in the beginning and 766.3 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3270.20 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 448.3 MB). Free memory was 766.3 MB in the beginning and 897.5 MB in the end (delta: -131.2 MB). Peak memory consumption was 364.1 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 284.93 ms. Allocated memory is still 1.5 GB. Free memory was 897.5 MB in the beginning and 745.6 MB in the end (delta: 151.9 MB). Peak memory consumption was 151.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 226144.49 ms. Allocated memory was 1.5 GB in the beginning and 6.5 GB in the end (delta: 4.9 GB). Free memory was 745.6 MB in the beginning and 2.3 GB in the end (delta: -1.6 GB). Peak memory consumption was 5.0 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    4667 locations, 6453 edges
  - StatisticsResult: BuchiProgram size
    11590 locations, 20993 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: UnsupportedOperationException: Only formulae in NNF are supported
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: UnsupportedOperationException: Only formulae in NNF are supported: de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.mapelimination.MapEliminator.getRewrittenTransFormula(MapEliminator.java:323)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
