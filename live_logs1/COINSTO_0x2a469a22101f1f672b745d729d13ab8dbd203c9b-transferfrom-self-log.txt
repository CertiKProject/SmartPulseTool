This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 12:16:23,709 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 12:16:23,710 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 12:16:23,718 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 12:16:23,718 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 12:16:23,718 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 12:16:23,719 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 12:16:23,720 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 12:16:23,721 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 12:16:23,722 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 12:16:23,722 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 12:16:23,723 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 12:16:23,723 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 12:16:23,724 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 12:16:23,725 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 12:16:23,726 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 12:16:23,726 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 12:16:23,727 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 12:16:23,729 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 12:16:23,731 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 12:16:23,731 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 12:16:23,732 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 12:16:23,734 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 12:16:23,734 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 12:16:23,734 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 12:16:23,735 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 12:16:23,735 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 12:16:23,736 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 12:16:23,736 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 12:16:23,736 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 12:16:23,737 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 12:16:23,737 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 12:16:23,738 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 12:16:23,739 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 12:16:23,739 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 12:16:23,739 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 12:16:23,740 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 12:16:23,740 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 12:16:23,740 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 12:16:23,741 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 12:16:23,741 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 12:16:23,742 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 12:16:23,754 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 12:16:23,754 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 12:16:23,756 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 12:16:23,756 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 12:16:23,756 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 12:16:23,756 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 12:16:23,757 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 12:16:23,757 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 12:16:23,757 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 12:16:23,757 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 12:16:23,758 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 12:16:23,758 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 12:16:23,758 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 12:16:23,758 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 12:16:23,758 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 12:16:23,759 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 12:16:23,759 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 12:16:23,759 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 12:16:23,759 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 12:16:23,759 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 12:16:23,760 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 12:16:23,760 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 12:16:23,760 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 12:16:23,760 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 12:16:23,760 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 12:16:23,760 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 12:16:23,785 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 12:16:23,797 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 12:16:23,798 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 12:16:23,799 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 12:16:23,800 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 12:16:23,800 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transferfrom-self.bpl
[2020-11-25 12:16:23,800 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transferfrom-self.bpl'
[2020-11-25 12:16:23,883 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 12:16:23,884 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 12:16:23,884 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 12:16:23,884 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 12:16:23,885 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 12:16:23,901 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:16:23" (1/1) ...
[2020-11-25 12:16:23,902 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:16:23" (1/1) ...
[2020-11-25 12:16:23,930 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:16:23" (1/1) ...
[2020-11-25 12:16:23,931 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:16:23" (1/1) ...
[2020-11-25 12:16:23,950 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:16:23" (1/1) ...
[2020-11-25 12:16:23,959 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:16:23" (1/1) ...
[2020-11-25 12:16:23,967 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:16:23" (1/1) ...
[2020-11-25 12:16:23,975 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 12:16:23,976 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 12:16:23,976 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 12:16:23,978 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 12:16:23,982 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:16:23" (1/1) ...
[2020-11-25 12:16:24,001 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(COINSTO.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_COINSTO[this][from] && value <= allowed_COINSTO[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_COINSTO[this][to] >= 0 && balances_COINSTO[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_COINSTO[this][from] >= 0 &&  balances_COINSTO[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_COINSTO[this][from][msg.sender] >= 0 && allowed_COINSTO[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(COINSTO.transferFrom(from, to, value), return == true && allowed_COINSTO[this][from][msg.sender] == old(allowed_COINSTO[this][from][msg.sender]) - value && _totalSupply_COINSTO[this] == old(_totalSupply_COINSTO[this]) && balances_COINSTO[this] == old(balances_COINSTO[this]) && allowed_COINSTO[this][p1][p2] == old(allowed_COINSTO[this][p1][p2]) && symbol_COINSTO[this] == old(symbol_COINSTO[this]) && name_COINSTO[this] == old(name_COINSTO[this]) && decimals_COINSTO[this] == old(decimals_COINSTO[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 12:16:24,006 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(COINSTO.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_COINSTO[this][from] && value <= allowed_COINSTO[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_COINSTO[this][to] >= 0 && balances_COINSTO[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_COINSTO[this][from] >= 0 &&  balances_COINSTO[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_COINSTO[this][from][msg.sender] >= 0 && allowed_COINSTO[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(COINSTO.transferFrom(from, to, value), return == true && allowed_COINSTO[this][from][msg.sender] == old(allowed_COINSTO[this][from][msg.sender]) - value && _totalSupply_COINSTO[this] == old(_totalSupply_COINSTO[this]) && balances_COINSTO[this] == old(balances_COINSTO[this]) && allowed_COINSTO[this][p1][p2] == old(allowed_COINSTO[this][p1][p2]) && symbol_COINSTO[this] == old(symbol_COINSTO[this]) && name_COINSTO[this] == old(name_COINSTO[this]) && decimals_COINSTO[this] == old(decimals_COINSTO[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 12:16:24,013 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(COINSTO.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_COINSTO[this][from] && value <= allowed_COINSTO[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_COINSTO[this][to] >= 0 && balances_COINSTO[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_COINSTO[this][from] >= 0 &&  balances_COINSTO[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_COINSTO[this][from][msg.sender] >= 0 && allowed_COINSTO[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(COINSTO.transferFrom(from, to, value), return == true && allowed_COINSTO[this][from][msg.sender] == old(allowed_COINSTO[this][from][msg.sender]) - value && _totalSupply_COINSTO[this] == old(_totalSupply_COINSTO[this]) && balances_COINSTO[this] == old(balances_COINSTO[this]) && allowed_COINSTO[this][p1][p2] == old(allowed_COINSTO[this][p1][p2]) && symbol_COINSTO[this] == old(symbol_COINSTO[this]) && name_COINSTO[this] == old(name_COINSTO[this]) && decimals_COINSTO[this] == old(decimals_COINSTO[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 12:16:24,021 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s458 || p2!=msg.sender ) && from_s458==to_s458 ) && tokens_s458<=balances_COINSTO[this][from_s458] ) && tokens_s458<=allowed_COINSTO[this][from_s458][msg.sender] ) && tokens_s458>=0 ) && tokens_s458<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_COINSTO[this][to_s458]>=0 ) && balances_COINSTO[this][to_s458]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_COINSTO[this][from_s458]>=0 ) && balances_COINSTO[this][from_s458]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_COINSTO[this][from_s458][msg.sender]>=0 ) && allowed_COINSTO[this][from_s458][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],BinaryExpression[COMPEQ,IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>],IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],[IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],[IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 12:16:24,027 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( success_s458==true && allowed_COINSTO[this][from_s458][msg.sender]==( ( old(allowed_COINSTO[this][from_s458][msg.sender]) ) - tokens_s458 ) ) && _totalSupply_COINSTO[this]==( old(_totalSupply_COINSTO[this]) ) ) && balances_COINSTO[this]==( old(balances_COINSTO[this]) ) ) && allowed_COINSTO[this][p1][p2]==( old(allowed_COINSTO[this][p1][p2]) ) ) && symbol_COINSTO[this]==( old(symbol_COINSTO[this]) ) ) && name_COINSTO[this]==( old(name_COINSTO[this]) ) ) && decimals_COINSTO[this]==( old(decimals_COINSTO[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s458,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_COINSTO>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]]],IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_COINSTO,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_COINSTO>]]]]]]
[2020-11-25 12:16:24,036 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(COINSTO.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_COINSTO[this][from] && value <= allowed_COINSTO[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_COINSTO[this][to] >= 0 && balances_COINSTO[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_COINSTO[this][from] >= 0 &&  balances_COINSTO[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_COINSTO[this][from][msg.sender] >= 0 && allowed_COINSTO[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(COINSTO.transferFrom(from, to, value), return == true && allowed_COINSTO[this][from][msg.sender] == old(allowed_COINSTO[this][from][msg.sender]) - value && _totalSupply_COINSTO[this] == old(_totalSupply_COINSTO[this]) && balances_COINSTO[this] == old(balances_COINSTO[this]) && allowed_COINSTO[this][p1][p2] == old(allowed_COINSTO[this][p1][p2]) && symbol_COINSTO[this] == old(symbol_COINSTO[this]) && name_COINSTO[this] == old(name_COINSTO[this]) && decimals_COINSTO[this] == old(decimals_COINSTO[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 12:16:24,037 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_COINSTO0) ==> ( <>AP(success_transferFrom_COINSTO0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 12:16:24,044 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:16:24 PropertyContainer
[2020-11-25 12:16:24,045 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 12:16:24,045 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 12:16:24,045 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 12:16:24,045 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 12:16:24,046 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:16:23" (1/2) ...
[2020-11-25 12:16:24,046 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 12:16:24,046 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 12:16:24,060 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:16:24" (2/2) ...
[2020-11-25 12:16:24,060 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 12:16:24,060 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 12:16:24,061 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 12:16:24,061 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 12:16:24,061 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:16:23" (1/2) ...
[2020-11-25 12:16:24,113 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 12:16:24,113 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 12:16:24,113 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 12:16:24,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 12:16:24,113 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 12:16:24,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 12:16:24,114 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 12:16:24,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 12:16:24,114 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 12:16:24,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 12:16:24,114 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 12:16:24,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 12:16:24,114 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 12:16:24,114 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 12:16:24,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 12:16:24,115 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 12:16:24,115 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 12:16:24,115 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 12:16:24,115 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 12:16:24,115 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 12:16:24,115 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 12:16:24,115 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 12:16:24,116 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 12:16:24,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 12:16:24,116 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 12:16:24,116 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 12:16:24,116 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 12:16:24,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 12:16:24,116 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 12:16:24,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 12:16:24,116 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 12:16:24,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 12:16:24,117 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 12:16:24,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 12:16:24,117 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 12:16:24,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 12:16:24,117 INFO  L130     BoogieDeclarations]: Found specification of procedure COINSTO_COINSTO_NoBaseCtor__success
[2020-11-25 12:16:24,117 INFO  L130     BoogieDeclarations]: Found specification of procedure COINSTO_COINSTO
[2020-11-25 12:16:24,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure COINSTO_COINSTO
[2020-11-25 12:16:24,117 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_COINSTO
[2020-11-25 12:16:24,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_COINSTO
[2020-11-25 12:16:24,117 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_COINSTO
[2020-11-25 12:16:24,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_COINSTO
[2020-11-25 12:16:24,118 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_COINSTO
[2020-11-25 12:16:24,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_COINSTO
[2020-11-25 12:16:24,118 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_COINSTO
[2020-11-25 12:16:24,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_COINSTO
[2020-11-25 12:16:24,118 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_COINSTO
[2020-11-25 12:16:24,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_COINSTO
[2020-11-25 12:16:24,118 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_COINSTO
[2020-11-25 12:16:24,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_COINSTO
[2020-11-25 12:16:24,118 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_COINSTO
[2020-11-25 12:16:24,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_COINSTO
[2020-11-25 12:16:24,118 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_COINSTO__success
[2020-11-25 12:16:24,119 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_COINSTO
[2020-11-25 12:16:24,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_COINSTO
[2020-11-25 12:16:24,119 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_COINSTO
[2020-11-25 12:16:24,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_COINSTO
[2020-11-25 12:16:24,119 INFO  L130     BoogieDeclarations]: Found specification of procedure name_COINSTO
[2020-11-25 12:16:24,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_COINSTO
[2020-11-25 12:16:24,119 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_COINSTO
[2020-11-25 12:16:24,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_COINSTO
[2020-11-25 12:16:24,119 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_COINSTO
[2020-11-25 12:16:24,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_COINSTO
[2020-11-25 12:16:24,120 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 12:16:24,120 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 12:16:24,120 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 12:16:24,120 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 12:16:24,120 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 12:16:24,120 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 12:16:24,120 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 12:16:24,120 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 12:16:24,120 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 12:16:24,120 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 12:16:24,120 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 12:16:24,121 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 12:16:24,121 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_COINSTO
[2020-11-25 12:16:24,121 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 12:16:24,121 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 12:16:24,121 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 12:16:24,121 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 12:16:24,121 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 12:16:24,121 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 12:16:24,121 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 12:16:24,122 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 12:16:24,122 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 12:16:24,122 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 12:16:24,122 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 12:16:24,122 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 12:16:24,122 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 12:16:24,122 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 12:16:24,122 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 12:16:24,122 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 12:16:24,122 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 12:16:24,123 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 12:16:24,123 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 12:16:24,123 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 12:16:24,123 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 12:16:24,123 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 12:16:24,123 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 12:16:24,123 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 12:16:24,123 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 12:16:24,123 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 12:16:24,123 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 12:16:24,123 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 12:16:24,124 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 12:16:24,124 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 12:16:24,124 INFO  L130     BoogieDeclarations]: Found specification of procedure COINSTO_COINSTO_NoBaseCtor__fail
[2020-11-25 12:16:24,124 INFO  L130     BoogieDeclarations]: Found specification of procedure COINSTO_COINSTO__success
[2020-11-25 12:16:24,124 INFO  L130     BoogieDeclarations]: Found specification of procedure COINSTO_COINSTO__fail
[2020-11-25 12:16:24,124 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_COINSTO__success
[2020-11-25 12:16:24,124 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_COINSTO__fail
[2020-11-25 12:16:24,124 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_COINSTO__success
[2020-11-25 12:16:24,124 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_COINSTO__fail
[2020-11-25 12:16:24,124 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_COINSTO__success
[2020-11-25 12:16:24,125 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_COINSTO__fail
[2020-11-25 12:16:24,125 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_COINSTO__success
[2020-11-25 12:16:24,125 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_COINSTO__fail
[2020-11-25 12:16:24,125 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_COINSTO__success
[2020-11-25 12:16:24,125 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_COINSTO__fail
[2020-11-25 12:16:24,125 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_COINSTO__success
[2020-11-25 12:16:24,125 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_COINSTO__fail
[2020-11-25 12:16:24,125 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_COINSTO__success
[2020-11-25 12:16:24,125 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_COINSTO__fail
[2020-11-25 12:16:24,125 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_COINSTO__fail
[2020-11-25 12:16:24,126 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_COINSTO__success
[2020-11-25 12:16:24,126 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_COINSTO__fail
[2020-11-25 12:16:24,126 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_COINSTO__success
[2020-11-25 12:16:24,126 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_COINSTO__fail
[2020-11-25 12:16:24,126 INFO  L130     BoogieDeclarations]: Found specification of procedure name_COINSTO__success
[2020-11-25 12:16:24,126 INFO  L130     BoogieDeclarations]: Found specification of procedure name_COINSTO__fail
[2020-11-25 12:16:24,126 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_COINSTO__success
[2020-11-25 12:16:24,126 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_COINSTO__fail
[2020-11-25 12:16:24,126 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_COINSTO__success
[2020-11-25 12:16:24,126 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_COINSTO__fail
[2020-11-25 12:16:24,127 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 12:16:24,127 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 12:16:24,127 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 12:16:24,127 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 12:16:24,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 12:16:24,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 12:16:24,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 12:16:24,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 12:16:24,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 12:16:24,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 12:16:24,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 12:16:24,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 12:16:24,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 12:16:24,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 12:16:24,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 12:16:24,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 12:16:24,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 12:16:24,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 12:16:24,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 12:16:24,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 12:16:24,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 12:16:24,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 12:16:24,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 12:16:24,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 12:16:24,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 12:16:24,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 12:16:24,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 12:16:24,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 12:16:24,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 12:16:24,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 12:16:24,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 12:16:24,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 12:16:24,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 12:16:24,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 12:16:24,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 12:16:24,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 12:16:24,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 12:16:24,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 12:16:24,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure COINSTO_COINSTO_NoBaseCtor__fail
[2020-11-25 12:16:24,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure COINSTO_COINSTO_NoBaseCtor__success
[2020-11-25 12:16:24,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure COINSTO_COINSTO__fail
[2020-11-25 12:16:24,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure COINSTO_COINSTO__success
[2020-11-25 12:16:24,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_COINSTO__fail
[2020-11-25 12:16:24,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_COINSTO__success
[2020-11-25 12:16:24,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_COINSTO__fail
[2020-11-25 12:16:24,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_COINSTO__success
[2020-11-25 12:16:24,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_COINSTO__fail
[2020-11-25 12:16:24,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_COINSTO__success
[2020-11-25 12:16:24,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_COINSTO__fail
[2020-11-25 12:16:24,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_COINSTO__success
[2020-11-25 12:16:24,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_COINSTO__fail
[2020-11-25 12:16:24,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_COINSTO__success
[2020-11-25 12:16:24,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_COINSTO__fail
[2020-11-25 12:16:24,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_COINSTO__success
[2020-11-25 12:16:24,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_COINSTO__fail
[2020-11-25 12:16:24,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_COINSTO__success
[2020-11-25 12:16:24,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_COINSTO__fail
[2020-11-25 12:16:24,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_COINSTO__success
[2020-11-25 12:16:24,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_COINSTO__fail
[2020-11-25 12:16:24,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_COINSTO__success
[2020-11-25 12:16:24,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_COINSTO__fail
[2020-11-25 12:16:24,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_COINSTO__success
[2020-11-25 12:16:24,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_COINSTO__fail
[2020-11-25 12:16:24,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_COINSTO__success
[2020-11-25 12:16:24,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_COINSTO__fail
[2020-11-25 12:16:24,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_COINSTO__success
[2020-11-25 12:16:24,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_COINSTO__fail
[2020-11-25 12:16:24,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_COINSTO__success
[2020-11-25 12:16:24,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 12:16:24,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 12:16:24,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 12:16:24,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 12:16:24,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 12:16:24,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 12:16:24,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 12:16:24,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 12:16:24,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 12:16:24,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 12:16:24,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 12:16:24,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 12:16:24,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 12:16:24,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 12:16:24,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 12:16:24,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 12:16:24,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_COINSTO
[2020-11-25 12:16:24,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 12:16:24,133 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 12:16:24,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 12:16:24,329 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:16:24,329 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:16:24,330 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:16:24,516 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:16:24,732 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 12:16:24,732 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 12:16:24,734 INFO  L202        PluginConnector]: Adding new model COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:16:24 BoogieIcfgContainer
[2020-11-25 12:16:24,734 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:16:24" (2/2) ...
[2020-11-25 12:16:24,734 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 12:16:24,734 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@1a4f10b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:16:24, skipping insertion in model container
[2020-11-25 12:16:24,734 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 12:16:24,734 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 12:16:24,734 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 12:16:24,735 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 12:16:24,736 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:16:23" (1/3) ...
[2020-11-25 12:16:24,736 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@5e43b9a2 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:16:24, skipping insertion in model container
[2020-11-25 12:16:24,736 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:16:24" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 12:16:24,768 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:16:24 NWAContainer
[2020-11-25 12:16:24,768 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 12:16:24,768 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 12:16:24,768 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 12:16:24,769 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 12:16:24,770 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:16:24" (3/4) ...
[2020-11-25 12:16:24,770 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@40b1a926 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:16:24, skipping insertion in model container
[2020-11-25 12:16:24,770 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:16:24" (4/4) ...
[2020-11-25 12:16:24,773 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 12:16:24,776 INFO  L110   BuchiProductObserver]: Initial RCFG 1565 locations, 1977 edges
[2020-11-25 12:16:24,776 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 12:16:24,787 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 12:16:26,244 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 12:16:26,251 INFO  L110   BuchiProductObserver]: BuchiProgram size 3722 locations, 6405 edges
[2020-11-25 12:16:26,251 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:16:26 BoogieIcfgContainer
[2020-11-25 12:16:26,251 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 12:16:26,252 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 12:16:26,252 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 12:16:26,253 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 12:16:26,254 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:16:26" (1/1) ...
[2020-11-25 12:16:26,352 INFO  L313           BlockEncoder]: Initial Icfg 3722 locations, 6405 edges
[2020-11-25 12:16:26,352 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 12:16:26,353 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 12:16:26,353 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 12:16:26,353 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 12:16:26,365 INFO  L70    emoveInfeasibleEdges]: Removed 90 edges and 13 locations because of local infeasibility
[2020-11-25 12:16:26,381 INFO  L70        RemoveSinkStates]: Removed 38 edges and 25 locations by removing sink states
[2020-11-25 12:16:26,396 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 12:16:26,401 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 12:16:26,406 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 12:16:26,406 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 12:16:26,413 INFO  L313           BlockEncoder]: Encoded RCFG 3662 locations, 6245 edges
[2020-11-25 12:16:26,413 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:16:26 BasicIcfg
[2020-11-25 12:16:26,413 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 12:16:26,414 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 12:16:26,414 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 12:16:26,417 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 12:16:26,417 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:16:26,417 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:16:23" (1/6) ...
[2020-11-25 12:16:26,419 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4f83e688 and model type COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:16:26, skipping insertion in model container
[2020-11-25 12:16:26,419 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:16:26,419 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:16:24" (2/6) ...
[2020-11-25 12:16:26,419 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4f83e688 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:16:26, skipping insertion in model container
[2020-11-25 12:16:26,420 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:16:26,420 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:16:24" (3/6) ...
[2020-11-25 12:16:26,420 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4f83e688 and model type COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:16:26, skipping insertion in model container
[2020-11-25 12:16:26,420 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:16:26,420 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:16:24" (4/6) ...
[2020-11-25 12:16:26,420 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4f83e688 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:16:26, skipping insertion in model container
[2020-11-25 12:16:26,420 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:16:26,420 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:16:26" (5/6) ...
[2020-11-25 12:16:26,421 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4f83e688 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 12:16:26, skipping insertion in model container
[2020-11-25 12:16:26,421 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:16:26,421 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:16:26" (6/6) ...
[2020-11-25 12:16:26,422 INFO  L404   chiAutomizerObserver]: Analyzing ICFG COINSTO_0x2a469a22101f1f672b745d729d13ab8dbd203c9b_transferfrom-self.bpl_BEv2
[2020-11-25 12:16:26,463 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 12:16:26,463 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 12:16:26,463 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 12:16:26,463 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 12:16:26,464 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 12:16:26,464 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 12:16:26,464 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 12:16:26,464 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 12:16:26,464 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 12:16:26,505 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3662 states.
[2020-11-25 12:16:26,557 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:16:26,557 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:16:26,557 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:16:26,566 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:16:26,566 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:16:26,566 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 12:16:26,566 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3662 states.
[2020-11-25 12:16:26,587 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:16:26,587 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:16:26,587 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:16:26,589 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:16:26,589 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_COINSTO0 := false;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == COINSTO;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND TRUE   revert
[L794]   RET         call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;

Loop:
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND TRUE   choice == 20
[L4111]              gas := gas - 21000;
[L4112]  COND FALSE  !(gas >= 0)
[L4261]  RET         call CorralChoice_COINSTO(this);

[2020-11-25 12:16:26,603 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:16:26,603 INFO  L82        PathProgramCache]: Analyzing trace with hash 1606057903, now seen corresponding path program 1 times
[2020-11-25 12:16:26,606 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:16:26,624 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:16:26,664 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:16:26,666 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:16:26,666 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 12:16:26,669 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:16:26,856 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 12:16:26,857 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 12:16:26,858 INFO  L87              Difference]: Start difference. First operand 3662 states. Second operand 4 states.
[2020-11-25 12:16:27,208 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:16:27,209 INFO  L93              Difference]: Finished difference Result 2516 states and 2745 transitions.
[2020-11-25 12:16:27,209 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 12:16:27,211 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2516 states and 2745 transitions.
[2020-11-25 12:16:27,228 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:16:27,251 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2516 states to 2516 states and 2745 transitions.
[2020-11-25 12:16:27,252 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 12:16:27,255 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 858
[2020-11-25 12:16:27,256 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2516 states and 2745 transitions.
[2020-11-25 12:16:27,265 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:16:27,265 INFO  L728         BuchiCegarLoop]: Abstraction has 2516 states and 2745 transitions.
[2020-11-25 12:16:27,283 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2516 states and 2745 transitions.
[2020-11-25 12:16:27,331 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2516 to 2516.
[2020-11-25 12:16:27,331 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2516 states.
[2020-11-25 12:16:27,337 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2516 states to 2516 states and 2745 transitions.
[2020-11-25 12:16:27,338 INFO  L751         BuchiCegarLoop]: Abstraction has 2516 states and 2745 transitions.
[2020-11-25 12:16:27,338 INFO  L631         BuchiCegarLoop]: Abstraction has 2516 states and 2745 transitions.
[2020-11-25 12:16:27,338 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 12:16:27,338 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2516 states and 2745 transitions.
[2020-11-25 12:16:27,347 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:16:27,347 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:16:27,347 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:16:27,350 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:16:27,350 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_COINSTO0 := false;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == COINSTO;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND TRUE   revert
[L794]   RET         call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_COINSTO[this][from_s458]) && tokens_s458 <= allowed_COINSTO[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s458] >= 0) && balances_COINSTO[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][from_s458] >= 0) && balances_COINSTO[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_COINSTO[this][from_s458][msgsender_MSG] >= 0) && allowed_COINSTO[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_COINSTO0 := true;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == COINSTO
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][from_s458], tokens_s458);
[L1995]  COND TRUE   !(b_s45 <= a_s45)
[L1996]              revert := true;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][from_s458], tokens_s458);
[L2451]  COND TRUE   revert
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s458 == true && allowed_COINSTO[this][from_s458][msgsender_MSG] == old(allowed_COINSTO[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_COINSTO[this] == old(_totalSupply_COINSTO[this])) && balances_COINSTO[this] == old(balances_COINSTO[this])) && allowed_COINSTO[this][p1][p2] == old(allowed_COINSTO[this][p1][p2])) && symbol_COINSTO[this] == old(symbol_COINSTO[this])) && name_COINSTO[this] == old(name_COINSTO[this])) && decimals_COINSTO[this] == old(decimals_COINSTO[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_COINSTO(this);

Loop:
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_COINSTO[this][from_s458]) && tokens_s458 <= allowed_COINSTO[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s458] >= 0) && balances_COINSTO[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][from_s458] >= 0) && balances_COINSTO[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_COINSTO[this][from_s458][msgsender_MSG] >= 0) && allowed_COINSTO[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_COINSTO0 := true;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == COINSTO
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][from_s458], tokens_s458);
[L1995]  COND TRUE   !(b_s45 <= a_s45)
[L1996]              revert := true;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][from_s458], tokens_s458);
[L2451]  COND TRUE   revert
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s458 == true && allowed_COINSTO[this][from_s458][msgsender_MSG] == old(allowed_COINSTO[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_COINSTO[this] == old(_totalSupply_COINSTO[this])) && balances_COINSTO[this] == old(balances_COINSTO[this])) && allowed_COINSTO[this][p1][p2] == old(allowed_COINSTO[this][p1][p2])) && symbol_COINSTO[this] == old(symbol_COINSTO[this])) && name_COINSTO[this] == old(name_COINSTO[this])) && decimals_COINSTO[this] == old(decimals_COINSTO[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_COINSTO(this);

[2020-11-25 12:16:27,356 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:16:27,356 INFO  L82        PathProgramCache]: Analyzing trace with hash -1520832945, now seen corresponding path program 1 times
[2020-11-25 12:16:27,357 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:16:27,368 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:16:27,396 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:16:27,396 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:16:27,396 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 12:16:27,398 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:16:27,398 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 12:16:27,398 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 12:16:27,398 INFO  L87              Difference]: Start difference. First operand 2516 states and 2745 transitions. cyclomatic complexity: 231 Second operand 4 states.
[2020-11-25 12:16:28,002 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:16:28,002 INFO  L93              Difference]: Finished difference Result 3736 states and 4237 transitions.
[2020-11-25 12:16:28,002 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 12:16:28,002 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3736 states and 4237 transitions.
[2020-11-25 12:16:28,017 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 12:16:28,032 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3736 states to 3616 states and 4109 transitions.
[2020-11-25 12:16:28,032 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1180
[2020-11-25 12:16:28,033 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1190
[2020-11-25 12:16:28,033 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3616 states and 4109 transitions.
[2020-11-25 12:16:28,039 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:16:28,039 INFO  L728         BuchiCegarLoop]: Abstraction has 3616 states and 4109 transitions.
[2020-11-25 12:16:28,042 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3616 states and 4109 transitions.
[2020-11-25 12:16:28,068 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3616 to 2552.
[2020-11-25 12:16:28,068 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2552 states.
[2020-11-25 12:16:28,071 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2552 states to 2552 states and 2737 transitions.
[2020-11-25 12:16:28,071 INFO  L751         BuchiCegarLoop]: Abstraction has 2552 states and 2737 transitions.
[2020-11-25 12:16:28,071 INFO  L631         BuchiCegarLoop]: Abstraction has 2552 states and 2737 transitions.
[2020-11-25 12:16:28,071 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 12:16:28,071 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2552 states and 2737 transitions.
[2020-11-25 12:16:28,076 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:16:28,076 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:16:28,076 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:16:28,077 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:16:28,078 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_COINSTO0 := false;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == COINSTO;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_COINSTO[this] := 799609355;
[L2236]              name_COINSTO[this] := 799609355;
[L2237]              decimals_COINSTO[this] := 0;
[L2238]              _totalSupply_COINSTO[this] := 0;
[L2239]              balances_COINSTO[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_COINSTO[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_COINSTO[this] := -880863315;
[L2245]              name_COINSTO[this] := 338186849;
[L2246]              decimals_COINSTO[this] := 8;
[L2247]              _totalSupply_COINSTO[this] := 88888888888800000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2249]              balances_COINSTO[this][107758664870216964054459507317936865222947681831] := _totalSupply_COINSTO[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2251]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2288]  RET         call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_COINSTO[this][from_s458]) && tokens_s458 <= allowed_COINSTO[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s458] >= 0) && balances_COINSTO[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][from_s458] >= 0) && balances_COINSTO[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_COINSTO[this][from_s458][msgsender_MSG] >= 0) && allowed_COINSTO[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_COINSTO0 := true;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_COINSTO_lvl0 := alloc_allowed_COINSTO_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_COINSTO := symbol_COINSTO;
[L1064]              __tmp__name_COINSTO := name_COINSTO;
[L1065]              __tmp__decimals_COINSTO := decimals_COINSTO;
[L1066]              __tmp___totalSupply_COINSTO := _totalSupply_COINSTO;
[L1067]              __tmp__balances_COINSTO := balances_COINSTO;
[L1068]              __tmp__allowed_COINSTO := allowed_COINSTO;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == COINSTO
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][from_s458], tokens_s458);
[L1986]  COND TRUE   !(b_s45 <= a_s45)
[L1987]              revert := true;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][from_s458], tokens_s458);
[L2409]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_COINSTO(this);

Loop:
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_COINSTO[this][from_s458]) && tokens_s458 <= allowed_COINSTO[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s458] >= 0) && balances_COINSTO[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][from_s458] >= 0) && balances_COINSTO[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_COINSTO[this][from_s458][msgsender_MSG] >= 0) && allowed_COINSTO[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_COINSTO0 := true;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_COINSTO_lvl0 := alloc_allowed_COINSTO_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_COINSTO := symbol_COINSTO;
[L1064]              __tmp__name_COINSTO := name_COINSTO;
[L1065]              __tmp__decimals_COINSTO := decimals_COINSTO;
[L1066]              __tmp___totalSupply_COINSTO := _totalSupply_COINSTO;
[L1067]              __tmp__balances_COINSTO := balances_COINSTO;
[L1068]              __tmp__allowed_COINSTO := allowed_COINSTO;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == COINSTO
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][from_s458], tokens_s458);
[L1986]  COND TRUE   !(b_s45 <= a_s45)
[L1987]              revert := true;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][from_s458], tokens_s458);
[L2409]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_COINSTO(this);

[2020-11-25 12:16:28,081 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:16:28,081 INFO  L82        PathProgramCache]: Analyzing trace with hash -1344308074, now seen corresponding path program 1 times
[2020-11-25 12:16:28,082 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:16:28,095 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:16:28,185 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:16:28,185 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:16:28,186 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 12:16:28,186 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:16:28,186 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 12:16:28,186 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 12:16:28,187 INFO  L87              Difference]: Start difference. First operand 2552 states and 2737 transitions. cyclomatic complexity: 187 Second operand 7 states.
[2020-11-25 12:16:29,189 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:16:29,189 INFO  L93              Difference]: Finished difference Result 2760 states and 2961 transitions.
[2020-11-25 12:16:29,189 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 12:16:29,190 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2760 states and 2961 transitions.
[2020-11-25 12:16:29,200 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:16:29,211 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2760 states to 2760 states and 2961 transitions.
[2020-11-25 12:16:29,212 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 958
[2020-11-25 12:16:29,212 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 958
[2020-11-25 12:16:29,213 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2760 states and 2961 transitions.
[2020-11-25 12:16:29,215 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:16:29,215 INFO  L728         BuchiCegarLoop]: Abstraction has 2760 states and 2961 transitions.
[2020-11-25 12:16:29,218 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2760 states and 2961 transitions.
[2020-11-25 12:16:29,244 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2760 to 2608.
[2020-11-25 12:16:29,244 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2608 states.
[2020-11-25 12:16:29,247 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2608 states to 2608 states and 2797 transitions.
[2020-11-25 12:16:29,247 INFO  L751         BuchiCegarLoop]: Abstraction has 2608 states and 2797 transitions.
[2020-11-25 12:16:29,247 INFO  L631         BuchiCegarLoop]: Abstraction has 2608 states and 2797 transitions.
[2020-11-25 12:16:29,247 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 12:16:29,247 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2608 states and 2797 transitions.
[2020-11-25 12:16:29,254 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:16:29,254 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:16:29,254 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:16:29,256 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:16:29,256 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_COINSTO0 := false;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == COINSTO;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_COINSTO[this] := 799609355;
[L2236]              name_COINSTO[this] := 799609355;
[L2237]              decimals_COINSTO[this] := 0;
[L2238]              _totalSupply_COINSTO[this] := 0;
[L2239]              balances_COINSTO[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_COINSTO[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_COINSTO[this] := -880863315;
[L2245]              name_COINSTO[this] := 338186849;
[L2246]              decimals_COINSTO[this] := 8;
[L2247]              _totalSupply_COINSTO[this] := 88888888888800000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2249]              balances_COINSTO[this][107758664870216964054459507317936865222947681831] := _totalSupply_COINSTO[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2251]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2288]  RET         call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_COINSTO[this][from_s458]) && tokens_s458 <= allowed_COINSTO[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s458] >= 0) && balances_COINSTO[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][from_s458] >= 0) && balances_COINSTO[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_COINSTO[this][from_s458][msgsender_MSG] >= 0) && allowed_COINSTO[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_COINSTO0 := true;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == COINSTO
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][from_s458];
[L2458]              balances_COINSTO[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][from_s458];
[L2460]  COND TRUE   DType[this] == COINSTO
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_COINSTO[this][from_s458][msgsender_MSG];
[L2469]              allowed_COINSTO[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_COINSTO[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == COINSTO
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][to_s458];
[L2480]              balances_COINSTO[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s458 == true && allowed_COINSTO[this][from_s458][msgsender_MSG] == old(allowed_COINSTO[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_COINSTO[this] == old(_totalSupply_COINSTO[this])) && balances_COINSTO[this] == old(balances_COINSTO[this])) && allowed_COINSTO[this][p1][p2] == old(allowed_COINSTO[this][p1][p2])) && symbol_COINSTO[this] == old(symbol_COINSTO[this])) && name_COINSTO[this] == old(name_COINSTO[this])) && decimals_COINSTO[this] == old(decimals_COINSTO[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_COINSTO(this);

Loop:
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_COINSTO[this][from_s458]) && tokens_s458 <= allowed_COINSTO[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s458] >= 0) && balances_COINSTO[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][from_s458] >= 0) && balances_COINSTO[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_COINSTO[this][from_s458][msgsender_MSG] >= 0) && allowed_COINSTO[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_COINSTO0 := true;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == COINSTO
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][from_s458];
[L2458]              balances_COINSTO[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][from_s458];
[L2460]  COND TRUE   DType[this] == COINSTO
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_COINSTO[this][from_s458][msgsender_MSG];
[L2469]              allowed_COINSTO[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_COINSTO[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == COINSTO
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][to_s458];
[L2480]              balances_COINSTO[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s458 == true && allowed_COINSTO[this][from_s458][msgsender_MSG] == old(allowed_COINSTO[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_COINSTO[this] == old(_totalSupply_COINSTO[this])) && balances_COINSTO[this] == old(balances_COINSTO[this])) && allowed_COINSTO[this][p1][p2] == old(allowed_COINSTO[this][p1][p2])) && symbol_COINSTO[this] == old(symbol_COINSTO[this])) && name_COINSTO[this] == old(name_COINSTO[this])) && decimals_COINSTO[this] == old(decimals_COINSTO[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_COINSTO(this);

[2020-11-25 12:16:29,261 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:16:29,261 INFO  L82        PathProgramCache]: Analyzing trace with hash 1346897087, now seen corresponding path program 1 times
[2020-11-25 12:16:29,262 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:16:29,318 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:16:30,331 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 1 proven. 2 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 12:16:30,331 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:16:30,331 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-11-25 12:16:30,332 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:16:30,332 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 12:16:30,332 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=61, Invalid=641, Unknown=0, NotChecked=0, Total=702
[2020-11-25 12:16:30,332 INFO  L87              Difference]: Start difference. First operand 2608 states and 2797 transitions. cyclomatic complexity: 191 Second operand 27 states.
[2020-11-25 12:16:37,270 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:16:37,270 INFO  L93              Difference]: Finished difference Result 2701 states and 2916 transitions.
[2020-11-25 12:16:37,271 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 12:16:37,271 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2701 states and 2916 transitions.
[2020-11-25 12:16:37,276 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 12:16:37,284 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2701 states to 2701 states and 2916 transitions.
[2020-11-25 12:16:37,284 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 926
[2020-11-25 12:16:37,285 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 926
[2020-11-25 12:16:37,285 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2701 states and 2916 transitions.
[2020-11-25 12:16:37,288 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:16:37,288 INFO  L728         BuchiCegarLoop]: Abstraction has 2701 states and 2916 transitions.
[2020-11-25 12:16:37,290 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2701 states and 2916 transitions.
[2020-11-25 12:16:37,312 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2701 to 2684.
[2020-11-25 12:16:37,312 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2684 states.
[2020-11-25 12:16:37,315 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2684 states to 2684 states and 2883 transitions.
[2020-11-25 12:16:37,315 INFO  L751         BuchiCegarLoop]: Abstraction has 2684 states and 2883 transitions.
[2020-11-25 12:16:37,315 INFO  L631         BuchiCegarLoop]: Abstraction has 2684 states and 2883 transitions.
[2020-11-25 12:16:37,316 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 12:16:37,316 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2684 states and 2883 transitions.
[2020-11-25 12:16:37,319 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:16:37,319 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:16:37,319 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:16:37,321 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:16:37,321 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_COINSTO0 := false;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == COINSTO;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_COINSTO[this] := 799609355;
[L2236]              name_COINSTO[this] := 799609355;
[L2237]              decimals_COINSTO[this] := 0;
[L2238]              _totalSupply_COINSTO[this] := 0;
[L2239]              balances_COINSTO[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_COINSTO[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_COINSTO[this] := -880863315;
[L2245]              name_COINSTO[this] := 338186849;
[L2246]              decimals_COINSTO[this] := 8;
[L2247]              _totalSupply_COINSTO[this] := 88888888888800000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2249]              balances_COINSTO[this][107758664870216964054459507317936865222947681831] := _totalSupply_COINSTO[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2251]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2288]  RET         call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_COINSTO[this][from_s458]) && tokens_s458 <= allowed_COINSTO[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s458] >= 0) && balances_COINSTO[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][from_s458] >= 0) && balances_COINSTO[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_COINSTO[this][from_s458][msgsender_MSG] >= 0) && allowed_COINSTO[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_COINSTO0 := true;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_COINSTO_lvl0 := alloc_allowed_COINSTO_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_COINSTO := symbol_COINSTO;
[L1064]              __tmp__name_COINSTO := name_COINSTO;
[L1065]              __tmp__decimals_COINSTO := decimals_COINSTO;
[L1066]              __tmp___totalSupply_COINSTO := _totalSupply_COINSTO;
[L1067]              __tmp__balances_COINSTO := balances_COINSTO;
[L1068]              __tmp__allowed_COINSTO := allowed_COINSTO;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == COINSTO
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_COINSTO[this][from_s458];
[L2416]              __tmp__balances_COINSTO[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_COINSTO[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == COINSTO
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND TRUE   !(b_s45 <= a_s45)
[L1987]              revert := true;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_COINSTO(this);

Loop:
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_COINSTO[this][from_s458]) && tokens_s458 <= allowed_COINSTO[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s458] >= 0) && balances_COINSTO[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][from_s458] >= 0) && balances_COINSTO[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_COINSTO[this][from_s458][msgsender_MSG] >= 0) && allowed_COINSTO[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_COINSTO0 := true;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_COINSTO_lvl0 := alloc_allowed_COINSTO_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_COINSTO := symbol_COINSTO;
[L1064]              __tmp__name_COINSTO := name_COINSTO;
[L1065]              __tmp__decimals_COINSTO := decimals_COINSTO;
[L1066]              __tmp___totalSupply_COINSTO := _totalSupply_COINSTO;
[L1067]              __tmp__balances_COINSTO := balances_COINSTO;
[L1068]              __tmp__allowed_COINSTO := allowed_COINSTO;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == COINSTO
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_COINSTO[this][from_s458];
[L2416]              __tmp__balances_COINSTO[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_COINSTO[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == COINSTO
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND TRUE   !(b_s45 <= a_s45)
[L1987]              revert := true;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_COINSTO(this);

[2020-11-25 12:16:37,324 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:16:37,325 INFO  L82        PathProgramCache]: Analyzing trace with hash 958085163, now seen corresponding path program 1 times
[2020-11-25 12:16:37,325 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:16:37,333 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:16:37,395 INFO  L134       CoverageAnalysis]: Checked inductivity of 3 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 12:16:37,396 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:16:37,396 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 12:16:37,396 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:16:37,396 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 12:16:37,396 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=156, Unknown=0, NotChecked=0, Total=182
[2020-11-25 12:16:37,396 INFO  L87              Difference]: Start difference. First operand 2684 states and 2883 transitions. cyclomatic complexity: 203 Second operand 14 states.
[2020-11-25 12:16:38,709 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:16:38,709 INFO  L93              Difference]: Finished difference Result 2826 states and 3087 transitions.
[2020-11-25 12:16:38,709 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 12:16:38,709 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2826 states and 3087 transitions.
[2020-11-25 12:16:38,718 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 12:16:38,727 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2826 states to 2826 states and 3087 transitions.
[2020-11-25 12:16:38,728 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 989
[2020-11-25 12:16:38,728 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 989
[2020-11-25 12:16:38,728 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2826 states and 3087 transitions.
[2020-11-25 12:16:38,731 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:16:38,732 INFO  L728         BuchiCegarLoop]: Abstraction has 2826 states and 3087 transitions.
[2020-11-25 12:16:38,734 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2826 states and 3087 transitions.
[2020-11-25 12:16:38,753 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2826 to 2760.
[2020-11-25 12:16:38,753 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2760 states.
[2020-11-25 12:16:38,756 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2760 states to 2760 states and 2977 transitions.
[2020-11-25 12:16:38,756 INFO  L751         BuchiCegarLoop]: Abstraction has 2760 states and 2977 transitions.
[2020-11-25 12:16:38,756 INFO  L631         BuchiCegarLoop]: Abstraction has 2760 states and 2977 transitions.
[2020-11-25 12:16:38,756 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 12:16:38,756 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2760 states and 2977 transitions.
[2020-11-25 12:16:38,759 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 12:16:38,759 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:16:38,759 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:16:38,760 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:16:38,760 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_COINSTO0 := false;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == COINSTO;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_COINSTO[this] := 799609355;
[L2236]              name_COINSTO[this] := 799609355;
[L2237]              decimals_COINSTO[this] := 0;
[L2238]              _totalSupply_COINSTO[this] := 0;
[L2239]              balances_COINSTO[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_COINSTO[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_COINSTO[this] := -880863315;
[L2245]              name_COINSTO[this] := 338186849;
[L2246]              decimals_COINSTO[this] := 8;
[L2247]              _totalSupply_COINSTO[this] := 88888888888800000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2249]              balances_COINSTO[this][107758664870216964054459507317936865222947681831] := _totalSupply_COINSTO[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2251]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2288]  RET         call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_COINSTO[this][from_s458]) && tokens_s458 <= allowed_COINSTO[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s458] >= 0) && balances_COINSTO[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][from_s458] >= 0) && balances_COINSTO[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_COINSTO[this][from_s458][msgsender_MSG] >= 0) && allowed_COINSTO[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_COINSTO0 := true;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_COINSTO_lvl0 := alloc_allowed_COINSTO_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_COINSTO := symbol_COINSTO;
[L1064]              __tmp__name_COINSTO := name_COINSTO;
[L1065]              __tmp__decimals_COINSTO := decimals_COINSTO;
[L1066]              __tmp___totalSupply_COINSTO := _totalSupply_COINSTO;
[L1067]              __tmp__balances_COINSTO := balances_COINSTO;
[L1068]              __tmp__allowed_COINSTO := allowed_COINSTO;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == COINSTO
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_COINSTO[this][from_s458];
[L2416]              __tmp__balances_COINSTO[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_COINSTO[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == COINSTO
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND FALSE  !(revert)
[L2426]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] - __tmp__allowed_COINSTO[this][from_s458][msgsender_MSG];
[L2427]              __tmp__allowed_COINSTO[this][from_s458][msgsender_MSG] := __var_6;
[L2428]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] + __tmp__allowed_COINSTO[this][from_s458][msgsender_MSG];
[L2429]  COND TRUE   __tmp__DType[this] == COINSTO
[L2430]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][to_s458], tokens_s458);
[L1968]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1969]  COND TRUE   !(c_s23 >= a_s23)
[L1970]              revert := true;
[L2430]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][to_s458], tokens_s458);
[L2431]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_COINSTO(this);

Loop:
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND TRUE   choice == 20
[L4111]              gas := gas - 21000;
[L4112]  COND FALSE  !(gas >= 0)
[L4261]  RET         call CorralChoice_COINSTO(this);

[2020-11-25 12:16:38,763 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:16:38,763 INFO  L82        PathProgramCache]: Analyzing trace with hash -1006588648, now seen corresponding path program 1 times
[2020-11-25 12:16:38,763 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:16:38,773 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:16:38,854 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 2 trivial. 0 not checked.
[2020-11-25 12:16:38,854 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:16:38,854 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [16] total 16
[2020-11-25 12:16:38,854 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:16:38,854 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 12:16:38,854 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=32, Invalid=240, Unknown=0, NotChecked=0, Total=272
[2020-11-25 12:16:38,855 INFO  L87              Difference]: Start difference. First operand 2760 states and 2977 transitions. cyclomatic complexity: 223 Second operand 17 states.
[2020-11-25 12:16:40,723 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:16:40,723 INFO  L93              Difference]: Finished difference Result 2791 states and 3029 transitions.
[2020-11-25 12:16:40,723 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 12:16:40,723 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2791 states and 3029 transitions.
[2020-11-25 12:16:40,728 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 12:16:40,734 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2791 states to 2791 states and 3029 transitions.
[2020-11-25 12:16:40,734 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 996
[2020-11-25 12:16:40,735 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 996
[2020-11-25 12:16:40,735 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2791 states and 3029 transitions.
[2020-11-25 12:16:40,737 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:16:40,737 INFO  L728         BuchiCegarLoop]: Abstraction has 2791 states and 3029 transitions.
[2020-11-25 12:16:40,739 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2791 states and 3029 transitions.
[2020-11-25 12:16:40,754 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2791 to 2760.
[2020-11-25 12:16:40,754 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2760 states.
[2020-11-25 12:16:40,757 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2760 states to 2760 states and 2977 transitions.
[2020-11-25 12:16:40,757 INFO  L751         BuchiCegarLoop]: Abstraction has 2760 states and 2977 transitions.
[2020-11-25 12:16:40,757 INFO  L631         BuchiCegarLoop]: Abstraction has 2760 states and 2977 transitions.
[2020-11-25 12:16:40,757 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 12:16:40,757 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2760 states and 2977 transitions.
[2020-11-25 12:16:40,760 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 12:16:40,760 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:16:40,760 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:16:40,762 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:16:40,762 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_COINSTO0 := false;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == COINSTO;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_COINSTO[this] := 799609355;
[L2236]              name_COINSTO[this] := 799609355;
[L2237]              decimals_COINSTO[this] := 0;
[L2238]              _totalSupply_COINSTO[this] := 0;
[L2239]              balances_COINSTO[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_COINSTO[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_COINSTO[this] := -880863315;
[L2245]              name_COINSTO[this] := 338186849;
[L2246]              decimals_COINSTO[this] := 8;
[L2247]              _totalSupply_COINSTO[this] := 88888888888800000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2249]              balances_COINSTO[this][107758664870216964054459507317936865222947681831] := _totalSupply_COINSTO[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2251]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2288]  RET         call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_COINSTO[this][from_s458]) && tokens_s458 <= allowed_COINSTO[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s458] >= 0) && balances_COINSTO[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][from_s458] >= 0) && balances_COINSTO[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_COINSTO[this][from_s458][msgsender_MSG] >= 0) && allowed_COINSTO[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_COINSTO0 := true;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_COINSTO_lvl0 := alloc_allowed_COINSTO_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_COINSTO := symbol_COINSTO;
[L1064]              __tmp__name_COINSTO := name_COINSTO;
[L1065]              __tmp__decimals_COINSTO := decimals_COINSTO;
[L1066]              __tmp___totalSupply_COINSTO := _totalSupply_COINSTO;
[L1067]              __tmp__balances_COINSTO := balances_COINSTO;
[L1068]              __tmp__allowed_COINSTO := allowed_COINSTO;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == COINSTO
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_COINSTO[this][from_s458];
[L2416]              __tmp__balances_COINSTO[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_COINSTO[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == COINSTO
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND FALSE  !(revert)
[L2426]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] - __tmp__allowed_COINSTO[this][from_s458][msgsender_MSG];
[L2427]              __tmp__allowed_COINSTO[this][from_s458][msgsender_MSG] := __var_6;
[L2428]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] + __tmp__allowed_COINSTO[this][from_s458][msgsender_MSG];
[L2429]  COND TRUE   __tmp__DType[this] == COINSTO
[L2430]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][to_s458], tokens_s458);
[L1968]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1969]  COND FALSE  !(!(c_s23 >= a_s23))
[L2430]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][to_s458], tokens_s458);
[L2431]  COND FALSE  !(revert)
[L2437]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_COINSTO[this][to_s458];
[L2438]              __tmp__balances_COINSTO[this][to_s458] := __var_7;
[L2439]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_COINSTO[this][to_s458];
[L2440]              success_s458 := true;
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_COINSTO(this);

Loop:
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_COINSTO[this][from_s458]) && tokens_s458 <= allowed_COINSTO[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s458] >= 0) && balances_COINSTO[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][from_s458] >= 0) && balances_COINSTO[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_COINSTO[this][from_s458][msgsender_MSG] >= 0) && allowed_COINSTO[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_COINSTO0 := true;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_COINSTO_lvl0 := alloc_allowed_COINSTO_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_COINSTO := symbol_COINSTO;
[L1064]              __tmp__name_COINSTO := name_COINSTO;
[L1065]              __tmp__decimals_COINSTO := decimals_COINSTO;
[L1066]              __tmp___totalSupply_COINSTO := _totalSupply_COINSTO;
[L1067]              __tmp__balances_COINSTO := balances_COINSTO;
[L1068]              __tmp__allowed_COINSTO := allowed_COINSTO;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == COINSTO
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_COINSTO[this][from_s458];
[L2416]              __tmp__balances_COINSTO[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_COINSTO[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == COINSTO
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND FALSE  !(revert)
[L2426]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] - __tmp__allowed_COINSTO[this][from_s458][msgsender_MSG];
[L2427]              __tmp__allowed_COINSTO[this][from_s458][msgsender_MSG] := __var_6;
[L2428]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] + __tmp__allowed_COINSTO[this][from_s458][msgsender_MSG];
[L2429]  COND TRUE   __tmp__DType[this] == COINSTO
[L2430]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][to_s458], tokens_s458);
[L1968]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1969]  COND FALSE  !(!(c_s23 >= a_s23))
[L2430]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][to_s458], tokens_s458);
[L2431]  COND FALSE  !(revert)
[L2437]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_COINSTO[this][to_s458];
[L2438]              __tmp__balances_COINSTO[this][to_s458] := __var_7;
[L2439]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_COINSTO[this][to_s458];
[L2440]              success_s458 := true;
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_COINSTO(this);

[2020-11-25 12:16:40,765 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:16:40,765 INFO  L82        PathProgramCache]: Analyzing trace with hash 1203652438, now seen corresponding path program 1 times
[2020-11-25 12:16:40,766 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:16:40,774 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:16:40,798 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-25 12:16:40,798 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:16:40,798 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 12:16:40,798 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:16:40,798 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 12:16:40,798 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 12:16:40,798 INFO  L87              Difference]: Start difference. First operand 2760 states and 2977 transitions. cyclomatic complexity: 223 Second operand 5 states.
[2020-11-25 12:16:41,108 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:16:41,108 INFO  L93              Difference]: Finished difference Result 3488 states and 3897 transitions.
[2020-11-25 12:16:41,108 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 12:16:41,108 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3488 states and 3897 transitions.
[2020-11-25 12:16:41,117 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 12:16:41,124 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3488 states to 2679 states and 3085 transitions.
[2020-11-25 12:16:41,124 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 752
[2020-11-25 12:16:41,125 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 752
[2020-11-25 12:16:41,125 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2679 states and 3085 transitions.
[2020-11-25 12:16:41,127 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:16:41,127 INFO  L728         BuchiCegarLoop]: Abstraction has 2679 states and 3085 transitions.
[2020-11-25 12:16:41,129 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2679 states and 3085 transitions.
[2020-11-25 12:16:41,143 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2679 to 1921.
[2020-11-25 12:16:41,144 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1921 states.
[2020-11-25 12:16:41,145 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1921 states to 1921 states and 2080 transitions.
[2020-11-25 12:16:41,145 INFO  L751         BuchiCegarLoop]: Abstraction has 1921 states and 2080 transitions.
[2020-11-25 12:16:41,145 INFO  L631         BuchiCegarLoop]: Abstraction has 1921 states and 2080 transitions.
[2020-11-25 12:16:41,145 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 12:16:41,145 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1921 states and 2080 transitions.
[2020-11-25 12:16:41,148 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:16:41,148 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:16:41,148 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:16:41,149 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:16:41,149 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_COINSTO0 := false;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == COINSTO;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_COINSTO[this] := 799609355;
[L2236]              name_COINSTO[this] := 799609355;
[L2237]              decimals_COINSTO[this] := 0;
[L2238]              _totalSupply_COINSTO[this] := 0;
[L2239]              balances_COINSTO[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_COINSTO[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_COINSTO[this] := -880863315;
[L2245]              name_COINSTO[this] := 338186849;
[L2246]              decimals_COINSTO[this] := 8;
[L2247]              _totalSupply_COINSTO[this] := 88888888888800000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2249]              balances_COINSTO[this][107758664870216964054459507317936865222947681831] := _totalSupply_COINSTO[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2251]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2288]  RET         call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND TRUE   choice == 12
[L4168]              gas := gas - 21000;
[L4169]  COND TRUE   gas >= 0
[L4170]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4171]              assume msgvalue_MSG == 0;
[L4172]  CALL        call success_s399 := approve~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s399 := approve~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2394]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_COINSTO[this][msgsender_MSG][spender_s399];
[L2395]              allowed_COINSTO[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2396]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_COINSTO[this][msgsender_MSG][spender_s399];
[L2397]              assert { :EventEmitted "Approval_COINSTO" } true;
[L2398]              success_s399 := true;
[L1014]  RET         call success_s399 := approve~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1015]              assume !revert && gas >= 0;
[L4172]  RET         call success_s399 := approve~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4261]  RET         call CorralChoice_COINSTO(this);
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_COINSTO[this][from_s458]) && tokens_s458 <= allowed_COINSTO[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s458] >= 0) && balances_COINSTO[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][from_s458] >= 0) && balances_COINSTO[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_COINSTO[this][from_s458][msgsender_MSG] >= 0) && allowed_COINSTO[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_COINSTO0 := true;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == COINSTO
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][from_s458];
[L2458]              balances_COINSTO[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][from_s458];
[L2460]  COND TRUE   DType[this] == COINSTO
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_COINSTO[this][from_s458][msgsender_MSG];
[L2469]              allowed_COINSTO[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_COINSTO[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == COINSTO
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][to_s458];
[L2480]              balances_COINSTO[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s458 == true && allowed_COINSTO[this][from_s458][msgsender_MSG] == old(allowed_COINSTO[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_COINSTO[this] == old(_totalSupply_COINSTO[this])) && balances_COINSTO[this] == old(balances_COINSTO[this])) && allowed_COINSTO[this][p1][p2] == old(allowed_COINSTO[this][p1][p2])) && symbol_COINSTO[this] == old(symbol_COINSTO[this])) && name_COINSTO[this] == old(name_COINSTO[this])) && decimals_COINSTO[this] == old(decimals_COINSTO[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_COINSTO(this);

Loop:
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND TRUE   choice == 20
[L4111]              gas := gas - 21000;
[L4112]  COND FALSE  !(gas >= 0)
[L4261]  RET         call CorralChoice_COINSTO(this);

[2020-11-25 12:16:41,152 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:16:41,152 INFO  L82        PathProgramCache]: Analyzing trace with hash 189448747, now seen corresponding path program 1 times
[2020-11-25 12:16:41,153 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:16:41,200 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:16:41,921 WARN  L188               SmtUtils]: Spent 140.00 ms on a formula simplification. DAG size of input: 113 DAG size of output: 61
[2020-11-25 12:16:42,443 WARN  L188               SmtUtils]: Spent 390.00 ms on a formula simplification. DAG size of input: 178 DAG size of output: 113
[2020-11-25 12:16:42,795 WARN  L188               SmtUtils]: Spent 259.00 ms on a formula simplification. DAG size of input: 183 DAG size of output: 101
[2020-11-25 12:16:43,008 WARN  L188               SmtUtils]: Spent 114.00 ms on a formula simplification. DAG size of input: 191 DAG size of output: 81
[2020-11-25 12:16:43,712 INFO  L134       CoverageAnalysis]: Checked inductivity of 73 backedges. 0 proven. 4 refuted. 0 times theorem prover too weak. 69 trivial. 0 not checked.
[2020-11-25 12:16:43,712 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:16:43,712 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [34] total 34
[2020-11-25 12:16:43,712 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:16:43,713 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 35 interpolants.
[2020-11-25 12:16:43,713 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=98, Invalid=1092, Unknown=0, NotChecked=0, Total=1190
[2020-11-25 12:16:43,713 INFO  L87              Difference]: Start difference. First operand 1921 states and 2080 transitions. cyclomatic complexity: 163 Second operand 35 states.
[2020-11-25 12:16:49,893 WARN  L188               SmtUtils]: Spent 310.00 ms on a formula simplification. DAG size of input: 123 DAG size of output: 117
[2020-11-25 12:16:50,495 WARN  L188               SmtUtils]: Spent 311.00 ms on a formula simplification. DAG size of input: 134 DAG size of output: 121
[2020-11-25 12:16:56,812 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:16:56,812 INFO  L93              Difference]: Finished difference Result 1958 states and 2150 transitions.
[2020-11-25 12:16:56,812 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 34 states. 
[2020-11-25 12:16:56,813 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1958 states and 2150 transitions.
[2020-11-25 12:16:56,816 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 12:16:56,820 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1958 states to 1958 states and 2150 transitions.
[2020-11-25 12:16:56,820 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 602
[2020-11-25 12:16:56,820 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 602
[2020-11-25 12:16:56,820 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1958 states and 2150 transitions.
[2020-11-25 12:16:56,821 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:16:56,821 INFO  L728         BuchiCegarLoop]: Abstraction has 1958 states and 2150 transitions.
[2020-11-25 12:16:56,823 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1958 states and 2150 transitions.
[2020-11-25 12:16:56,832 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1958 to 1943.
[2020-11-25 12:16:56,832 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1943 states.
[2020-11-25 12:16:56,834 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1943 states to 1943 states and 2113 transitions.
[2020-11-25 12:16:56,834 INFO  L751         BuchiCegarLoop]: Abstraction has 1943 states and 2113 transitions.
[2020-11-25 12:16:56,834 INFO  L631         BuchiCegarLoop]: Abstraction has 1943 states and 2113 transitions.
[2020-11-25 12:16:56,834 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 12:16:56,834 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1943 states and 2113 transitions.
[2020-11-25 12:16:56,836 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:16:56,836 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:16:56,836 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:16:56,837 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:16:56,837 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_COINSTO0 := false;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == COINSTO;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_COINSTO[this] := 799609355;
[L2236]              name_COINSTO[this] := 799609355;
[L2237]              decimals_COINSTO[this] := 0;
[L2238]              _totalSupply_COINSTO[this] := 0;
[L2239]              balances_COINSTO[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_COINSTO[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_COINSTO[this] := -880863315;
[L2245]              name_COINSTO[this] := 338186849;
[L2246]              decimals_COINSTO[this] := 8;
[L2247]              _totalSupply_COINSTO[this] := 88888888888800000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2249]              balances_COINSTO[this][107758664870216964054459507317936865222947681831] := _totalSupply_COINSTO[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2251]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2288]  RET         call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND FALSE  !(choice == 11)
[L4181]  COND FALSE  !(choice == 10)
[L4187]  COND FALSE  !(choice == 9)
[L4193]  COND FALSE  !(choice == 8)
[L4199]  COND FALSE  !(choice == 7)
[L4205]  COND FALSE  !(choice == 6)
[L4211]  COND FALSE  !(choice == 5)
[L4217]  COND FALSE  !(choice == 4)
[L4223]  COND FALSE  !(choice == 3)
[L4229]  COND TRUE   choice == 2
[L4230]              gas := gas - 21000;
[L4231]  COND TRUE   gas >= 0
[L4232]              assume tokens_s517 >= 0 && tokens_s517 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4233]              assume msgvalue_MSG == 0;
[L4234]  CALL        call success_s517 := approveAndCall~address~uint256~bytes_COINSTO(this, msgsender_MSG, msgvalue_MSG, spender_s517, tokens_s517, data_s517);
[L1157]              havoc __exception;
[L1158]              revert := false;
[L1159]  COND FALSE  !(__exception)
[L1182]  CALL        call success_s517 := approveAndCall~address~uint256~bytes_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, spender_s517, tokens_s517, data_s517);
[L2520]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_COINSTO[this][msgsender_MSG][spender_s517];
[L2521]              allowed_COINSTO[this][msgsender_MSG][spender_s517] := tokens_s517;
[L2522]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_COINSTO[this][msgsender_MSG][spender_s517];
[L2523]              assert { :EventEmitted "Approval_COINSTO" } true;
[L2524]              assume DType[spender_s517] == ApproveAndCallFallBack;
[L2525]              __var_8 := spender_s517;
[L2526]              __var_10 := this;
[L2528]              success_s517 := true;
[L1182]  RET         call success_s517 := approveAndCall~address~uint256~bytes_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, spender_s517, tokens_s517, data_s517);
[L1183]              assume !revert && gas >= 0;
[L4234]  RET         call success_s517 := approveAndCall~address~uint256~bytes_COINSTO(this, msgsender_MSG, msgvalue_MSG, spender_s517, tokens_s517, data_s517);
[L4261]  RET         call CorralChoice_COINSTO(this);
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_COINSTO[this][from_s458]) && tokens_s458 <= allowed_COINSTO[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s458] >= 0) && balances_COINSTO[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][from_s458] >= 0) && balances_COINSTO[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_COINSTO[this][from_s458][msgsender_MSG] >= 0) && allowed_COINSTO[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_COINSTO0 := true;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == COINSTO
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][from_s458];
[L2458]              balances_COINSTO[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][from_s458];
[L2460]  COND TRUE   DType[this] == COINSTO
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_COINSTO[this][from_s458][msgsender_MSG];
[L2469]              allowed_COINSTO[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_COINSTO[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == COINSTO
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][to_s458];
[L2480]              balances_COINSTO[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s458 == true && allowed_COINSTO[this][from_s458][msgsender_MSG] == old(allowed_COINSTO[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_COINSTO[this] == old(_totalSupply_COINSTO[this])) && balances_COINSTO[this] == old(balances_COINSTO[this])) && allowed_COINSTO[this][p1][p2] == old(allowed_COINSTO[this][p1][p2])) && symbol_COINSTO[this] == old(symbol_COINSTO[this])) && name_COINSTO[this] == old(name_COINSTO[this])) && decimals_COINSTO[this] == old(decimals_COINSTO[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_COINSTO(this);

Loop:
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_COINSTO[this][from_s458]) && tokens_s458 <= allowed_COINSTO[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s458] >= 0) && balances_COINSTO[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][from_s458] >= 0) && balances_COINSTO[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_COINSTO[this][from_s458][msgsender_MSG] >= 0) && allowed_COINSTO[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_COINSTO0 := true;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == COINSTO
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][from_s458];
[L2458]              balances_COINSTO[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][from_s458];
[L2460]  COND TRUE   DType[this] == COINSTO
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_COINSTO[this][from_s458][msgsender_MSG];
[L2469]              allowed_COINSTO[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_COINSTO[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == COINSTO
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][to_s458];
[L2480]              balances_COINSTO[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s458 == true && allowed_COINSTO[this][from_s458][msgsender_MSG] == old(allowed_COINSTO[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_COINSTO[this] == old(_totalSupply_COINSTO[this])) && balances_COINSTO[this] == old(balances_COINSTO[this])) && allowed_COINSTO[this][p1][p2] == old(allowed_COINSTO[this][p1][p2])) && symbol_COINSTO[this] == old(symbol_COINSTO[this])) && name_COINSTO[this] == old(name_COINSTO[this])) && decimals_COINSTO[this] == old(decimals_COINSTO[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_COINSTO(this);

[2020-11-25 12:16:56,841 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:16:56,841 INFO  L82        PathProgramCache]: Analyzing trace with hash -1354164932, now seen corresponding path program 1 times
[2020-11-25 12:16:56,842 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:16:56,878 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:16:57,667 WARN  L188               SmtUtils]: Spent 119.00 ms on a formula simplification. DAG size of input: 112 DAG size of output: 79
[2020-11-25 12:16:58,607 INFO  L134       CoverageAnalysis]: Checked inductivity of 74 backedges. 14 proven. 3 refuted. 0 times theorem prover too weak. 57 trivial. 0 not checked.
[2020-11-25 12:16:58,607 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:16:58,607 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [39] total 39
[2020-11-25 12:16:58,607 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:16:58,608 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 40 interpolants.
[2020-11-25 12:16:58,608 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=115, Invalid=1445, Unknown=0, NotChecked=0, Total=1560
[2020-11-25 12:16:58,608 INFO  L87              Difference]: Start difference. First operand 1943 states and 2113 transitions. cyclomatic complexity: 176 Second operand 40 states.
[2020-11-25 12:17:03,118 WARN  L188               SmtUtils]: Spent 118.00 ms on a formula simplification. DAG size of input: 115 DAG size of output: 98
[2020-11-25 12:17:07,897 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:17:07,898 INFO  L93              Difference]: Finished difference Result 1962 states and 2164 transitions.
[2020-11-25 12:17:07,898 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 39 states. 
[2020-11-25 12:17:07,898 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1962 states and 2164 transitions.
[2020-11-25 12:17:07,901 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 12:17:07,905 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1962 states to 1962 states and 2164 transitions.
[2020-11-25 12:17:07,905 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 602
[2020-11-25 12:17:07,906 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 602
[2020-11-25 12:17:07,906 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1962 states and 2164 transitions.
[2020-11-25 12:17:07,907 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:17:07,907 INFO  L728         BuchiCegarLoop]: Abstraction has 1962 states and 2164 transitions.
[2020-11-25 12:17:07,909 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1962 states and 2164 transitions.
[2020-11-25 12:17:07,918 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1962 to 1943.
[2020-11-25 12:17:07,918 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1943 states.
[2020-11-25 12:17:07,920 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1943 states to 1943 states and 2113 transitions.
[2020-11-25 12:17:07,920 INFO  L751         BuchiCegarLoop]: Abstraction has 1943 states and 2113 transitions.
[2020-11-25 12:17:07,920 INFO  L631         BuchiCegarLoop]: Abstraction has 1943 states and 2113 transitions.
[2020-11-25 12:17:07,920 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 12:17:07,920 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1943 states and 2113 transitions.
[2020-11-25 12:17:07,922 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:17:07,922 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:17:07,923 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:17:07,923 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:17:07,923 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_COINSTO0 := false;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == COINSTO;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_COINSTO[this] := 799609355;
[L2236]              name_COINSTO[this] := 799609355;
[L2237]              decimals_COINSTO[this] := 0;
[L2238]              _totalSupply_COINSTO[this] := 0;
[L2239]              balances_COINSTO[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_COINSTO[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_COINSTO[this] := -880863315;
[L2245]              name_COINSTO[this] := 338186849;
[L2246]              decimals_COINSTO[this] := 8;
[L2247]              _totalSupply_COINSTO[this] := 88888888888800000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2249]              balances_COINSTO[this][107758664870216964054459507317936865222947681831] := _totalSupply_COINSTO[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2251]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2288]  RET         call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND TRUE   choice == 12
[L4168]              gas := gas - 21000;
[L4169]  COND TRUE   gas >= 0
[L4170]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4171]              assume msgvalue_MSG == 0;
[L4172]  CALL        call success_s399 := approve~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s399 := approve~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2394]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_COINSTO[this][msgsender_MSG][spender_s399];
[L2395]              allowed_COINSTO[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2396]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_COINSTO[this][msgsender_MSG][spender_s399];
[L2397]              assert { :EventEmitted "Approval_COINSTO" } true;
[L2398]              success_s399 := true;
[L1014]  RET         call success_s399 := approve~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1015]              assume !revert && gas >= 0;
[L4172]  RET         call success_s399 := approve~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4261]  RET         call CorralChoice_COINSTO(this);
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_COINSTO[this][from_s458]) && tokens_s458 <= allowed_COINSTO[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s458] >= 0) && balances_COINSTO[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][from_s458] >= 0) && balances_COINSTO[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_COINSTO[this][from_s458][msgsender_MSG] >= 0) && allowed_COINSTO[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_COINSTO0 := true;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_COINSTO_lvl0 := alloc_allowed_COINSTO_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_COINSTO := symbol_COINSTO;
[L1064]              __tmp__name_COINSTO := name_COINSTO;
[L1065]              __tmp__decimals_COINSTO := decimals_COINSTO;
[L1066]              __tmp___totalSupply_COINSTO := _totalSupply_COINSTO;
[L1067]              __tmp__balances_COINSTO := balances_COINSTO;
[L1068]              __tmp__allowed_COINSTO := allowed_COINSTO;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == COINSTO
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_COINSTO[this][from_s458];
[L2416]              __tmp__balances_COINSTO[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_COINSTO[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == COINSTO
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND TRUE   !(b_s45 <= a_s45)
[L1987]              revert := true;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_COINSTO(this);

Loop:
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND TRUE   choice == 20
[L4111]              gas := gas - 21000;
[L4112]  COND FALSE  !(gas >= 0)
[L4261]  RET         call CorralChoice_COINSTO(this);

[2020-11-25 12:17:07,926 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:17:07,926 INFO  L82        PathProgramCache]: Analyzing trace with hash -1840881513, now seen corresponding path program 1 times
[2020-11-25 12:17:07,927 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:17:07,936 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:17:07,979 INFO  L134       CoverageAnalysis]: Checked inductivity of 72 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 70 trivial. 0 not checked.
[2020-11-25 12:17:07,979 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:17:07,979 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 12:17:07,979 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:17:07,979 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 12:17:07,979 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 12:17:07,980 INFO  L87              Difference]: Start difference. First operand 1943 states and 2113 transitions. cyclomatic complexity: 176 Second operand 7 states.
[2020-11-25 12:17:08,291 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:17:08,291 INFO  L93              Difference]: Finished difference Result 2003 states and 2210 transitions.
[2020-11-25 12:17:08,292 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 12:17:08,292 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2003 states and 2210 transitions.
[2020-11-25 12:17:08,296 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 12:17:08,301 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2003 states to 2003 states and 2210 transitions.
[2020-11-25 12:17:08,301 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 621
[2020-11-25 12:17:08,301 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 621
[2020-11-25 12:17:08,301 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2003 states and 2210 transitions.
[2020-11-25 12:17:08,303 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:17:08,303 INFO  L728         BuchiCegarLoop]: Abstraction has 2003 states and 2210 transitions.
[2020-11-25 12:17:08,304 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2003 states and 2210 transitions.
[2020-11-25 12:17:08,318 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2003 to 1943.
[2020-11-25 12:17:08,319 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1943 states.
[2020-11-25 12:17:08,321 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1943 states to 1943 states and 2113 transitions.
[2020-11-25 12:17:08,321 INFO  L751         BuchiCegarLoop]: Abstraction has 1943 states and 2113 transitions.
[2020-11-25 12:17:08,321 INFO  L631         BuchiCegarLoop]: Abstraction has 1943 states and 2113 transitions.
[2020-11-25 12:17:08,321 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 12:17:08,321 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1943 states and 2113 transitions.
[2020-11-25 12:17:08,323 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:17:08,323 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:17:08,323 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:17:08,324 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:17:08,324 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_COINSTO0 := false;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == COINSTO;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_COINSTO[this] := 799609355;
[L2236]              name_COINSTO[this] := 799609355;
[L2237]              decimals_COINSTO[this] := 0;
[L2238]              _totalSupply_COINSTO[this] := 0;
[L2239]              balances_COINSTO[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_COINSTO[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_COINSTO[this] := -880863315;
[L2245]              name_COINSTO[this] := 338186849;
[L2246]              decimals_COINSTO[this] := 8;
[L2247]              _totalSupply_COINSTO[this] := 88888888888800000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2249]              balances_COINSTO[this][107758664870216964054459507317936865222947681831] := _totalSupply_COINSTO[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2251]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2288]  RET         call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND TRUE   choice == 12
[L4168]              gas := gas - 21000;
[L4169]  COND TRUE   gas >= 0
[L4170]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4171]              assume msgvalue_MSG == 0;
[L4172]  CALL        call success_s399 := approve~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s399 := approve~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2394]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_COINSTO[this][msgsender_MSG][spender_s399];
[L2395]              allowed_COINSTO[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2396]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_COINSTO[this][msgsender_MSG][spender_s399];
[L2397]              assert { :EventEmitted "Approval_COINSTO" } true;
[L2398]              success_s399 := true;
[L1014]  RET         call success_s399 := approve~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1015]              assume !revert && gas >= 0;
[L4172]  RET         call success_s399 := approve~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4261]  RET         call CorralChoice_COINSTO(this);
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_COINSTO[this][from_s458]) && tokens_s458 <= allowed_COINSTO[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s458] >= 0) && balances_COINSTO[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][from_s458] >= 0) && balances_COINSTO[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_COINSTO[this][from_s458][msgsender_MSG] >= 0) && allowed_COINSTO[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_COINSTO0 := true;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_COINSTO_lvl0 := alloc_allowed_COINSTO_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_COINSTO := symbol_COINSTO;
[L1064]              __tmp__name_COINSTO := name_COINSTO;
[L1065]              __tmp__decimals_COINSTO := decimals_COINSTO;
[L1066]              __tmp___totalSupply_COINSTO := _totalSupply_COINSTO;
[L1067]              __tmp__balances_COINSTO := balances_COINSTO;
[L1068]              __tmp__allowed_COINSTO := allowed_COINSTO;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == COINSTO
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_COINSTO[this][from_s458];
[L2416]              __tmp__balances_COINSTO[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_COINSTO[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == COINSTO
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND FALSE  !(revert)
[L2426]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] - __tmp__allowed_COINSTO[this][from_s458][msgsender_MSG];
[L2427]              __tmp__allowed_COINSTO[this][from_s458][msgsender_MSG] := __var_6;
[L2428]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] + __tmp__allowed_COINSTO[this][from_s458][msgsender_MSG];
[L2429]  COND TRUE   __tmp__DType[this] == COINSTO
[L2430]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][to_s458], tokens_s458);
[L1968]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1969]  COND TRUE   !(c_s23 >= a_s23)
[L1970]              revert := true;
[L2430]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_COINSTO[this][to_s458], tokens_s458);
[L2431]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_COINSTO(this);

Loop:
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND TRUE   choice == 20
[L4111]              gas := gas - 21000;
[L4112]  COND FALSE  !(gas >= 0)
[L4261]  RET         call CorralChoice_COINSTO(this);

[2020-11-25 12:17:08,327 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:17:08,327 INFO  L82        PathProgramCache]: Analyzing trace with hash -641231828, now seen corresponding path program 1 times
[2020-11-25 12:17:08,327 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:17:08,338 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:17:08,410 INFO  L134       CoverageAnalysis]: Checked inductivity of 73 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 70 trivial. 0 not checked.
[2020-11-25 12:17:08,410 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:17:08,410 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-11-25 12:17:08,410 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:17:08,410 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 12:17:08,410 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-11-25 12:17:08,411 INFO  L87              Difference]: Start difference. First operand 1943 states and 2113 transitions. cyclomatic complexity: 176 Second operand 12 states.
[2020-11-25 12:17:09,164 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:17:09,164 INFO  L93              Difference]: Finished difference Result 1999 states and 2193 transitions.
[2020-11-25 12:17:09,164 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 12:17:09,165 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1999 states and 2193 transitions.
[2020-11-25 12:17:09,169 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:17:09,173 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1999 states to 1959 states and 2151 transitions.
[2020-11-25 12:17:09,173 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 618
[2020-11-25 12:17:09,173 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 618
[2020-11-25 12:17:09,173 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1959 states and 2151 transitions.
[2020-11-25 12:17:09,175 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:17:09,175 INFO  L728         BuchiCegarLoop]: Abstraction has 1959 states and 2151 transitions.
[2020-11-25 12:17:09,176 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1959 states and 2151 transitions.
[2020-11-25 12:17:09,185 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1959 to 1863.
[2020-11-25 12:17:09,185 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1863 states.
[2020-11-25 12:17:09,186 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1863 states to 1863 states and 2014 transitions.
[2020-11-25 12:17:09,186 INFO  L751         BuchiCegarLoop]: Abstraction has 1863 states and 2014 transitions.
[2020-11-25 12:17:09,186 INFO  L631         BuchiCegarLoop]: Abstraction has 1863 states and 2014 transitions.
[2020-11-25 12:17:09,186 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 12:17:09,187 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1863 states and 2014 transitions.
[2020-11-25 12:17:09,188 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:17:09,188 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:17:09,189 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:17:09,189 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:17:09,189 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_COINSTO0 := false;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == COINSTO;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_COINSTO[this] := 799609355;
[L2236]              name_COINSTO[this] := 799609355;
[L2237]              decimals_COINSTO[this] := 0;
[L2238]              _totalSupply_COINSTO[this] := 0;
[L2239]              balances_COINSTO[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_COINSTO[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_COINSTO[this] := -880863315;
[L2245]              name_COINSTO[this] := 338186849;
[L2246]              decimals_COINSTO[this] := 8;
[L2247]              _totalSupply_COINSTO[this] := 88888888888800000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2249]              balances_COINSTO[this][107758664870216964054459507317936865222947681831] := _totalSupply_COINSTO[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2251]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2288]  RET         call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND TRUE   choice == 13
[L4161]              gas := gas - 21000;
[L4162]  COND TRUE   gas >= 0
[L4163]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4164]              assume msgvalue_MSG == 0;
[L4165]  CALL        call success_s371 := transfer~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND FALSE  !(__exception)
[L958]   CALL        call success_s371 := transfer~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2356]  COND TRUE   DType[this] == COINSTO
[L2357]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][msgsender_MSG], tokens_s371);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2357]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][msgsender_MSG], tokens_s371);
[L2358]  COND FALSE  !(revert)
[L2364]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][msgsender_MSG];
[L2365]              balances_COINSTO[this][msgsender_MSG] := __var_3;
[L2366]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][msgsender_MSG];
[L2367]  COND TRUE   DType[this] == COINSTO
[L2368]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s371], tokens_s371);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2368]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s371], tokens_s371);
[L2369]  COND FALSE  !(revert)
[L2375]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][to_s371];
[L2376]              balances_COINSTO[this][to_s371] := __var_4;
[L2377]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][to_s371];
[L2378]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2379]              success_s371 := true;
[L958]   RET         call success_s371 := transfer~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L959]               assume !revert && gas >= 0;
[L4165]  RET         call success_s371 := transfer~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4261]  RET         call CorralChoice_COINSTO(this);
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_COINSTO[this][from_s458]) && tokens_s458 <= allowed_COINSTO[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s458] >= 0) && balances_COINSTO[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][from_s458] >= 0) && balances_COINSTO[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_COINSTO[this][from_s458][msgsender_MSG] >= 0) && allowed_COINSTO[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_COINSTO0 := true;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == COINSTO
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][from_s458];
[L2458]              balances_COINSTO[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][from_s458];
[L2460]  COND TRUE   DType[this] == COINSTO
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_COINSTO[this][from_s458][msgsender_MSG];
[L2469]              allowed_COINSTO[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_COINSTO[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == COINSTO
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][to_s458];
[L2480]              balances_COINSTO[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s458 == true && allowed_COINSTO[this][from_s458][msgsender_MSG] == old(allowed_COINSTO[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_COINSTO[this] == old(_totalSupply_COINSTO[this])) && balances_COINSTO[this] == old(balances_COINSTO[this])) && allowed_COINSTO[this][p1][p2] == old(allowed_COINSTO[this][p1][p2])) && symbol_COINSTO[this] == old(symbol_COINSTO[this])) && name_COINSTO[this] == old(name_COINSTO[this])) && decimals_COINSTO[this] == old(decimals_COINSTO[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_COINSTO(this);

Loop:
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND TRUE   choice == 20
[L4111]              gas := gas - 21000;
[L4112]  COND FALSE  !(gas >= 0)
[L4261]  RET         call CorralChoice_COINSTO(this);

[2020-11-25 12:17:09,192 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:17:09,192 INFO  L82        PathProgramCache]: Analyzing trace with hash -741612180, now seen corresponding path program 1 times
[2020-11-25 12:17:09,193 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:17:09,243 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:17:09,528 INFO  L134       CoverageAnalysis]: Checked inductivity of 72 backedges. 67 proven. 3 refuted. 0 times theorem prover too weak. 2 trivial. 0 not checked.
[2020-11-25 12:17:09,528 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:17:09,528 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-11-25 12:17:09,528 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:17:09,528 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 12:17:09,529 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=71, Invalid=631, Unknown=0, NotChecked=0, Total=702
[2020-11-25 12:17:09,529 INFO  L87              Difference]: Start difference. First operand 1863 states and 2014 transitions. cyclomatic complexity: 155 Second operand 27 states.
[2020-11-25 12:17:12,137 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:17:12,138 INFO  L93              Difference]: Finished difference Result 1890 states and 2047 transitions.
[2020-11-25 12:17:12,138 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-11-25 12:17:12,138 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1890 states and 2047 transitions.
[2020-11-25 12:17:12,141 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:17:12,144 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1890 states to 1890 states and 2047 transitions.
[2020-11-25 12:17:12,144 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 585
[2020-11-25 12:17:12,145 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 585
[2020-11-25 12:17:12,145 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1890 states and 2047 transitions.
[2020-11-25 12:17:12,146 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:17:12,146 INFO  L728         BuchiCegarLoop]: Abstraction has 1890 states and 2047 transitions.
[2020-11-25 12:17:12,147 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1890 states and 2047 transitions.
[2020-11-25 12:17:12,154 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1890 to 1867.
[2020-11-25 12:17:12,154 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1867 states.
[2020-11-25 12:17:12,156 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1867 states to 1867 states and 2024 transitions.
[2020-11-25 12:17:12,156 INFO  L751         BuchiCegarLoop]: Abstraction has 1867 states and 2024 transitions.
[2020-11-25 12:17:12,156 INFO  L631         BuchiCegarLoop]: Abstraction has 1867 states and 2024 transitions.
[2020-11-25 12:17:12,156 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 12:17:12,156 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1867 states and 2024 transitions.
[2020-11-25 12:17:12,158 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:17:12,158 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:17:12,158 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:17:12,159 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:17:12,159 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_COINSTO0 := false;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == COINSTO;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_COINSTO[this] := 799609355;
[L2236]              name_COINSTO[this] := 799609355;
[L2237]              decimals_COINSTO[this] := 0;
[L2238]              _totalSupply_COINSTO[this] := 0;
[L2239]              balances_COINSTO[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_COINSTO[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_COINSTO[this] := -880863315;
[L2245]              name_COINSTO[this] := 338186849;
[L2246]              decimals_COINSTO[this] := 8;
[L2247]              _totalSupply_COINSTO[this] := 88888888888800000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2249]              balances_COINSTO[this][107758664870216964054459507317936865222947681831] := _totalSupply_COINSTO[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2251]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2288]  RET         call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_COINSTO[this][from_s458]) && tokens_s458 <= allowed_COINSTO[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s458] >= 0) && balances_COINSTO[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][from_s458] >= 0) && balances_COINSTO[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_COINSTO[this][from_s458][msgsender_MSG] >= 0) && allowed_COINSTO[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == COINSTO
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][from_s458];
[L2458]              balances_COINSTO[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][from_s458];
[L2460]  COND TRUE   DType[this] == COINSTO
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_COINSTO[this][from_s458][msgsender_MSG];
[L2469]              allowed_COINSTO[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_COINSTO[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == COINSTO
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][to_s458];
[L2480]              balances_COINSTO[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s458 == true && allowed_COINSTO[this][from_s458][msgsender_MSG] == old(allowed_COINSTO[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_COINSTO[this] == old(_totalSupply_COINSTO[this])) && balances_COINSTO[this] == old(balances_COINSTO[this])) && allowed_COINSTO[this][p1][p2] == old(allowed_COINSTO[this][p1][p2])) && symbol_COINSTO[this] == old(symbol_COINSTO[this])) && name_COINSTO[this] == old(name_COINSTO[this])) && decimals_COINSTO[this] == old(decimals_COINSTO[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_COINSTO(this);
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_COINSTO[this][from_s458]) && tokens_s458 <= allowed_COINSTO[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s458] >= 0) && balances_COINSTO[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][from_s458] >= 0) && balances_COINSTO[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_COINSTO[this][from_s458][msgsender_MSG] >= 0) && allowed_COINSTO[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_COINSTO0 := true;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == COINSTO
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][from_s458];
[L2458]              balances_COINSTO[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][from_s458];
[L2460]  COND TRUE   DType[this] == COINSTO
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_COINSTO[this][from_s458][msgsender_MSG];
[L2469]              allowed_COINSTO[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_COINSTO[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == COINSTO
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][to_s458];
[L2480]              balances_COINSTO[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s458 == true && allowed_COINSTO[this][from_s458][msgsender_MSG] == old(allowed_COINSTO[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_COINSTO[this] == old(_totalSupply_COINSTO[this])) && balances_COINSTO[this] == old(balances_COINSTO[this])) && allowed_COINSTO[this][p1][p2] == old(allowed_COINSTO[this][p1][p2])) && symbol_COINSTO[this] == old(symbol_COINSTO[this])) && name_COINSTO[this] == old(name_COINSTO[this])) && decimals_COINSTO[this] == old(decimals_COINSTO[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_COINSTO(this);

Loop:
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND TRUE   choice == 20
[L4111]              gas := gas - 21000;
[L4112]  COND FALSE  !(gas >= 0)
[L4261]  RET         call CorralChoice_COINSTO(this);

[2020-11-25 12:17:12,162 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:17:12,162 INFO  L82        PathProgramCache]: Analyzing trace with hash -1243313163, now seen corresponding path program 1 times
[2020-11-25 12:17:12,162 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:17:12,223 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:17:13,335 WARN  L188               SmtUtils]: Spent 165.00 ms on a formula simplification. DAG size of input: 226 DAG size of output: 94
[2020-11-25 12:17:14,665 WARN  L188               SmtUtils]: Spent 119.00 ms on a formula simplification. DAG size of input: 146 DAG size of output: 71
[2020-11-25 12:17:14,899 WARN  L188               SmtUtils]: Spent 127.00 ms on a formula simplification. DAG size of input: 135 DAG size of output: 73
[2020-11-25 12:17:14,930 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 12:17:15,586 WARN  L188               SmtUtils]: Spent 495.00 ms on a formula simplification. DAG size of input: 164 DAG size of output: 116
[2020-11-25 12:17:16,154 WARN  L188               SmtUtils]: Spent 362.00 ms on a formula simplification. DAG size of input: 151 DAG size of output: 109
[2020-11-25 12:17:16,798 WARN  L188               SmtUtils]: Spent 345.00 ms on a formula simplification. DAG size of input: 193 DAG size of output: 111
[2020-11-25 12:17:17,320 WARN  L188               SmtUtils]: Spent 311.00 ms on a formula simplification. DAG size of input: 176 DAG size of output: 92
[2020-11-25 12:17:17,804 WARN  L188               SmtUtils]: Spent 264.00 ms on a formula simplification. DAG size of input: 179 DAG size of output: 95
[2020-11-25 12:17:19,380 WARN  L188               SmtUtils]: Spent 926.00 ms on a formula simplification. DAG size of input: 450 DAG size of output: 96
[2020-11-25 12:17:20,224 WARN  L188               SmtUtils]: Spent 300.00 ms on a formula simplification. DAG size of input: 344 DAG size of output: 44
[2020-11-25 12:17:21,115 INFO  L134       CoverageAnalysis]: Checked inductivity of 87 backedges. 0 proven. 28 refuted. 0 times theorem prover too weak. 59 trivial. 0 not checked.
[2020-11-25 12:17:21,115 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:17:21,116 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [47] total 47
[2020-11-25 12:17:21,116 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:17:21,116 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 48 interpolants.
[2020-11-25 12:17:21,116 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=135, Invalid=2121, Unknown=0, NotChecked=0, Total=2256
[2020-11-25 12:17:21,116 INFO  L87              Difference]: Start difference. First operand 1867 states and 2024 transitions. cyclomatic complexity: 162 Second operand 48 states.
[2020-11-25 12:17:27,133 WARN  L188               SmtUtils]: Spent 404.00 ms on a formula simplification. DAG size of input: 221 DAG size of output: 83
[2020-11-25 12:17:28,056 WARN  L188               SmtUtils]: Spent 202.00 ms on a formula simplification. DAG size of input: 171 DAG size of output: 77
[2020-11-25 12:17:29,727 WARN  L188               SmtUtils]: Spent 310.00 ms on a formula simplification. DAG size of input: 205 DAG size of output: 91
[2020-11-25 12:17:30,036 WARN  L188               SmtUtils]: Spent 168.00 ms on a formula simplification. DAG size of input: 152 DAG size of output: 85
[2020-11-25 12:17:30,875 WARN  L188               SmtUtils]: Spent 541.00 ms on a formula simplification. DAG size of input: 228 DAG size of output: 135
[2020-11-25 12:17:31,304 WARN  L188               SmtUtils]: Spent 270.00 ms on a formula simplification. DAG size of input: 168 DAG size of output: 137
[2020-11-25 12:17:31,731 WARN  L188               SmtUtils]: Spent 326.00 ms on a formula simplification. DAG size of input: 171 DAG size of output: 140
[2020-11-25 12:17:32,054 WARN  L188               SmtUtils]: Spent 234.00 ms on a formula simplification. DAG size of input: 124 DAG size of output: 108
[2020-11-25 12:17:32,266 WARN  L188               SmtUtils]: Spent 122.00 ms on a formula simplification. DAG size of input: 128 DAG size of output: 94
[2020-11-25 12:17:44,053 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:17:44,053 INFO  L93              Difference]: Finished difference Result 2124 states and 2365 transitions.
[2020-11-25 12:17:44,053 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 39 states. 
[2020-11-25 12:17:44,054 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2124 states and 2365 transitions.
[2020-11-25 12:17:44,058 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:17:44,063 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2124 states to 2124 states and 2365 transitions.
[2020-11-25 12:17:44,063 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 690
[2020-11-25 12:17:44,063 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 690
[2020-11-25 12:17:44,063 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2124 states and 2365 transitions.
[2020-11-25 12:17:44,065 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:17:44,065 INFO  L728         BuchiCegarLoop]: Abstraction has 2124 states and 2365 transitions.
[2020-11-25 12:17:44,066 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2124 states and 2365 transitions.
[2020-11-25 12:17:44,074 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2124 to 2072.
[2020-11-25 12:17:44,074 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2072 states.
[2020-11-25 12:17:44,076 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2072 states to 2072 states and 2301 transitions.
[2020-11-25 12:17:44,077 INFO  L751         BuchiCegarLoop]: Abstraction has 2072 states and 2301 transitions.
[2020-11-25 12:17:44,077 INFO  L631         BuchiCegarLoop]: Abstraction has 2072 states and 2301 transitions.
[2020-11-25 12:17:44,077 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 12:17:44,077 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2072 states and 2301 transitions.
[2020-11-25 12:17:44,079 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:17:44,079 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:17:44,079 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:17:44,080 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:17:44,080 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_COINSTO0 := false;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == COINSTO;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_COINSTO[this] := 799609355;
[L2236]              name_COINSTO[this] := 799609355;
[L2237]              decimals_COINSTO[this] := 0;
[L2238]              _totalSupply_COINSTO[this] := 0;
[L2239]              balances_COINSTO[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_COINSTO[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_COINSTO[this] := -880863315;
[L2245]              name_COINSTO[this] := 338186849;
[L2246]              decimals_COINSTO[this] := 8;
[L2247]              _totalSupply_COINSTO[this] := 88888888888800000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2249]              balances_COINSTO[this][107758664870216964054459507317936865222947681831] := _totalSupply_COINSTO[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2251]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2288]  RET         call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND TRUE   choice == 12
[L4168]              gas := gas - 21000;
[L4169]  COND TRUE   gas >= 0
[L4170]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4171]              assume msgvalue_MSG == 0;
[L4172]  CALL        call success_s399 := approve~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s399 := approve~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2394]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_COINSTO[this][msgsender_MSG][spender_s399];
[L2395]              allowed_COINSTO[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2396]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_COINSTO[this][msgsender_MSG][spender_s399];
[L2397]              assert { :EventEmitted "Approval_COINSTO" } true;
[L2398]              success_s399 := true;
[L1014]  RET         call success_s399 := approve~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1015]              assume !revert && gas >= 0;
[L4172]  RET         call success_s399 := approve~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4261]  RET         call CorralChoice_COINSTO(this);
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND TRUE   choice == 12
[L4168]              gas := gas - 21000;
[L4169]  COND TRUE   gas >= 0
[L4170]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4171]              assume msgvalue_MSG == 0;
[L4172]  CALL        call success_s399 := approve~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s399 := approve~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2394]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_COINSTO[this][msgsender_MSG][spender_s399];
[L2395]              allowed_COINSTO[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2396]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_COINSTO[this][msgsender_MSG][spender_s399];
[L2397]              assert { :EventEmitted "Approval_COINSTO" } true;
[L2398]              success_s399 := true;
[L1014]  RET         call success_s399 := approve~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1015]              assume !revert && gas >= 0;
[L4172]  RET         call success_s399 := approve~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4261]  RET         call CorralChoice_COINSTO(this);
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_COINSTO[this][from_s458]) && tokens_s458 <= allowed_COINSTO[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s458] >= 0) && balances_COINSTO[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][from_s458] >= 0) && balances_COINSTO[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_COINSTO[this][from_s458][msgsender_MSG] >= 0) && allowed_COINSTO[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_COINSTO0 := true;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == COINSTO
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][from_s458];
[L2458]              balances_COINSTO[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][from_s458];
[L2460]  COND TRUE   DType[this] == COINSTO
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_COINSTO[this][from_s458][msgsender_MSG];
[L2469]              allowed_COINSTO[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_COINSTO[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == COINSTO
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][to_s458];
[L2480]              balances_COINSTO[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s458 == true && allowed_COINSTO[this][from_s458][msgsender_MSG] == old(allowed_COINSTO[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_COINSTO[this] == old(_totalSupply_COINSTO[this])) && balances_COINSTO[this] == old(balances_COINSTO[this])) && allowed_COINSTO[this][p1][p2] == old(allowed_COINSTO[this][p1][p2])) && symbol_COINSTO[this] == old(symbol_COINSTO[this])) && name_COINSTO[this] == old(name_COINSTO[this])) && decimals_COINSTO[this] == old(decimals_COINSTO[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_COINSTO(this);

Loop:
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND TRUE   choice == 20
[L4111]              gas := gas - 21000;
[L4112]  COND FALSE  !(gas >= 0)
[L4261]  RET         call CorralChoice_COINSTO(this);

[2020-11-25 12:17:44,083 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:17:44,083 INFO  L82        PathProgramCache]: Analyzing trace with hash 123254591, now seen corresponding path program 2 times
[2020-11-25 12:17:44,084 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:17:44,131 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:17:44,497 WARN  L188               SmtUtils]: Spent 186.00 ms on a formula simplification. DAG size of input: 70 DAG size of output: 58
[2020-11-25 12:17:44,847 INFO  L134       CoverageAnalysis]: Checked inductivity of 237 backedges. 1 proven. 2 refuted. 0 times theorem prover too weak. 234 trivial. 0 not checked.
[2020-11-25 12:17:44,848 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:17:44,848 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-11-25 12:17:44,848 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:17:44,848 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 12:17:44,848 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=63, Invalid=639, Unknown=0, NotChecked=0, Total=702
[2020-11-25 12:17:44,848 INFO  L87              Difference]: Start difference. First operand 2072 states and 2301 transitions. cyclomatic complexity: 237 Second operand 27 states.
[2020-11-25 12:17:49,584 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:17:49,584 INFO  L93              Difference]: Finished difference Result 2090 states and 2325 transitions.
[2020-11-25 12:17:49,584 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 12:17:49,584 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2090 states and 2325 transitions.
[2020-11-25 12:17:49,588 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:17:49,592 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2090 states to 2090 states and 2325 transitions.
[2020-11-25 12:17:49,592 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 682
[2020-11-25 12:17:49,593 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 682
[2020-11-25 12:17:49,593 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2090 states and 2325 transitions.
[2020-11-25 12:17:49,594 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:17:49,594 INFO  L728         BuchiCegarLoop]: Abstraction has 2090 states and 2325 transitions.
[2020-11-25 12:17:49,596 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2090 states and 2325 transitions.
[2020-11-25 12:17:49,604 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2090 to 2072.
[2020-11-25 12:17:49,604 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2072 states.
[2020-11-25 12:17:49,607 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2072 states to 2072 states and 2301 transitions.
[2020-11-25 12:17:49,607 INFO  L751         BuchiCegarLoop]: Abstraction has 2072 states and 2301 transitions.
[2020-11-25 12:17:49,607 INFO  L631         BuchiCegarLoop]: Abstraction has 2072 states and 2301 transitions.
[2020-11-25 12:17:49,607 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 12:17:49,607 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2072 states and 2301 transitions.
[2020-11-25 12:17:49,609 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:17:49,609 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:17:49,609 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:17:49,610 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:17:49,610 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_COINSTO0 := false;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == COINSTO;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_COINSTO[this] := 799609355;
[L2236]              name_COINSTO[this] := 799609355;
[L2237]              decimals_COINSTO[this] := 0;
[L2238]              _totalSupply_COINSTO[this] := 0;
[L2239]              balances_COINSTO[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_COINSTO[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_COINSTO[this] := -880863315;
[L2245]              name_COINSTO[this] := 338186849;
[L2246]              decimals_COINSTO[this] := 8;
[L2247]              _totalSupply_COINSTO[this] := 88888888888800000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2249]              balances_COINSTO[this][107758664870216964054459507317936865222947681831] := _totalSupply_COINSTO[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][107758664870216964054459507317936865222947681831];
[L2251]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2288]  RET         call COINSTO_COINSTO_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call COINSTO_COINSTO__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call COINSTO_COINSTO(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND TRUE   choice == 12
[L4168]              gas := gas - 21000;
[L4169]  COND TRUE   gas >= 0
[L4170]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4171]              assume msgvalue_MSG == 0;
[L4172]  CALL        call success_s399 := approve~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s399 := approve~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2394]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_COINSTO[this][msgsender_MSG][spender_s399];
[L2395]              allowed_COINSTO[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2396]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_COINSTO[this][msgsender_MSG][spender_s399];
[L2397]              assert { :EventEmitted "Approval_COINSTO" } true;
[L2398]              success_s399 := true;
[L1014]  RET         call success_s399 := approve~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1015]              assume !revert && gas >= 0;
[L4172]  RET         call success_s399 := approve~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4261]  RET         call CorralChoice_COINSTO(this);
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND TRUE   choice == 13
[L4161]              gas := gas - 21000;
[L4162]  COND TRUE   gas >= 0
[L4163]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4164]              assume msgvalue_MSG == 0;
[L4165]  CALL        call success_s371 := transfer~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND FALSE  !(__exception)
[L958]   CALL        call success_s371 := transfer~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2356]  COND TRUE   DType[this] == COINSTO
[L2357]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][msgsender_MSG], tokens_s371);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2357]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][msgsender_MSG], tokens_s371);
[L2358]  COND FALSE  !(revert)
[L2364]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][msgsender_MSG];
[L2365]              balances_COINSTO[this][msgsender_MSG] := __var_3;
[L2366]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][msgsender_MSG];
[L2367]  COND TRUE   DType[this] == COINSTO
[L2368]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s371], tokens_s371);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2368]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s371], tokens_s371);
[L2369]  COND FALSE  !(revert)
[L2375]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][to_s371];
[L2376]              balances_COINSTO[this][to_s371] := __var_4;
[L2377]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][to_s371];
[L2378]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2379]              success_s371 := true;
[L958]   RET         call success_s371 := transfer~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L959]               assume !revert && gas >= 0;
[L4165]  RET         call success_s371 := transfer~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4261]  RET         call CorralChoice_COINSTO(this);
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_COINSTO[this][from_s458]) && tokens_s458 <= allowed_COINSTO[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][to_s458] >= 0) && balances_COINSTO[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_COINSTO[this][from_s458] >= 0) && balances_COINSTO[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_COINSTO[this][from_s458][msgsender_MSG] >= 0) && allowed_COINSTO[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_COINSTO0 := true;
[L3]                 call_transferFrom_COINSTO0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == COINSTO
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][from_s458];
[L2458]              balances_COINSTO[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][from_s458];
[L2460]  COND TRUE   DType[this] == COINSTO
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_COINSTO[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_COINSTO[this][from_s458][msgsender_MSG];
[L2469]              allowed_COINSTO[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_COINSTO[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == COINSTO
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_COINSTO[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_COINSTO[this][to_s458];
[L2480]              balances_COINSTO[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_COINSTO[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_COINSTO" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s458 == true && allowed_COINSTO[this][from_s458][msgsender_MSG] == old(allowed_COINSTO[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_COINSTO[this] == old(_totalSupply_COINSTO[this])) && balances_COINSTO[this] == old(balances_COINSTO[this])) && allowed_COINSTO[this][p1][p2] == old(allowed_COINSTO[this][p1][p2])) && symbol_COINSTO[this] == old(symbol_COINSTO[this])) && name_COINSTO[this] == old(name_COINSTO[this])) && decimals_COINSTO[this] == old(decimals_COINSTO[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_COINSTO(this);

Loop:
[L4261]  CALL        call CorralChoice_COINSTO(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != COINSTO;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND TRUE   choice == 12
[L4168]              gas := gas - 21000;
[L4169]  COND TRUE   gas >= 0
[L4170]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4171]              assume msgvalue_MSG == 0;
[L4172]  CALL        call success_s399 := approve~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s399 := approve~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2394]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_COINSTO[this][msgsender_MSG][spender_s399];
[L2395]              allowed_COINSTO[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2396]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_COINSTO[this][msgsender_MSG][spender_s399];
[L2397]              assert { :EventEmitted "Approval_COINSTO" } true;
[L2398]              success_s399 := true;
[L1014]  RET         call success_s399 := approve~address~uint256_COINSTO__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1015]              assume !revert && gas >= 0;
[L4172]  RET         call success_s399 := approve~address~uint256_COINSTO(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4261]  RET         call CorralChoice_COINSTO(this);

[2020-11-25 12:17:49,614 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:17:49,614 INFO  L82        PathProgramCache]: Analyzing trace with hash -1505720192, now seen corresponding path program 1 times
[2020-11-25 12:17:49,614 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:17:49,672 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:17:49,963 INFO  L134       CoverageAnalysis]: Checked inductivity of 212 backedges. 138 proven. 0 refuted. 0 times theorem prover too weak. 74 trivial. 0 not checked.
[2020-11-25 12:17:49,964 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:17:49,964 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-25 12:17:49,964 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:17:49,964 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-25 12:17:49,964 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=42, Invalid=264, Unknown=0, NotChecked=0, Total=306
[2020-11-25 12:17:49,964 INFO  L87              Difference]: Start difference. First operand 2072 states and 2301 transitions. cyclomatic complexity: 237 Second operand 18 states.
[2020-11-25 12:17:51,650 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:17:51,650 INFO  L93              Difference]: Finished difference Result 1048 states and 1140 transitions.
[2020-11-25 12:17:51,651 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 12:17:51,651 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1048 states and 1140 transitions.
[2020-11-25 12:17:51,653 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 12:17:51,653 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1048 states to 0 states and 0 transitions.
[2020-11-25 12:17:51,653 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 12:17:51,653 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 12:17:51,653 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 12:17:51,653 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:17:51,653 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 12:17:51,653 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 12:17:51,653 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 12:17:51,653 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 12:17:51,653 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 12:17:51,653 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 12:17:51,653 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 12:17:51,656 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:17:51 BasicIcfg
[2020-11-25 12:17:51,656 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 12:17:51,656 INFO  L168              Benchmark]: Toolchain (without parser) took 87773.22 ms. Allocated memory was 1.0 GB in the beginning and 3.9 GB in the end (delta: 2.8 GB). Free memory was 935.2 MB in the beginning and 1.2 GB in the end (delta: -254.9 MB). Peak memory consumption was 2.6 GB. Max. memory is 15.3 GB.
[2020-11-25 12:17:51,657 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.10 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 12:17:51,658 INFO  L168              Benchmark]: Boogie Preprocessor took 91.36 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 12:17:51,658 INFO  L168              Benchmark]: UtopiaSpecLang took 68.63 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 913.7 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
[2020-11-25 12:17:51,658 INFO  L168              Benchmark]: Boogie Printer took 15.42 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 12:17:51,658 INFO  L168              Benchmark]: RCFGBuilder took 673.67 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 795.3 MB in the end (delta: 112.9 MB). Peak memory consumption was 112.9 MB. Max. memory is 15.3 GB.
[2020-11-25 12:17:51,659 INFO  L168              Benchmark]: UtopiaLTL2Aut took 34.02 ms. Allocated memory is still 1.0 GB. Free memory was 795.3 MB in the beginning and 791.7 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 12:17:51,659 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1482.87 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 220.7 MB). Free memory was 791.7 MB in the beginning and 1.0 GB in the end (delta: -228.9 MB). Peak memory consumption was 177.5 MB. Max. memory is 15.3 GB.
[2020-11-25 12:17:51,659 INFO  L168              Benchmark]: BlockEncodingV2 took 161.87 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 962.5 MB in the end (delta: 58.2 MB). Peak memory consumption was 58.2 MB. Max. memory is 15.3 GB.
[2020-11-25 12:17:51,659 INFO  L168              Benchmark]: BuchiAutomizer took 85242.38 ms. Allocated memory was 1.2 GB in the beginning and 3.9 GB in the end (delta: 2.6 GB). Free memory was 962.5 MB in the beginning and 1.2 GB in the end (delta: -227.6 MB). Peak memory consumption was 2.4 GB. Max. memory is 15.3 GB.
[2020-11-25 12:17:51,662 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3722 locations, 6405 edges
  - StatisticsResult: Encoded RCFG
    3662 locations, 6245 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.10 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 91.36 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 68.63 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 913.7 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 15.42 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 673.67 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 795.3 MB in the end (delta: 112.9 MB). Peak memory consumption was 112.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 34.02 ms. Allocated memory is still 1.0 GB. Free memory was 795.3 MB in the beginning and 791.7 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1482.87 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 220.7 MB). Free memory was 791.7 MB in the beginning and 1.0 GB in the end (delta: -228.9 MB). Peak memory consumption was 177.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 161.87 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 962.5 MB in the end (delta: 58.2 MB). Peak memory consumption was 58.2 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 85242.38 ms. Allocated memory was 1.2 GB in the beginning and 3.9 GB in the end (delta: 2.6 GB). Free memory was 962.5 MB in the beginning and 1.2 GB in the end (delta: -227.6 MB). Peak memory consumption was 2.4 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1565 locations, 1977 edges
  - StatisticsResult: BuchiProgram size
    3722 locations, 6405 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 15 terminating modules (15 trivial, 0 deterministic, 0 nondeterministic). 15 modules have a trivial ranking function, the largest among these consists of 48 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 85.2s and 16 iterations.  TraceHistogramMax:3. Analysis of lassos took 16.4s. Construction of modules took 53.4s. BÃ¼chi inclusion checks took 14.5s. Highest rank in rank-based complementation 0. Minimization of det autom 15. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 14 MinimizatonAttempts, 2371 StatesRemovedByMinimization, 13 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 2760 states and ocurred in iteration 5.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 32800 SDtfs, 38702 SDslu, 143823 SDs, 0 SdLazy, 258712 SolverSat, 6028 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 53.4s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU15 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_COINSTO0) ==> ( <>(success_transferFrom_COINSTO0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
