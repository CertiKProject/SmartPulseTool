This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 14:23:56,282 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 14:23:56,284 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 14:23:56,294 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 14:23:56,294 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 14:23:56,295 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 14:23:56,296 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 14:23:56,297 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 14:23:56,298 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 14:23:56,299 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 14:23:56,300 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 14:23:56,300 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 14:23:56,300 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 14:23:56,301 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 14:23:56,302 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 14:23:56,302 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 14:23:56,303 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 14:23:56,304 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 14:23:56,305 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 14:23:56,307 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 14:23:56,307 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 14:23:56,308 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 14:23:56,310 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 14:23:56,310 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 14:23:56,310 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 14:23:56,310 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 14:23:56,311 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 14:23:56,311 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 14:23:56,311 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 14:23:56,312 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 14:23:56,312 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 14:23:56,313 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 14:23:56,313 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 14:23:56,313 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 14:23:56,314 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 14:23:56,314 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 14:23:56,315 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 14:23:56,315 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 14:23:56,315 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 14:23:56,316 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 14:23:56,316 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 14:23:56,316 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 14:23:56,324 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 14:23:56,324 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 14:23:56,325 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 14:23:56,325 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 14:23:56,325 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 14:23:56,325 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 14:23:56,325 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 14:23:56,325 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 14:23:56,326 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 14:23:56,326 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 14:23:56,326 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 14:23:56,326 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 14:23:56,326 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 14:23:56,326 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 14:23:56,326 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 14:23:56,326 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 14:23:56,326 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 14:23:56,327 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 14:23:56,327 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 14:23:56,327 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 14:23:56,327 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 14:23:56,327 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 14:23:56,327 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 14:23:56,327 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 14:23:56,327 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 14:23:56,327 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 14:23:56,349 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 14:23:56,361 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 14:23:56,365 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 14:23:56,367 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 14:23:56,368 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 14:23:56,369 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_totalsupply.bpl
[2020-11-25 14:23:56,370 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_totalsupply.bpl'
[2020-11-25 14:23:56,446 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 14:23:56,447 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 14:23:56,447 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 14:23:56,448 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 14:23:56,448 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 14:23:56,468 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:23:56" (1/1) ...
[2020-11-25 14:23:56,470 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:23:56" (1/1) ...
[2020-11-25 14:23:56,496 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:23:56" (1/1) ...
[2020-11-25 14:23:56,496 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:23:56" (1/1) ...
[2020-11-25 14:23:56,514 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:23:56" (1/1) ...
[2020-11-25 14:23:56,522 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:23:56" (1/1) ...
[2020-11-25 14:23:56,528 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:23:56" (1/1) ...
[2020-11-25 14:23:56,536 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 14:23:56,537 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 14:23:56,537 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 14:23:56,539 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 14:23:56,542 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:23:56" (1/1) ...
[2020-11-25 14:23:56,559 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(DUCATOProtocolToken.totalSupply, _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DUCATOProtocolToken.totalSupply, return == _totalSupply_DUCATOProtocolToken[this] && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this]) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this]) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this]) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this]) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this]) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this]) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this]) && owner_Owned[this] == old(owner_Owned[this]))))
[2020-11-25 14:23:56,565 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(DUCATOProtocolToken.totalSupply, _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DUCATOProtocolToken.totalSupply, return == _totalSupply_DUCATOProtocolToken[this] && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this]) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this]) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this]) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this]) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this]) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this]) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this]) && owner_Owned[this] == old(owner_Owned[this]))))
[2020-11-25 14:23:56,572 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(DUCATOProtocolToken.totalSupply, _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DUCATOProtocolToken.totalSupply, return == _totalSupply_DUCATOProtocolToken[this] && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this]) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this]) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this]) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this]) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this]) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this]) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this]) && owner_Owned[this] == old(owner_Owned[this]))))
[2020-11-25 14:23:56,577 INFO  L636   opiaSpecLangObserver]: Parsed ( _totalSupply_DUCATOProtocolToken[this]>=0 && _totalSupply_DUCATOProtocolToken[this]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPGEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_DUCATOProtocolToken>]]],IntegerLiteral[0]],BinaryExpression[COMPLT,ArrayAccessExpression[IdentifierExpression[_totalSupply_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_DUCATOProtocolToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 14:23:56,580 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( __ret_0_==_totalSupply_DUCATOProtocolToken[this] && _totalSupply_DUCATOProtocolToken[this]==( old(_totalSupply_DUCATOProtocolToken[this]) ) ) && balances_DUCATOProtocolToken[this]==( old(balances_DUCATOProtocolToken[this]) ) ) && allowed_DUCATOProtocolToken[this]==( old(allowed_DUCATOProtocolToken[this]) ) ) && symbol_DUCATOProtocolToken[this]==( old(symbol_DUCATOProtocolToken[this]) ) ) && name_DUCATOProtocolToken[this]==( old(name_DUCATOProtocolToken[this]) ) ) && decimals_DUCATOProtocolToken[this]==( old(decimals_DUCATOProtocolToken[this]) ) ) && _stopTrade_DUCATOProtocolToken[this]==( old(_stopTrade_DUCATOProtocolToken[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,totalSupply_DUCATOProtocolToken>],ArrayAccessExpression[IdentifierExpression[_totalSupply_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_DUCATOProtocolToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_DUCATOProtocolToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_DUCATOProtocolToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_DUCATOProtocolToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_DUCATOProtocolToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_DUCATOProtocolToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_DUCATOProtocolToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_DUCATOProtocolToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_DUCATOProtocolToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_DUCATOProtocolToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_DUCATOProtocolToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_DUCATOProtocolToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_DUCATOProtocolToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_stopTrade_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_DUCATOProtocolToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_stopTrade_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_DUCATOProtocolToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_DUCATOProtocolToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_DUCATOProtocolToken>]]]]]]
[2020-11-25 14:23:56,584 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(DUCATOProtocolToken.totalSupply, _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DUCATOProtocolToken.totalSupply, return == _totalSupply_DUCATOProtocolToken[this] && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this]) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this]) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this]) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this]) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this]) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this]) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this]) && owner_Owned[this] == old(owner_Owned[this]))))
[2020-11-25 14:23:56,585 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_totalSupply_DUCATOProtocolToken0) ==> ( <>AP(success_totalSupply_DUCATOProtocolToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 14:23:56,592 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:23:56 PropertyContainer
[2020-11-25 14:23:56,592 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 14:23:56,592 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 14:23:56,592 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 14:23:56,592 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 14:23:56,593 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:23:56" (1/2) ...
[2020-11-25 14:23:56,593 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 14:23:56,593 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 14:23:56,605 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:23:56" (2/2) ...
[2020-11-25 14:23:56,605 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 14:23:56,605 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 14:23:56,606 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 14:23:56,606 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 14:23:56,607 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:23:56" (1/2) ...
[2020-11-25 14:23:56,657 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 14:23:56,657 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:23:56,657 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 14:23:56,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 14:23:56,657 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 14:23:56,658 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 14:23:56,658 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 14:23:56,658 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 14:23:56,658 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 14:23:56,658 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 14:23:56,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 14:23:56,658 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 14:23:56,658 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 14:23:56,658 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 14:23:56,658 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 14:23:56,658 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 14:23:56,659 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 14:23:56,659 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 14:23:56,659 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 14:23:56,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 14:23:56,659 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 14:23:56,659 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 14:23:56,659 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 14:23:56,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 14:23:56,659 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 14:23:56,660 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 14:23:56,660 INFO  L130     BoogieDeclarations]: Found specification of procedure DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success
[2020-11-25 14:23:56,660 INFO  L130     BoogieDeclarations]: Found specification of procedure DUCATOProtocolToken_DUCATOProtocolToken
[2020-11-25 14:23:56,660 INFO  L138     BoogieDeclarations]: Found implementation of procedure DUCATOProtocolToken_DUCATOProtocolToken
[2020-11-25 14:23:56,660 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_DUCATOProtocolToken
[2020-11-25 14:23:56,660 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_DUCATOProtocolToken
[2020-11-25 14:23:56,660 INFO  L130     BoogieDeclarations]: Found specification of procedure stopTrade_DUCATOProtocolToken
[2020-11-25 14:23:56,660 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopTrade_DUCATOProtocolToken
[2020-11-25 14:23:56,660 INFO  L130     BoogieDeclarations]: Found specification of procedure startTrade_DUCATOProtocolToken
[2020-11-25 14:23:56,660 INFO  L138     BoogieDeclarations]: Found implementation of procedure startTrade_DUCATOProtocolToken
[2020-11-25 14:23:56,660 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_DUCATOProtocolToken
[2020-11-25 14:23:56,660 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_DUCATOProtocolToken
[2020-11-25 14:23:56,660 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DUCATOProtocolToken
[2020-11-25 14:23:56,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DUCATOProtocolToken
[2020-11-25 14:23:56,661 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_DUCATOProtocolToken
[2020-11-25 14:23:56,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_DUCATOProtocolToken
[2020-11-25 14:23:56,661 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DUCATOProtocolToken
[2020-11-25 14:23:56,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DUCATOProtocolToken
[2020-11-25 14:23:56,661 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_DUCATOProtocolToken
[2020-11-25 14:23:56,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_DUCATOProtocolToken
[2020-11-25 14:23:56,661 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_DUCATOProtocolToken
[2020-11-25 14:23:56,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_DUCATOProtocolToken
[2020-11-25 14:23:56,661 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_DUCATOProtocolToken__success
[2020-11-25 14:23:56,661 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_DUCATOProtocolToken
[2020-11-25 14:23:56,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_DUCATOProtocolToken
[2020-11-25 14:23:56,661 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DUCATOProtocolToken
[2020-11-25 14:23:56,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DUCATOProtocolToken
[2020-11-25 14:23:56,662 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DUCATOProtocolToken
[2020-11-25 14:23:56,662 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DUCATOProtocolToken
[2020-11-25 14:23:56,662 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DUCATOProtocolToken
[2020-11-25 14:23:56,662 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DUCATOProtocolToken
[2020-11-25 14:23:56,662 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 14:23:56,662 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 14:23:56,662 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 14:23:56,662 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 14:23:56,662 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 14:23:56,662 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 14:23:56,662 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 14:23:56,662 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 14:23:56,662 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 14:23:56,663 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 14:23:56,663 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 14:23:56,663 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 14:23:56,663 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DUCATOProtocolToken
[2020-11-25 14:23:56,663 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 14:23:56,663 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 14:23:56,663 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:23:56,663 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 14:23:56,663 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 14:23:56,663 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 14:23:56,663 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 14:23:56,663 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 14:23:56,663 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 14:23:56,664 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 14:23:56,664 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 14:23:56,664 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 14:23:56,664 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 14:23:56,664 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 14:23:56,664 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 14:23:56,664 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 14:23:56,664 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 14:23:56,664 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 14:23:56,664 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 14:23:56,664 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 14:23:56,664 INFO  L130     BoogieDeclarations]: Found specification of procedure DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__fail
[2020-11-25 14:23:56,665 INFO  L130     BoogieDeclarations]: Found specification of procedure DUCATOProtocolToken_DUCATOProtocolToken__success
[2020-11-25 14:23:56,665 INFO  L130     BoogieDeclarations]: Found specification of procedure DUCATOProtocolToken_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,665 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_DUCATOProtocolToken__success
[2020-11-25 14:23:56,665 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,665 INFO  L130     BoogieDeclarations]: Found specification of procedure stopTrade_DUCATOProtocolToken__success
[2020-11-25 14:23:56,665 INFO  L130     BoogieDeclarations]: Found specification of procedure stopTrade_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,665 INFO  L130     BoogieDeclarations]: Found specification of procedure startTrade_DUCATOProtocolToken__success
[2020-11-25 14:23:56,665 INFO  L130     BoogieDeclarations]: Found specification of procedure startTrade_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,665 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_DUCATOProtocolToken__success
[2020-11-25 14:23:56,665 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,665 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DUCATOProtocolToken__success
[2020-11-25 14:23:56,665 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,665 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_DUCATOProtocolToken__success
[2020-11-25 14:23:56,666 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,666 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DUCATOProtocolToken__success
[2020-11-25 14:23:56,666 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,666 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_DUCATOProtocolToken__success
[2020-11-25 14:23:56,666 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,666 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_DUCATOProtocolToken__success
[2020-11-25 14:23:56,666 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,666 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,666 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_DUCATOProtocolToken__success
[2020-11-25 14:23:56,666 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,666 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DUCATOProtocolToken__success
[2020-11-25 14:23:56,666 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,666 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DUCATOProtocolToken__success
[2020-11-25 14:23:56,667 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,667 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DUCATOProtocolToken__success
[2020-11-25 14:23:56,667 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,667 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 14:23:56,667 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 14:23:56,667 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 14:23:56,667 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 14:23:56,667 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 14:23:56,667 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 14:23:56,667 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:23:56,667 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:23:56,667 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 14:23:56,667 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 14:23:56,668 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 14:23:56,668 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 14:23:56,668 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 14:23:56,668 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 14:23:56,668 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 14:23:56,668 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 14:23:56,668 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 14:23:56,668 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 14:23:56,668 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 14:23:56,668 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 14:23:56,668 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 14:23:56,669 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 14:23:56,669 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 14:23:56,669 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 14:23:56,669 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 14:23:56,669 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 14:23:56,669 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 14:23:56,669 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 14:23:56,669 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 14:23:56,669 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 14:23:56,669 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 14:23:56,670 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 14:23:56,670 INFO  L138     BoogieDeclarations]: Found implementation of procedure DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__fail
[2020-11-25 14:23:56,670 INFO  L138     BoogieDeclarations]: Found implementation of procedure DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success
[2020-11-25 14:23:56,670 INFO  L138     BoogieDeclarations]: Found implementation of procedure DUCATOProtocolToken_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,670 INFO  L138     BoogieDeclarations]: Found implementation of procedure DUCATOProtocolToken_DUCATOProtocolToken__success
[2020-11-25 14:23:56,670 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,670 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_DUCATOProtocolToken__success
[2020-11-25 14:23:56,670 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopTrade_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,670 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopTrade_DUCATOProtocolToken__success
[2020-11-25 14:23:56,671 INFO  L138     BoogieDeclarations]: Found implementation of procedure startTrade_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,671 INFO  L138     BoogieDeclarations]: Found implementation of procedure startTrade_DUCATOProtocolToken__success
[2020-11-25 14:23:56,671 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,671 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_DUCATOProtocolToken__success
[2020-11-25 14:23:56,671 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,671 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DUCATOProtocolToken__success
[2020-11-25 14:23:56,671 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,671 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_DUCATOProtocolToken__success
[2020-11-25 14:23:56,671 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,672 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DUCATOProtocolToken__success
[2020-11-25 14:23:56,672 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,672 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_DUCATOProtocolToken__success
[2020-11-25 14:23:56,672 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,672 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_DUCATOProtocolToken__success
[2020-11-25 14:23:56,672 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,672 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_DUCATOProtocolToken__success
[2020-11-25 14:23:56,672 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,672 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_DUCATOProtocolToken__success
[2020-11-25 14:23:56,672 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,672 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DUCATOProtocolToken__success
[2020-11-25 14:23:56,672 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,673 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DUCATOProtocolToken__success
[2020-11-25 14:23:56,673 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DUCATOProtocolToken__fail
[2020-11-25 14:23:56,673 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DUCATOProtocolToken__success
[2020-11-25 14:23:56,673 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 14:23:56,673 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 14:23:56,673 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 14:23:56,673 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 14:23:56,673 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 14:23:56,673 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 14:23:56,673 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 14:23:56,673 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 14:23:56,673 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 14:23:56,674 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 14:23:56,674 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 14:23:56,674 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 14:23:56,674 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 14:23:56,674 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 14:23:56,674 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 14:23:56,674 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 14:23:56,674 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DUCATOProtocolToken
[2020-11-25 14:23:56,674 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 14:23:56,674 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 14:23:56,674 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 14:23:57,071 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:23:57,071 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:23:57,071 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:23:57,252 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 14:23:57,253 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 14:23:57,255 INFO  L202        PluginConnector]: Adding new model DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:23:57 BoogieIcfgContainer
[2020-11-25 14:23:57,256 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:23:56" (2/2) ...
[2020-11-25 14:23:57,256 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 14:23:57,256 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@50d8d91 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:23:57, skipping insertion in model container
[2020-11-25 14:23:57,256 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 14:23:57,257 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 14:23:57,257 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 14:23:57,258 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 14:23:57,259 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:23:56" (1/3) ...
[2020-11-25 14:23:57,259 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@1872966 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:23:57, skipping insertion in model container
[2020-11-25 14:23:57,259 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:23:56" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 14:23:57,295 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:23:57 NWAContainer
[2020-11-25 14:23:57,295 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 14:23:57,295 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 14:23:57,296 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 14:23:57,296 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 14:23:57,297 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:23:57" (3/4) ...
[2020-11-25 14:23:57,298 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@42e714c0 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:23:57, skipping insertion in model container
[2020-11-25 14:23:57,298 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:23:57" (4/4) ...
[2020-11-25 14:23:57,301 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 14:23:57,304 INFO  L110   BuchiProductObserver]: Initial RCFG 1244 locations, 1546 edges
[2020-11-25 14:23:57,304 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 14:23:57,316 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 14:23:58,538 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 14:23:58,542 INFO  L110   BuchiProductObserver]: BuchiProgram size 2930 locations, 4980 edges
[2020-11-25 14:23:58,542 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:23:58 BoogieIcfgContainer
[2020-11-25 14:23:58,542 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 14:23:58,542 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 14:23:58,542 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 14:23:58,544 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 14:23:58,544 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:23:58" (1/1) ...
[2020-11-25 14:23:58,606 INFO  L313           BlockEncoder]: Initial Icfg 2930 locations, 4980 edges
[2020-11-25 14:23:58,607 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 14:23:58,607 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 14:23:58,607 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 14:23:58,608 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 14:23:58,618 INFO  L70    emoveInfeasibleEdges]: Removed 57 edges and 13 locations because of local infeasibility
[2020-11-25 14:23:58,623 INFO  L70        RemoveSinkStates]: Removed 8 edges and 5 locations by removing sink states
[2020-11-25 14:23:58,634 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 14:23:58,637 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 14:23:58,639 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 14:23:58,640 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 14:23:58,643 INFO  L313           BlockEncoder]: Encoded RCFG 2892 locations, 4886 edges
[2020-11-25 14:23:58,643 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:23:58 BasicIcfg
[2020-11-25 14:23:58,643 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 14:23:58,643 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 14:23:58,643 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 14:23:58,645 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 14:23:58,645 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:23:58,646 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:23:56" (1/6) ...
[2020-11-25 14:23:58,647 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7cd44e4d and model type DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:23:58, skipping insertion in model container
[2020-11-25 14:23:58,647 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:23:58,647 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:23:56" (2/6) ...
[2020-11-25 14:23:58,648 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7cd44e4d and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:23:58, skipping insertion in model container
[2020-11-25 14:23:58,648 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:23:58,648 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:23:57" (3/6) ...
[2020-11-25 14:23:58,648 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7cd44e4d and model type DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:23:58, skipping insertion in model container
[2020-11-25 14:23:58,648 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:23:58,648 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:23:57" (4/6) ...
[2020-11-25 14:23:58,648 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7cd44e4d and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:23:58, skipping insertion in model container
[2020-11-25 14:23:58,648 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:23:58,649 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:23:58" (5/6) ...
[2020-11-25 14:23:58,649 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7cd44e4d and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:23:58, skipping insertion in model container
[2020-11-25 14:23:58,649 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:23:58,649 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:23:58" (6/6) ...
[2020-11-25 14:23:58,650 INFO  L404   chiAutomizerObserver]: Analyzing ICFG DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_totalsupply.bpl_BEv2
[2020-11-25 14:23:58,688 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 14:23:58,688 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 14:23:58,688 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 14:23:58,688 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 14:23:58,688 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 14:23:58,688 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 14:23:58,689 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 14:23:58,689 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 14:23:58,689 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 14:23:58,714 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2892 states.
[2020-11-25 14:23:58,758 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:23:58,759 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:23:58,759 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:23:58,767 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:23:58,767 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:23:58,767 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 14:23:58,767 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2892 states.
[2020-11-25 14:23:58,781 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:23:58,782 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:23:58,782 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:23:58,783 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:23:58,783 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]     CALL        call main();
[L3453]              assume null == 0;
[L3454]  CALL        call this := FreshRefGenerator__success();
[L1552]              havoc newRef;
[L1553]              assume Alloc[newRef] == false;
[L1554]              Alloc[newRef] := true;
[L1555]              assume newRef != null;
[L3454]  RET         call this := FreshRefGenerator__success();
[L3455]              assume now >= 0;
[L3456]              assume DType[this] == DUCATOProtocolToken;
[L3457]              assume msgvalue_MSG == 0;
[L3458]              gas := gas - 53000;
[L3459]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L394]               havoc __exception;
[L395]               revert := false;
[L396]   COND FALSE  !(__exception)
[L419]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1688]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]              assume msgsender_MSG != null;
[L1674]              Balance[this] := 0;
[L1688]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  COND FALSE  !(revert)
[L1849]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  COND TRUE   revert
[L419]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L420]               assume !revert && gas >= 0;
[L3459]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3460]              assume !revert && gas >= 0;

Loop:
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND FALSE  !(gas >= 0)
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:23:58,797 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:23:58,797 INFO  L82        PathProgramCache]: Analyzing trace with hash 1291786663, now seen corresponding path program 1 times
[2020-11-25 14:23:58,801 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:23:58,827 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:23:58,861 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:23:58,863 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:23:58,863 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:23:58,867 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:23:59,011 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:23:59,011 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:23:59,012 INFO  L87              Difference]: Start difference. First operand 2892 states. Second operand 4 states.
[2020-11-25 14:23:59,612 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:23:59,612 INFO  L93              Difference]: Finished difference Result 3136 states and 5078 transitions.
[2020-11-25 14:23:59,612 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:23:59,614 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3136 states and 5078 transitions.
[2020-11-25 14:23:59,633 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 14:23:59,662 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3136 states to 2986 states and 4839 transitions.
[2020-11-25 14:23:59,662 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 13
[2020-11-25 14:23:59,667 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 970
[2020-11-25 14:23:59,668 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2986 states and 4839 transitions.
[2020-11-25 14:23:59,683 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:23:59,683 INFO  L728         BuchiCegarLoop]: Abstraction has 2986 states and 4839 transitions.
[2020-11-25 14:23:59,698 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2986 states and 4839 transitions.
[2020-11-25 14:23:59,757 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2986 to 2198.
[2020-11-25 14:23:59,757 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2198 states.
[2020-11-25 14:23:59,762 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2198 states to 2198 states and 3378 transitions.
[2020-11-25 14:23:59,763 INFO  L751         BuchiCegarLoop]: Abstraction has 2198 states and 3378 transitions.
[2020-11-25 14:23:59,764 INFO  L631         BuchiCegarLoop]: Abstraction has 2198 states and 3378 transitions.
[2020-11-25 14:23:59,764 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 14:23:59,764 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2198 states and 3378 transitions.
[2020-11-25 14:23:59,771 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:23:59,771 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:23:59,771 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:23:59,772 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:23:59,773 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]     CALL        call main();
[L3453]              assume null == 0;
[L3454]  CALL        call this := FreshRefGenerator__success();
[L1552]              havoc newRef;
[L1553]              assume Alloc[newRef] == false;
[L1554]              Alloc[newRef] := true;
[L1555]              assume newRef != null;
[L3454]  RET         call this := FreshRefGenerator__success();
[L3455]              assume now >= 0;
[L3456]              assume DType[this] == DUCATOProtocolToken;
[L3457]              assume msgvalue_MSG == 0;
[L3458]              gas := gas - 53000;
[L3459]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L394]               havoc __exception;
[L395]               revert := false;
[L396]   COND FALSE  !(__exception)
[L419]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1688]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]              assume msgsender_MSG != null;
[L1674]              Balance[this] := 0;
[L1688]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  COND FALSE  !(revert)
[L1849]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  COND FALSE  !(revert)
[L1853]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1756]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]              assume msgsender_MSG != null;
[L1740]              Balance[this] := 0;
[L1741]              owner_Owned[this] := null;
[L1743]              owner_Owned[this] := msgsender_MSG;
[L1756]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  COND FALSE  !(revert)
[L1853]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1805]              assume msgsender_MSG != null;
[L1806]              Balance[this] := 0;
[L1807]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1808]              name_DUCATOProtocolToken[this] := 1405682701;
[L1809]              decimals_DUCATOProtocolToken[this] := 0;
[L1810]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1811]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1812]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1813]              sum_balances0[this] := 0;
[L1814]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1815]              sum_allowed1[this] := 0;
[L1817]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1818]              name_DUCATOProtocolToken[this] := -2134480732;
[L1819]              decimals_DUCATOProtocolToken[this] := 18;
[L1820]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1821]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1823]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1824]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1825]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1826]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1857]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L419]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L420]               assume !revert && gas >= 0;
[L3459]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3460]              assume !revert && gas >= 0;

Loop:
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND FALSE  !(gas >= 0)
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:23:59,776 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:23:59,776 INFO  L82        PathProgramCache]: Analyzing trace with hash 1710891952, now seen corresponding path program 1 times
[2020-11-25 14:23:59,777 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:23:59,786 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:23:59,803 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:23:59,803 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:23:59,803 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:23:59,804 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:23:59,805 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:23:59,805 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:23:59,805 INFO  L87              Difference]: Start difference. First operand 2198 states and 3378 transitions. cyclomatic complexity: 1182 Second operand 4 states.
[2020-11-25 14:24:00,202 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:24:00,203 INFO  L93              Difference]: Finished difference Result 2032 states and 2199 transitions.
[2020-11-25 14:24:00,203 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:24:00,203 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2032 states and 2199 transitions.
[2020-11-25 14:24:00,211 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:24:00,219 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2032 states to 2032 states and 2199 transitions.
[2020-11-25 14:24:00,219 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 602
[2020-11-25 14:24:00,219 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 602
[2020-11-25 14:24:00,219 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2032 states and 2199 transitions.
[2020-11-25 14:24:00,221 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:24:00,221 INFO  L728         BuchiCegarLoop]: Abstraction has 2032 states and 2199 transitions.
[2020-11-25 14:24:00,222 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2032 states and 2199 transitions.
[2020-11-25 14:24:00,235 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2032 to 2032.
[2020-11-25 14:24:00,235 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2032 states.
[2020-11-25 14:24:00,239 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2032 states to 2032 states and 2199 transitions.
[2020-11-25 14:24:00,239 INFO  L751         BuchiCegarLoop]: Abstraction has 2032 states and 2199 transitions.
[2020-11-25 14:24:00,239 INFO  L631         BuchiCegarLoop]: Abstraction has 2032 states and 2199 transitions.
[2020-11-25 14:24:00,239 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 14:24:00,239 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2032 states and 2199 transitions.
[2020-11-25 14:24:00,243 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:24:00,243 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:24:00,243 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:24:00,244 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:24:00,244 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]     CALL        call main();
[L3453]              assume null == 0;
[L3454]  CALL        call this := FreshRefGenerator__success();
[L1552]              havoc newRef;
[L1553]              assume Alloc[newRef] == false;
[L1554]              Alloc[newRef] := true;
[L1555]              assume newRef != null;
[L3454]  RET         call this := FreshRefGenerator__success();
[L3455]              assume now >= 0;
[L3456]              assume DType[this] == DUCATOProtocolToken;
[L3457]              assume msgvalue_MSG == 0;
[L3458]              gas := gas - 53000;
[L3459]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L394]               havoc __exception;
[L395]               revert := false;
[L396]   COND FALSE  !(__exception)
[L419]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1688]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]              assume msgsender_MSG != null;
[L1674]              Balance[this] := 0;
[L1688]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  COND FALSE  !(revert)
[L1849]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  COND FALSE  !(revert)
[L1853]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1756]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]              assume msgsender_MSG != null;
[L1740]              Balance[this] := 0;
[L1741]              owner_Owned[this] := null;
[L1743]              owner_Owned[this] := msgsender_MSG;
[L1756]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  COND FALSE  !(revert)
[L1853]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1805]              assume msgsender_MSG != null;
[L1806]              Balance[this] := 0;
[L1807]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1808]              name_DUCATOProtocolToken[this] := 1405682701;
[L1809]              decimals_DUCATOProtocolToken[this] := 0;
[L1810]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1811]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1812]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1813]              sum_balances0[this] := 0;
[L1814]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1815]              sum_allowed1[this] := 0;
[L1817]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1818]              name_DUCATOProtocolToken[this] := -2134480732;
[L1819]              decimals_DUCATOProtocolToken[this] := 18;
[L1820]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1821]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1823]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1824]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1825]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1826]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1857]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L419]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L420]               assume !revert && gas >= 0;
[L3459]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3460]              assume !revert && gas >= 0;
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND TRUE   gas >= 0
[L3359]              assume msgvalue_MSG == 0;
[L3360]  CALL        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L473]   CALL        call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]              __var_3 := null;
[L1881]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1881]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1882]  COND FALSE  !(revert)
[L1885]              __ret_0_ := __var_2;
[L473]   RET         call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L474]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_DUCATOProtocolToken[this] && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this])) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this])) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this])) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this])) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this])) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this])) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L3360]  RET         call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

Loop:
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND TRUE   gas >= 0
[L3359]              assume msgvalue_MSG == 0;
[L3360]  CALL        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L473]   CALL        call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]              __var_3 := null;
[L1881]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1881]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1882]  COND FALSE  !(revert)
[L1885]              __ret_0_ := __var_2;
[L473]   RET         call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L474]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_DUCATOProtocolToken[this] && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this])) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this])) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this])) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this])) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this])) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this])) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L3360]  RET         call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:24:00,247 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:24:00,248 INFO  L82        PathProgramCache]: Analyzing trace with hash 1510953087, now seen corresponding path program 1 times
[2020-11-25 14:24:00,248 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:24:00,287 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:24:00,530 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:24:00,530 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:24:00,531 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [20] imperfect sequences [] total 20
[2020-11-25 14:24:00,531 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:24:00,531 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 21 interpolants.
[2020-11-25 14:24:00,531 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=42, Invalid=378, Unknown=0, NotChecked=0, Total=420
[2020-11-25 14:24:00,532 INFO  L87              Difference]: Start difference. First operand 2032 states and 2199 transitions. cyclomatic complexity: 169 Second operand 21 states.
[2020-11-25 14:24:02,774 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:24:02,775 INFO  L93              Difference]: Finished difference Result 2089 states and 2271 transitions.
[2020-11-25 14:24:02,775 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 14:24:02,775 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2089 states and 2271 transitions.
[2020-11-25 14:24:02,781 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 14:24:02,788 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2089 states to 2089 states and 2271 transitions.
[2020-11-25 14:24:02,788 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 627
[2020-11-25 14:24:02,788 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 627
[2020-11-25 14:24:02,788 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2089 states and 2271 transitions.
[2020-11-25 14:24:02,791 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:24:02,791 INFO  L728         BuchiCegarLoop]: Abstraction has 2089 states and 2271 transitions.
[2020-11-25 14:24:02,793 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2089 states and 2271 transitions.
[2020-11-25 14:24:02,810 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2089 to 2083.
[2020-11-25 14:24:02,810 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2083 states.
[2020-11-25 14:24:02,813 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2083 states to 2083 states and 2257 transitions.
[2020-11-25 14:24:02,813 INFO  L751         BuchiCegarLoop]: Abstraction has 2083 states and 2257 transitions.
[2020-11-25 14:24:02,813 INFO  L631         BuchiCegarLoop]: Abstraction has 2083 states and 2257 transitions.
[2020-11-25 14:24:02,813 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 14:24:02,813 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2083 states and 2257 transitions.
[2020-11-25 14:24:02,817 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:24:02,817 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:24:02,817 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:24:02,819 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:24:02,819 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]     CALL        call main();
[L3453]              assume null == 0;
[L3454]  CALL        call this := FreshRefGenerator__success();
[L1552]              havoc newRef;
[L1553]              assume Alloc[newRef] == false;
[L1554]              Alloc[newRef] := true;
[L1555]              assume newRef != null;
[L3454]  RET         call this := FreshRefGenerator__success();
[L3455]              assume now >= 0;
[L3456]              assume DType[this] == DUCATOProtocolToken;
[L3457]              assume msgvalue_MSG == 0;
[L3458]              gas := gas - 53000;
[L3459]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L394]               havoc __exception;
[L395]               revert := false;
[L396]   COND FALSE  !(__exception)
[L419]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1688]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]              assume msgsender_MSG != null;
[L1674]              Balance[this] := 0;
[L1688]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  COND FALSE  !(revert)
[L1849]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  COND FALSE  !(revert)
[L1853]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1756]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]              assume msgsender_MSG != null;
[L1740]              Balance[this] := 0;
[L1741]              owner_Owned[this] := null;
[L1743]              owner_Owned[this] := msgsender_MSG;
[L1756]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  COND FALSE  !(revert)
[L1853]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1805]              assume msgsender_MSG != null;
[L1806]              Balance[this] := 0;
[L1807]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1808]              name_DUCATOProtocolToken[this] := 1405682701;
[L1809]              decimals_DUCATOProtocolToken[this] := 0;
[L1810]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1811]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1812]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1813]              sum_balances0[this] := 0;
[L1814]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1815]              sum_allowed1[this] := 0;
[L1817]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1818]              name_DUCATOProtocolToken[this] := -2134480732;
[L1819]              decimals_DUCATOProtocolToken[this] := 18;
[L1820]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1821]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1823]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1824]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1825]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1826]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1857]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L419]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L420]               assume !revert && gas >= 0;
[L3459]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3460]              assume !revert && gas >= 0;
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND TRUE   gas >= 0
[L3359]              assume msgvalue_MSG == 0;
[L3360]  CALL        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND TRUE   __exception
[L451]               __tmp__Balance := Balance;
[L452]               __tmp__DType := DType;
[L453]               __tmp__Alloc := Alloc;
[L454]               __tmp__balance_ADDR := balance_ADDR;
[L455]               __tmp__M_Ref_int := M_Ref_int;
[L456]               __tmp__sum_balances0 := sum_balances0;
[L457]               __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L458]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L459]               __tmp__sum_allowed1 := sum_allowed1;
[L460]               __tmp__Length := Length;
[L461]               __tmp__now := now;
[L462]               __tmp__owner_Owned := owner_Owned;
[L463]               __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L464]               __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L465]               __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L466]               __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L467]               __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L468]               __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L469]               __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L470]   CALL        call __ret_0_ := totalSupply_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1867]              __var_3 := null;
[L1868]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_DUCATOProtocolToken[this], __tmp__balances_DUCATOProtocolToken[this][null]);
[L1610]  COND TRUE   !(b_s45 <= a_s45)
[L1611]              revert := true;
[L1868]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_DUCATOProtocolToken[this], __tmp__balances_DUCATOProtocolToken[this][null]);
[L1869]  COND TRUE   revert
[L470]   RET         call __ret_0_ := totalSupply_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L471]               assume revert || gas < 0;
[L3360]  RET         call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

Loop:
[L3463]  CALL       call CorralChoice_DUCATOProtocolToken(this);
[L3313]             havoc msgsender_MSG;
[L3314]             havoc msgvalue_MSG;
[L3315]             havoc choice;
[L3316]             havoc __ret_0_totalSupply;
[L3317]             havoc tokenOwner_s328;
[L3318]             havoc balance_s328;
[L3319]             havoc tokenOwner_s532;
[L3320]             havoc spender_s532;
[L3321]             havoc remaining_s532;
[L3322]             havoc to_s385;
[L3323]             havoc tokens_s385;
[L3324]             havoc success_s385;
[L3325]             havoc spender_s419;
[L3326]             havoc tokens_s419;
[L3327]             havoc success_s419;
[L3328]             havoc from_s510;
[L3329]             havoc to_s510;
[L3330]             havoc tokens_s510;
[L3331]             havoc success_s510;
[L3332]             havoc __ret_0_owner;
[L3333]             havoc __ret_0_symbol;
[L3334]             havoc __ret_0_name;
[L3335]             havoc __ret_0_decimals;
[L3336]             havoc spender_s582;
[L3337]             havoc tokens_s582;
[L3338]             havoc data_s582;
[L3339]             havoc success_s582;
[L3340]             havoc tokenAddress_s609;
[L3341]             havoc tokens_s609;
[L3342]             havoc success_s609;
[L3343]             havoc tmpNow;
[L3344]             havoc gas;
[L3345]             assume gas > 4000000 && gas <= 8000000;
[L3346]             tmpNow := now;
[L3347]             havoc now;
[L3348]             assume now > tmpNow;
[L3349]             assume msgsender_MSG != null;
[L3350]             assume DType[msgsender_MSG] != SafeMath;
[L3351]             assume DType[msgsender_MSG] != ERC20Interface;
[L3352]             assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]             assume DType[msgsender_MSG] != Owned;
[L3354]             assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]             Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE  choice == 14
[L3357]             gas := gas - 21000;
[L3358]  COND TRUE  gas >= 0
[L3359]             assume msgvalue_MSG == 0;
[L3360]  CALL       call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                revert := revert_hold;
[L448]              havoc __exception;
[L449]              revert := false;
[L450]   COND TRUE  __exception
[L451]              __tmp__Balance := Balance;
[L452]              __tmp__DType := DType;
[L453]              __tmp__Alloc := Alloc;
[L454]              __tmp__balance_ADDR := balance_ADDR;
[L455]              __tmp__M_Ref_int := M_Ref_int;
[L456]              __tmp__sum_balances0 := sum_balances0;
[L457]              __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L458]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L459]              __tmp__sum_allowed1 := sum_allowed1;
[L460]              __tmp__Length := Length;
[L461]              __tmp__now := now;
[L462]              __tmp__owner_Owned := owner_Owned;
[L463]              __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L464]              __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L465]              __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L466]              __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L467]              __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L468]              __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L469]              __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L470]   CALL       call __ret_0_ := totalSupply_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1867]             __var_3 := null;
[L1868]  CALL       call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_DUCATOProtocolToken[this], __tmp__balances_DUCATOProtocolToken[this][null]);
[L1610]  COND TRUE  !(b_s45 <= a_s45)
[L1611]             revert := true;
[L1868]  RET        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_DUCATOProtocolToken[this], __tmp__balances_DUCATOProtocolToken[this][null]);
[L1869]  COND TRUE  revert
[L470]   RET        call __ret_0_ := totalSupply_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L471]              assume revert || gas < 0;
[L3360]  RET        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET        call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:24:02,822 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:24:02,823 INFO  L82        PathProgramCache]: Analyzing trace with hash -867007634, now seen corresponding path program 1 times
[2020-11-25 14:24:02,823 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:24:02,832 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:24:02,943 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:24:02,944 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:24:02,944 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [20] imperfect sequences [] total 20
[2020-11-25 14:24:02,944 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:24:02,944 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 21 interpolants.
[2020-11-25 14:24:02,944 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=43, Invalid=377, Unknown=0, NotChecked=0, Total=420
[2020-11-25 14:24:02,944 INFO  L87              Difference]: Start difference. First operand 2083 states and 2257 transitions. cyclomatic complexity: 178 Second operand 21 states.
[2020-11-25 14:24:04,059 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:24:04,059 INFO  L93              Difference]: Finished difference Result 2184 states and 2380 transitions.
[2020-11-25 14:24:04,059 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 14:24:04,059 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2184 states and 2380 transitions.
[2020-11-25 14:24:04,064 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 14:24:04,069 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2184 states to 2184 states and 2380 transitions.
[2020-11-25 14:24:04,069 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 649
[2020-11-25 14:24:04,069 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 649
[2020-11-25 14:24:04,069 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2184 states and 2380 transitions.
[2020-11-25 14:24:04,071 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:24:04,071 INFO  L728         BuchiCegarLoop]: Abstraction has 2184 states and 2380 transitions.
[2020-11-25 14:24:04,072 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2184 states and 2380 transitions.
[2020-11-25 14:24:04,087 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2184 to 2152.
[2020-11-25 14:24:04,087 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2152 states.
[2020-11-25 14:24:04,090 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2152 states to 2152 states and 2333 transitions.
[2020-11-25 14:24:04,090 INFO  L751         BuchiCegarLoop]: Abstraction has 2152 states and 2333 transitions.
[2020-11-25 14:24:04,090 INFO  L631         BuchiCegarLoop]: Abstraction has 2152 states and 2333 transitions.
[2020-11-25 14:24:04,090 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 14:24:04,090 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2152 states and 2333 transitions.
[2020-11-25 14:24:04,095 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:24:04,095 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:24:04,095 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:24:04,096 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:24:04,097 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]     CALL        call main();
[L3453]              assume null == 0;
[L3454]  CALL        call this := FreshRefGenerator__success();
[L1552]              havoc newRef;
[L1553]              assume Alloc[newRef] == false;
[L1554]              Alloc[newRef] := true;
[L1555]              assume newRef != null;
[L3454]  RET         call this := FreshRefGenerator__success();
[L3455]              assume now >= 0;
[L3456]              assume DType[this] == DUCATOProtocolToken;
[L3457]              assume msgvalue_MSG == 0;
[L3458]              gas := gas - 53000;
[L3459]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L394]               havoc __exception;
[L395]               revert := false;
[L396]   COND FALSE  !(__exception)
[L419]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1688]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]              assume msgsender_MSG != null;
[L1674]              Balance[this] := 0;
[L1688]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  COND FALSE  !(revert)
[L1849]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  COND FALSE  !(revert)
[L1853]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1756]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]              assume msgsender_MSG != null;
[L1740]              Balance[this] := 0;
[L1741]              owner_Owned[this] := null;
[L1743]              owner_Owned[this] := msgsender_MSG;
[L1756]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  COND FALSE  !(revert)
[L1853]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1805]              assume msgsender_MSG != null;
[L1806]              Balance[this] := 0;
[L1807]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1808]              name_DUCATOProtocolToken[this] := 1405682701;
[L1809]              decimals_DUCATOProtocolToken[this] := 0;
[L1810]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1811]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1812]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1813]              sum_balances0[this] := 0;
[L1814]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1815]              sum_allowed1[this] := 0;
[L1817]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1818]              name_DUCATOProtocolToken[this] := -2134480732;
[L1819]              decimals_DUCATOProtocolToken[this] := 18;
[L1820]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1821]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1823]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1824]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1825]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1826]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1857]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L419]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L420]               assume !revert && gas >= 0;
[L3459]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3460]              assume !revert && gas >= 0;
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND TRUE   gas >= 0
[L3359]              assume msgvalue_MSG == 0;
[L3360]  CALL        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND TRUE   __exception
[L451]               __tmp__Balance := Balance;
[L452]               __tmp__DType := DType;
[L453]               __tmp__Alloc := Alloc;
[L454]               __tmp__balance_ADDR := balance_ADDR;
[L455]               __tmp__M_Ref_int := M_Ref_int;
[L456]               __tmp__sum_balances0 := sum_balances0;
[L457]               __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L458]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L459]               __tmp__sum_allowed1 := sum_allowed1;
[L460]               __tmp__Length := Length;
[L461]               __tmp__now := now;
[L462]               __tmp__owner_Owned := owner_Owned;
[L463]               __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L464]               __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L465]               __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L466]               __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L467]               __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L468]               __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L469]               __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L470]   CALL        call __ret_0_ := totalSupply_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1867]              __var_3 := null;
[L1868]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_DUCATOProtocolToken[this], __tmp__balances_DUCATOProtocolToken[this][null]);
[L1610]  COND FALSE  !(!(b_s45 <= a_s45))
[L1614]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1868]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_DUCATOProtocolToken[this], __tmp__balances_DUCATOProtocolToken[this][null]);
[L1869]  COND FALSE  !(revert)
[L1872]              __ret_0_ := __var_2;
[L470]   RET         call __ret_0_ := totalSupply_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L471]               assume revert || gas < 0;
[L3360]  RET         call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

Loop:
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND TRUE   gas >= 0
[L3359]              assume msgvalue_MSG == 0;
[L3360]  CALL        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND TRUE   __exception
[L451]               __tmp__Balance := Balance;
[L452]               __tmp__DType := DType;
[L453]               __tmp__Alloc := Alloc;
[L454]               __tmp__balance_ADDR := balance_ADDR;
[L455]               __tmp__M_Ref_int := M_Ref_int;
[L456]               __tmp__sum_balances0 := sum_balances0;
[L457]               __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L458]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L459]               __tmp__sum_allowed1 := sum_allowed1;
[L460]               __tmp__Length := Length;
[L461]               __tmp__now := now;
[L462]               __tmp__owner_Owned := owner_Owned;
[L463]               __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L464]               __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L465]               __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L466]               __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L467]               __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L468]               __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L469]               __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L470]   CALL        call __ret_0_ := totalSupply_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1867]              __var_3 := null;
[L1868]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_DUCATOProtocolToken[this], __tmp__balances_DUCATOProtocolToken[this][null]);
[L1610]  COND FALSE  !(!(b_s45 <= a_s45))
[L1614]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1868]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_DUCATOProtocolToken[this], __tmp__balances_DUCATOProtocolToken[this][null]);
[L1869]  COND FALSE  !(revert)
[L1872]              __ret_0_ := __var_2;
[L470]   RET         call __ret_0_ := totalSupply_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L471]               assume revert || gas < 0;
[L3360]  RET         call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:24:04,100 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:24:04,100 INFO  L82        PathProgramCache]: Analyzing trace with hash -598783295, now seen corresponding path program 1 times
[2020-11-25 14:24:04,101 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:24:04,107 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:24:04,124 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:24:04,124 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:24:04,124 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 14:24:04,124 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:24:04,125 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 14:24:04,125 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 14:24:04,125 INFO  L87              Difference]: Start difference. First operand 2152 states and 2333 transitions. cyclomatic complexity: 185 Second operand 5 states.
[2020-11-25 14:24:04,344 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:24:04,344 INFO  L93              Difference]: Finished difference Result 2732 states and 3029 transitions.
[2020-11-25 14:24:04,344 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 14:24:04,344 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2732 states and 3029 transitions.
[2020-11-25 14:24:04,351 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 14:24:04,357 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2732 states to 2239 states and 2533 transitions.
[2020-11-25 14:24:04,357 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 560
[2020-11-25 14:24:04,357 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 560
[2020-11-25 14:24:04,357 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2239 states and 2533 transitions.
[2020-11-25 14:24:04,359 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:24:04,359 INFO  L728         BuchiCegarLoop]: Abstraction has 2239 states and 2533 transitions.
[2020-11-25 14:24:04,361 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2239 states and 2533 transitions.
[2020-11-25 14:24:04,372 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2239 to 1703.
[2020-11-25 14:24:04,372 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1703 states.
[2020-11-25 14:24:04,374 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1703 states to 1703 states and 1846 transitions.
[2020-11-25 14:24:04,374 INFO  L751         BuchiCegarLoop]: Abstraction has 1703 states and 1846 transitions.
[2020-11-25 14:24:04,374 INFO  L631         BuchiCegarLoop]: Abstraction has 1703 states and 1846 transitions.
[2020-11-25 14:24:04,374 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 14:24:04,374 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1703 states and 1846 transitions.
[2020-11-25 14:24:04,376 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:24:04,376 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:24:04,376 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:24:04,377 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:24:04,377 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]     CALL        call main();
[L3453]              assume null == 0;
[L3454]  CALL        call this := FreshRefGenerator__success();
[L1552]              havoc newRef;
[L1553]              assume Alloc[newRef] == false;
[L1554]              Alloc[newRef] := true;
[L1555]              assume newRef != null;
[L3454]  RET         call this := FreshRefGenerator__success();
[L3455]              assume now >= 0;
[L3456]              assume DType[this] == DUCATOProtocolToken;
[L3457]              assume msgvalue_MSG == 0;
[L3458]              gas := gas - 53000;
[L3459]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L394]               havoc __exception;
[L395]               revert := false;
[L396]   COND FALSE  !(__exception)
[L419]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1688]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]              assume msgsender_MSG != null;
[L1674]              Balance[this] := 0;
[L1688]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  COND FALSE  !(revert)
[L1849]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  COND FALSE  !(revert)
[L1853]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1756]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]              assume msgsender_MSG != null;
[L1740]              Balance[this] := 0;
[L1741]              owner_Owned[this] := null;
[L1743]              owner_Owned[this] := msgsender_MSG;
[L1756]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  COND FALSE  !(revert)
[L1853]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1805]              assume msgsender_MSG != null;
[L1806]              Balance[this] := 0;
[L1807]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1808]              name_DUCATOProtocolToken[this] := 1405682701;
[L1809]              decimals_DUCATOProtocolToken[this] := 0;
[L1810]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1811]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1812]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1813]              sum_balances0[this] := 0;
[L1814]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1815]              sum_allowed1[this] := 0;
[L1817]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1818]              name_DUCATOProtocolToken[this] := -2134480732;
[L1819]              decimals_DUCATOProtocolToken[this] := 18;
[L1820]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1821]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1823]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1824]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1825]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1826]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1857]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L419]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L420]               assume !revert && gas >= 0;
[L3459]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3460]              assume !revert && gas >= 0;
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND TRUE   choice == 11
[L3375]              gas := gas - 21000;
[L3376]  COND TRUE   gas >= 0
[L3377]              assume tokens_s385 >= 0 && tokens_s385 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3378]              assume msgvalue_MSG == 0;
[L3379]  CALL        call success_s385 := transfer~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L668]               havoc __exception;
[L669]               revert := false;
[L670]   COND FALSE  !(__exception)
[L693]   CALL        call success_s385 := transfer~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L1990]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L1994]              __var_4 := null;
[L1995]  COND FALSE  !(!(to_s385 > null))
[L1999]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L2000]  COND FALSE  !(revert)
[L2003]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2004]              balances_DUCATOProtocolToken[this][msgsender_MSG] := __var_5;
[L2005]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2006]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L1601]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1602]  COND FALSE  !(!(c_s23 >= a_s23))
[L2006]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L2007]  COND FALSE  !(revert)
[L2010]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][to_s385];
[L2011]              balances_DUCATOProtocolToken[this][to_s385] := __var_6;
[L2012]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][to_s385];
[L2013]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L2014]              success_s385 := true;
[L693]   RET         call success_s385 := transfer~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L694]               assume !revert && gas >= 0;
[L3379]  RET         call success_s385 := transfer~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND TRUE   gas >= 0
[L3359]              assume msgvalue_MSG == 0;
[L3360]  CALL        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L473]   CALL        call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]              __var_3 := null;
[L1881]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1881]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1882]  COND FALSE  !(revert)
[L1885]              __ret_0_ := __var_2;
[L473]   RET         call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L474]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_DUCATOProtocolToken[this] && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this])) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this])) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this])) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this])) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this])) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this])) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L3360]  RET         call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

Loop:
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND FALSE  !(gas >= 0)
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:24:04,380 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:24:04,380 INFO  L82        PathProgramCache]: Analyzing trace with hash -215271377, now seen corresponding path program 1 times
[2020-11-25 14:24:04,380 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:24:04,394 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:24:04,543 INFO  L134       CoverageAnalysis]: Checked inductivity of 46 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 39 trivial. 0 not checked.
[2020-11-25 14:24:04,543 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:24:04,543 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-11-25 14:24:04,544 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:24:04,544 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 14:24:04,544 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=65, Invalid=637, Unknown=0, NotChecked=0, Total=702
[2020-11-25 14:24:04,544 INFO  L87              Difference]: Start difference. First operand 1703 states and 1846 transitions. cyclomatic complexity: 146 Second operand 27 states.
[2020-11-25 14:24:06,411 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:24:06,411 INFO  L93              Difference]: Finished difference Result 1765 states and 1924 transitions.
[2020-11-25 14:24:06,411 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-11-25 14:24:06,412 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1765 states and 1924 transitions.
[2020-11-25 14:24:06,415 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:24:06,418 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1765 states to 1765 states and 1924 transitions.
[2020-11-25 14:24:06,418 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 479
[2020-11-25 14:24:06,419 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 479
[2020-11-25 14:24:06,419 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1765 states and 1924 transitions.
[2020-11-25 14:24:06,421 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:24:06,421 INFO  L728         BuchiCegarLoop]: Abstraction has 1765 states and 1924 transitions.
[2020-11-25 14:24:06,422 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1765 states and 1924 transitions.
[2020-11-25 14:24:06,432 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1765 to 1742.
[2020-11-25 14:24:06,432 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1742 states.
[2020-11-25 14:24:06,433 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1742 states to 1742 states and 1898 transitions.
[2020-11-25 14:24:06,433 INFO  L751         BuchiCegarLoop]: Abstraction has 1742 states and 1898 transitions.
[2020-11-25 14:24:06,433 INFO  L631         BuchiCegarLoop]: Abstraction has 1742 states and 1898 transitions.
[2020-11-25 14:24:06,433 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 14:24:06,433 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1742 states and 1898 transitions.
[2020-11-25 14:24:06,435 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:24:06,435 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:24:06,435 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:24:06,436 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:24:06,436 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]     CALL        call main();
[L3453]              assume null == 0;
[L3454]  CALL        call this := FreshRefGenerator__success();
[L1552]              havoc newRef;
[L1553]              assume Alloc[newRef] == false;
[L1554]              Alloc[newRef] := true;
[L1555]              assume newRef != null;
[L3454]  RET         call this := FreshRefGenerator__success();
[L3455]              assume now >= 0;
[L3456]              assume DType[this] == DUCATOProtocolToken;
[L3457]              assume msgvalue_MSG == 0;
[L3458]              gas := gas - 53000;
[L3459]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L394]               havoc __exception;
[L395]               revert := false;
[L396]   COND FALSE  !(__exception)
[L419]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1688]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]              assume msgsender_MSG != null;
[L1674]              Balance[this] := 0;
[L1688]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  COND FALSE  !(revert)
[L1849]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  COND FALSE  !(revert)
[L1853]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1756]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]              assume msgsender_MSG != null;
[L1740]              Balance[this] := 0;
[L1741]              owner_Owned[this] := null;
[L1743]              owner_Owned[this] := msgsender_MSG;
[L1756]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  COND FALSE  !(revert)
[L1853]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1805]              assume msgsender_MSG != null;
[L1806]              Balance[this] := 0;
[L1807]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1808]              name_DUCATOProtocolToken[this] := 1405682701;
[L1809]              decimals_DUCATOProtocolToken[this] := 0;
[L1810]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1811]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1812]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1813]              sum_balances0[this] := 0;
[L1814]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1815]              sum_allowed1[this] := 0;
[L1817]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1818]              name_DUCATOProtocolToken[this] := -2134480732;
[L1819]              decimals_DUCATOProtocolToken[this] := 18;
[L1820]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1821]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1823]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1824]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1825]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1826]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1857]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L419]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L420]               assume !revert && gas >= 0;
[L3459]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3460]              assume !revert && gas >= 0;
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND TRUE   choice == 11
[L3375]              gas := gas - 21000;
[L3376]  COND TRUE   gas >= 0
[L3377]              assume tokens_s385 >= 0 && tokens_s385 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3378]              assume msgvalue_MSG == 0;
[L3379]  CALL        call success_s385 := transfer~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L668]               havoc __exception;
[L669]               revert := false;
[L670]   COND FALSE  !(__exception)
[L693]   CALL        call success_s385 := transfer~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L1990]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L1994]              __var_4 := null;
[L1995]  COND FALSE  !(!(to_s385 > null))
[L1999]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L2000]  COND FALSE  !(revert)
[L2003]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2004]              balances_DUCATOProtocolToken[this][msgsender_MSG] := __var_5;
[L2005]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2006]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L1601]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1602]  COND FALSE  !(!(c_s23 >= a_s23))
[L2006]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L2007]  COND FALSE  !(revert)
[L2010]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][to_s385];
[L2011]              balances_DUCATOProtocolToken[this][to_s385] := __var_6;
[L2012]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][to_s385];
[L2013]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L2014]              success_s385 := true;
[L693]   RET         call success_s385 := transfer~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L694]               assume !revert && gas >= 0;
[L3379]  RET         call success_s385 := transfer~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND TRUE   gas >= 0
[L3359]              assume msgvalue_MSG == 0;
[L3360]  CALL        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND TRUE   __exception
[L451]               __tmp__Balance := Balance;
[L452]               __tmp__DType := DType;
[L453]               __tmp__Alloc := Alloc;
[L454]               __tmp__balance_ADDR := balance_ADDR;
[L455]               __tmp__M_Ref_int := M_Ref_int;
[L456]               __tmp__sum_balances0 := sum_balances0;
[L457]               __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L458]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L459]               __tmp__sum_allowed1 := sum_allowed1;
[L460]               __tmp__Length := Length;
[L461]               __tmp__now := now;
[L462]               __tmp__owner_Owned := owner_Owned;
[L463]               __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L464]               __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L465]               __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L466]               __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L467]               __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L468]               __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L469]               __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L470]   CALL        call __ret_0_ := totalSupply_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1867]              __var_3 := null;
[L1868]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_DUCATOProtocolToken[this], __tmp__balances_DUCATOProtocolToken[this][null]);
[L1610]  COND TRUE   !(b_s45 <= a_s45)
[L1611]              revert := true;
[L1868]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_DUCATOProtocolToken[this], __tmp__balances_DUCATOProtocolToken[this][null]);
[L1869]  COND TRUE   revert
[L470]   RET         call __ret_0_ := totalSupply_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L471]               assume revert || gas < 0;
[L3360]  RET         call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

Loop:
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND FALSE  !(gas >= 0)
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:24:06,439 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:24:06,439 INFO  L82        PathProgramCache]: Analyzing trace with hash -1645791458, now seen corresponding path program 1 times
[2020-11-25 14:24:06,440 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:24:06,449 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:24:06,576 INFO  L134       CoverageAnalysis]: Checked inductivity of 46 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 39 trivial. 0 not checked.
[2020-11-25 14:24:06,576 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:24:06,576 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-11-25 14:24:06,576 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:24:06,576 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 14:24:06,577 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=65, Invalid=637, Unknown=0, NotChecked=0, Total=702
[2020-11-25 14:24:06,577 INFO  L87              Difference]: Start difference. First operand 1742 states and 1898 transitions. cyclomatic complexity: 161 Second operand 27 states.
[2020-11-25 14:24:09,122 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:24:09,123 INFO  L93              Difference]: Finished difference Result 4206 states and 4665 transitions.
[2020-11-25 14:24:09,123 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 38 states. 
[2020-11-25 14:24:09,123 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4206 states and 4665 transitions.
[2020-11-25 14:24:09,131 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 14:24:09,141 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4206 states to 4206 states and 4665 transitions.
[2020-11-25 14:24:09,141 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1129
[2020-11-25 14:24:09,142 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1560
[2020-11-25 14:24:09,142 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4206 states and 4665 transitions.
[2020-11-25 14:24:09,146 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:24:09,146 INFO  L728         BuchiCegarLoop]: Abstraction has 4206 states and 4665 transitions.
[2020-11-25 14:24:09,148 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4206 states and 4665 transitions.
[2020-11-25 14:24:09,169 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4206 to 3459.
[2020-11-25 14:24:09,170 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3459 states.
[2020-11-25 14:24:09,173 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3459 states to 3459 states and 3896 transitions.
[2020-11-25 14:24:09,173 INFO  L751         BuchiCegarLoop]: Abstraction has 3459 states and 3896 transitions.
[2020-11-25 14:24:09,173 INFO  L631         BuchiCegarLoop]: Abstraction has 3459 states and 3896 transitions.
[2020-11-25 14:24:09,173 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 14:24:09,174 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3459 states and 3896 transitions.
[2020-11-25 14:24:09,179 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 14:24:09,179 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:24:09,179 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:24:09,180 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:24:09,180 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]     CALL        call main();
[L3453]              assume null == 0;
[L3454]  CALL        call this := FreshRefGenerator__success();
[L1552]              havoc newRef;
[L1553]              assume Alloc[newRef] == false;
[L1554]              Alloc[newRef] := true;
[L1555]              assume newRef != null;
[L3454]  RET         call this := FreshRefGenerator__success();
[L3455]              assume now >= 0;
[L3456]              assume DType[this] == DUCATOProtocolToken;
[L3457]              assume msgvalue_MSG == 0;
[L3458]              gas := gas - 53000;
[L3459]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L394]               havoc __exception;
[L395]               revert := false;
[L396]   COND FALSE  !(__exception)
[L419]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1688]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]              assume msgsender_MSG != null;
[L1674]              Balance[this] := 0;
[L1688]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  COND FALSE  !(revert)
[L1849]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  COND FALSE  !(revert)
[L1853]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1756]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]              assume msgsender_MSG != null;
[L1740]              Balance[this] := 0;
[L1741]              owner_Owned[this] := null;
[L1743]              owner_Owned[this] := msgsender_MSG;
[L1756]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  COND FALSE  !(revert)
[L1853]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1805]              assume msgsender_MSG != null;
[L1806]              Balance[this] := 0;
[L1807]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1808]              name_DUCATOProtocolToken[this] := 1405682701;
[L1809]              decimals_DUCATOProtocolToken[this] := 0;
[L1810]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1811]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1812]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1813]              sum_balances0[this] := 0;
[L1814]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1815]              sum_allowed1[this] := 0;
[L1817]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1818]              name_DUCATOProtocolToken[this] := -2134480732;
[L1819]              decimals_DUCATOProtocolToken[this] := 18;
[L1820]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1821]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1823]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1824]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1825]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1826]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1857]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L419]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L420]               assume !revert && gas >= 0;
[L3459]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3460]              assume !revert && gas >= 0;
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND FALSE  !(choice == 11)
[L3381]  COND FALSE  !(choice == 10)
[L3388]  COND TRUE   choice == 9
[L3389]              gas := gas - 21000;
[L3390]  COND TRUE   gas >= 0
[L3391]              assume tokens_s510 >= 0 && tokens_s510 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3392]              assume msgvalue_MSG == 0;
[L3393]  CALL        call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND FALSE  !(__exception)
[L807]   CALL        call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L2100]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L2104]              __var_7 := null;
[L2105]  COND FALSE  !(!(from_s510 > null))
[L2109]              __var_8 := null;
[L2110]  COND FALSE  !(!(to_s510 > null))
[L2114]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][from_s510], tokens_s510);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2114]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][from_s510], tokens_s510);
[L2115]  COND FALSE  !(revert)
[L2118]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][from_s510];
[L2119]              balances_DUCATOProtocolToken[this][from_s510] := __var_9;
[L2120]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][from_s510];
[L2121]  COND FALSE  !(from_s510 != to_s510 && from_s510 != msgsender_MSG)
[L2130]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s510], tokens_s510);
[L1601]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1602]  COND FALSE  !(!(c_s23 >= a_s23))
[L2130]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s510], tokens_s510);
[L2131]  COND FALSE  !(revert)
[L2134]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][to_s510];
[L2135]              balances_DUCATOProtocolToken[this][to_s510] := __var_11;
[L2136]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][to_s510];
[L2137]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L2138]              success_s510 := true;
[L807]   RET         call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L808]               assume !revert && gas >= 0;
[L3393]  RET         call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND TRUE   gas >= 0
[L3359]              assume msgvalue_MSG == 0;
[L3360]  CALL        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND TRUE   __exception
[L451]               __tmp__Balance := Balance;
[L452]               __tmp__DType := DType;
[L453]               __tmp__Alloc := Alloc;
[L454]               __tmp__balance_ADDR := balance_ADDR;
[L455]               __tmp__M_Ref_int := M_Ref_int;
[L456]               __tmp__sum_balances0 := sum_balances0;
[L457]               __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L458]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L459]               __tmp__sum_allowed1 := sum_allowed1;
[L460]               __tmp__Length := Length;
[L461]               __tmp__now := now;
[L462]               __tmp__owner_Owned := owner_Owned;
[L463]               __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L464]               __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L465]               __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L466]               __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L467]               __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L468]               __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L469]               __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L470]   CALL        call __ret_0_ := totalSupply_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1867]              __var_3 := null;
[L1868]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_DUCATOProtocolToken[this], __tmp__balances_DUCATOProtocolToken[this][null]);
[L1610]  COND TRUE   !(b_s45 <= a_s45)
[L1611]              revert := true;
[L1868]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_DUCATOProtocolToken[this], __tmp__balances_DUCATOProtocolToken[this][null]);
[L1869]  COND TRUE   revert
[L470]   RET         call __ret_0_ := totalSupply_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L471]               assume revert || gas < 0;
[L3360]  RET         call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

Loop:
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND FALSE  !(gas >= 0)
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:24:09,183 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:24:09,183 INFO  L82        PathProgramCache]: Analyzing trace with hash 157291234, now seen corresponding path program 1 times
[2020-11-25 14:24:09,183 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:24:09,193 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:24:09,313 INFO  L134       CoverageAnalysis]: Checked inductivity of 46 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 45 trivial. 0 not checked.
[2020-11-25 14:24:09,313 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:24:09,313 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [27] total 27
[2020-11-25 14:24:09,313 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:24:09,313 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-11-25 14:24:09,314 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=66, Invalid=690, Unknown=0, NotChecked=0, Total=756
[2020-11-25 14:24:09,314 INFO  L87              Difference]: Start difference. First operand 3459 states and 3896 transitions. cyclomatic complexity: 443 Second operand 28 states.
[2020-11-25 14:24:12,626 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:24:12,626 INFO  L93              Difference]: Finished difference Result 4173 states and 4714 transitions.
[2020-11-25 14:24:12,626 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 41 states. 
[2020-11-25 14:24:12,626 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4173 states and 4714 transitions.
[2020-11-25 14:24:12,635 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 16
[2020-11-25 14:24:12,645 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4173 states to 4173 states and 4714 transitions.
[2020-11-25 14:24:12,645 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1570
[2020-11-25 14:24:12,646 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1570
[2020-11-25 14:24:12,646 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4173 states and 4714 transitions.
[2020-11-25 14:24:12,649 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:24:12,649 INFO  L728         BuchiCegarLoop]: Abstraction has 4173 states and 4714 transitions.
[2020-11-25 14:24:12,651 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4173 states and 4714 transitions.
[2020-11-25 14:24:12,671 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4173 to 3497.
[2020-11-25 14:24:12,672 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3497 states.
[2020-11-25 14:24:12,675 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3497 states to 3497 states and 3995 transitions.
[2020-11-25 14:24:12,676 INFO  L751         BuchiCegarLoop]: Abstraction has 3497 states and 3995 transitions.
[2020-11-25 14:24:12,676 INFO  L631         BuchiCegarLoop]: Abstraction has 3497 states and 3995 transitions.
[2020-11-25 14:24:12,676 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 14:24:12,676 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3497 states and 3995 transitions.
[2020-11-25 14:24:12,680 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 14:24:12,680 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:24:12,680 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:24:12,681 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:24:12,681 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]     CALL        call main();
[L3453]              assume null == 0;
[L3454]  CALL        call this := FreshRefGenerator__success();
[L1552]              havoc newRef;
[L1553]              assume Alloc[newRef] == false;
[L1554]              Alloc[newRef] := true;
[L1555]              assume newRef != null;
[L3454]  RET         call this := FreshRefGenerator__success();
[L3455]              assume now >= 0;
[L3456]              assume DType[this] == DUCATOProtocolToken;
[L3457]              assume msgvalue_MSG == 0;
[L3458]              gas := gas - 53000;
[L3459]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L394]               havoc __exception;
[L395]               revert := false;
[L396]   COND FALSE  !(__exception)
[L419]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1688]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]              assume msgsender_MSG != null;
[L1674]              Balance[this] := 0;
[L1688]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  COND FALSE  !(revert)
[L1849]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  COND FALSE  !(revert)
[L1853]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1756]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]              assume msgsender_MSG != null;
[L1740]              Balance[this] := 0;
[L1741]              owner_Owned[this] := null;
[L1743]              owner_Owned[this] := msgsender_MSG;
[L1756]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  COND FALSE  !(revert)
[L1853]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1805]              assume msgsender_MSG != null;
[L1806]              Balance[this] := 0;
[L1807]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1808]              name_DUCATOProtocolToken[this] := 1405682701;
[L1809]              decimals_DUCATOProtocolToken[this] := 0;
[L1810]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1811]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1812]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1813]              sum_balances0[this] := 0;
[L1814]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1815]              sum_allowed1[this] := 0;
[L1817]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1818]              name_DUCATOProtocolToken[this] := -2134480732;
[L1819]              decimals_DUCATOProtocolToken[this] := 18;
[L1820]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1821]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1823]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1824]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1825]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1826]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1857]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L419]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L420]               assume !revert && gas >= 0;
[L3459]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3460]              assume !revert && gas >= 0;
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND FALSE  !(choice == 11)
[L3381]  COND FALSE  !(choice == 10)
[L3388]  COND TRUE   choice == 9
[L3389]              gas := gas - 21000;
[L3390]  COND TRUE   gas >= 0
[L3391]              assume tokens_s510 >= 0 && tokens_s510 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3392]              assume msgvalue_MSG == 0;
[L3393]  CALL        call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND FALSE  !(__exception)
[L807]   CALL        call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L2100]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L2104]              __var_7 := null;
[L2105]  COND FALSE  !(!(from_s510 > null))
[L2109]              __var_8 := null;
[L2110]  COND FALSE  !(!(to_s510 > null))
[L2114]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][from_s510], tokens_s510);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2114]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][from_s510], tokens_s510);
[L2115]  COND FALSE  !(revert)
[L2118]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][from_s510];
[L2119]              balances_DUCATOProtocolToken[this][from_s510] := __var_9;
[L2120]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][from_s510];
[L2121]  COND FALSE  !(from_s510 != to_s510 && from_s510 != msgsender_MSG)
[L2130]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s510], tokens_s510);
[L1601]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1602]  COND FALSE  !(!(c_s23 >= a_s23))
[L2130]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s510], tokens_s510);
[L2131]  COND FALSE  !(revert)
[L2134]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][to_s510];
[L2135]              balances_DUCATOProtocolToken[this][to_s510] := __var_11;
[L2136]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][to_s510];
[L2137]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L2138]              success_s510 := true;
[L807]   RET         call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L808]               assume !revert && gas >= 0;
[L3393]  RET         call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND TRUE   gas >= 0
[L3359]              assume msgvalue_MSG == 0;
[L3360]  CALL        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L473]   CALL        call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]              __var_3 := null;
[L1881]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1881]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1882]  COND FALSE  !(revert)
[L1885]              __ret_0_ := __var_2;
[L473]   RET         call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L474]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_DUCATOProtocolToken[this] && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this])) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this])) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this])) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this])) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this])) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this])) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L3360]  RET         call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

Loop:
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND TRUE   gas >= 0
[L3359]              assume msgvalue_MSG == 0;
[L3360]  CALL        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L473]   CALL        call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]              __var_3 := null;
[L1881]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1881]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1882]  COND FALSE  !(revert)
[L1885]              __ret_0_ := __var_2;
[L473]   RET         call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L474]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_DUCATOProtocolToken[this] && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this])) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this])) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this])) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this])) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this])) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this])) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L3360]  RET         call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:24:12,684 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:24:12,684 INFO  L82        PathProgramCache]: Analyzing trace with hash -65914125, now seen corresponding path program 1 times
[2020-11-25 14:24:12,685 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:24:12,700 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:24:12,848 INFO  L134       CoverageAnalysis]: Checked inductivity of 46 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 45 trivial. 0 not checked.
[2020-11-25 14:24:12,848 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:24:12,848 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [27] total 27
[2020-11-25 14:24:12,849 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:24:12,849 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-11-25 14:24:12,849 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=66, Invalid=690, Unknown=0, NotChecked=0, Total=756
[2020-11-25 14:24:12,849 INFO  L87              Difference]: Start difference. First operand 3497 states and 3995 transitions. cyclomatic complexity: 510 Second operand 28 states.
[2020-11-25 14:24:14,735 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:24:14,735 INFO  L93              Difference]: Finished difference Result 3511 states and 3991 transitions.
[2020-11-25 14:24:14,735 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 14:24:14,735 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3511 states and 3991 transitions.
[2020-11-25 14:24:14,742 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 14:24:14,751 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3511 states to 3511 states and 3991 transitions.
[2020-11-25 14:24:14,751 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1216
[2020-11-25 14:24:14,751 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1216
[2020-11-25 14:24:14,751 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3511 states and 3991 transitions.
[2020-11-25 14:24:14,754 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:24:14,754 INFO  L728         BuchiCegarLoop]: Abstraction has 3511 states and 3991 transitions.
[2020-11-25 14:24:14,756 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3511 states and 3991 transitions.
[2020-11-25 14:24:14,774 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3511 to 3495.
[2020-11-25 14:24:14,774 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3495 states.
[2020-11-25 14:24:14,777 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3495 states to 3495 states and 3972 transitions.
[2020-11-25 14:24:14,777 INFO  L751         BuchiCegarLoop]: Abstraction has 3495 states and 3972 transitions.
[2020-11-25 14:24:14,777 INFO  L631         BuchiCegarLoop]: Abstraction has 3495 states and 3972 transitions.
[2020-11-25 14:24:14,777 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 14:24:14,777 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3495 states and 3972 transitions.
[2020-11-25 14:24:14,781 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 14:24:14,781 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:24:14,781 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:24:14,782 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:24:14,782 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]     CALL        call main();
[L3453]              assume null == 0;
[L3454]  CALL        call this := FreshRefGenerator__success();
[L1552]              havoc newRef;
[L1553]              assume Alloc[newRef] == false;
[L1554]              Alloc[newRef] := true;
[L1555]              assume newRef != null;
[L3454]  RET         call this := FreshRefGenerator__success();
[L3455]              assume now >= 0;
[L3456]              assume DType[this] == DUCATOProtocolToken;
[L3457]              assume msgvalue_MSG == 0;
[L3458]              gas := gas - 53000;
[L3459]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L394]               havoc __exception;
[L395]               revert := false;
[L396]   COND FALSE  !(__exception)
[L419]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1688]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]              assume msgsender_MSG != null;
[L1674]              Balance[this] := 0;
[L1688]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  COND FALSE  !(revert)
[L1849]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  COND FALSE  !(revert)
[L1853]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1756]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]              assume msgsender_MSG != null;
[L1740]              Balance[this] := 0;
[L1741]              owner_Owned[this] := null;
[L1743]              owner_Owned[this] := msgsender_MSG;
[L1756]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  COND FALSE  !(revert)
[L1853]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1805]              assume msgsender_MSG != null;
[L1806]              Balance[this] := 0;
[L1807]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1808]              name_DUCATOProtocolToken[this] := 1405682701;
[L1809]              decimals_DUCATOProtocolToken[this] := 0;
[L1810]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1811]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1812]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1813]              sum_balances0[this] := 0;
[L1814]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1815]              sum_allowed1[this] := 0;
[L1817]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1818]              name_DUCATOProtocolToken[this] := -2134480732;
[L1819]              decimals_DUCATOProtocolToken[this] := 18;
[L1820]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1821]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1823]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1824]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1825]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1826]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1857]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L419]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L420]               assume !revert && gas >= 0;
[L3459]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3460]              assume !revert && gas >= 0;
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND FALSE  !(choice == 11)
[L3381]  COND FALSE  !(choice == 10)
[L3388]  COND FALSE  !(choice == 9)
[L3395]  COND FALSE  !(choice == 8)
[L3401]  COND FALSE  !(choice == 7)
[L3407]  COND FALSE  !(choice == 6)
[L3413]  COND FALSE  !(choice == 5)
[L3419]  COND FALSE  !(choice == 4)
[L3425]  COND FALSE  !(choice == 3)
[L3431]  COND FALSE  !(choice == 2)
[L3438]  COND TRUE   choice == 1
[L3439]              gas := gas - 21000;
[L3440]  COND TRUE   gas >= 0
[L3441]              assume tokens_s609 >= 0 && tokens_s609 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3442]              assume msgvalue_MSG == 0;
[L3443]  CALL        call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L976]   CALL        call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L2255]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3005]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L2255]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2256]  COND FALSE  !(revert)
[L2259]              assume DType[tokenAddress_s609] == ERC20Interface || DType[tokenAddress_s609] == DUCATOProtocolToken;
[L2260]              __var_16 := tokenAddress_s609;
[L2261]  COND TRUE   DType[__var_16] == DUCATOProtocolToken
[L2262]  CALL        call __var_15 := transfer~address~uint256_DUCATOProtocolToken__success(__var_16, this, __var_17, owner_Owned[this], tokens_s609);
[L1990]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L1994]              __var_4 := null;
[L1995]  COND FALSE  !(!(to_s385 > null))
[L1999]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L2000]  COND FALSE  !(revert)
[L2003]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2004]              balances_DUCATOProtocolToken[this][msgsender_MSG] := __var_5;
[L2005]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2006]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L1601]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1602]  COND FALSE  !(!(c_s23 >= a_s23))
[L2006]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L2007]  COND FALSE  !(revert)
[L2010]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][to_s385];
[L2011]              balances_DUCATOProtocolToken[this][to_s385] := __var_6;
[L2012]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][to_s385];
[L2013]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L2014]              success_s385 := true;
[L2262]  RET         call __var_15 := transfer~address~uint256_DUCATOProtocolToken__success(__var_16, this, __var_17, owner_Owned[this], tokens_s609);
[L2263]  COND FALSE  !(revert)
[L2271]              success_s609 := __var_15;
[L976]   RET         call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L977]               assume !revert && gas >= 0;
[L3443]  RET         call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND TRUE   gas >= 0
[L3359]              assume msgvalue_MSG == 0;
[L3360]  CALL        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND TRUE   __exception
[L451]               __tmp__Balance := Balance;
[L452]               __tmp__DType := DType;
[L453]               __tmp__Alloc := Alloc;
[L454]               __tmp__balance_ADDR := balance_ADDR;
[L455]               __tmp__M_Ref_int := M_Ref_int;
[L456]               __tmp__sum_balances0 := sum_balances0;
[L457]               __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L458]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L459]               __tmp__sum_allowed1 := sum_allowed1;
[L460]               __tmp__Length := Length;
[L461]               __tmp__now := now;
[L462]               __tmp__owner_Owned := owner_Owned;
[L463]               __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L464]               __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L465]               __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L466]               __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L467]               __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L468]               __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L469]               __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L470]   CALL        call __ret_0_ := totalSupply_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1867]              __var_3 := null;
[L1868]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_DUCATOProtocolToken[this], __tmp__balances_DUCATOProtocolToken[this][null]);
[L1610]  COND TRUE   !(b_s45 <= a_s45)
[L1611]              revert := true;
[L1868]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_DUCATOProtocolToken[this], __tmp__balances_DUCATOProtocolToken[this][null]);
[L1869]  COND TRUE   revert
[L470]   RET         call __ret_0_ := totalSupply_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L471]               assume revert || gas < 0;
[L3360]  RET         call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

Loop:
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND TRUE   gas >= 0
[L3359]              assume msgvalue_MSG == 0;
[L3360]  CALL        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L473]   CALL        call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]              __var_3 := null;
[L1881]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1881]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1882]  COND FALSE  !(revert)
[L1885]              __ret_0_ := __var_2;
[L473]   RET         call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L474]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_DUCATOProtocolToken[this] && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this])) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this])) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this])) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this])) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this])) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this])) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L3360]  RET         call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:24:14,785 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:24:14,785 INFO  L82        PathProgramCache]: Analyzing trace with hash -498348403, now seen corresponding path program 1 times
[2020-11-25 14:24:14,786 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:24:14,797 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:24:14,978 INFO  L134       CoverageAnalysis]: Checked inductivity of 46 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 45 trivial. 0 not checked.
[2020-11-25 14:24:14,978 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:24:14,978 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [28] total 28
[2020-11-25 14:24:14,978 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:24:14,979 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 29 interpolants.
[2020-11-25 14:24:14,979 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=67, Invalid=745, Unknown=0, NotChecked=0, Total=812
[2020-11-25 14:24:14,979 INFO  L87              Difference]: Start difference. First operand 3495 states and 3972 transitions. cyclomatic complexity: 487 Second operand 29 states.
[2020-11-25 14:24:17,787 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:24:17,788 INFO  L93              Difference]: Finished difference Result 4185 states and 4706 transitions.
[2020-11-25 14:24:17,788 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 38 states. 
[2020-11-25 14:24:17,788 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4185 states and 4706 transitions.
[2020-11-25 14:24:17,795 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 14:24:17,805 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4185 states to 4185 states and 4706 transitions.
[2020-11-25 14:24:17,805 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1566
[2020-11-25 14:24:17,805 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1566
[2020-11-25 14:24:17,805 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4185 states and 4706 transitions.
[2020-11-25 14:24:17,808 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:24:17,808 INFO  L728         BuchiCegarLoop]: Abstraction has 4185 states and 4706 transitions.
[2020-11-25 14:24:17,809 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4185 states and 4706 transitions.
[2020-11-25 14:24:17,828 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4185 to 3513.
[2020-11-25 14:24:17,828 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3513 states.
[2020-11-25 14:24:17,832 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3513 states to 3513 states and 4033 transitions.
[2020-11-25 14:24:17,832 INFO  L751         BuchiCegarLoop]: Abstraction has 3513 states and 4033 transitions.
[2020-11-25 14:24:17,832 INFO  L631         BuchiCegarLoop]: Abstraction has 3513 states and 4033 transitions.
[2020-11-25 14:24:17,832 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 14:24:17,832 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3513 states and 4033 transitions.
[2020-11-25 14:24:17,836 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 14:24:17,836 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:24:17,836 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:24:17,837 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:24:17,837 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]     CALL        call main();
[L3453]              assume null == 0;
[L3454]  CALL        call this := FreshRefGenerator__success();
[L1552]              havoc newRef;
[L1553]              assume Alloc[newRef] == false;
[L1554]              Alloc[newRef] := true;
[L1555]              assume newRef != null;
[L3454]  RET         call this := FreshRefGenerator__success();
[L3455]              assume now >= 0;
[L3456]              assume DType[this] == DUCATOProtocolToken;
[L3457]              assume msgvalue_MSG == 0;
[L3458]              gas := gas - 53000;
[L3459]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L394]               havoc __exception;
[L395]               revert := false;
[L396]   COND FALSE  !(__exception)
[L419]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1688]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]              assume msgsender_MSG != null;
[L1674]              Balance[this] := 0;
[L1688]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  COND FALSE  !(revert)
[L1849]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  COND FALSE  !(revert)
[L1853]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1756]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]              assume msgsender_MSG != null;
[L1740]              Balance[this] := 0;
[L1741]              owner_Owned[this] := null;
[L1743]              owner_Owned[this] := msgsender_MSG;
[L1756]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  COND FALSE  !(revert)
[L1853]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1805]              assume msgsender_MSG != null;
[L1806]              Balance[this] := 0;
[L1807]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1808]              name_DUCATOProtocolToken[this] := 1405682701;
[L1809]              decimals_DUCATOProtocolToken[this] := 0;
[L1810]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1811]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1812]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1813]              sum_balances0[this] := 0;
[L1814]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1815]              sum_allowed1[this] := 0;
[L1817]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1818]              name_DUCATOProtocolToken[this] := -2134480732;
[L1819]              decimals_DUCATOProtocolToken[this] := 18;
[L1820]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1821]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1823]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1824]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1825]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1826]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1857]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L419]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L420]               assume !revert && gas >= 0;
[L3459]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3460]              assume !revert && gas >= 0;
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND FALSE  !(choice == 11)
[L3381]  COND FALSE  !(choice == 10)
[L3388]  COND FALSE  !(choice == 9)
[L3395]  COND FALSE  !(choice == 8)
[L3401]  COND FALSE  !(choice == 7)
[L3407]  COND FALSE  !(choice == 6)
[L3413]  COND FALSE  !(choice == 5)
[L3419]  COND FALSE  !(choice == 4)
[L3425]  COND FALSE  !(choice == 3)
[L3431]  COND FALSE  !(choice == 2)
[L3438]  COND TRUE   choice == 1
[L3439]              gas := gas - 21000;
[L3440]  COND TRUE   gas >= 0
[L3441]              assume tokens_s609 >= 0 && tokens_s609 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3442]              assume msgvalue_MSG == 0;
[L3443]  CALL        call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L976]   CALL        call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L2255]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3005]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L2255]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2256]  COND FALSE  !(revert)
[L2259]              assume DType[tokenAddress_s609] == ERC20Interface || DType[tokenAddress_s609] == DUCATOProtocolToken;
[L2260]              __var_16 := tokenAddress_s609;
[L2261]  COND TRUE   DType[__var_16] == DUCATOProtocolToken
[L2262]  CALL        call __var_15 := transfer~address~uint256_DUCATOProtocolToken__success(__var_16, this, __var_17, owner_Owned[this], tokens_s609);
[L1990]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L1994]              __var_4 := null;
[L1995]  COND FALSE  !(!(to_s385 > null))
[L1999]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L2000]  COND FALSE  !(revert)
[L2003]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2004]              balances_DUCATOProtocolToken[this][msgsender_MSG] := __var_5;
[L2005]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2006]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L1601]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1602]  COND FALSE  !(!(c_s23 >= a_s23))
[L2006]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L2007]  COND FALSE  !(revert)
[L2010]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][to_s385];
[L2011]              balances_DUCATOProtocolToken[this][to_s385] := __var_6;
[L2012]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][to_s385];
[L2013]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L2014]              success_s385 := true;
[L2262]  RET         call __var_15 := transfer~address~uint256_DUCATOProtocolToken__success(__var_16, this, __var_17, owner_Owned[this], tokens_s609);
[L2263]  COND FALSE  !(revert)
[L2271]              success_s609 := __var_15;
[L976]   RET         call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L977]               assume !revert && gas >= 0;
[L3443]  RET         call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND TRUE   gas >= 0
[L3359]              assume msgvalue_MSG == 0;
[L3360]  CALL        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L473]   CALL        call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]              __var_3 := null;
[L1881]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1881]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1882]  COND FALSE  !(revert)
[L1885]              __ret_0_ := __var_2;
[L473]   RET         call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L474]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_DUCATOProtocolToken[this] && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this])) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this])) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this])) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this])) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this])) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this])) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L3360]  RET         call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

Loop:
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND TRUE   gas >= 0
[L3359]              assume msgvalue_MSG == 0;
[L3360]  CALL        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L473]   CALL        call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]              __var_3 := null;
[L1881]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1881]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1882]  COND FALSE  !(revert)
[L1885]              __ret_0_ := __var_2;
[L473]   RET         call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L474]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_DUCATOProtocolToken[this] && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this])) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this])) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this])) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this])) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this])) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this])) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L3360]  RET         call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:24:17,840 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:24:17,841 INFO  L82        PathProgramCache]: Analyzing trace with hash 1622339038, now seen corresponding path program 1 times
[2020-11-25 14:24:17,841 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:24:17,854 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:24:18,025 INFO  L134       CoverageAnalysis]: Checked inductivity of 46 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 45 trivial. 0 not checked.
[2020-11-25 14:24:18,025 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:24:18,025 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [29] total 29
[2020-11-25 14:24:18,026 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:24:18,026 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 30 interpolants.
[2020-11-25 14:24:18,026 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=72, Invalid=798, Unknown=0, NotChecked=0, Total=870
[2020-11-25 14:24:18,026 INFO  L87              Difference]: Start difference. First operand 3513 states and 4033 transitions. cyclomatic complexity: 534 Second operand 30 states.
[2020-11-25 14:24:19,653 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:24:19,654 INFO  L93              Difference]: Finished difference Result 3517 states and 4016 transitions.
[2020-11-25 14:24:19,654 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 14:24:19,654 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3517 states and 4016 transitions.
[2020-11-25 14:24:19,663 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 14:24:19,672 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3517 states to 3517 states and 4016 transitions.
[2020-11-25 14:24:19,673 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1216
[2020-11-25 14:24:19,674 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1216
[2020-11-25 14:24:19,674 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3517 states and 4016 transitions.
[2020-11-25 14:24:19,676 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:24:19,676 INFO  L728         BuchiCegarLoop]: Abstraction has 3517 states and 4016 transitions.
[2020-11-25 14:24:19,678 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3517 states and 4016 transitions.
[2020-11-25 14:24:19,699 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3517 to 3501.
[2020-11-25 14:24:19,700 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3501 states.
[2020-11-25 14:24:19,705 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3501 states to 3501 states and 3997 transitions.
[2020-11-25 14:24:19,705 INFO  L751         BuchiCegarLoop]: Abstraction has 3501 states and 3997 transitions.
[2020-11-25 14:24:19,705 INFO  L631         BuchiCegarLoop]: Abstraction has 3501 states and 3997 transitions.
[2020-11-25 14:24:19,705 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 14:24:19,705 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3501 states and 3997 transitions.
[2020-11-25 14:24:19,732 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 14:24:19,732 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:24:19,732 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:24:19,735 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:24:19,735 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]     CALL        call main();
[L3453]              assume null == 0;
[L3454]  CALL        call this := FreshRefGenerator__success();
[L1552]              havoc newRef;
[L1553]              assume Alloc[newRef] == false;
[L1554]              Alloc[newRef] := true;
[L1555]              assume newRef != null;
[L3454]  RET         call this := FreshRefGenerator__success();
[L3455]              assume now >= 0;
[L3456]              assume DType[this] == DUCATOProtocolToken;
[L3457]              assume msgvalue_MSG == 0;
[L3458]              gas := gas - 53000;
[L3459]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L394]               havoc __exception;
[L395]               revert := false;
[L396]   COND FALSE  !(__exception)
[L419]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1688]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]              assume msgsender_MSG != null;
[L1674]              Balance[this] := 0;
[L1688]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  COND FALSE  !(revert)
[L1849]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  COND FALSE  !(revert)
[L1853]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1756]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]              assume msgsender_MSG != null;
[L1740]              Balance[this] := 0;
[L1741]              owner_Owned[this] := null;
[L1743]              owner_Owned[this] := msgsender_MSG;
[L1756]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  COND FALSE  !(revert)
[L1853]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1805]              assume msgsender_MSG != null;
[L1806]              Balance[this] := 0;
[L1807]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1808]              name_DUCATOProtocolToken[this] := 1405682701;
[L1809]              decimals_DUCATOProtocolToken[this] := 0;
[L1810]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1811]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1812]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1813]              sum_balances0[this] := 0;
[L1814]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1815]              sum_allowed1[this] := 0;
[L1817]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1818]              name_DUCATOProtocolToken[this] := -2134480732;
[L1819]              decimals_DUCATOProtocolToken[this] := 18;
[L1820]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1821]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1823]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1824]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1825]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1826]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1857]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L419]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L420]               assume !revert && gas >= 0;
[L3459]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3460]              assume !revert && gas >= 0;
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND TRUE   choice == 11
[L3375]              gas := gas - 21000;
[L3376]  COND TRUE   gas >= 0
[L3377]              assume tokens_s385 >= 0 && tokens_s385 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3378]              assume msgvalue_MSG == 0;
[L3379]  CALL        call success_s385 := transfer~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L668]               havoc __exception;
[L669]               revert := false;
[L670]   COND FALSE  !(__exception)
[L693]   CALL        call success_s385 := transfer~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L1990]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L1994]              __var_4 := null;
[L1995]  COND FALSE  !(!(to_s385 > null))
[L1999]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L2000]  COND FALSE  !(revert)
[L2003]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2004]              balances_DUCATOProtocolToken[this][msgsender_MSG] := __var_5;
[L2005]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2006]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L1601]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1602]  COND FALSE  !(!(c_s23 >= a_s23))
[L2006]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L2007]  COND FALSE  !(revert)
[L2010]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][to_s385];
[L2011]              balances_DUCATOProtocolToken[this][to_s385] := __var_6;
[L2012]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][to_s385];
[L2013]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L2014]              success_s385 := true;
[L693]   RET         call success_s385 := transfer~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L694]               assume !revert && gas >= 0;
[L3379]  RET         call success_s385 := transfer~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND FALSE  !(choice == 11)
[L3381]  COND FALSE  !(choice == 10)
[L3388]  COND TRUE   choice == 9
[L3389]              gas := gas - 21000;
[L3390]  COND TRUE   gas >= 0
[L3391]              assume tokens_s510 >= 0 && tokens_s510 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3392]              assume msgvalue_MSG == 0;
[L3393]  CALL        call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND FALSE  !(__exception)
[L807]   CALL        call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L2100]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L2104]              __var_7 := null;
[L2105]  COND FALSE  !(!(from_s510 > null))
[L2109]              __var_8 := null;
[L2110]  COND FALSE  !(!(to_s510 > null))
[L2114]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][from_s510], tokens_s510);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2114]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][from_s510], tokens_s510);
[L2115]  COND FALSE  !(revert)
[L2118]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][from_s510];
[L2119]              balances_DUCATOProtocolToken[this][from_s510] := __var_9;
[L2120]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][from_s510];
[L2121]  COND FALSE  !(from_s510 != to_s510 && from_s510 != msgsender_MSG)
[L2130]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s510], tokens_s510);
[L1601]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1602]  COND FALSE  !(!(c_s23 >= a_s23))
[L2130]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s510], tokens_s510);
[L2131]  COND FALSE  !(revert)
[L2134]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][to_s510];
[L2135]              balances_DUCATOProtocolToken[this][to_s510] := __var_11;
[L2136]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][to_s510];
[L2137]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L2138]              success_s510 := true;
[L807]   RET         call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L808]               assume !revert && gas >= 0;
[L3393]  RET         call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND TRUE   gas >= 0
[L3359]              assume msgvalue_MSG == 0;
[L3360]  CALL        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L473]   CALL        call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]              __var_3 := null;
[L1881]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1881]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1882]  COND FALSE  !(revert)
[L1885]              __ret_0_ := __var_2;
[L473]   RET         call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L474]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_DUCATOProtocolToken[this] && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this])) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this])) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this])) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this])) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this])) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this])) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L3360]  RET         call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

Loop:
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND FALSE  !(gas >= 0)
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:24:19,761 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:24:19,762 INFO  L82        PathProgramCache]: Analyzing trace with hash 1438473891, now seen corresponding path program 1 times
[2020-11-25 14:24:19,762 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:24:19,778 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:24:19,999 INFO  L134       CoverageAnalysis]: Checked inductivity of 152 backedges. 0 proven. 20 refuted. 0 times theorem prover too weak. 132 trivial. 0 not checked.
[2020-11-25 14:24:20,000 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:24:20,000 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [32] total 32
[2020-11-25 14:24:20,000 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:24:20,000 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 33 interpolants.
[2020-11-25 14:24:20,000 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=89, Invalid=967, Unknown=0, NotChecked=0, Total=1056
[2020-11-25 14:24:20,001 INFO  L87              Difference]: Start difference. First operand 3501 states and 3997 transitions. cyclomatic complexity: 508 Second operand 33 states.
[2020-11-25 14:24:22,034 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:24:22,034 INFO  L93              Difference]: Finished difference Result 3590 states and 4129 transitions.
[2020-11-25 14:24:22,034 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 14:24:22,035 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3590 states and 4129 transitions.
[2020-11-25 14:24:22,042 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 10
[2020-11-25 14:24:22,050 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3590 states to 3590 states and 4129 transitions.
[2020-11-25 14:24:22,050 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1229
[2020-11-25 14:24:22,051 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1229
[2020-11-25 14:24:22,051 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3590 states and 4129 transitions.
[2020-11-25 14:24:22,054 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:24:22,054 INFO  L728         BuchiCegarLoop]: Abstraction has 3590 states and 4129 transitions.
[2020-11-25 14:24:22,055 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3590 states and 4129 transitions.
[2020-11-25 14:24:22,074 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3590 to 3542.
[2020-11-25 14:24:22,074 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3542 states.
[2020-11-25 14:24:22,079 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3542 states to 3542 states and 4075 transitions.
[2020-11-25 14:24:22,079 INFO  L751         BuchiCegarLoop]: Abstraction has 3542 states and 4075 transitions.
[2020-11-25 14:24:22,079 INFO  L631         BuchiCegarLoop]: Abstraction has 3542 states and 4075 transitions.
[2020-11-25 14:24:22,079 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 14:24:22,079 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3542 states and 4075 transitions.
[2020-11-25 14:24:22,083 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 10
[2020-11-25 14:24:22,083 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:24:22,083 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:24:22,084 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:24:22,084 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]     CALL        call main();
[L3453]              assume null == 0;
[L3454]  CALL        call this := FreshRefGenerator__success();
[L1552]              havoc newRef;
[L1553]              assume Alloc[newRef] == false;
[L1554]              Alloc[newRef] := true;
[L1555]              assume newRef != null;
[L3454]  RET         call this := FreshRefGenerator__success();
[L3455]              assume now >= 0;
[L3456]              assume DType[this] == DUCATOProtocolToken;
[L3457]              assume msgvalue_MSG == 0;
[L3458]              gas := gas - 53000;
[L3459]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L394]               havoc __exception;
[L395]               revert := false;
[L396]   COND FALSE  !(__exception)
[L419]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1688]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]              assume msgsender_MSG != null;
[L1674]              Balance[this] := 0;
[L1688]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  COND FALSE  !(revert)
[L1849]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  COND FALSE  !(revert)
[L1853]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1756]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]              assume msgsender_MSG != null;
[L1740]              Balance[this] := 0;
[L1741]              owner_Owned[this] := null;
[L1743]              owner_Owned[this] := msgsender_MSG;
[L1756]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  COND FALSE  !(revert)
[L1853]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1805]              assume msgsender_MSG != null;
[L1806]              Balance[this] := 0;
[L1807]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1808]              name_DUCATOProtocolToken[this] := 1405682701;
[L1809]              decimals_DUCATOProtocolToken[this] := 0;
[L1810]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1811]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1812]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1813]              sum_balances0[this] := 0;
[L1814]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1815]              sum_allowed1[this] := 0;
[L1817]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1818]              name_DUCATOProtocolToken[this] := -2134480732;
[L1819]              decimals_DUCATOProtocolToken[this] := 18;
[L1820]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1821]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1823]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1824]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1825]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1826]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1857]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L419]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L420]               assume !revert && gas >= 0;
[L3459]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3460]              assume !revert && gas >= 0;
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND TRUE   choice == 11
[L3375]              gas := gas - 21000;
[L3376]  COND TRUE   gas >= 0
[L3377]              assume tokens_s385 >= 0 && tokens_s385 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3378]              assume msgvalue_MSG == 0;
[L3379]  CALL        call success_s385 := transfer~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L668]               havoc __exception;
[L669]               revert := false;
[L670]   COND FALSE  !(__exception)
[L693]   CALL        call success_s385 := transfer~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L1990]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L1994]              __var_4 := null;
[L1995]  COND FALSE  !(!(to_s385 > null))
[L1999]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L2000]  COND FALSE  !(revert)
[L2003]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2004]              balances_DUCATOProtocolToken[this][msgsender_MSG] := __var_5;
[L2005]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2006]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L1601]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1602]  COND FALSE  !(!(c_s23 >= a_s23))
[L2006]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L2007]  COND FALSE  !(revert)
[L2010]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][to_s385];
[L2011]              balances_DUCATOProtocolToken[this][to_s385] := __var_6;
[L2012]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][to_s385];
[L2013]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L2014]              success_s385 := true;
[L693]   RET         call success_s385 := transfer~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L694]               assume !revert && gas >= 0;
[L3379]  RET         call success_s385 := transfer~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND FALSE  !(choice == 11)
[L3381]  COND FALSE  !(choice == 10)
[L3388]  COND TRUE   choice == 9
[L3389]              gas := gas - 21000;
[L3390]  COND TRUE   gas >= 0
[L3391]              assume tokens_s510 >= 0 && tokens_s510 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3392]              assume msgvalue_MSG == 0;
[L3393]  CALL        call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND FALSE  !(__exception)
[L807]   CALL        call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L2100]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L2104]              __var_7 := null;
[L2105]  COND FALSE  !(!(from_s510 > null))
[L2109]              __var_8 := null;
[L2110]  COND FALSE  !(!(to_s510 > null))
[L2114]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][from_s510], tokens_s510);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2114]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][from_s510], tokens_s510);
[L2115]  COND FALSE  !(revert)
[L2118]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][from_s510];
[L2119]              balances_DUCATOProtocolToken[this][from_s510] := __var_9;
[L2120]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][from_s510];
[L2121]  COND FALSE  !(from_s510 != to_s510 && from_s510 != msgsender_MSG)
[L2130]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s510], tokens_s510);
[L1601]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1602]  COND FALSE  !(!(c_s23 >= a_s23))
[L2130]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s510], tokens_s510);
[L2131]  COND FALSE  !(revert)
[L2134]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][to_s510];
[L2135]              balances_DUCATOProtocolToken[this][to_s510] := __var_11;
[L2136]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][to_s510];
[L2137]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L2138]              success_s510 := true;
[L807]   RET         call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L808]               assume !revert && gas >= 0;
[L3393]  RET         call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND TRUE   gas >= 0
[L3359]              assume msgvalue_MSG == 0;
[L3360]  CALL        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND TRUE   __exception
[L451]               __tmp__Balance := Balance;
[L452]               __tmp__DType := DType;
[L453]               __tmp__Alloc := Alloc;
[L454]               __tmp__balance_ADDR := balance_ADDR;
[L455]               __tmp__M_Ref_int := M_Ref_int;
[L456]               __tmp__sum_balances0 := sum_balances0;
[L457]               __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L458]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L459]               __tmp__sum_allowed1 := sum_allowed1;
[L460]               __tmp__Length := Length;
[L461]               __tmp__now := now;
[L462]               __tmp__owner_Owned := owner_Owned;
[L463]               __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L464]               __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L465]               __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L466]               __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L467]               __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L468]               __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L469]               __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L470]   CALL        call __ret_0_ := totalSupply_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1867]              __var_3 := null;
[L1868]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_DUCATOProtocolToken[this], __tmp__balances_DUCATOProtocolToken[this][null]);
[L1610]  COND TRUE   !(b_s45 <= a_s45)
[L1611]              revert := true;
[L1868]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_DUCATOProtocolToken[this], __tmp__balances_DUCATOProtocolToken[this][null]);
[L1869]  COND TRUE   revert
[L470]   RET         call __ret_0_ := totalSupply_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L471]               assume revert || gas < 0;
[L3360]  RET         call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

Loop:
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND FALSE  !(gas >= 0)
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:24:22,087 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:24:22,087 INFO  L82        PathProgramCache]: Analyzing trace with hash 1646985874, now seen corresponding path program 1 times
[2020-11-25 14:24:22,088 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:24:22,099 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:24:22,287 INFO  L134       CoverageAnalysis]: Checked inductivity of 152 backedges. 0 proven. 20 refuted. 0 times theorem prover too weak. 132 trivial. 0 not checked.
[2020-11-25 14:24:22,288 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:24:22,288 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [32] total 32
[2020-11-25 14:24:22,288 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:24:22,288 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 33 interpolants.
[2020-11-25 14:24:22,288 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=89, Invalid=967, Unknown=0, NotChecked=0, Total=1056
[2020-11-25 14:24:22,289 INFO  L87              Difference]: Start difference. First operand 3542 states and 4075 transitions. cyclomatic complexity: 548 Second operand 33 states.
[2020-11-25 14:24:25,795 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:24:25,795 INFO  L93              Difference]: Finished difference Result 4258 states and 4823 transitions.
[2020-11-25 14:24:25,795 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 51 states. 
[2020-11-25 14:24:25,795 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4258 states and 4823 transitions.
[2020-11-25 14:24:25,805 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 10
[2020-11-25 14:24:25,814 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4258 states to 4258 states and 4823 transitions.
[2020-11-25 14:24:25,814 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1564
[2020-11-25 14:24:25,814 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1564
[2020-11-25 14:24:25,815 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4258 states and 4823 transitions.
[2020-11-25 14:24:25,817 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:24:25,818 INFO  L728         BuchiCegarLoop]: Abstraction has 4258 states and 4823 transitions.
[2020-11-25 14:24:25,820 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4258 states and 4823 transitions.
[2020-11-25 14:24:25,838 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4258 to 3491.
[2020-11-25 14:24:25,838 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3491 states.
[2020-11-25 14:24:25,842 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3491 states to 3491 states and 3958 transitions.
[2020-11-25 14:24:25,843 INFO  L751         BuchiCegarLoop]: Abstraction has 3491 states and 3958 transitions.
[2020-11-25 14:24:25,843 INFO  L631         BuchiCegarLoop]: Abstraction has 3491 states and 3958 transitions.
[2020-11-25 14:24:25,843 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 14:24:25,843 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3491 states and 3958 transitions.
[2020-11-25 14:24:25,846 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 14:24:25,847 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:24:25,847 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:24:25,848 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:24:25,848 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]     CALL        call main();
[L3453]              assume null == 0;
[L3454]  CALL        call this := FreshRefGenerator__success();
[L1552]              havoc newRef;
[L1553]              assume Alloc[newRef] == false;
[L1554]              Alloc[newRef] := true;
[L1555]              assume newRef != null;
[L3454]  RET         call this := FreshRefGenerator__success();
[L3455]              assume now >= 0;
[L3456]              assume DType[this] == DUCATOProtocolToken;
[L3457]              assume msgvalue_MSG == 0;
[L3458]              gas := gas - 53000;
[L3459]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L394]               havoc __exception;
[L395]               revert := false;
[L396]   COND FALSE  !(__exception)
[L419]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1688]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]              assume msgsender_MSG != null;
[L1674]              Balance[this] := 0;
[L1688]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  COND FALSE  !(revert)
[L1849]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  COND FALSE  !(revert)
[L1853]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1756]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]              assume msgsender_MSG != null;
[L1740]              Balance[this] := 0;
[L1741]              owner_Owned[this] := null;
[L1743]              owner_Owned[this] := msgsender_MSG;
[L1756]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  COND FALSE  !(revert)
[L1853]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1805]              assume msgsender_MSG != null;
[L1806]              Balance[this] := 0;
[L1807]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1808]              name_DUCATOProtocolToken[this] := 1405682701;
[L1809]              decimals_DUCATOProtocolToken[this] := 0;
[L1810]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1811]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1812]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1813]              sum_balances0[this] := 0;
[L1814]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1815]              sum_allowed1[this] := 0;
[L1817]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1818]              name_DUCATOProtocolToken[this] := -2134480732;
[L1819]              decimals_DUCATOProtocolToken[this] := 18;
[L1820]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1821]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1823]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1824]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1825]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1826]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1857]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L419]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L420]               assume !revert && gas >= 0;
[L3459]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3460]              assume !revert && gas >= 0;
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND TRUE   choice == 11
[L3375]              gas := gas - 21000;
[L3376]  COND TRUE   gas >= 0
[L3377]              assume tokens_s385 >= 0 && tokens_s385 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3378]              assume msgvalue_MSG == 0;
[L3379]  CALL        call success_s385 := transfer~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L668]               havoc __exception;
[L669]               revert := false;
[L670]   COND FALSE  !(__exception)
[L693]   CALL        call success_s385 := transfer~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L1990]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L1994]              __var_4 := null;
[L1995]  COND FALSE  !(!(to_s385 > null))
[L1999]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L2000]  COND FALSE  !(revert)
[L2003]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2004]              balances_DUCATOProtocolToken[this][msgsender_MSG] := __var_5;
[L2005]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2006]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L1601]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1602]  COND FALSE  !(!(c_s23 >= a_s23))
[L2006]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L2007]  COND FALSE  !(revert)
[L2010]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][to_s385];
[L2011]              balances_DUCATOProtocolToken[this][to_s385] := __var_6;
[L2012]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][to_s385];
[L2013]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L2014]              success_s385 := true;
[L693]   RET         call success_s385 := transfer~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L694]               assume !revert && gas >= 0;
[L3379]  RET         call success_s385 := transfer~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND FALSE  !(choice == 11)
[L3381]  COND FALSE  !(choice == 10)
[L3388]  COND FALSE  !(choice == 9)
[L3395]  COND FALSE  !(choice == 8)
[L3401]  COND FALSE  !(choice == 7)
[L3407]  COND FALSE  !(choice == 6)
[L3413]  COND FALSE  !(choice == 5)
[L3419]  COND FALSE  !(choice == 4)
[L3425]  COND FALSE  !(choice == 3)
[L3431]  COND FALSE  !(choice == 2)
[L3438]  COND TRUE   choice == 1
[L3439]              gas := gas - 21000;
[L3440]  COND TRUE   gas >= 0
[L3441]              assume tokens_s609 >= 0 && tokens_s609 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3442]              assume msgvalue_MSG == 0;
[L3443]  CALL        call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L976]   CALL        call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L2255]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3005]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L2255]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2256]  COND FALSE  !(revert)
[L2259]              assume DType[tokenAddress_s609] == ERC20Interface || DType[tokenAddress_s609] == DUCATOProtocolToken;
[L2260]              __var_16 := tokenAddress_s609;
[L2261]  COND TRUE   DType[__var_16] == DUCATOProtocolToken
[L2262]  CALL        call __var_15 := transfer~address~uint256_DUCATOProtocolToken__success(__var_16, this, __var_17, owner_Owned[this], tokens_s609);
[L1990]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L1994]              __var_4 := null;
[L1995]  COND FALSE  !(!(to_s385 > null))
[L1999]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L2000]  COND FALSE  !(revert)
[L2003]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2004]              balances_DUCATOProtocolToken[this][msgsender_MSG] := __var_5;
[L2005]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2006]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L1601]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1602]  COND FALSE  !(!(c_s23 >= a_s23))
[L2006]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L2007]  COND FALSE  !(revert)
[L2010]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][to_s385];
[L2011]              balances_DUCATOProtocolToken[this][to_s385] := __var_6;
[L2012]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][to_s385];
[L2013]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L2014]              success_s385 := true;
[L2262]  RET         call __var_15 := transfer~address~uint256_DUCATOProtocolToken__success(__var_16, this, __var_17, owner_Owned[this], tokens_s609);
[L2263]  COND FALSE  !(revert)
[L2271]              success_s609 := __var_15;
[L976]   RET         call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L977]               assume !revert && gas >= 0;
[L3443]  RET         call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND TRUE   gas >= 0
[L3359]              assume msgvalue_MSG == 0;
[L3360]  CALL        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L473]   CALL        call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]              __var_3 := null;
[L1881]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1881]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1882]  COND FALSE  !(revert)
[L1885]              __ret_0_ := __var_2;
[L473]   RET         call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L474]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_DUCATOProtocolToken[this] && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this])) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this])) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this])) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this])) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this])) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this])) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L3360]  RET         call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

Loop:
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND TRUE   gas >= 0
[L3359]              assume msgvalue_MSG == 0;
[L3360]  CALL        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L473]   CALL        call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]              __var_3 := null;
[L1881]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1881]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1882]  COND FALSE  !(revert)
[L1885]              __ret_0_ := __var_2;
[L473]   RET         call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L474]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_DUCATOProtocolToken[this] && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this])) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this])) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this])) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this])) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this])) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this])) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L3360]  RET         call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:24:25,851 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:24:25,851 INFO  L82        PathProgramCache]: Analyzing trace with hash 573255054, now seen corresponding path program 1 times
[2020-11-25 14:24:25,852 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:24:25,869 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:24:26,148 INFO  L134       CoverageAnalysis]: Checked inductivity of 173 backedges. 0 proven. 39 refuted. 0 times theorem prover too weak. 134 trivial. 0 not checked.
[2020-11-25 14:24:26,148 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:24:26,148 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [37] total 37
[2020-11-25 14:24:26,148 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:24:26,148 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 38 interpolants.
[2020-11-25 14:24:26,149 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=113, Invalid=1293, Unknown=0, NotChecked=0, Total=1406
[2020-11-25 14:24:26,149 INFO  L87              Difference]: Start difference. First operand 3491 states and 3958 transitions. cyclomatic complexity: 477 Second operand 38 states.
[2020-11-25 14:24:28,573 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:24:28,573 INFO  L93              Difference]: Finished difference Result 3594 states and 4133 transitions.
[2020-11-25 14:24:28,573 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 32 states. 
[2020-11-25 14:24:28,573 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3594 states and 4133 transitions.
[2020-11-25 14:24:28,582 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 10
[2020-11-25 14:24:28,590 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3594 states to 3594 states and 4133 transitions.
[2020-11-25 14:24:28,590 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1233
[2020-11-25 14:24:28,591 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1233
[2020-11-25 14:24:28,591 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3594 states and 4133 transitions.
[2020-11-25 14:24:28,593 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:24:28,593 INFO  L728         BuchiCegarLoop]: Abstraction has 3594 states and 4133 transitions.
[2020-11-25 14:24:28,595 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3594 states and 4133 transitions.
[2020-11-25 14:24:28,613 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3594 to 3524.
[2020-11-25 14:24:28,613 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3524 states.
[2020-11-25 14:24:28,617 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3524 states to 3524 states and 4054 transitions.
[2020-11-25 14:24:28,617 INFO  L751         BuchiCegarLoop]: Abstraction has 3524 states and 4054 transitions.
[2020-11-25 14:24:28,617 INFO  L631         BuchiCegarLoop]: Abstraction has 3524 states and 4054 transitions.
[2020-11-25 14:24:28,617 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 14:24:28,617 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3524 states and 4054 transitions.
[2020-11-25 14:24:28,621 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 10
[2020-11-25 14:24:28,621 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:24:28,621 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:24:28,622 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:24:28,622 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]     CALL        call main();
[L3453]              assume null == 0;
[L3454]  CALL        call this := FreshRefGenerator__success();
[L1552]              havoc newRef;
[L1553]              assume Alloc[newRef] == false;
[L1554]              Alloc[newRef] := true;
[L1555]              assume newRef != null;
[L3454]  RET         call this := FreshRefGenerator__success();
[L3455]              assume now >= 0;
[L3456]              assume DType[this] == DUCATOProtocolToken;
[L3457]              assume msgvalue_MSG == 0;
[L3458]              gas := gas - 53000;
[L3459]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L394]               havoc __exception;
[L395]               revert := false;
[L396]   COND FALSE  !(__exception)
[L419]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1688]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]              assume msgsender_MSG != null;
[L1674]              Balance[this] := 0;
[L1688]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  COND FALSE  !(revert)
[L1849]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  COND FALSE  !(revert)
[L1853]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1756]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]              assume msgsender_MSG != null;
[L1740]              Balance[this] := 0;
[L1741]              owner_Owned[this] := null;
[L1743]              owner_Owned[this] := msgsender_MSG;
[L1756]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  COND FALSE  !(revert)
[L1853]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1805]              assume msgsender_MSG != null;
[L1806]              Balance[this] := 0;
[L1807]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1808]              name_DUCATOProtocolToken[this] := 1405682701;
[L1809]              decimals_DUCATOProtocolToken[this] := 0;
[L1810]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1811]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1812]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1813]              sum_balances0[this] := 0;
[L1814]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1815]              sum_allowed1[this] := 0;
[L1817]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1818]              name_DUCATOProtocolToken[this] := -2134480732;
[L1819]              decimals_DUCATOProtocolToken[this] := 18;
[L1820]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1821]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1823]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1824]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1825]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1826]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1857]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L419]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L420]               assume !revert && gas >= 0;
[L3459]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3460]              assume !revert && gas >= 0;
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND TRUE   choice == 11
[L3375]              gas := gas - 21000;
[L3376]  COND TRUE   gas >= 0
[L3377]              assume tokens_s385 >= 0 && tokens_s385 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3378]              assume msgvalue_MSG == 0;
[L3379]  CALL        call success_s385 := transfer~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L668]               havoc __exception;
[L669]               revert := false;
[L670]   COND FALSE  !(__exception)
[L693]   CALL        call success_s385 := transfer~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L1990]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L1994]              __var_4 := null;
[L1995]  COND FALSE  !(!(to_s385 > null))
[L1999]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L2000]  COND FALSE  !(revert)
[L2003]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2004]              balances_DUCATOProtocolToken[this][msgsender_MSG] := __var_5;
[L2005]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2006]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L1601]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1602]  COND FALSE  !(!(c_s23 >= a_s23))
[L2006]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L2007]  COND FALSE  !(revert)
[L2010]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][to_s385];
[L2011]              balances_DUCATOProtocolToken[this][to_s385] := __var_6;
[L2012]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][to_s385];
[L2013]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L2014]              success_s385 := true;
[L693]   RET         call success_s385 := transfer~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L694]               assume !revert && gas >= 0;
[L3379]  RET         call success_s385 := transfer~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND FALSE  !(choice == 11)
[L3381]  COND FALSE  !(choice == 10)
[L3388]  COND FALSE  !(choice == 9)
[L3395]  COND FALSE  !(choice == 8)
[L3401]  COND FALSE  !(choice == 7)
[L3407]  COND FALSE  !(choice == 6)
[L3413]  COND FALSE  !(choice == 5)
[L3419]  COND FALSE  !(choice == 4)
[L3425]  COND FALSE  !(choice == 3)
[L3431]  COND FALSE  !(choice == 2)
[L3438]  COND TRUE   choice == 1
[L3439]              gas := gas - 21000;
[L3440]  COND TRUE   gas >= 0
[L3441]              assume tokens_s609 >= 0 && tokens_s609 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3442]              assume msgvalue_MSG == 0;
[L3443]  CALL        call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L976]   CALL        call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L2255]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3005]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L2255]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2256]  COND FALSE  !(revert)
[L2259]              assume DType[tokenAddress_s609] == ERC20Interface || DType[tokenAddress_s609] == DUCATOProtocolToken;
[L2260]              __var_16 := tokenAddress_s609;
[L2261]  COND TRUE   DType[__var_16] == DUCATOProtocolToken
[L2262]  CALL        call __var_15 := transfer~address~uint256_DUCATOProtocolToken__success(__var_16, this, __var_17, owner_Owned[this], tokens_s609);
[L1990]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L1994]              __var_4 := null;
[L1995]  COND FALSE  !(!(to_s385 > null))
[L1999]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L2000]  COND FALSE  !(revert)
[L2003]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2004]              balances_DUCATOProtocolToken[this][msgsender_MSG] := __var_5;
[L2005]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2006]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L1601]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1602]  COND FALSE  !(!(c_s23 >= a_s23))
[L2006]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L2007]  COND FALSE  !(revert)
[L2010]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][to_s385];
[L2011]              balances_DUCATOProtocolToken[this][to_s385] := __var_6;
[L2012]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][to_s385];
[L2013]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L2014]              success_s385 := true;
[L2262]  RET         call __var_15 := transfer~address~uint256_DUCATOProtocolToken__success(__var_16, this, __var_17, owner_Owned[this], tokens_s609);
[L2263]  COND FALSE  !(revert)
[L2271]              success_s609 := __var_15;
[L976]   RET         call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L977]               assume !revert && gas >= 0;
[L3443]  RET         call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND TRUE   gas >= 0
[L3359]              assume msgvalue_MSG == 0;
[L3360]  CALL        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND TRUE   __exception
[L451]               __tmp__Balance := Balance;
[L452]               __tmp__DType := DType;
[L453]               __tmp__Alloc := Alloc;
[L454]               __tmp__balance_ADDR := balance_ADDR;
[L455]               __tmp__M_Ref_int := M_Ref_int;
[L456]               __tmp__sum_balances0 := sum_balances0;
[L457]               __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L458]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L459]               __tmp__sum_allowed1 := sum_allowed1;
[L460]               __tmp__Length := Length;
[L461]               __tmp__now := now;
[L462]               __tmp__owner_Owned := owner_Owned;
[L463]               __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L464]               __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L465]               __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L466]               __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L467]               __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L468]               __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L469]               __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L470]   CALL        call __ret_0_ := totalSupply_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1867]              __var_3 := null;
[L1868]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_DUCATOProtocolToken[this], __tmp__balances_DUCATOProtocolToken[this][null]);
[L1610]  COND TRUE   !(b_s45 <= a_s45)
[L1611]              revert := true;
[L1868]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_DUCATOProtocolToken[this], __tmp__balances_DUCATOProtocolToken[this][null]);
[L1869]  COND TRUE   revert
[L470]   RET         call __ret_0_ := totalSupply_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L471]               assume revert || gas < 0;
[L3360]  RET         call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

Loop:
[L3463]  CALL       call CorralChoice_DUCATOProtocolToken(this);
[L3313]             havoc msgsender_MSG;
[L3314]             havoc msgvalue_MSG;
[L3315]             havoc choice;
[L3316]             havoc __ret_0_totalSupply;
[L3317]             havoc tokenOwner_s328;
[L3318]             havoc balance_s328;
[L3319]             havoc tokenOwner_s532;
[L3320]             havoc spender_s532;
[L3321]             havoc remaining_s532;
[L3322]             havoc to_s385;
[L3323]             havoc tokens_s385;
[L3324]             havoc success_s385;
[L3325]             havoc spender_s419;
[L3326]             havoc tokens_s419;
[L3327]             havoc success_s419;
[L3328]             havoc from_s510;
[L3329]             havoc to_s510;
[L3330]             havoc tokens_s510;
[L3331]             havoc success_s510;
[L3332]             havoc __ret_0_owner;
[L3333]             havoc __ret_0_symbol;
[L3334]             havoc __ret_0_name;
[L3335]             havoc __ret_0_decimals;
[L3336]             havoc spender_s582;
[L3337]             havoc tokens_s582;
[L3338]             havoc data_s582;
[L3339]             havoc success_s582;
[L3340]             havoc tokenAddress_s609;
[L3341]             havoc tokens_s609;
[L3342]             havoc success_s609;
[L3343]             havoc tmpNow;
[L3344]             havoc gas;
[L3345]             assume gas > 4000000 && gas <= 8000000;
[L3346]             tmpNow := now;
[L3347]             havoc now;
[L3348]             assume now > tmpNow;
[L3349]             assume msgsender_MSG != null;
[L3350]             assume DType[msgsender_MSG] != SafeMath;
[L3351]             assume DType[msgsender_MSG] != ERC20Interface;
[L3352]             assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]             assume DType[msgsender_MSG] != Owned;
[L3354]             assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]             Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE  choice == 14
[L3357]             gas := gas - 21000;
[L3358]  COND TRUE  gas >= 0
[L3359]             assume msgvalue_MSG == 0;
[L3360]  CALL       call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                revert := revert_hold;
[L448]              havoc __exception;
[L449]              revert := false;
[L450]   COND TRUE  __exception
[L451]              __tmp__Balance := Balance;
[L452]              __tmp__DType := DType;
[L453]              __tmp__Alloc := Alloc;
[L454]              __tmp__balance_ADDR := balance_ADDR;
[L455]              __tmp__M_Ref_int := M_Ref_int;
[L456]              __tmp__sum_balances0 := sum_balances0;
[L457]              __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L458]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L459]              __tmp__sum_allowed1 := sum_allowed1;
[L460]              __tmp__Length := Length;
[L461]              __tmp__now := now;
[L462]              __tmp__owner_Owned := owner_Owned;
[L463]              __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L464]              __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L465]              __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L466]              __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L467]              __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L468]              __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L469]              __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L470]   CALL       call __ret_0_ := totalSupply_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1867]             __var_3 := null;
[L1868]  CALL       call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_DUCATOProtocolToken[this], __tmp__balances_DUCATOProtocolToken[this][null]);
[L1610]  COND TRUE  !(b_s45 <= a_s45)
[L1611]             revert := true;
[L1868]  RET        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_DUCATOProtocolToken[this], __tmp__balances_DUCATOProtocolToken[this][null]);
[L1869]  COND TRUE  revert
[L470]   RET        call __ret_0_ := totalSupply_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L471]              assume revert || gas < 0;
[L3360]  RET        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET        call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:24:28,625 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:24:28,625 INFO  L82        PathProgramCache]: Analyzing trace with hash 2009258557, now seen corresponding path program 1 times
[2020-11-25 14:24:28,626 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:24:28,640 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:24:28,926 INFO  L134       CoverageAnalysis]: Checked inductivity of 173 backedges. 0 proven. 39 refuted. 0 times theorem prover too weak. 134 trivial. 0 not checked.
[2020-11-25 14:24:28,927 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:24:28,927 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [35] total 35
[2020-11-25 14:24:28,927 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:24:28,927 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 36 interpolants.
[2020-11-25 14:24:28,927 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=97, Invalid=1163, Unknown=0, NotChecked=0, Total=1260
[2020-11-25 14:24:28,927 INFO  L87              Difference]: Start difference. First operand 3524 states and 4054 transitions. cyclomatic complexity: 545 Second operand 36 states.
[2020-11-25 14:24:32,838 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:24:32,838 INFO  L93              Difference]: Finished difference Result 4244 states and 4805 transitions.
[2020-11-25 14:24:32,839 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 49 states. 
[2020-11-25 14:24:32,839 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4244 states and 4805 transitions.
[2020-11-25 14:24:32,848 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 10
[2020-11-25 14:24:32,857 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4244 states to 4244 states and 4805 transitions.
[2020-11-25 14:24:32,857 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1568
[2020-11-25 14:24:32,858 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1568
[2020-11-25 14:24:32,858 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4244 states and 4805 transitions.
[2020-11-25 14:24:32,860 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:24:32,860 INFO  L728         BuchiCegarLoop]: Abstraction has 4244 states and 4805 transitions.
[2020-11-25 14:24:32,862 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4244 states and 4805 transitions.
[2020-11-25 14:24:32,878 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4244 to 3475.
[2020-11-25 14:24:32,878 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3475 states.
[2020-11-25 14:24:32,882 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3475 states to 3475 states and 3946 transitions.
[2020-11-25 14:24:32,882 INFO  L751         BuchiCegarLoop]: Abstraction has 3475 states and 3946 transitions.
[2020-11-25 14:24:32,882 INFO  L631         BuchiCegarLoop]: Abstraction has 3475 states and 3946 transitions.
[2020-11-25 14:24:32,882 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 14:24:32,882 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3475 states and 3946 transitions.
[2020-11-25 14:24:32,886 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 14:24:32,886 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:24:32,886 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:24:32,887 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:24:32,887 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]     CALL        call main();
[L3453]              assume null == 0;
[L3454]  CALL        call this := FreshRefGenerator__success();
[L1552]              havoc newRef;
[L1553]              assume Alloc[newRef] == false;
[L1554]              Alloc[newRef] := true;
[L1555]              assume newRef != null;
[L3454]  RET         call this := FreshRefGenerator__success();
[L3455]              assume now >= 0;
[L3456]              assume DType[this] == DUCATOProtocolToken;
[L3457]              assume msgvalue_MSG == 0;
[L3458]              gas := gas - 53000;
[L3459]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L394]               havoc __exception;
[L395]               revert := false;
[L396]   COND FALSE  !(__exception)
[L419]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1688]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]              assume msgsender_MSG != null;
[L1674]              Balance[this] := 0;
[L1688]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  COND FALSE  !(revert)
[L1849]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  COND FALSE  !(revert)
[L1853]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1756]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]              assume msgsender_MSG != null;
[L1740]              Balance[this] := 0;
[L1741]              owner_Owned[this] := null;
[L1743]              owner_Owned[this] := msgsender_MSG;
[L1756]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  COND FALSE  !(revert)
[L1853]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1805]              assume msgsender_MSG != null;
[L1806]              Balance[this] := 0;
[L1807]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1808]              name_DUCATOProtocolToken[this] := 1405682701;
[L1809]              decimals_DUCATOProtocolToken[this] := 0;
[L1810]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1811]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1812]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1813]              sum_balances0[this] := 0;
[L1814]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1815]              sum_allowed1[this] := 0;
[L1817]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1818]              name_DUCATOProtocolToken[this] := -2134480732;
[L1819]              decimals_DUCATOProtocolToken[this] := 18;
[L1820]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1821]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1823]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1824]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1825]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1826]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1857]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L419]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L420]               assume !revert && gas >= 0;
[L3459]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3460]              assume !revert && gas >= 0;
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND FALSE  !(choice == 11)
[L3381]  COND FALSE  !(choice == 10)
[L3388]  COND TRUE   choice == 9
[L3389]              gas := gas - 21000;
[L3390]  COND TRUE   gas >= 0
[L3391]              assume tokens_s510 >= 0 && tokens_s510 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3392]              assume msgvalue_MSG == 0;
[L3393]  CALL        call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND FALSE  !(__exception)
[L807]   CALL        call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L2100]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L2104]              __var_7 := null;
[L2105]  COND FALSE  !(!(from_s510 > null))
[L2109]              __var_8 := null;
[L2110]  COND FALSE  !(!(to_s510 > null))
[L2114]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][from_s510], tokens_s510);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2114]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][from_s510], tokens_s510);
[L2115]  COND FALSE  !(revert)
[L2118]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][from_s510];
[L2119]              balances_DUCATOProtocolToken[this][from_s510] := __var_9;
[L2120]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][from_s510];
[L2121]  COND FALSE  !(from_s510 != to_s510 && from_s510 != msgsender_MSG)
[L2130]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s510], tokens_s510);
[L1601]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1602]  COND FALSE  !(!(c_s23 >= a_s23))
[L2130]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s510], tokens_s510);
[L2131]  COND FALSE  !(revert)
[L2134]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][to_s510];
[L2135]              balances_DUCATOProtocolToken[this][to_s510] := __var_11;
[L2136]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][to_s510];
[L2137]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L2138]              success_s510 := true;
[L807]   RET         call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L808]               assume !revert && gas >= 0;
[L3393]  RET         call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND FALSE  !(choice == 11)
[L3381]  COND FALSE  !(choice == 10)
[L3388]  COND FALSE  !(choice == 9)
[L3395]  COND FALSE  !(choice == 8)
[L3401]  COND FALSE  !(choice == 7)
[L3407]  COND FALSE  !(choice == 6)
[L3413]  COND FALSE  !(choice == 5)
[L3419]  COND FALSE  !(choice == 4)
[L3425]  COND FALSE  !(choice == 3)
[L3431]  COND FALSE  !(choice == 2)
[L3438]  COND TRUE   choice == 1
[L3439]              gas := gas - 21000;
[L3440]  COND TRUE   gas >= 0
[L3441]              assume tokens_s609 >= 0 && tokens_s609 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3442]              assume msgvalue_MSG == 0;
[L3443]  CALL        call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L976]   CALL        call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L2255]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3005]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L2255]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2256]  COND FALSE  !(revert)
[L2259]              assume DType[tokenAddress_s609] == ERC20Interface || DType[tokenAddress_s609] == DUCATOProtocolToken;
[L2260]              __var_16 := tokenAddress_s609;
[L2261]  COND TRUE   DType[__var_16] == DUCATOProtocolToken
[L2262]  CALL        call __var_15 := transfer~address~uint256_DUCATOProtocolToken__success(__var_16, this, __var_17, owner_Owned[this], tokens_s609);
[L1990]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L1994]              __var_4 := null;
[L1995]  COND FALSE  !(!(to_s385 > null))
[L1999]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L2000]  COND FALSE  !(revert)
[L2003]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2004]              balances_DUCATOProtocolToken[this][msgsender_MSG] := __var_5;
[L2005]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2006]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L1601]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1602]  COND FALSE  !(!(c_s23 >= a_s23))
[L2006]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L2007]  COND FALSE  !(revert)
[L2010]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][to_s385];
[L2011]              balances_DUCATOProtocolToken[this][to_s385] := __var_6;
[L2012]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][to_s385];
[L2013]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L2014]              success_s385 := true;
[L2262]  RET         call __var_15 := transfer~address~uint256_DUCATOProtocolToken__success(__var_16, this, __var_17, owner_Owned[this], tokens_s609);
[L2263]  COND FALSE  !(revert)
[L2271]              success_s609 := __var_15;
[L976]   RET         call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L977]               assume !revert && gas >= 0;
[L3443]  RET         call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND TRUE   gas >= 0
[L3359]              assume msgvalue_MSG == 0;
[L3360]  CALL        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L473]   CALL        call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]              __var_3 := null;
[L1881]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1881]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1882]  COND FALSE  !(revert)
[L1885]              __ret_0_ := __var_2;
[L473]   RET         call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L474]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_DUCATOProtocolToken[this] && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this])) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this])) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this])) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this])) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this])) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this])) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L3360]  RET         call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

Loop:
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND TRUE   gas >= 0
[L3359]              assume msgvalue_MSG == 0;
[L3360]  CALL        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L473]   CALL        call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]              __var_3 := null;
[L1881]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1881]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1882]  COND FALSE  !(revert)
[L1885]              __ret_0_ := __var_2;
[L473]   RET         call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L474]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_DUCATOProtocolToken[this] && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this])) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this])) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this])) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this])) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this])) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this])) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L3360]  RET         call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:24:32,890 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:24:32,891 INFO  L82        PathProgramCache]: Analyzing trace with hash 156889682, now seen corresponding path program 1 times
[2020-11-25 14:24:32,891 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:24:32,907 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:24:33,190 INFO  L134       CoverageAnalysis]: Checked inductivity of 154 backedges. 0 proven. 25 refuted. 0 times theorem prover too weak. 129 trivial. 0 not checked.
[2020-11-25 14:24:33,190 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:24:33,190 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [38] total 38
[2020-11-25 14:24:33,191 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:24:33,191 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 39 interpolants.
[2020-11-25 14:24:33,191 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=109, Invalid=1373, Unknown=0, NotChecked=0, Total=1482
[2020-11-25 14:24:33,191 INFO  L87              Difference]: Start difference. First operand 3475 states and 3946 transitions. cyclomatic complexity: 481 Second operand 39 states.
[2020-11-25 14:24:35,632 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:24:35,632 INFO  L93              Difference]: Finished difference Result 3652 states and 4253 transitions.
[2020-11-25 14:24:35,632 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 34 states. 
[2020-11-25 14:24:35,632 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3652 states and 4253 transitions.
[2020-11-25 14:24:35,640 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 10
[2020-11-25 14:24:35,648 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3652 states to 3652 states and 4253 transitions.
[2020-11-25 14:24:35,648 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1263
[2020-11-25 14:24:35,649 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1263
[2020-11-25 14:24:35,649 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3652 states and 4253 transitions.
[2020-11-25 14:24:35,651 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:24:35,651 INFO  L728         BuchiCegarLoop]: Abstraction has 3652 states and 4253 transitions.
[2020-11-25 14:24:35,652 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3652 states and 4253 transitions.
[2020-11-25 14:24:35,667 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3652 to 3585.
[2020-11-25 14:24:35,667 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3585 states.
[2020-11-25 14:24:35,672 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3585 states to 3585 states and 4176 transitions.
[2020-11-25 14:24:35,672 INFO  L751         BuchiCegarLoop]: Abstraction has 3585 states and 4176 transitions.
[2020-11-25 14:24:35,672 INFO  L631         BuchiCegarLoop]: Abstraction has 3585 states and 4176 transitions.
[2020-11-25 14:24:35,672 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 14:24:35,672 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3585 states and 4176 transitions.
[2020-11-25 14:24:35,676 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 10
[2020-11-25 14:24:35,676 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:24:35,676 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:24:35,677 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:24:35,677 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]     CALL        call main();
[L3453]              assume null == 0;
[L3454]  CALL        call this := FreshRefGenerator__success();
[L1552]              havoc newRef;
[L1553]              assume Alloc[newRef] == false;
[L1554]              Alloc[newRef] := true;
[L1555]              assume newRef != null;
[L3454]  RET         call this := FreshRefGenerator__success();
[L3455]              assume now >= 0;
[L3456]              assume DType[this] == DUCATOProtocolToken;
[L3457]              assume msgvalue_MSG == 0;
[L3458]              gas := gas - 53000;
[L3459]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L394]               havoc __exception;
[L395]               revert := false;
[L396]   COND FALSE  !(__exception)
[L419]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1688]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]              assume msgsender_MSG != null;
[L1674]              Balance[this] := 0;
[L1688]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  COND FALSE  !(revert)
[L1849]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  COND FALSE  !(revert)
[L1853]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1756]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]              assume msgsender_MSG != null;
[L1740]              Balance[this] := 0;
[L1741]              owner_Owned[this] := null;
[L1743]              owner_Owned[this] := msgsender_MSG;
[L1756]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  COND FALSE  !(revert)
[L1853]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1805]              assume msgsender_MSG != null;
[L1806]              Balance[this] := 0;
[L1807]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1808]              name_DUCATOProtocolToken[this] := 1405682701;
[L1809]              decimals_DUCATOProtocolToken[this] := 0;
[L1810]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1811]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1812]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1813]              sum_balances0[this] := 0;
[L1814]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1815]              sum_allowed1[this] := 0;
[L1817]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1818]              name_DUCATOProtocolToken[this] := -2134480732;
[L1819]              decimals_DUCATOProtocolToken[this] := 18;
[L1820]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1821]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1823]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1824]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1825]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1826]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1857]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L419]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L420]               assume !revert && gas >= 0;
[L3459]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3460]              assume !revert && gas >= 0;
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND FALSE  !(choice == 11)
[L3381]  COND FALSE  !(choice == 10)
[L3388]  COND TRUE   choice == 9
[L3389]              gas := gas - 21000;
[L3390]  COND TRUE   gas >= 0
[L3391]              assume tokens_s510 >= 0 && tokens_s510 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3392]              assume msgvalue_MSG == 0;
[L3393]  CALL        call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND FALSE  !(__exception)
[L807]   CALL        call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L2100]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L2104]              __var_7 := null;
[L2105]  COND FALSE  !(!(from_s510 > null))
[L2109]              __var_8 := null;
[L2110]  COND FALSE  !(!(to_s510 > null))
[L2114]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][from_s510], tokens_s510);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2114]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][from_s510], tokens_s510);
[L2115]  COND FALSE  !(revert)
[L2118]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][from_s510];
[L2119]              balances_DUCATOProtocolToken[this][from_s510] := __var_9;
[L2120]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][from_s510];
[L2121]  COND FALSE  !(from_s510 != to_s510 && from_s510 != msgsender_MSG)
[L2130]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s510], tokens_s510);
[L1601]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1602]  COND FALSE  !(!(c_s23 >= a_s23))
[L2130]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s510], tokens_s510);
[L2131]  COND FALSE  !(revert)
[L2134]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][to_s510];
[L2135]              balances_DUCATOProtocolToken[this][to_s510] := __var_11;
[L2136]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][to_s510];
[L2137]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L2138]              success_s510 := true;
[L807]   RET         call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L808]               assume !revert && gas >= 0;
[L3393]  RET         call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND FALSE  !(choice == 11)
[L3381]  COND FALSE  !(choice == 10)
[L3388]  COND FALSE  !(choice == 9)
[L3395]  COND FALSE  !(choice == 8)
[L3401]  COND FALSE  !(choice == 7)
[L3407]  COND FALSE  !(choice == 6)
[L3413]  COND FALSE  !(choice == 5)
[L3419]  COND FALSE  !(choice == 4)
[L3425]  COND FALSE  !(choice == 3)
[L3431]  COND FALSE  !(choice == 2)
[L3438]  COND TRUE   choice == 1
[L3439]              gas := gas - 21000;
[L3440]  COND TRUE   gas >= 0
[L3441]              assume tokens_s609 >= 0 && tokens_s609 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3442]              assume msgvalue_MSG == 0;
[L3443]  CALL        call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L976]   CALL        call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L2255]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3005]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L2255]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2256]  COND FALSE  !(revert)
[L2259]              assume DType[tokenAddress_s609] == ERC20Interface || DType[tokenAddress_s609] == DUCATOProtocolToken;
[L2260]              __var_16 := tokenAddress_s609;
[L2261]  COND TRUE   DType[__var_16] == DUCATOProtocolToken
[L2262]  CALL        call __var_15 := transfer~address~uint256_DUCATOProtocolToken__success(__var_16, this, __var_17, owner_Owned[this], tokens_s609);
[L1990]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L1994]              __var_4 := null;
[L1995]  COND FALSE  !(!(to_s385 > null))
[L1999]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L2000]  COND FALSE  !(revert)
[L2003]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2004]              balances_DUCATOProtocolToken[this][msgsender_MSG] := __var_5;
[L2005]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2006]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L1601]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1602]  COND FALSE  !(!(c_s23 >= a_s23))
[L2006]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L2007]  COND FALSE  !(revert)
[L2010]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][to_s385];
[L2011]              balances_DUCATOProtocolToken[this][to_s385] := __var_6;
[L2012]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][to_s385];
[L2013]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L2014]              success_s385 := true;
[L2262]  RET         call __var_15 := transfer~address~uint256_DUCATOProtocolToken__success(__var_16, this, __var_17, owner_Owned[this], tokens_s609);
[L2263]  COND FALSE  !(revert)
[L2271]              success_s609 := __var_15;
[L976]   RET         call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L977]               assume !revert && gas >= 0;
[L3443]  RET         call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND TRUE   gas >= 0
[L3359]              assume msgvalue_MSG == 0;
[L3360]  CALL        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND TRUE   __exception
[L451]               __tmp__Balance := Balance;
[L452]               __tmp__DType := DType;
[L453]               __tmp__Alloc := Alloc;
[L454]               __tmp__balance_ADDR := balance_ADDR;
[L455]               __tmp__M_Ref_int := M_Ref_int;
[L456]               __tmp__sum_balances0 := sum_balances0;
[L457]               __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L458]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L459]               __tmp__sum_allowed1 := sum_allowed1;
[L460]               __tmp__Length := Length;
[L461]               __tmp__now := now;
[L462]               __tmp__owner_Owned := owner_Owned;
[L463]               __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L464]               __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L465]               __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L466]               __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L467]               __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L468]               __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L469]               __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L470]   CALL        call __ret_0_ := totalSupply_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1867]              __var_3 := null;
[L1868]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_DUCATOProtocolToken[this], __tmp__balances_DUCATOProtocolToken[this][null]);
[L1610]  COND TRUE   !(b_s45 <= a_s45)
[L1611]              revert := true;
[L1868]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_DUCATOProtocolToken[this], __tmp__balances_DUCATOProtocolToken[this][null]);
[L1869]  COND TRUE   revert
[L470]   RET         call __ret_0_ := totalSupply_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L471]               assume revert || gas < 0;
[L3360]  RET         call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

Loop:
[L3463]  CALL       call CorralChoice_DUCATOProtocolToken(this);
[L3313]             havoc msgsender_MSG;
[L3314]             havoc msgvalue_MSG;
[L3315]             havoc choice;
[L3316]             havoc __ret_0_totalSupply;
[L3317]             havoc tokenOwner_s328;
[L3318]             havoc balance_s328;
[L3319]             havoc tokenOwner_s532;
[L3320]             havoc spender_s532;
[L3321]             havoc remaining_s532;
[L3322]             havoc to_s385;
[L3323]             havoc tokens_s385;
[L3324]             havoc success_s385;
[L3325]             havoc spender_s419;
[L3326]             havoc tokens_s419;
[L3327]             havoc success_s419;
[L3328]             havoc from_s510;
[L3329]             havoc to_s510;
[L3330]             havoc tokens_s510;
[L3331]             havoc success_s510;
[L3332]             havoc __ret_0_owner;
[L3333]             havoc __ret_0_symbol;
[L3334]             havoc __ret_0_name;
[L3335]             havoc __ret_0_decimals;
[L3336]             havoc spender_s582;
[L3337]             havoc tokens_s582;
[L3338]             havoc data_s582;
[L3339]             havoc success_s582;
[L3340]             havoc tokenAddress_s609;
[L3341]             havoc tokens_s609;
[L3342]             havoc success_s609;
[L3343]             havoc tmpNow;
[L3344]             havoc gas;
[L3345]             assume gas > 4000000 && gas <= 8000000;
[L3346]             tmpNow := now;
[L3347]             havoc now;
[L3348]             assume now > tmpNow;
[L3349]             assume msgsender_MSG != null;
[L3350]             assume DType[msgsender_MSG] != SafeMath;
[L3351]             assume DType[msgsender_MSG] != ERC20Interface;
[L3352]             assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]             assume DType[msgsender_MSG] != Owned;
[L3354]             assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]             Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE  choice == 14
[L3357]             gas := gas - 21000;
[L3358]  COND TRUE  gas >= 0
[L3359]             assume msgvalue_MSG == 0;
[L3360]  CALL       call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                revert := revert_hold;
[L448]              havoc __exception;
[L449]              revert := false;
[L450]   COND TRUE  __exception
[L451]              __tmp__Balance := Balance;
[L452]              __tmp__DType := DType;
[L453]              __tmp__Alloc := Alloc;
[L454]              __tmp__balance_ADDR := balance_ADDR;
[L455]              __tmp__M_Ref_int := M_Ref_int;
[L456]              __tmp__sum_balances0 := sum_balances0;
[L457]              __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L458]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L459]              __tmp__sum_allowed1 := sum_allowed1;
[L460]              __tmp__Length := Length;
[L461]              __tmp__now := now;
[L462]              __tmp__owner_Owned := owner_Owned;
[L463]              __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L464]              __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L465]              __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L466]              __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L467]              __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L468]              __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L469]              __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L470]   CALL       call __ret_0_ := totalSupply_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1867]             __var_3 := null;
[L1868]  CALL       call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_DUCATOProtocolToken[this], __tmp__balances_DUCATOProtocolToken[this][null]);
[L1610]  COND TRUE  !(b_s45 <= a_s45)
[L1611]             revert := true;
[L1868]  RET        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_DUCATOProtocolToken[this], __tmp__balances_DUCATOProtocolToken[this][null]);
[L1869]  COND TRUE  revert
[L470]   RET        call __ret_0_ := totalSupply_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L471]              assume revert || gas < 0;
[L3360]  RET        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET        call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:24:35,680 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:24:35,681 INFO  L82        PathProgramCache]: Analyzing trace with hash -3672063, now seen corresponding path program 1 times
[2020-11-25 14:24:35,681 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:24:35,694 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:24:35,917 INFO  L134       CoverageAnalysis]: Checked inductivity of 154 backedges. 0 proven. 6 refuted. 0 times theorem prover too weak. 148 trivial. 0 not checked.
[2020-11-25 14:24:35,918 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:24:35,918 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [34] total 34
[2020-11-25 14:24:35,918 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:24:35,918 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 35 interpolants.
[2020-11-25 14:24:35,919 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=93, Invalid=1097, Unknown=0, NotChecked=0, Total=1190
[2020-11-25 14:24:35,919 INFO  L87              Difference]: Start difference. First operand 3585 states and 4176 transitions. cyclomatic complexity: 610 Second operand 35 states.
[2020-11-25 14:24:39,900 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:24:39,901 INFO  L93              Difference]: Finished difference Result 4313 states and 4955 transitions.
[2020-11-25 14:24:39,901 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 53 states. 
[2020-11-25 14:24:39,901 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4313 states and 4955 transitions.
[2020-11-25 14:24:39,910 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 14:24:39,919 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4313 states to 4313 states and 4955 transitions.
[2020-11-25 14:24:39,919 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1587
[2020-11-25 14:24:39,920 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1587
[2020-11-25 14:24:39,920 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4313 states and 4955 transitions.
[2020-11-25 14:24:39,923 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:24:39,923 INFO  L728         BuchiCegarLoop]: Abstraction has 4313 states and 4955 transitions.
[2020-11-25 14:24:39,924 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4313 states and 4955 transitions.
[2020-11-25 14:24:39,939 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4313 to 3559.
[2020-11-25 14:24:39,939 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3559 states.
[2020-11-25 14:24:39,944 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3559 states to 3559 states and 4185 transitions.
[2020-11-25 14:24:39,944 INFO  L751         BuchiCegarLoop]: Abstraction has 3559 states and 4185 transitions.
[2020-11-25 14:24:39,944 INFO  L631         BuchiCegarLoop]: Abstraction has 3559 states and 4185 transitions.
[2020-11-25 14:24:39,944 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 14:24:39,944 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3559 states and 4185 transitions.
[2020-11-25 14:24:39,948 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 14:24:39,948 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:24:39,948 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:24:39,950 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:24:39,950 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]     CALL        call main();
[L3453]              assume null == 0;
[L3454]  CALL        call this := FreshRefGenerator__success();
[L1552]              havoc newRef;
[L1553]              assume Alloc[newRef] == false;
[L1554]              Alloc[newRef] := true;
[L1555]              assume newRef != null;
[L3454]  RET         call this := FreshRefGenerator__success();
[L3455]              assume now >= 0;
[L3456]              assume DType[this] == DUCATOProtocolToken;
[L3457]              assume msgvalue_MSG == 0;
[L3458]              gas := gas - 53000;
[L3459]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L394]               havoc __exception;
[L395]               revert := false;
[L396]   COND FALSE  !(__exception)
[L419]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1688]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]              assume msgsender_MSG != null;
[L1674]              Balance[this] := 0;
[L1688]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  COND FALSE  !(revert)
[L1849]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  COND FALSE  !(revert)
[L1853]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1756]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]              assume msgsender_MSG != null;
[L1740]              Balance[this] := 0;
[L1741]              owner_Owned[this] := null;
[L1743]              owner_Owned[this] := msgsender_MSG;
[L1756]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  COND FALSE  !(revert)
[L1853]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1805]              assume msgsender_MSG != null;
[L1806]              Balance[this] := 0;
[L1807]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1808]              name_DUCATOProtocolToken[this] := 1405682701;
[L1809]              decimals_DUCATOProtocolToken[this] := 0;
[L1810]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1811]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1812]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1813]              sum_balances0[this] := 0;
[L1814]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1815]              sum_allowed1[this] := 0;
[L1817]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1818]              name_DUCATOProtocolToken[this] := -2134480732;
[L1819]              decimals_DUCATOProtocolToken[this] := 18;
[L1820]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1821]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1823]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1824]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1825]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1826]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1857]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L419]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L420]               assume !revert && gas >= 0;
[L3459]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3460]              assume !revert && gas >= 0;
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND FALSE  !(choice == 11)
[L3381]  COND FALSE  !(choice == 10)
[L3388]  COND TRUE   choice == 9
[L3389]              gas := gas - 21000;
[L3390]  COND TRUE   gas >= 0
[L3391]              assume tokens_s510 >= 0 && tokens_s510 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3392]              assume msgvalue_MSG == 0;
[L3393]  CALL        call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND FALSE  !(__exception)
[L807]   CALL        call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L2100]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L2104]              __var_7 := null;
[L2105]  COND FALSE  !(!(from_s510 > null))
[L2109]              __var_8 := null;
[L2110]  COND FALSE  !(!(to_s510 > null))
[L2114]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][from_s510], tokens_s510);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2114]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][from_s510], tokens_s510);
[L2115]  COND FALSE  !(revert)
[L2118]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][from_s510];
[L2119]              balances_DUCATOProtocolToken[this][from_s510] := __var_9;
[L2120]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][from_s510];
[L2121]  COND TRUE   from_s510 != to_s510 && from_s510 != msgsender_MSG
[L2122]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_DUCATOProtocolToken[this][from_s510][msgsender_MSG], tokens_s510);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2122]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_DUCATOProtocolToken[this][from_s510][msgsender_MSG], tokens_s510);
[L2123]  COND FALSE  !(revert)
[L2126]              sum_allowed1[from_s510] := sum_allowed1[from_s510] - allowed_DUCATOProtocolToken[this][from_s510][msgsender_MSG];
[L2127]              allowed_DUCATOProtocolToken[this][from_s510][msgsender_MSG] := __var_10;
[L2128]              sum_allowed1[from_s510] := sum_allowed1[from_s510] + allowed_DUCATOProtocolToken[this][from_s510][msgsender_MSG];
[L2130]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s510], tokens_s510);
[L1601]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1602]  COND FALSE  !(!(c_s23 >= a_s23))
[L2130]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s510], tokens_s510);
[L2131]  COND FALSE  !(revert)
[L2134]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][to_s510];
[L2135]              balances_DUCATOProtocolToken[this][to_s510] := __var_11;
[L2136]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][to_s510];
[L2137]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L2138]              success_s510 := true;
[L807]   RET         call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L808]               assume !revert && gas >= 0;
[L3393]  RET         call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND FALSE  !(choice == 11)
[L3381]  COND FALSE  !(choice == 10)
[L3388]  COND FALSE  !(choice == 9)
[L3395]  COND FALSE  !(choice == 8)
[L3401]  COND FALSE  !(choice == 7)
[L3407]  COND FALSE  !(choice == 6)
[L3413]  COND FALSE  !(choice == 5)
[L3419]  COND FALSE  !(choice == 4)
[L3425]  COND FALSE  !(choice == 3)
[L3431]  COND FALSE  !(choice == 2)
[L3438]  COND TRUE   choice == 1
[L3439]              gas := gas - 21000;
[L3440]  COND TRUE   gas >= 0
[L3441]              assume tokens_s609 >= 0 && tokens_s609 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3442]              assume msgvalue_MSG == 0;
[L3443]  CALL        call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L976]   CALL        call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L2255]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3005]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L2255]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2256]  COND FALSE  !(revert)
[L2259]              assume DType[tokenAddress_s609] == ERC20Interface || DType[tokenAddress_s609] == DUCATOProtocolToken;
[L2260]              __var_16 := tokenAddress_s609;
[L2261]  COND TRUE   DType[__var_16] == DUCATOProtocolToken
[L2262]  CALL        call __var_15 := transfer~address~uint256_DUCATOProtocolToken__success(__var_16, this, __var_17, owner_Owned[this], tokens_s609);
[L1990]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L1994]              __var_4 := null;
[L1995]  COND FALSE  !(!(to_s385 > null))
[L1999]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L2000]  COND FALSE  !(revert)
[L2003]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2004]              balances_DUCATOProtocolToken[this][msgsender_MSG] := __var_5;
[L2005]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2006]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L1601]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1602]  COND FALSE  !(!(c_s23 >= a_s23))
[L2006]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L2007]  COND FALSE  !(revert)
[L2010]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][to_s385];
[L2011]              balances_DUCATOProtocolToken[this][to_s385] := __var_6;
[L2012]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][to_s385];
[L2013]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L2014]              success_s385 := true;
[L2262]  RET         call __var_15 := transfer~address~uint256_DUCATOProtocolToken__success(__var_16, this, __var_17, owner_Owned[this], tokens_s609);
[L2263]  COND FALSE  !(revert)
[L2271]              success_s609 := __var_15;
[L976]   RET         call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L977]               assume !revert && gas >= 0;
[L3443]  RET         call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND TRUE   gas >= 0
[L3359]              assume msgvalue_MSG == 0;
[L3360]  CALL        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L473]   CALL        call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]              __var_3 := null;
[L1881]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1881]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1882]  COND FALSE  !(revert)
[L1885]              __ret_0_ := __var_2;
[L473]   RET         call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L474]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_DUCATOProtocolToken[this] && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this])) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this])) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this])) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this])) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this])) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this])) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L3360]  RET         call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

Loop:
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND TRUE   gas >= 0
[L3359]              assume msgvalue_MSG == 0;
[L3360]  CALL        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L473]   CALL        call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]              __var_3 := null;
[L1881]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1881]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1882]  COND FALSE  !(revert)
[L1885]              __ret_0_ := __var_2;
[L473]   RET         call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L474]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_DUCATOProtocolToken[this] && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this])) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this])) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this])) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this])) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this])) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this])) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L3360]  RET         call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:24:39,954 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:24:39,954 INFO  L82        PathProgramCache]: Analyzing trace with hash -1807642295, now seen corresponding path program 1 times
[2020-11-25 14:24:39,954 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:24:39,976 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:24:40,267 INFO  L134       CoverageAnalysis]: Checked inductivity of 162 backedges. 0 proven. 6 refuted. 0 times theorem prover too weak. 156 trivial. 0 not checked.
[2020-11-25 14:24:40,267 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:24:40,267 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [34] total 34
[2020-11-25 14:24:40,267 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:24:40,267 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 35 interpolants.
[2020-11-25 14:24:40,268 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=88, Invalid=1102, Unknown=0, NotChecked=0, Total=1190
[2020-11-25 14:24:40,268 INFO  L87              Difference]: Start difference. First operand 3559 states and 4185 transitions. cyclomatic complexity: 650 Second operand 35 states.
[2020-11-25 14:24:42,848 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:24:42,849 INFO  L93              Difference]: Finished difference Result 3630 states and 4247 transitions.
[2020-11-25 14:24:42,849 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 33 states. 
[2020-11-25 14:24:42,849 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3630 states and 4247 transitions.
[2020-11-25 14:24:42,858 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 14:24:42,866 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3630 states to 3630 states and 4247 transitions.
[2020-11-25 14:24:42,866 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1229
[2020-11-25 14:24:42,867 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1229
[2020-11-25 14:24:42,867 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3630 states and 4247 transitions.
[2020-11-25 14:24:42,869 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:24:42,869 INFO  L728         BuchiCegarLoop]: Abstraction has 3630 states and 4247 transitions.
[2020-11-25 14:24:42,871 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3630 states and 4247 transitions.
[2020-11-25 14:24:42,886 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3630 to 3501.
[2020-11-25 14:24:42,886 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3501 states.
[2020-11-25 14:24:42,890 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3501 states to 3501 states and 4039 transitions.
[2020-11-25 14:24:42,891 INFO  L751         BuchiCegarLoop]: Abstraction has 3501 states and 4039 transitions.
[2020-11-25 14:24:42,891 INFO  L631         BuchiCegarLoop]: Abstraction has 3501 states and 4039 transitions.
[2020-11-25 14:24:42,891 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 14:24:42,891 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3501 states and 4039 transitions.
[2020-11-25 14:24:42,894 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 14:24:42,894 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:24:42,894 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:24:42,895 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:24:42,895 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]     CALL        call main();
[L3453]              assume null == 0;
[L3454]  CALL        call this := FreshRefGenerator__success();
[L1552]              havoc newRef;
[L1553]              assume Alloc[newRef] == false;
[L1554]              Alloc[newRef] := true;
[L1555]              assume newRef != null;
[L3454]  RET         call this := FreshRefGenerator__success();
[L3455]              assume now >= 0;
[L3456]              assume DType[this] == DUCATOProtocolToken;
[L3457]              assume msgvalue_MSG == 0;
[L3458]              gas := gas - 53000;
[L3459]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L394]               havoc __exception;
[L395]               revert := false;
[L396]   COND FALSE  !(__exception)
[L419]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1688]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]              assume msgsender_MSG != null;
[L1674]              Balance[this] := 0;
[L1688]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  COND FALSE  !(revert)
[L1849]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  COND FALSE  !(revert)
[L1853]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1756]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]              assume msgsender_MSG != null;
[L1740]              Balance[this] := 0;
[L1741]              owner_Owned[this] := null;
[L1743]              owner_Owned[this] := msgsender_MSG;
[L1756]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  COND FALSE  !(revert)
[L1853]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1805]              assume msgsender_MSG != null;
[L1806]              Balance[this] := 0;
[L1807]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1808]              name_DUCATOProtocolToken[this] := 1405682701;
[L1809]              decimals_DUCATOProtocolToken[this] := 0;
[L1810]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1811]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1812]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1813]              sum_balances0[this] := 0;
[L1814]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1815]              sum_allowed1[this] := 0;
[L1817]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1818]              name_DUCATOProtocolToken[this] := -2134480732;
[L1819]              decimals_DUCATOProtocolToken[this] := 18;
[L1820]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1821]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1823]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1824]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1825]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1826]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1857]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L419]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L420]               assume !revert && gas >= 0;
[L3459]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3460]              assume !revert && gas >= 0;
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND FALSE  !(choice == 11)
[L3381]  COND FALSE  !(choice == 10)
[L3388]  COND TRUE   choice == 9
[L3389]              gas := gas - 21000;
[L3390]  COND TRUE   gas >= 0
[L3391]              assume tokens_s510 >= 0 && tokens_s510 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3392]              assume msgvalue_MSG == 0;
[L3393]  CALL        call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND FALSE  !(__exception)
[L807]   CALL        call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L2100]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L2104]              __var_7 := null;
[L2105]  COND FALSE  !(!(from_s510 > null))
[L2109]              __var_8 := null;
[L2110]  COND FALSE  !(!(to_s510 > null))
[L2114]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][from_s510], tokens_s510);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2114]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][from_s510], tokens_s510);
[L2115]  COND FALSE  !(revert)
[L2118]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][from_s510];
[L2119]              balances_DUCATOProtocolToken[this][from_s510] := __var_9;
[L2120]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][from_s510];
[L2121]  COND FALSE  !(from_s510 != to_s510 && from_s510 != msgsender_MSG)
[L2130]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s510], tokens_s510);
[L1601]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1602]  COND FALSE  !(!(c_s23 >= a_s23))
[L2130]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s510], tokens_s510);
[L2131]  COND FALSE  !(revert)
[L2134]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][to_s510];
[L2135]              balances_DUCATOProtocolToken[this][to_s510] := __var_11;
[L2136]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][to_s510];
[L2137]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L2138]              success_s510 := true;
[L807]   RET         call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L808]               assume !revert && gas >= 0;
[L3393]  RET         call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND TRUE   choice == 11
[L3375]              gas := gas - 21000;
[L3376]  COND TRUE   gas >= 0
[L3377]              assume tokens_s385 >= 0 && tokens_s385 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3378]              assume msgvalue_MSG == 0;
[L3379]  CALL        call success_s385 := transfer~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L668]               havoc __exception;
[L669]               revert := false;
[L670]   COND FALSE  !(__exception)
[L693]   CALL        call success_s385 := transfer~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L1990]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L1994]              __var_4 := null;
[L1995]  COND FALSE  !(!(to_s385 > null))
[L1999]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L2000]  COND FALSE  !(revert)
[L2003]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2004]              balances_DUCATOProtocolToken[this][msgsender_MSG] := __var_5;
[L2005]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2006]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L1601]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1602]  COND FALSE  !(!(c_s23 >= a_s23))
[L2006]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L2007]  COND FALSE  !(revert)
[L2010]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][to_s385];
[L2011]              balances_DUCATOProtocolToken[this][to_s385] := __var_6;
[L2012]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][to_s385];
[L2013]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L2014]              success_s385 := true;
[L693]   RET         call success_s385 := transfer~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L694]               assume !revert && gas >= 0;
[L3379]  RET         call success_s385 := transfer~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND FALSE  !(choice == 11)
[L3381]  COND FALSE  !(choice == 10)
[L3388]  COND FALSE  !(choice == 9)
[L3395]  COND FALSE  !(choice == 8)
[L3401]  COND FALSE  !(choice == 7)
[L3407]  COND FALSE  !(choice == 6)
[L3413]  COND FALSE  !(choice == 5)
[L3419]  COND FALSE  !(choice == 4)
[L3425]  COND FALSE  !(choice == 3)
[L3431]  COND FALSE  !(choice == 2)
[L3438]  COND TRUE   choice == 1
[L3439]              gas := gas - 21000;
[L3440]  COND TRUE   gas >= 0
[L3441]              assume tokens_s609 >= 0 && tokens_s609 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3442]              assume msgvalue_MSG == 0;
[L3443]  CALL        call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L976]   CALL        call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L2255]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3005]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L2255]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2256]  COND FALSE  !(revert)
[L2259]              assume DType[tokenAddress_s609] == ERC20Interface || DType[tokenAddress_s609] == DUCATOProtocolToken;
[L2260]              __var_16 := tokenAddress_s609;
[L2261]  COND TRUE   DType[__var_16] == DUCATOProtocolToken
[L2262]  CALL        call __var_15 := transfer~address~uint256_DUCATOProtocolToken__success(__var_16, this, __var_17, owner_Owned[this], tokens_s609);
[L1990]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L1994]              __var_4 := null;
[L1995]  COND FALSE  !(!(to_s385 > null))
[L1999]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L2000]  COND FALSE  !(revert)
[L2003]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2004]              balances_DUCATOProtocolToken[this][msgsender_MSG] := __var_5;
[L2005]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2006]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L1601]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1602]  COND FALSE  !(!(c_s23 >= a_s23))
[L2006]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L2007]  COND FALSE  !(revert)
[L2010]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][to_s385];
[L2011]              balances_DUCATOProtocolToken[this][to_s385] := __var_6;
[L2012]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][to_s385];
[L2013]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L2014]              success_s385 := true;
[L2262]  RET         call __var_15 := transfer~address~uint256_DUCATOProtocolToken__success(__var_16, this, __var_17, owner_Owned[this], tokens_s609);
[L2263]  COND FALSE  !(revert)
[L2271]              success_s609 := __var_15;
[L976]   RET         call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L977]               assume !revert && gas >= 0;
[L3443]  RET         call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND TRUE   gas >= 0
[L3359]              assume msgvalue_MSG == 0;
[L3360]  CALL        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND TRUE   __exception
[L451]               __tmp__Balance := Balance;
[L452]               __tmp__DType := DType;
[L453]               __tmp__Alloc := Alloc;
[L454]               __tmp__balance_ADDR := balance_ADDR;
[L455]               __tmp__M_Ref_int := M_Ref_int;
[L456]               __tmp__sum_balances0 := sum_balances0;
[L457]               __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L458]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L459]               __tmp__sum_allowed1 := sum_allowed1;
[L460]               __tmp__Length := Length;
[L461]               __tmp__now := now;
[L462]               __tmp__owner_Owned := owner_Owned;
[L463]               __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L464]               __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L465]               __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L466]               __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L467]               __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L468]               __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L469]               __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L470]   CALL        call __ret_0_ := totalSupply_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1867]              __var_3 := null;
[L1868]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_DUCATOProtocolToken[this], __tmp__balances_DUCATOProtocolToken[this][null]);
[L1610]  COND TRUE   !(b_s45 <= a_s45)
[L1611]              revert := true;
[L1868]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_DUCATOProtocolToken[this], __tmp__balances_DUCATOProtocolToken[this][null]);
[L1869]  COND TRUE   revert
[L470]   RET         call __ret_0_ := totalSupply_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L471]               assume revert || gas < 0;
[L3360]  RET         call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

Loop:
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND FALSE  !(gas >= 0)
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:24:42,898 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:24:42,898 INFO  L82        PathProgramCache]: Analyzing trace with hash -1369026743, now seen corresponding path program 1 times
[2020-11-25 14:24:42,899 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:24:42,917 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:24:43,273 INFO  L134       CoverageAnalysis]: Checked inductivity of 341 backedges. 10 proven. 45 refuted. 0 times theorem prover too weak. 286 trivial. 0 not checked.
[2020-11-25 14:24:43,273 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:24:43,273 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [41] total 41
[2020-11-25 14:24:43,274 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:24:43,275 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 42 interpolants.
[2020-11-25 14:24:43,275 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=138, Invalid=1584, Unknown=0, NotChecked=0, Total=1722
[2020-11-25 14:24:43,275 INFO  L87              Difference]: Start difference. First operand 3501 states and 4039 transitions. cyclomatic complexity: 556 Second operand 42 states.
[2020-11-25 14:24:47,440 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:24:47,440 INFO  L93              Difference]: Finished difference Result 4179 states and 4708 transitions.
[2020-11-25 14:24:47,440 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 57 states. 
[2020-11-25 14:24:47,440 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4179 states and 4708 transitions.
[2020-11-25 14:24:47,448 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 14:24:47,457 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4179 states to 3980 states and 4488 transitions.
[2020-11-25 14:24:47,457 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1430
[2020-11-25 14:24:47,457 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1430
[2020-11-25 14:24:47,457 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3980 states and 4488 transitions.
[2020-11-25 14:24:47,459 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:24:47,459 INFO  L728         BuchiCegarLoop]: Abstraction has 3980 states and 4488 transitions.
[2020-11-25 14:24:47,461 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3980 states and 4488 transitions.
[2020-11-25 14:24:47,476 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3980 to 3406.
[2020-11-25 14:24:47,476 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3406 states.
[2020-11-25 14:24:47,480 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3406 states to 3406 states and 3913 transitions.
[2020-11-25 14:24:47,480 INFO  L751         BuchiCegarLoop]: Abstraction has 3406 states and 3913 transitions.
[2020-11-25 14:24:47,480 INFO  L631         BuchiCegarLoop]: Abstraction has 3406 states and 3913 transitions.
[2020-11-25 14:24:47,480 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 14:24:47,480 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3406 states and 3913 transitions.
[2020-11-25 14:24:47,483 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 14:24:47,483 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:24:47,484 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:24:47,484 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:24:47,485 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]     CALL        call main();
[L3453]              assume null == 0;
[L3454]  CALL        call this := FreshRefGenerator__success();
[L1552]              havoc newRef;
[L1553]              assume Alloc[newRef] == false;
[L1554]              Alloc[newRef] := true;
[L1555]              assume newRef != null;
[L3454]  RET         call this := FreshRefGenerator__success();
[L3455]              assume now >= 0;
[L3456]              assume DType[this] == DUCATOProtocolToken;
[L3457]              assume msgvalue_MSG == 0;
[L3458]              gas := gas - 53000;
[L3459]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L394]               havoc __exception;
[L395]               revert := false;
[L396]   COND FALSE  !(__exception)
[L419]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1688]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]              assume msgsender_MSG != null;
[L1674]              Balance[this] := 0;
[L1688]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  COND FALSE  !(revert)
[L1849]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  COND FALSE  !(revert)
[L1853]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1756]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]              assume msgsender_MSG != null;
[L1740]              Balance[this] := 0;
[L1741]              owner_Owned[this] := null;
[L1743]              owner_Owned[this] := msgsender_MSG;
[L1756]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  COND FALSE  !(revert)
[L1853]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1805]              assume msgsender_MSG != null;
[L1806]              Balance[this] := 0;
[L1807]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1808]              name_DUCATOProtocolToken[this] := 1405682701;
[L1809]              decimals_DUCATOProtocolToken[this] := 0;
[L1810]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1811]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1812]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1813]              sum_balances0[this] := 0;
[L1814]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1815]              sum_allowed1[this] := 0;
[L1817]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1818]              name_DUCATOProtocolToken[this] := -2134480732;
[L1819]              decimals_DUCATOProtocolToken[this] := 18;
[L1820]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1821]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1823]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1824]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1825]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1826]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1857]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L419]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L420]               assume !revert && gas >= 0;
[L3459]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3460]              assume !revert && gas >= 0;
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND TRUE   choice == 12
[L3369]              gas := gas - 21000;
[L3370]  COND TRUE   gas >= 0
[L3371]              assume msgvalue_MSG == 0;
[L3372]  CALL        call remaining_s532 := allowance~address~address_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L836]               havoc __exception;
[L837]               revert := false;
[L838]   COND TRUE   __exception
[L839]               __tmp__Balance := Balance;
[L840]               __tmp__DType := DType;
[L841]               __tmp__Alloc := Alloc;
[L842]               __tmp__balance_ADDR := balance_ADDR;
[L843]               __tmp__M_Ref_int := M_Ref_int;
[L844]               __tmp__sum_balances0 := sum_balances0;
[L845]               __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L846]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L847]               __tmp__sum_allowed1 := sum_allowed1;
[L848]               __tmp__Length := Length;
[L849]               __tmp__now := now;
[L850]               __tmp__owner_Owned := owner_Owned;
[L851]               __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L852]               __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L853]               __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L854]               __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L855]               __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L856]               __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L857]               __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L858]   CALL        call remaining_s532 := allowance~address~address_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L2144]  COND TRUE   !(__tmp___stopTrade_DUCATOProtocolToken[this] != true)
[L2145]              revert := true;
[L858]   RET         call remaining_s532 := allowance~address~address_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L859]               assume revert || gas < 0;
[L3372]  RET         call remaining_s532 := allowance~address~address_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s532, spender_s532);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND TRUE   choice == 11
[L3375]              gas := gas - 21000;
[L3376]  COND TRUE   gas >= 0
[L3377]              assume tokens_s385 >= 0 && tokens_s385 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3378]              assume msgvalue_MSG == 0;
[L3379]  CALL        call success_s385 := transfer~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L668]               havoc __exception;
[L669]               revert := false;
[L670]   COND FALSE  !(__exception)
[L693]   CALL        call success_s385 := transfer~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L1990]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L1994]              __var_4 := null;
[L1995]  COND FALSE  !(!(to_s385 > null))
[L1999]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L2000]  COND FALSE  !(revert)
[L2003]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2004]              balances_DUCATOProtocolToken[this][msgsender_MSG] := __var_5;
[L2005]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2006]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L1601]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1602]  COND FALSE  !(!(c_s23 >= a_s23))
[L2006]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L2007]  COND FALSE  !(revert)
[L2010]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][to_s385];
[L2011]              balances_DUCATOProtocolToken[this][to_s385] := __var_6;
[L2012]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][to_s385];
[L2013]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L2014]              success_s385 := true;
[L693]   RET         call success_s385 := transfer~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L694]               assume !revert && gas >= 0;
[L3379]  RET         call success_s385 := transfer~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND FALSE  !(choice == 11)
[L3381]  COND FALSE  !(choice == 10)
[L3388]  COND TRUE   choice == 9
[L3389]              gas := gas - 21000;
[L3390]  COND TRUE   gas >= 0
[L3391]              assume tokens_s510 >= 0 && tokens_s510 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3392]              assume msgvalue_MSG == 0;
[L3393]  CALL        call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND FALSE  !(__exception)
[L807]   CALL        call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L2100]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L2104]              __var_7 := null;
[L2105]  COND FALSE  !(!(from_s510 > null))
[L2109]              __var_8 := null;
[L2110]  COND FALSE  !(!(to_s510 > null))
[L2114]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][from_s510], tokens_s510);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2114]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][from_s510], tokens_s510);
[L2115]  COND FALSE  !(revert)
[L2118]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][from_s510];
[L2119]              balances_DUCATOProtocolToken[this][from_s510] := __var_9;
[L2120]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][from_s510];
[L2121]  COND FALSE  !(from_s510 != to_s510 && from_s510 != msgsender_MSG)
[L2130]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s510], tokens_s510);
[L1601]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1602]  COND FALSE  !(!(c_s23 >= a_s23))
[L2130]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s510], tokens_s510);
[L2131]  COND FALSE  !(revert)
[L2134]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][to_s510];
[L2135]              balances_DUCATOProtocolToken[this][to_s510] := __var_11;
[L2136]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][to_s510];
[L2137]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L2138]              success_s510 := true;
[L807]   RET         call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L808]               assume !revert && gas >= 0;
[L3393]  RET         call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND FALSE  !(choice == 11)
[L3381]  COND FALSE  !(choice == 10)
[L3388]  COND FALSE  !(choice == 9)
[L3395]  COND FALSE  !(choice == 8)
[L3401]  COND FALSE  !(choice == 7)
[L3407]  COND FALSE  !(choice == 6)
[L3413]  COND FALSE  !(choice == 5)
[L3419]  COND FALSE  !(choice == 4)
[L3425]  COND FALSE  !(choice == 3)
[L3431]  COND FALSE  !(choice == 2)
[L3438]  COND TRUE   choice == 1
[L3439]              gas := gas - 21000;
[L3440]  COND TRUE   gas >= 0
[L3441]              assume tokens_s609 >= 0 && tokens_s609 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3442]              assume msgvalue_MSG == 0;
[L3443]  CALL        call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L976]   CALL        call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L2255]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3005]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L2255]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2256]  COND FALSE  !(revert)
[L2259]              assume DType[tokenAddress_s609] == ERC20Interface || DType[tokenAddress_s609] == DUCATOProtocolToken;
[L2260]              __var_16 := tokenAddress_s609;
[L2261]  COND TRUE   DType[__var_16] == DUCATOProtocolToken
[L2262]  CALL        call __var_15 := transfer~address~uint256_DUCATOProtocolToken__success(__var_16, this, __var_17, owner_Owned[this], tokens_s609);
[L1990]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L1994]              __var_4 := null;
[L1995]  COND FALSE  !(!(to_s385 > null))
[L1999]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L2000]  COND FALSE  !(revert)
[L2003]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2004]              balances_DUCATOProtocolToken[this][msgsender_MSG] := __var_5;
[L2005]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2006]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L1601]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1602]  COND FALSE  !(!(c_s23 >= a_s23))
[L2006]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L2007]  COND FALSE  !(revert)
[L2010]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][to_s385];
[L2011]              balances_DUCATOProtocolToken[this][to_s385] := __var_6;
[L2012]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][to_s385];
[L2013]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L2014]              success_s385 := true;
[L2262]  RET         call __var_15 := transfer~address~uint256_DUCATOProtocolToken__success(__var_16, this, __var_17, owner_Owned[this], tokens_s609);
[L2263]  COND FALSE  !(revert)
[L2271]              success_s609 := __var_15;
[L976]   RET         call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L977]               assume !revert && gas >= 0;
[L3443]  RET         call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND TRUE   gas >= 0
[L3359]              assume msgvalue_MSG == 0;
[L3360]  CALL        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L473]   CALL        call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]              __var_3 := null;
[L1881]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1881]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1882]  COND FALSE  !(revert)
[L1885]              __ret_0_ := __var_2;
[L473]   RET         call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L474]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_DUCATOProtocolToken[this] && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this])) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this])) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this])) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this])) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this])) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this])) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L3360]  RET         call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

Loop:
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND TRUE   gas >= 0
[L3359]              assume msgvalue_MSG == 0;
[L3360]  CALL        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L473]   CALL        call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]              __var_3 := null;
[L1881]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1881]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1882]  COND FALSE  !(revert)
[L1885]              __ret_0_ := __var_2;
[L473]   RET         call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L474]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_DUCATOProtocolToken[this] && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this])) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this])) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this])) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this])) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this])) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this])) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L3360]  RET         call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:24:47,488 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:24:47,488 INFO  L82        PathProgramCache]: Analyzing trace with hash -1052856301, now seen corresponding path program 1 times
[2020-11-25 14:24:47,489 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:24:47,499 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:24:47,593 INFO  L134       CoverageAnalysis]: Checked inductivity of 540 backedges. 4 proven. 192 refuted. 0 times theorem prover too weak. 344 trivial. 0 not checked.
[2020-11-25 14:24:47,593 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:24:47,593 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-11-25 14:24:47,594 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:24:47,594 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 14:24:47,594 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=20, Invalid=90, Unknown=0, NotChecked=0, Total=110
[2020-11-25 14:24:47,594 INFO  L87              Difference]: Start difference. First operand 3406 states and 3913 transitions. cyclomatic complexity: 525 Second operand 11 states.
[2020-11-25 14:24:48,479 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:24:48,480 INFO  L93              Difference]: Finished difference Result 5436 states and 6558 transitions.
[2020-11-25 14:24:48,480 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 14:24:48,480 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5436 states and 6558 transitions.
[2020-11-25 14:24:48,494 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 14:24:48,510 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5436 states to 5436 states and 6558 transitions.
[2020-11-25 14:24:48,510 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1795
[2020-11-25 14:24:48,511 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1795
[2020-11-25 14:24:48,511 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5436 states and 6558 transitions.
[2020-11-25 14:24:48,515 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:24:48,516 INFO  L728         BuchiCegarLoop]: Abstraction has 5436 states and 6558 transitions.
[2020-11-25 14:24:48,517 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5436 states and 6558 transitions.
[2020-11-25 14:24:48,549 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5436 to 5132.
[2020-11-25 14:24:48,549 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5132 states.
[2020-11-25 14:24:48,558 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5132 states to 5132 states and 6254 transitions.
[2020-11-25 14:24:48,558 INFO  L751         BuchiCegarLoop]: Abstraction has 5132 states and 6254 transitions.
[2020-11-25 14:24:48,558 INFO  L631         BuchiCegarLoop]: Abstraction has 5132 states and 6254 transitions.
[2020-11-25 14:24:48,558 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-25 14:24:48,558 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5132 states and 6254 transitions.
[2020-11-25 14:24:48,563 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 14:24:48,563 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:24:48,563 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:24:48,564 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:24:48,564 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]     CALL        call main();
[L3453]              assume null == 0;
[L3454]  CALL        call this := FreshRefGenerator__success();
[L1552]              havoc newRef;
[L1553]              assume Alloc[newRef] == false;
[L1554]              Alloc[newRef] := true;
[L1555]              assume newRef != null;
[L3454]  RET         call this := FreshRefGenerator__success();
[L3455]              assume now >= 0;
[L3456]              assume DType[this] == DUCATOProtocolToken;
[L3457]              assume msgvalue_MSG == 0;
[L3458]              gas := gas - 53000;
[L3459]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L394]               havoc __exception;
[L395]               revert := false;
[L396]   COND FALSE  !(__exception)
[L419]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1849]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1688]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]              assume msgsender_MSG != null;
[L1674]              Balance[this] := 0;
[L1688]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  COND FALSE  !(revert)
[L1849]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  COND FALSE  !(revert)
[L1853]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1756]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]              assume msgsender_MSG != null;
[L1740]              Balance[this] := 0;
[L1741]              owner_Owned[this] := null;
[L1743]              owner_Owned[this] := msgsender_MSG;
[L1756]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  COND FALSE  !(revert)
[L1853]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  COND FALSE  !(revert)
[L1857]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1805]              assume msgsender_MSG != null;
[L1806]              Balance[this] := 0;
[L1807]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1808]              name_DUCATOProtocolToken[this] := 1405682701;
[L1809]              decimals_DUCATOProtocolToken[this] := 0;
[L1810]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1811]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1812]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1813]              sum_balances0[this] := 0;
[L1814]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1815]              sum_allowed1[this] := 0;
[L1817]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1818]              name_DUCATOProtocolToken[this] := -2134480732;
[L1819]              decimals_DUCATOProtocolToken[this] := 18;
[L1820]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1821]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1823]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1824]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1825]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1826]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1857]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1858]  COND FALSE  !(revert)
[L419]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L420]               assume !revert && gas >= 0;
[L3459]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3460]              assume !revert && gas >= 0;
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND TRUE   choice == 11
[L3375]              gas := gas - 21000;
[L3376]  COND TRUE   gas >= 0
[L3377]              assume tokens_s385 >= 0 && tokens_s385 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3378]              assume msgvalue_MSG == 0;
[L3379]  CALL        call success_s385 := transfer~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L668]               havoc __exception;
[L669]               revert := false;
[L670]   COND FALSE  !(__exception)
[L693]   CALL        call success_s385 := transfer~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L1990]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L1994]              __var_4 := null;
[L1995]  COND FALSE  !(!(to_s385 > null))
[L1999]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L2000]  COND FALSE  !(revert)
[L2003]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2004]              balances_DUCATOProtocolToken[this][msgsender_MSG] := __var_5;
[L2005]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2006]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L1601]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1602]  COND FALSE  !(!(c_s23 >= a_s23))
[L2006]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L2007]  COND FALSE  !(revert)
[L2010]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][to_s385];
[L2011]              balances_DUCATOProtocolToken[this][to_s385] := __var_6;
[L2012]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][to_s385];
[L2013]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L2014]              success_s385 := true;
[L693]   RET         call success_s385 := transfer~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L694]               assume !revert && gas >= 0;
[L3379]  RET         call success_s385 := transfer~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, to_s385, tokens_s385);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND FALSE  !(choice == 11)
[L3381]  COND FALSE  !(choice == 10)
[L3388]  COND TRUE   choice == 9
[L3389]              gas := gas - 21000;
[L3390]  COND TRUE   gas >= 0
[L3391]              assume tokens_s510 >= 0 && tokens_s510 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3392]              assume msgvalue_MSG == 0;
[L3393]  CALL        call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L782]               havoc __exception;
[L783]               revert := false;
[L784]   COND FALSE  !(__exception)
[L807]   CALL        call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L2100]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L2104]              __var_7 := null;
[L2105]  COND FALSE  !(!(from_s510 > null))
[L2109]              __var_8 := null;
[L2110]  COND FALSE  !(!(to_s510 > null))
[L2114]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][from_s510], tokens_s510);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2114]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][from_s510], tokens_s510);
[L2115]  COND FALSE  !(revert)
[L2118]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][from_s510];
[L2119]              balances_DUCATOProtocolToken[this][from_s510] := __var_9;
[L2120]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][from_s510];
[L2121]  COND FALSE  !(from_s510 != to_s510 && from_s510 != msgsender_MSG)
[L2130]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s510], tokens_s510);
[L1601]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1602]  COND FALSE  !(!(c_s23 >= a_s23))
[L2130]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s510], tokens_s510);
[L2131]  COND FALSE  !(revert)
[L2134]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][to_s510];
[L2135]              balances_DUCATOProtocolToken[this][to_s510] := __var_11;
[L2136]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][to_s510];
[L2137]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L2138]              success_s510 := true;
[L807]   RET         call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L808]               assume !revert && gas >= 0;
[L3393]  RET         call success_s510 := transferFrom~address~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, from_s510, to_s510, tokens_s510);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND FALSE  !(choice == 14)
[L3362]  COND FALSE  !(choice == 13)
[L3368]  COND FALSE  !(choice == 12)
[L3374]  COND FALSE  !(choice == 11)
[L3381]  COND FALSE  !(choice == 10)
[L3388]  COND FALSE  !(choice == 9)
[L3395]  COND FALSE  !(choice == 8)
[L3401]  COND FALSE  !(choice == 7)
[L3407]  COND FALSE  !(choice == 6)
[L3413]  COND FALSE  !(choice == 5)
[L3419]  COND FALSE  !(choice == 4)
[L3425]  COND FALSE  !(choice == 3)
[L3431]  COND FALSE  !(choice == 2)
[L3438]  COND TRUE   choice == 1
[L3439]              gas := gas - 21000;
[L3440]  COND TRUE   gas >= 0
[L3441]              assume tokens_s609 >= 0 && tokens_s609 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3442]              assume msgvalue_MSG == 0;
[L3443]  CALL        call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L976]   CALL        call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L2255]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3005]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L2255]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2256]  COND FALSE  !(revert)
[L2259]              assume DType[tokenAddress_s609] == ERC20Interface || DType[tokenAddress_s609] == DUCATOProtocolToken;
[L2260]              __var_16 := tokenAddress_s609;
[L2261]  COND TRUE   DType[__var_16] == DUCATOProtocolToken
[L2262]  CALL        call __var_15 := transfer~address~uint256_DUCATOProtocolToken__success(__var_16, this, __var_17, owner_Owned[this], tokens_s609);
[L1990]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L1994]              __var_4 := null;
[L1995]  COND FALSE  !(!(to_s385 > null))
[L1999]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][msgsender_MSG], tokens_s385);
[L2000]  COND FALSE  !(revert)
[L2003]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2004]              balances_DUCATOProtocolToken[this][msgsender_MSG] := __var_5;
[L2005]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][msgsender_MSG];
[L2006]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L1601]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1602]  COND FALSE  !(!(c_s23 >= a_s23))
[L2006]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DUCATOProtocolToken[this][to_s385], tokens_s385);
[L2007]  COND FALSE  !(revert)
[L2010]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][to_s385];
[L2011]              balances_DUCATOProtocolToken[this][to_s385] := __var_6;
[L2012]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][to_s385];
[L2013]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L2014]              success_s385 := true;
[L2262]  RET         call __var_15 := transfer~address~uint256_DUCATOProtocolToken__success(__var_16, this, __var_17, owner_Owned[this], tokens_s609);
[L2263]  COND FALSE  !(revert)
[L2271]              success_s609 := __var_15;
[L976]   RET         call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L977]               assume !revert && gas >= 0;
[L3443]  RET         call success_s609 := transferAnyERC20Token~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s609, tokens_s609);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND TRUE   gas >= 0
[L3359]              assume msgvalue_MSG == 0;
[L3360]  CALL        call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_DUCATOProtocolToken[this] >= 0 && _totalSupply_DUCATOProtocolToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := true;
[L2]                 call_totalSupply_DUCATOProtocolToken0 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L473]   CALL        call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]              __var_3 := null;
[L1881]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1619]  COND FALSE  !(!(b_s45 <= a_s45))
[L1623]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1881]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_DUCATOProtocolToken[this], balances_DUCATOProtocolToken[this][null]);
[L1882]  COND FALSE  !(revert)
[L1885]              __ret_0_ := __var_2;
[L473]   RET         call __ret_0_ := totalSupply_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L474]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_DUCATOProtocolToken[this] && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this])) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this])) && allowed_DUCATOProtocolToken[this] == old(allowed_DUCATOProtocolToken[this])) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this])) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this])) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this])) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L3360]  RET         call __ret_0_totalSupply := totalSupply_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

Loop:
[L3463]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3313]              havoc msgsender_MSG;
[L3314]              havoc msgvalue_MSG;
[L3315]              havoc choice;
[L3316]              havoc __ret_0_totalSupply;
[L3317]              havoc tokenOwner_s328;
[L3318]              havoc balance_s328;
[L3319]              havoc tokenOwner_s532;
[L3320]              havoc spender_s532;
[L3321]              havoc remaining_s532;
[L3322]              havoc to_s385;
[L3323]              havoc tokens_s385;
[L3324]              havoc success_s385;
[L3325]              havoc spender_s419;
[L3326]              havoc tokens_s419;
[L3327]              havoc success_s419;
[L3328]              havoc from_s510;
[L3329]              havoc to_s510;
[L3330]              havoc tokens_s510;
[L3331]              havoc success_s510;
[L3332]              havoc __ret_0_owner;
[L3333]              havoc __ret_0_symbol;
[L3334]              havoc __ret_0_name;
[L3335]              havoc __ret_0_decimals;
[L3336]              havoc spender_s582;
[L3337]              havoc tokens_s582;
[L3338]              havoc data_s582;
[L3339]              havoc success_s582;
[L3340]              havoc tokenAddress_s609;
[L3341]              havoc tokens_s609;
[L3342]              havoc success_s609;
[L3343]              havoc tmpNow;
[L3344]              havoc gas;
[L3345]              assume gas > 4000000 && gas <= 8000000;
[L3346]              tmpNow := now;
[L3347]              havoc now;
[L3348]              assume now > tmpNow;
[L3349]              assume msgsender_MSG != null;
[L3350]              assume DType[msgsender_MSG] != SafeMath;
[L3351]              assume DType[msgsender_MSG] != ERC20Interface;
[L3352]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3353]              assume DType[msgsender_MSG] != Owned;
[L3354]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3355]              Alloc[msgsender_MSG] := true;
[L3356]  COND TRUE   choice == 14
[L3357]              gas := gas - 21000;
[L3358]  COND FALSE  !(gas >= 0)
[L3463]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:24:48,567 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:24:48,567 INFO  L82        PathProgramCache]: Analyzing trace with hash -1130402302, now seen corresponding path program 1 times
[2020-11-25 14:24:48,568 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:24:48,604 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:24:49,081 INFO  L134       CoverageAnalysis]: Checked inductivity of 341 backedges. 0 proven. 55 refuted. 0 times theorem prover too weak. 286 trivial. 0 not checked.
[2020-11-25 14:24:49,081 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:24:49,081 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [39] total 39
[2020-11-25 14:24:49,082 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:24:49,082 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 40 interpolants.
[2020-11-25 14:24:49,082 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=120, Invalid=1440, Unknown=0, NotChecked=0, Total=1560
[2020-11-25 14:24:49,082 INFO  L87              Difference]: Start difference. First operand 5132 states and 6254 transitions. cyclomatic complexity: 1158 Second operand 40 states.
[2020-11-25 14:24:50,316 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:24:50,316 INFO  L93              Difference]: Finished difference Result 2870 states and 3627 transitions.
[2020-11-25 14:24:50,316 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 37 states. 
[2020-11-25 14:24:50,316 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2870 states and 3627 transitions.
[2020-11-25 14:24:50,324 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 14:24:50,324 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2870 states to 0 states and 0 transitions.
[2020-11-25 14:24:50,324 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 14:24:50,324 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 14:24:50,324 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 14:24:50,324 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:24:50,324 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 14:24:50,324 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 14:24:50,324 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 14:24:50,324 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-11-25 14:24:50,324 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 14:24:50,324 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 14:24:50,324 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 14:24:50,327 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:24:50 BasicIcfg
[2020-11-25 14:24:50,327 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 14:24:50,328 INFO  L168              Benchmark]: Toolchain (without parser) took 53881.52 ms. Allocated memory was 1.0 GB in the beginning and 3.1 GB in the end (delta: 2.0 GB). Free memory was 940.6 MB in the beginning and 1.4 GB in the end (delta: -493.9 MB). Peak memory consumption was 1.5 GB. Max. memory is 15.3 GB.
[2020-11-25 14:24:50,329 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.34 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 14:24:50,329 INFO  L168              Benchmark]: Boogie Preprocessor took 89.01 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 14:24:50,329 INFO  L168              Benchmark]: UtopiaSpecLang took 55.21 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 14:24:50,329 INFO  L168              Benchmark]: Boogie Printer took 13.20 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 14:24:50,329 INFO  L168              Benchmark]: RCFGBuilder took 651.05 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 833.2 MB in the end (delta: 85.9 MB). Peak memory consumption was 85.9 MB. Max. memory is 15.3 GB.
[2020-11-25 14:24:50,330 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.63 ms. Allocated memory is still 1.0 GB. Free memory was 833.2 MB in the beginning and 824.2 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 14:24:50,330 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1246.52 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 186.6 MB). Free memory was 824.2 MB in the beginning and 1.1 GB in the end (delta: -292.7 MB). Peak memory consumption was 192.7 MB. Max. memory is 15.3 GB.
[2020-11-25 14:24:50,330 INFO  L168              Benchmark]: BlockEncodingV2 took 100.85 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 43.8 MB). Peak memory consumption was 43.8 MB. Max. memory is 15.3 GB.
[2020-11-25 14:24:50,330 INFO  L168              Benchmark]: BuchiAutomizer took 51684.20 ms. Allocated memory was 1.2 GB in the beginning and 3.1 GB in the end (delta: 1.8 GB). Free memory was 1.1 GB in the beginning and 1.4 GB in the end (delta: -361.3 MB). Peak memory consumption was 1.5 GB. Max. memory is 15.3 GB.
[2020-11-25 14:24:50,333 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2930 locations, 4980 edges
  - StatisticsResult: Encoded RCFG
    2892 locations, 4886 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.34 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 89.01 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 55.21 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 13.20 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 651.05 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 833.2 MB in the end (delta: 85.9 MB). Peak memory consumption was 85.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.63 ms. Allocated memory is still 1.0 GB. Free memory was 833.2 MB in the beginning and 824.2 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1246.52 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 186.6 MB). Free memory was 824.2 MB in the beginning and 1.1 GB in the end (delta: -292.7 MB). Peak memory consumption was 192.7 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 100.85 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 43.8 MB). Peak memory consumption was 43.8 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 51684.20 ms. Allocated memory was 1.2 GB in the beginning and 3.1 GB in the end (delta: 1.8 GB). Free memory was 1.1 GB in the beginning and 1.4 GB in the end (delta: -361.3 MB). Peak memory consumption was 1.5 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1244 locations, 1546 edges
  - StatisticsResult: BuchiProgram size
    2930 locations, 4980 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 21 terminating modules (21 trivial, 0 deterministic, 0 nondeterministic). 21 modules have a trivial ranking function, the largest among these consists of 42 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 51.6s and 22 iterations.  TraceHistogramMax:5. Analysis of lassos took 4.4s. Construction of modules took 35.6s. BÃ¼chi inclusion checks took 10.3s. Highest rank in rank-based complementation 0. Minimization of det autom 21. Minimization of nondet autom 0. Automata minimization 0.5s AutomataMinimizationTime, 20 MinimizatonAttempts, 6994 StatesRemovedByMinimization, 19 NontrivialMinimizations. Non-live state removal took 0.3s Buchi closure took 0.0s. Biggest automaton had 5132 states and ocurred in iteration 20.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 44518 SDtfs, 88244 SDslu, 307117 SDs, 0 SdLazy, 531624 SolverSat, 17019 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 35.6s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU21 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_totalSupply_DUCATOProtocolToken0) ==> ( <>(success_totalSupply_DUCATOProtocolToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
