This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 13:57:22,762 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 13:57:22,763 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 13:57:22,773 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 13:57:22,773 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 13:57:22,774 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 13:57:22,775 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 13:57:22,776 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 13:57:22,778 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 13:57:22,778 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 13:57:22,779 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 13:57:22,779 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 13:57:22,780 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 13:57:22,781 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 13:57:22,781 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 13:57:22,782 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 13:57:22,782 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 13:57:22,784 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 13:57:22,785 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 13:57:22,786 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 13:57:22,787 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 13:57:22,787 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 13:57:22,789 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 13:57:22,789 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 13:57:22,789 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 13:57:22,790 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 13:57:22,790 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 13:57:22,791 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 13:57:22,791 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 13:57:22,791 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 13:57:22,791 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 13:57:22,792 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 13:57:22,792 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 13:57:22,793 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 13:57:22,794 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 13:57:22,794 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 13:57:22,794 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 13:57:22,794 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 13:57:22,794 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 13:57:22,795 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 13:57:22,795 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 13:57:22,796 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 13:57:22,803 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 13:57:22,803 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 13:57:22,804 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 13:57:22,804 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 13:57:22,804 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 13:57:22,804 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 13:57:22,805 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 13:57:22,805 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 13:57:22,805 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 13:57:22,805 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 13:57:22,805 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 13:57:22,805 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 13:57:22,805 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 13:57:22,805 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 13:57:22,805 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 13:57:22,805 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 13:57:22,806 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 13:57:22,806 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 13:57:22,806 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 13:57:22,806 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 13:57:22,806 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 13:57:22,806 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 13:57:22,806 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 13:57:22,806 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 13:57:22,806 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 13:57:22,806 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 13:57:22,827 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 13:57:22,838 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 13:57:22,841 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 13:57:22,843 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 13:57:22,843 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 13:57:22,844 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transferfrom-normal.bpl
[2020-11-25 13:57:22,844 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transferfrom-normal.bpl'
[2020-11-25 13:57:22,915 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 13:57:22,916 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 13:57:22,917 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 13:57:22,917 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 13:57:22,917 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 13:57:22,933 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:57:22" (1/1) ...
[2020-11-25 13:57:22,934 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:57:22" (1/1) ...
[2020-11-25 13:57:22,961 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:57:22" (1/1) ...
[2020-11-25 13:57:22,962 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:57:22" (1/1) ...
[2020-11-25 13:57:22,979 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:57:22" (1/1) ...
[2020-11-25 13:57:22,987 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:57:22" (1/1) ...
[2020-11-25 13:57:22,993 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:57:22" (1/1) ...
[2020-11-25 13:57:23,001 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 13:57:23,002 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 13:57:23,002 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 13:57:23,004 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 13:57:23,007 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:57:22" (1/1) ...
[2020-11-25 13:57:23,024 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(DiceToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_DiceToken[this][from] && value <= allowed_DiceToken[this][from][msg.sender] && balances_DiceToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_DiceToken[this][to] >= 0 && balances_DiceToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_DiceToken[this][from] >= 0 &&  balances_DiceToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_DiceToken[this][from][msg.sender] >= 0 && allowed_DiceToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DiceToken.transferFrom(from, to, value), return == true && balances_DiceToken[this][from] == old(balances_DiceToken[this][from]) - value && balances_DiceToken[this][to] == old(balances_DiceToken[this][to]) + value && allowed_DiceToken[this][from][msg.sender] == old(allowed_DiceToken[this][from][msg.sender]) - value && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this]) && balances_DiceToken[this][p1] == old(balances_DiceToken[this][p1]) && allowed_DiceToken[this][p2][p3] == old(allowed_DiceToken[this][p2][p3]) && symbol_DiceToken[this] == old(symbol_DiceToken[this]) && name_DiceToken[this] == old(name_DiceToken[this]) && decimals_DiceToken[this] == old(decimals_DiceToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 13:57:23,029 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(DiceToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_DiceToken[this][from] && value <= allowed_DiceToken[this][from][msg.sender] && balances_DiceToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_DiceToken[this][to] >= 0 && balances_DiceToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_DiceToken[this][from] >= 0 &&  balances_DiceToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_DiceToken[this][from][msg.sender] >= 0 && allowed_DiceToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DiceToken.transferFrom(from, to, value), return == true && balances_DiceToken[this][from] == old(balances_DiceToken[this][from]) - value && balances_DiceToken[this][to] == old(balances_DiceToken[this][to]) + value && allowed_DiceToken[this][from][msg.sender] == old(allowed_DiceToken[this][from][msg.sender]) - value && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this]) && balances_DiceToken[this][p1] == old(balances_DiceToken[this][p1]) && allowed_DiceToken[this][p2][p3] == old(allowed_DiceToken[this][p2][p3]) && symbol_DiceToken[this] == old(symbol_DiceToken[this]) && name_DiceToken[this] == old(name_DiceToken[this]) && decimals_DiceToken[this] == old(decimals_DiceToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 13:57:23,037 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(DiceToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_DiceToken[this][from] && value <= allowed_DiceToken[this][from][msg.sender] && balances_DiceToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_DiceToken[this][to] >= 0 && balances_DiceToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_DiceToken[this][from] >= 0 &&  balances_DiceToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_DiceToken[this][from][msg.sender] >= 0 && allowed_DiceToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DiceToken.transferFrom(from, to, value), return == true && balances_DiceToken[this][from] == old(balances_DiceToken[this][from]) - value && balances_DiceToken[this][to] == old(balances_DiceToken[this][to]) + value && allowed_DiceToken[this][from][msg.sender] == old(allowed_DiceToken[this][from][msg.sender]) - value && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this]) && balances_DiceToken[this][p1] == old(balances_DiceToken[this][p1]) && allowed_DiceToken[this][p2][p3] == old(allowed_DiceToken[this][p2][p3]) && symbol_DiceToken[this] == old(symbol_DiceToken[this]) && name_DiceToken[this] == old(name_DiceToken[this]) && decimals_DiceToken[this] == old(decimals_DiceToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 13:57:23,045 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s453 && p1!=to_s453 ) && ( p2!=from_s453 || p3!=msg.sender ) ) && from_s453!=to_s453 ) && tokens_s453<=balances_DiceToken[this][from_s453] ) && tokens_s453<=allowed_DiceToken[this][from_s453][msg.sender] ) && ( balances_DiceToken[this][to_s453] + tokens_s453 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && tokens_s453>=0 ) && tokens_s453<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_DiceToken[this][to_s453]>=0 ) && balances_DiceToken[this][to_s453]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_DiceToken[this][from_s453]>=0 ) && balances_DiceToken[this][from_s453]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_DiceToken[this][from_s453][msg.sender]>=0 ) && allowed_DiceToken[this][from_s453][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s453,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s453,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[from_s453,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p3,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]]],BinaryExpression[COMPNEQ,IdentifierExpression[from_s453,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>],IdentifierExpression[to_s453,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s453,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],[IdentifierExpression[from_s453,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s453,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],[IdentifierExpression[from_s453,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],[IdentifierExpression[to_s453,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],IdentifierExpression[tokens_s453,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s453,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s453,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],[IdentifierExpression[to_s453,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],[IdentifierExpression[to_s453,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],[IdentifierExpression[from_s453,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],[IdentifierExpression[from_s453,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],[IdentifierExpression[from_s453,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],[IdentifierExpression[from_s453,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 13:57:23,048 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( success_s453==true && balances_DiceToken[this][from_s453]==( ( old(balances_DiceToken[this][from_s453]) ) - tokens_s453 ) ) && balances_DiceToken[this][to_s453]==( ( old(balances_DiceToken[this][to_s453]) ) + tokens_s453 ) ) && allowed_DiceToken[this][from_s453][msg.sender]==( ( old(allowed_DiceToken[this][from_s453][msg.sender]) ) - tokens_s453 ) ) && _totalSupply_DiceToken[this]==( old(_totalSupply_DiceToken[this]) ) ) && balances_DiceToken[this][p1]==( old(balances_DiceToken[this][p1]) ) ) && allowed_DiceToken[this][p2][p3]==( old(allowed_DiceToken[this][p2][p3]) ) ) && symbol_DiceToken[this]==( old(symbol_DiceToken[this]) ) ) && name_DiceToken[this]==( old(name_DiceToken[this]) ) ) && decimals_DiceToken[this]==( old(decimals_DiceToken[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s453,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_DiceToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],[IdentifierExpression[from_s453,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],[IdentifierExpression[from_s453,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]]],IdentifierExpression[tokens_s453,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],[IdentifierExpression[to_s453,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],[IdentifierExpression[to_s453,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]]],IdentifierExpression[tokens_s453,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],[IdentifierExpression[from_s453,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],[IdentifierExpression[from_s453,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]]],IdentifierExpression[tokens_s453,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DiceToken>]]]]]]
[2020-11-25 13:57:23,052 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(DiceToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_DiceToken[this][from] && value <= allowed_DiceToken[this][from][msg.sender] && balances_DiceToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_DiceToken[this][to] >= 0 && balances_DiceToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_DiceToken[this][from] >= 0 &&  balances_DiceToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_DiceToken[this][from][msg.sender] >= 0 && allowed_DiceToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DiceToken.transferFrom(from, to, value), return == true && balances_DiceToken[this][from] == old(balances_DiceToken[this][from]) - value && balances_DiceToken[this][to] == old(balances_DiceToken[this][to]) + value && allowed_DiceToken[this][from][msg.sender] == old(allowed_DiceToken[this][from][msg.sender]) - value && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this]) && balances_DiceToken[this][p1] == old(balances_DiceToken[this][p1]) && allowed_DiceToken[this][p2][p3] == old(allowed_DiceToken[this][p2][p3]) && symbol_DiceToken[this] == old(symbol_DiceToken[this]) && name_DiceToken[this] == old(name_DiceToken[this]) && decimals_DiceToken[this] == old(decimals_DiceToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 13:57:23,052 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_DiceToken0) ==> ( <>AP(success_transferFrom_DiceToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 13:57:23,060 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:57:23 PropertyContainer
[2020-11-25 13:57:23,060 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 13:57:23,060 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 13:57:23,060 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 13:57:23,060 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 13:57:23,061 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:57:22" (1/2) ...
[2020-11-25 13:57:23,061 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 13:57:23,062 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 13:57:23,073 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:57:23" (2/2) ...
[2020-11-25 13:57:23,074 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 13:57:23,074 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 13:57:23,074 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 13:57:23,074 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 13:57:23,075 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:57:22" (1/2) ...
[2020-11-25 13:57:23,127 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 13:57:23,127 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 13:57:23,128 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 13:57:23,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 13:57:23,128 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 13:57:23,128 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 13:57:23,128 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 13:57:23,128 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 13:57:23,128 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 13:57:23,128 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 13:57:23,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 13:57:23,128 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 13:57:23,129 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 13:57:23,129 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 13:57:23,129 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 13:57:23,129 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 13:57:23,129 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 13:57:23,129 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 13:57:23,130 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 13:57:23,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 13:57:23,130 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 13:57:23,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 13:57:23,130 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 13:57:23,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 13:57:23,130 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 13:57:23,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 13:57:23,130 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 13:57:23,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 13:57:23,131 INFO  L130     BoogieDeclarations]: Found specification of procedure DiceToken_DiceToken_NoBaseCtor__success
[2020-11-25 13:57:23,131 INFO  L130     BoogieDeclarations]: Found specification of procedure DiceToken_DiceToken
[2020-11-25 13:57:23,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure DiceToken_DiceToken
[2020-11-25 13:57:23,131 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_DiceToken
[2020-11-25 13:57:23,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_DiceToken
[2020-11-25 13:57:23,131 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_DiceToken
[2020-11-25 13:57:23,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_DiceToken
[2020-11-25 13:57:23,131 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DiceToken
[2020-11-25 13:57:23,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DiceToken
[2020-11-25 13:57:23,131 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_DiceToken
[2020-11-25 13:57:23,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_DiceToken
[2020-11-25 13:57:23,132 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DiceToken
[2020-11-25 13:57:23,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DiceToken
[2020-11-25 13:57:23,132 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_DiceToken
[2020-11-25 13:57:23,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_DiceToken
[2020-11-25 13:57:23,132 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_DiceToken__success
[2020-11-25 13:57:23,132 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_DiceToken
[2020-11-25 13:57:23,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_DiceToken
[2020-11-25 13:57:23,132 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DiceToken
[2020-11-25 13:57:23,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DiceToken
[2020-11-25 13:57:23,133 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DiceToken
[2020-11-25 13:57:23,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DiceToken
[2020-11-25 13:57:23,133 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DiceToken
[2020-11-25 13:57:23,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DiceToken
[2020-11-25 13:57:23,133 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_DiceToken
[2020-11-25 13:57:23,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_DiceToken
[2020-11-25 13:57:23,133 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 13:57:23,133 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 13:57:23,133 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 13:57:23,134 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 13:57:23,134 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 13:57:23,134 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 13:57:23,134 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 13:57:23,134 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 13:57:23,134 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 13:57:23,134 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 13:57:23,134 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DiceToken
[2020-11-25 13:57:23,134 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 13:57:23,135 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 13:57:23,135 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 13:57:23,135 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 13:57:23,135 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 13:57:23,135 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 13:57:23,135 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 13:57:23,135 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 13:57:23,135 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 13:57:23,135 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 13:57:23,136 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 13:57:23,136 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 13:57:23,136 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 13:57:23,136 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 13:57:23,136 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 13:57:23,136 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 13:57:23,136 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 13:57:23,136 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 13:57:23,136 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 13:57:23,136 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 13:57:23,136 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 13:57:23,137 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 13:57:23,137 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 13:57:23,137 INFO  L130     BoogieDeclarations]: Found specification of procedure DiceToken_DiceToken_NoBaseCtor__fail
[2020-11-25 13:57:23,137 INFO  L130     BoogieDeclarations]: Found specification of procedure DiceToken_DiceToken__success
[2020-11-25 13:57:23,137 INFO  L130     BoogieDeclarations]: Found specification of procedure DiceToken_DiceToken__fail
[2020-11-25 13:57:23,137 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_DiceToken__success
[2020-11-25 13:57:23,137 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_DiceToken__fail
[2020-11-25 13:57:23,137 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_DiceToken__success
[2020-11-25 13:57:23,137 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_DiceToken__fail
[2020-11-25 13:57:23,138 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DiceToken__success
[2020-11-25 13:57:23,138 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DiceToken__fail
[2020-11-25 13:57:23,138 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_DiceToken__success
[2020-11-25 13:57:23,138 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_DiceToken__fail
[2020-11-25 13:57:23,138 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DiceToken__success
[2020-11-25 13:57:23,138 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DiceToken__fail
[2020-11-25 13:57:23,138 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_DiceToken__success
[2020-11-25 13:57:23,138 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_DiceToken__fail
[2020-11-25 13:57:23,138 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_DiceToken__fail
[2020-11-25 13:57:23,138 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_DiceToken__success
[2020-11-25 13:57:23,138 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_DiceToken__fail
[2020-11-25 13:57:23,139 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DiceToken__success
[2020-11-25 13:57:23,139 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DiceToken__fail
[2020-11-25 13:57:23,139 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DiceToken__success
[2020-11-25 13:57:23,139 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DiceToken__fail
[2020-11-25 13:57:23,139 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DiceToken__success
[2020-11-25 13:57:23,139 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DiceToken__fail
[2020-11-25 13:57:23,139 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_DiceToken__success
[2020-11-25 13:57:23,139 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_DiceToken__fail
[2020-11-25 13:57:23,139 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 13:57:23,139 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 13:57:23,140 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 13:57:23,140 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 13:57:23,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 13:57:23,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 13:57:23,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 13:57:23,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 13:57:23,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 13:57:23,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 13:57:23,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 13:57:23,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 13:57:23,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 13:57:23,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 13:57:23,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 13:57:23,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 13:57:23,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 13:57:23,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 13:57:23,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 13:57:23,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 13:57:23,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 13:57:23,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 13:57:23,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 13:57:23,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 13:57:23,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 13:57:23,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 13:57:23,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 13:57:23,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 13:57:23,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 13:57:23,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 13:57:23,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 13:57:23,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 13:57:23,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 13:57:23,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 13:57:23,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure DiceToken_DiceToken_NoBaseCtor__fail
[2020-11-25 13:57:23,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure DiceToken_DiceToken_NoBaseCtor__success
[2020-11-25 13:57:23,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure DiceToken_DiceToken__fail
[2020-11-25 13:57:23,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure DiceToken_DiceToken__success
[2020-11-25 13:57:23,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_DiceToken__fail
[2020-11-25 13:57:23,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_DiceToken__success
[2020-11-25 13:57:23,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_DiceToken__fail
[2020-11-25 13:57:23,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_DiceToken__success
[2020-11-25 13:57:23,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DiceToken__fail
[2020-11-25 13:57:23,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DiceToken__success
[2020-11-25 13:57:23,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_DiceToken__fail
[2020-11-25 13:57:23,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_DiceToken__success
[2020-11-25 13:57:23,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DiceToken__fail
[2020-11-25 13:57:23,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DiceToken__success
[2020-11-25 13:57:23,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_DiceToken__fail
[2020-11-25 13:57:23,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_DiceToken__success
[2020-11-25 13:57:23,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_DiceToken__fail
[2020-11-25 13:57:23,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_DiceToken__success
[2020-11-25 13:57:23,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_DiceToken__fail
[2020-11-25 13:57:23,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_DiceToken__success
[2020-11-25 13:57:23,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DiceToken__fail
[2020-11-25 13:57:23,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DiceToken__success
[2020-11-25 13:57:23,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DiceToken__fail
[2020-11-25 13:57:23,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DiceToken__success
[2020-11-25 13:57:23,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DiceToken__fail
[2020-11-25 13:57:23,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DiceToken__success
[2020-11-25 13:57:23,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_DiceToken__fail
[2020-11-25 13:57:23,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_DiceToken__success
[2020-11-25 13:57:23,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 13:57:23,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 13:57:23,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 13:57:23,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 13:57:23,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 13:57:23,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 13:57:23,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 13:57:23,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 13:57:23,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 13:57:23,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 13:57:23,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 13:57:23,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 13:57:23,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 13:57:23,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 13:57:23,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DiceToken
[2020-11-25 13:57:23,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 13:57:23,147 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 13:57:23,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 13:57:23,519 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:57:23,632 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:57:23,632 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:57:23,632 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:57:23,714 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 13:57:23,715 INFO  L286             CfgBuilder]: Removed 4 assue(true) statements.
[2020-11-25 13:57:23,716 INFO  L202        PluginConnector]: Adding new model DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:57:23 BoogieIcfgContainer
[2020-11-25 13:57:23,717 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:57:23" (2/2) ...
[2020-11-25 13:57:23,717 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 13:57:23,717 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@502acff and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:57:23, skipping insertion in model container
[2020-11-25 13:57:23,717 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 13:57:23,717 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 13:57:23,717 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 13:57:23,719 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 13:57:23,719 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:57:22" (1/3) ...
[2020-11-25 13:57:23,719 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@2e0211e0 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:57:23, skipping insertion in model container
[2020-11-25 13:57:23,719 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:57:23" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 13:57:23,754 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:57:23 NWAContainer
[2020-11-25 13:57:23,754 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 13:57:23,755 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 13:57:23,755 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 13:57:23,756 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 13:57:23,756 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:57:23" (3/4) ...
[2020-11-25 13:57:23,757 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@62880c97 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:57:23, skipping insertion in model container
[2020-11-25 13:57:23,757 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:57:23" (4/4) ...
[2020-11-25 13:57:23,760 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 13:57:23,763 INFO  L110   BuchiProductObserver]: Initial RCFG 1193 locations, 1490 edges
[2020-11-25 13:57:23,763 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 13:57:23,774 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 13:57:24,940 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 13:57:24,943 INFO  L110   BuchiProductObserver]: BuchiProgram size 2836 locations, 4822 edges
[2020-11-25 13:57:24,943 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:57:24 BoogieIcfgContainer
[2020-11-25 13:57:24,944 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 13:57:24,944 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 13:57:24,944 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 13:57:24,945 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 13:57:24,946 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:57:24" (1/1) ...
[2020-11-25 13:57:25,009 INFO  L313           BlockEncoder]: Initial Icfg 2836 locations, 4822 edges
[2020-11-25 13:57:25,010 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 13:57:25,010 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 13:57:25,010 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 13:57:25,011 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 13:57:25,022 INFO  L70    emoveInfeasibleEdges]: Removed 51 edges and 11 locations because of local infeasibility
[2020-11-25 13:57:25,034 INFO  L70        RemoveSinkStates]: Removed 8 edges and 5 locations by removing sink states
[2020-11-25 13:57:25,045 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 13:57:25,049 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 13:57:25,052 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 13:57:25,052 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 13:57:25,057 INFO  L313           BlockEncoder]: Encoded RCFG 2802 locations, 4737 edges
[2020-11-25 13:57:25,057 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:57:25 BasicIcfg
[2020-11-25 13:57:25,057 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 13:57:25,057 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 13:57:25,057 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 13:57:25,060 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 13:57:25,060 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:57:25,060 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:57:22" (1/6) ...
[2020-11-25 13:57:25,062 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@578e1f1 and model type DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:57:25, skipping insertion in model container
[2020-11-25 13:57:25,062 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:57:25,062 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:57:23" (2/6) ...
[2020-11-25 13:57:25,063 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@578e1f1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:57:25, skipping insertion in model container
[2020-11-25 13:57:25,063 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:57:25,063 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:57:23" (3/6) ...
[2020-11-25 13:57:25,063 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@578e1f1 and model type DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:57:25, skipping insertion in model container
[2020-11-25 13:57:25,063 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:57:25,063 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:57:23" (4/6) ...
[2020-11-25 13:57:25,063 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@578e1f1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:57:25, skipping insertion in model container
[2020-11-25 13:57:25,063 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:57:25,063 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:57:24" (5/6) ...
[2020-11-25 13:57:25,064 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@578e1f1 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 01:57:25, skipping insertion in model container
[2020-11-25 13:57:25,064 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:57:25,064 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:57:25" (6/6) ...
[2020-11-25 13:57:25,065 INFO  L404   chiAutomizerObserver]: Analyzing ICFG DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transferfrom-normal.bpl_BEv2
[2020-11-25 13:57:25,104 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 13:57:25,104 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 13:57:25,104 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 13:57:25,105 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 13:57:25,105 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 13:57:25,105 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 13:57:25,105 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 13:57:25,105 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 13:57:25,105 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 13:57:25,137 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2802 states.
[2020-11-25 13:57:25,181 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:57:25,181 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:57:25,181 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:57:25,189 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:57:25,189 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:57:25,189 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 13:57:25,189 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2802 states.
[2020-11-25 13:57:25,212 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:57:25,213 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:57:25,213 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:57:25,215 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:57:25,215 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_DiceToken0 := false;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3295]              assume null == 0;
[L3296]  CALL        call this := FreshRefGenerator__success();
[L1536]              havoc newRef;
[L1537]              assume Alloc[newRef] == false;
[L1538]              Alloc[newRef] := true;
[L1539]              assume newRef != null;
[L3296]  RET         call this := FreshRefGenerator__success();
[L3297]              assume now >= 0;
[L3298]              assume DType[this] == DiceToken;
[L3299]              assume msgvalue_MSG == 0;
[L3300]              gas := gas - 53000;
[L3301]  CALL        call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L502]               havoc __exception;
[L503]               revert := false;
[L504]   COND FALSE  !(__exception)
[L527]   CALL        call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1672]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1657]              assume msgsender_MSG != null;
[L1658]              Balance[this] := 0;
[L1672]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]  COND FALSE  !(revert)
[L1854]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1855]  COND TRUE   revert
[L527]   RET         call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L528]               assume !revert && gas >= 0;
[L3301]  RET         call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L3302]              assume !revert && gas >= 0;

Loop:
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND TRUE   choice == 15
[L3194]              gas := gas - 21000;
[L3195]  COND FALSE  !(gas >= 0)
[L3305]  RET         call CorralChoice_DiceToken(this);

[2020-11-25 13:57:25,232 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:57:25,232 INFO  L82        PathProgramCache]: Analyzing trace with hash 1050169371, now seen corresponding path program 1 times
[2020-11-25 13:57:25,237 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:57:25,257 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:57:25,297 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 13:57:25,299 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:57:25,299 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 13:57:25,403 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:57:25,415 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 13:57:25,416 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 13:57:25,417 INFO  L87              Difference]: Start difference. First operand 2802 states. Second operand 4 states.
[2020-11-25 13:57:25,739 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:57:25,739 INFO  L93              Difference]: Finished difference Result 1947 states and 2126 transitions.
[2020-11-25 13:57:25,739 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 13:57:25,741 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1947 states and 2126 transitions.
[2020-11-25 13:57:25,752 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:57:25,770 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1947 states to 1947 states and 2126 transitions.
[2020-11-25 13:57:25,771 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 13:57:25,773 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 647
[2020-11-25 13:57:25,774 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1947 states and 2126 transitions.
[2020-11-25 13:57:25,781 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:57:25,781 INFO  L728         BuchiCegarLoop]: Abstraction has 1947 states and 2126 transitions.
[2020-11-25 13:57:25,799 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1947 states and 2126 transitions.
[2020-11-25 13:57:25,839 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1947 to 1947.
[2020-11-25 13:57:25,840 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1947 states.
[2020-11-25 13:57:25,844 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1947 states to 1947 states and 2126 transitions.
[2020-11-25 13:57:25,845 INFO  L751         BuchiCegarLoop]: Abstraction has 1947 states and 2126 transitions.
[2020-11-25 13:57:25,845 INFO  L631         BuchiCegarLoop]: Abstraction has 1947 states and 2126 transitions.
[2020-11-25 13:57:25,846 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 13:57:25,846 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1947 states and 2126 transitions.
[2020-11-25 13:57:25,853 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:57:25,854 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:57:25,854 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:57:25,856 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:57:25,856 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_DiceToken0 := false;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3295]              assume null == 0;
[L3296]  CALL        call this := FreshRefGenerator__success();
[L1536]              havoc newRef;
[L1537]              assume Alloc[newRef] == false;
[L1538]              Alloc[newRef] := true;
[L1539]              assume newRef != null;
[L3296]  RET         call this := FreshRefGenerator__success();
[L3297]              assume now >= 0;
[L3298]              assume DType[this] == DiceToken;
[L3299]              assume msgvalue_MSG == 0;
[L3300]              gas := gas - 53000;
[L3301]  CALL        call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L502]               havoc __exception;
[L503]               revert := false;
[L504]   COND FALSE  !(__exception)
[L527]   CALL        call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1672]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1657]              assume msgsender_MSG != null;
[L1658]              Balance[this] := 0;
[L1672]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]  COND FALSE  !(revert)
[L1854]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1855]  COND TRUE   revert
[L527]   RET         call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L528]               assume !revert && gas >= 0;
[L3301]  RET         call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L3302]              assume !revert && gas >= 0;
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND FALSE  !(choice == 12)
[L3218]  COND FALSE  !(choice == 11)
[L3225]  COND TRUE   choice == 10
[L3226]              gas := gas - 21000;
[L3227]  COND TRUE   gas >= 0
[L3228]              assume tokens_s453 >= 0 && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3229]              assume msgvalue_MSG == 0;
[L3230]  CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s453 && p1 != to_s453) && (p2 != from_s453 || p3 != msgsender_MSG)) && from_s453 != to_s453) && tokens_s453 <= balances_DiceToken[this][from_s453]) && tokens_s453 <= allowed_DiceToken[this][from_s453][msgsender_MSG]) && balances_DiceToken[this][to_s453] + tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s453 >= 0) && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s453] >= 0) && balances_DiceToken[this][to_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][from_s453] >= 0) && balances_DiceToken[this][from_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_DiceToken[this][from_s453][msgsender_MSG] >= 0) && allowed_DiceToken[this][from_s453][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DiceToken0 := true;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L780]               havoc __exception;
[L781]               revert := false;
[L782]   COND FALSE  !(__exception)
[L805]   CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L1995]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][from_s453], tokens_s453);
[L1603]  COND TRUE   !(b_s45 <= a_s45)
[L1604]              revert := true;
[L1995]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][from_s453], tokens_s453);
[L1996]  COND TRUE   revert
[L805]   RET         call success_s453 := transferFrom~address~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L806]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s453 == true && balances_DiceToken[this][from_s453] == old(balances_DiceToken[this][from_s453]) - tokens_s453) && balances_DiceToken[this][to_s453] == old(balances_DiceToken[this][to_s453]) + tokens_s453) && allowed_DiceToken[this][from_s453][msgsender_MSG] == old(allowed_DiceToken[this][from_s453][msgsender_MSG]) - tokens_s453) && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this])) && balances_DiceToken[this][p1] == old(balances_DiceToken[this][p1])) && allowed_DiceToken[this][p2][p3] == old(allowed_DiceToken[this][p2][p3])) && symbol_DiceToken[this] == old(symbol_DiceToken[this])) && name_DiceToken[this] == old(name_DiceToken[this])) && decimals_DiceToken[this] == old(decimals_DiceToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L3230]  RET         call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3305]  RET         call CorralChoice_DiceToken(this);

Loop:
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND FALSE  !(choice == 12)
[L3218]  COND FALSE  !(choice == 11)
[L3225]  COND TRUE   choice == 10
[L3226]              gas := gas - 21000;
[L3227]  COND TRUE   gas >= 0
[L3228]              assume tokens_s453 >= 0 && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3229]              assume msgvalue_MSG == 0;
[L3230]  CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s453 && p1 != to_s453) && (p2 != from_s453 || p3 != msgsender_MSG)) && from_s453 != to_s453) && tokens_s453 <= balances_DiceToken[this][from_s453]) && tokens_s453 <= allowed_DiceToken[this][from_s453][msgsender_MSG]) && balances_DiceToken[this][to_s453] + tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s453 >= 0) && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s453] >= 0) && balances_DiceToken[this][to_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][from_s453] >= 0) && balances_DiceToken[this][from_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_DiceToken[this][from_s453][msgsender_MSG] >= 0) && allowed_DiceToken[this][from_s453][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DiceToken0 := true;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L780]               havoc __exception;
[L781]               revert := false;
[L782]   COND FALSE  !(__exception)
[L805]   CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L1995]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][from_s453], tokens_s453);
[L1603]  COND TRUE   !(b_s45 <= a_s45)
[L1604]              revert := true;
[L1995]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][from_s453], tokens_s453);
[L1996]  COND TRUE   revert
[L805]   RET         call success_s453 := transferFrom~address~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L806]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s453 == true && balances_DiceToken[this][from_s453] == old(balances_DiceToken[this][from_s453]) - tokens_s453) && balances_DiceToken[this][to_s453] == old(balances_DiceToken[this][to_s453]) + tokens_s453) && allowed_DiceToken[this][from_s453][msgsender_MSG] == old(allowed_DiceToken[this][from_s453][msgsender_MSG]) - tokens_s453) && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this])) && balances_DiceToken[this][p1] == old(balances_DiceToken[this][p1])) && allowed_DiceToken[this][p2][p3] == old(allowed_DiceToken[this][p2][p3])) && symbol_DiceToken[this] == old(symbol_DiceToken[this])) && name_DiceToken[this] == old(name_DiceToken[this])) && decimals_DiceToken[this] == old(decimals_DiceToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L3230]  RET         call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3305]  RET         call CorralChoice_DiceToken(this);

[2020-11-25 13:57:25,861 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:57:25,861 INFO  L82        PathProgramCache]: Analyzing trace with hash -740920564, now seen corresponding path program 1 times
[2020-11-25 13:57:25,863 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:57:25,873 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:57:25,896 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 13:57:25,897 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:57:25,897 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 13:57:25,898 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:57:25,898 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 13:57:25,899 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 13:57:25,899 INFO  L87              Difference]: Start difference. First operand 1947 states and 2126 transitions. cyclomatic complexity: 181 Second operand 4 states.
[2020-11-25 13:57:26,281 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:57:26,281 INFO  L93              Difference]: Finished difference Result 2831 states and 3210 transitions.
[2020-11-25 13:57:26,281 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 13:57:26,282 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2831 states and 3210 transitions.
[2020-11-25 13:57:26,294 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 13:57:26,307 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2831 states to 2739 states and 3110 transitions.
[2020-11-25 13:57:26,307 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 877
[2020-11-25 13:57:26,308 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 887
[2020-11-25 13:57:26,308 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2739 states and 3110 transitions.
[2020-11-25 13:57:26,314 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:57:26,314 INFO  L728         BuchiCegarLoop]: Abstraction has 2739 states and 3110 transitions.
[2020-11-25 13:57:26,317 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2739 states and 3110 transitions.
[2020-11-25 13:57:26,342 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2739 to 1987.
[2020-11-25 13:57:26,342 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1987 states.
[2020-11-25 13:57:26,344 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1987 states to 1987 states and 2126 transitions.
[2020-11-25 13:57:26,345 INFO  L751         BuchiCegarLoop]: Abstraction has 1987 states and 2126 transitions.
[2020-11-25 13:57:26,345 INFO  L631         BuchiCegarLoop]: Abstraction has 1987 states and 2126 transitions.
[2020-11-25 13:57:26,345 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 13:57:26,345 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1987 states and 2126 transitions.
[2020-11-25 13:57:26,349 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:57:26,349 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:57:26,349 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:57:26,350 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:57:26,351 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_DiceToken0 := false;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3295]              assume null == 0;
[L3296]  CALL        call this := FreshRefGenerator__success();
[L1536]              havoc newRef;
[L1537]              assume Alloc[newRef] == false;
[L1538]              Alloc[newRef] := true;
[L1539]              assume newRef != null;
[L3296]  RET         call this := FreshRefGenerator__success();
[L3297]              assume now >= 0;
[L3298]              assume DType[this] == DiceToken;
[L3299]              assume msgvalue_MSG == 0;
[L3300]              gas := gas - 53000;
[L3301]  CALL        call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L502]               havoc __exception;
[L503]               revert := false;
[L504]   COND FALSE  !(__exception)
[L527]   CALL        call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1672]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1657]              assume msgsender_MSG != null;
[L1658]              Balance[this] := 0;
[L1672]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]  COND FALSE  !(revert)
[L1854]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1855]  COND FALSE  !(revert)
[L1858]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1692]              assume msgsender_MSG != null;
[L1693]              Balance[this] := 0;
[L1694]              owner_Owned[this] := null;
[L1695]              newOwner_Owned[this] := null;
[L1697]              owner_Owned[this] := msgsender_MSG;
[L1710]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]  COND FALSE  !(revert)
[L1858]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1859]  COND FALSE  !(revert)
[L1862]  CALL        call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1812]              assume msgsender_MSG != null;
[L1813]              Balance[this] := 0;
[L1814]              symbol_DiceToken[this] := 31320490;
[L1815]              name_DiceToken[this] := 31320490;
[L1816]              decimals_DiceToken[this] := 0;
[L1817]              _totalSupply_DiceToken[this] := 0;
[L1818]              balances_DiceToken[this] := zeroRefintArr();
[L1819]              sum_balances0[this] := 0;
[L1820]              allowed_DiceToken[this] := zeroRefRefintArr();
[L1821]              sum_allowed1[this] := 0;
[L1823]              decimals_DiceToken[this] := 18;
[L1824]              symbol_DiceToken[this] := 884691297;
[L1825]              name_DiceToken[this] := 869301625;
[L1826]              __var_2 := decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]              _totalSupply_DiceToken[this] := 30678 * (nonlinearPow(10, decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1828]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][owner_Owned[this]];
[L1829]              balances_DiceToken[this][owner_Owned[this]] := _totalSupply_DiceToken[this];
[L1830]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][owner_Owned[this]];
[L1831]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1862]  RET         call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1863]  COND FALSE  !(revert)
[L527]   RET         call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L528]               assume !revert && gas >= 0;
[L3301]  RET         call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L3302]              assume !revert && gas >= 0;
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND FALSE  !(choice == 12)
[L3218]  COND FALSE  !(choice == 11)
[L3225]  COND TRUE   choice == 10
[L3226]              gas := gas - 21000;
[L3227]  COND TRUE   gas >= 0
[L3228]              assume tokens_s453 >= 0 && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3229]              assume msgvalue_MSG == 0;
[L3230]  CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s453 && p1 != to_s453) && (p2 != from_s453 || p3 != msgsender_MSG)) && from_s453 != to_s453) && tokens_s453 <= balances_DiceToken[this][from_s453]) && tokens_s453 <= allowed_DiceToken[this][from_s453][msgsender_MSG]) && balances_DiceToken[this][to_s453] + tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s453 >= 0) && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s453] >= 0) && balances_DiceToken[this][to_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][from_s453] >= 0) && balances_DiceToken[this][from_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_DiceToken[this][from_s453][msgsender_MSG] >= 0) && allowed_DiceToken[this][from_s453][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DiceToken0 := true;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L780]               havoc __exception;
[L781]               revert := false;
[L782]   COND TRUE   __exception
[L783]               __tmp__Balance := Balance;
[L784]               __tmp__DType := DType;
[L785]               __tmp__Alloc := Alloc;
[L786]               __tmp__balance_ADDR := balance_ADDR;
[L787]               __tmp__M_Ref_int := M_Ref_int;
[L788]               __tmp__sum_balances0 := sum_balances0;
[L789]               __tmp__alloc_allowed_DiceToken_lvl0 := alloc_allowed_DiceToken_lvl0;
[L790]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L791]               __tmp__sum_allowed1 := sum_allowed1;
[L792]               __tmp__Length := Length;
[L793]               __tmp__now := now;
[L794]               __tmp__owner_Owned := owner_Owned;
[L795]               __tmp__newOwner_Owned := newOwner_Owned;
[L796]               __tmp__symbol_DiceToken := symbol_DiceToken;
[L797]               __tmp__name_DiceToken := name_DiceToken;
[L798]               __tmp__decimals_DiceToken := decimals_DiceToken;
[L799]               __tmp___totalSupply_DiceToken := _totalSupply_DiceToken;
[L800]               __tmp__balances_DiceToken := balances_DiceToken;
[L801]               __tmp__allowed_DiceToken := allowed_DiceToken;
[L802]   CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L1965]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][from_s453], tokens_s453);
[L1594]  COND TRUE   !(b_s45 <= a_s45)
[L1595]              revert := true;
[L1965]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][from_s453], tokens_s453);
[L1966]  COND TRUE   revert
[L802]   RET         call success_s453 := transferFrom~address~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L803]               assume revert || gas < 0;
[L3230]  RET         call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3305]  RET         call CorralChoice_DiceToken(this);

Loop:
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND FALSE  !(choice == 12)
[L3218]  COND FALSE  !(choice == 11)
[L3225]  COND TRUE   choice == 10
[L3226]              gas := gas - 21000;
[L3227]  COND TRUE   gas >= 0
[L3228]              assume tokens_s453 >= 0 && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3229]              assume msgvalue_MSG == 0;
[L3230]  CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s453 && p1 != to_s453) && (p2 != from_s453 || p3 != msgsender_MSG)) && from_s453 != to_s453) && tokens_s453 <= balances_DiceToken[this][from_s453]) && tokens_s453 <= allowed_DiceToken[this][from_s453][msgsender_MSG]) && balances_DiceToken[this][to_s453] + tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s453 >= 0) && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s453] >= 0) && balances_DiceToken[this][to_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][from_s453] >= 0) && balances_DiceToken[this][from_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_DiceToken[this][from_s453][msgsender_MSG] >= 0) && allowed_DiceToken[this][from_s453][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DiceToken0 := true;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L780]               havoc __exception;
[L781]               revert := false;
[L782]   COND TRUE   __exception
[L783]               __tmp__Balance := Balance;
[L784]               __tmp__DType := DType;
[L785]               __tmp__Alloc := Alloc;
[L786]               __tmp__balance_ADDR := balance_ADDR;
[L787]               __tmp__M_Ref_int := M_Ref_int;
[L788]               __tmp__sum_balances0 := sum_balances0;
[L789]               __tmp__alloc_allowed_DiceToken_lvl0 := alloc_allowed_DiceToken_lvl0;
[L790]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L791]               __tmp__sum_allowed1 := sum_allowed1;
[L792]               __tmp__Length := Length;
[L793]               __tmp__now := now;
[L794]               __tmp__owner_Owned := owner_Owned;
[L795]               __tmp__newOwner_Owned := newOwner_Owned;
[L796]               __tmp__symbol_DiceToken := symbol_DiceToken;
[L797]               __tmp__name_DiceToken := name_DiceToken;
[L798]               __tmp__decimals_DiceToken := decimals_DiceToken;
[L799]               __tmp___totalSupply_DiceToken := _totalSupply_DiceToken;
[L800]               __tmp__balances_DiceToken := balances_DiceToken;
[L801]               __tmp__allowed_DiceToken := allowed_DiceToken;
[L802]   CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L1965]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][from_s453], tokens_s453);
[L1594]  COND TRUE   !(b_s45 <= a_s45)
[L1595]              revert := true;
[L1965]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][from_s453], tokens_s453);
[L1966]  COND TRUE   revert
[L802]   RET         call success_s453 := transferFrom~address~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L803]               assume revert || gas < 0;
[L3230]  RET         call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3305]  RET         call CorralChoice_DiceToken(this);

[2020-11-25 13:57:26,354 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:57:26,354 INFO  L82        PathProgramCache]: Analyzing trace with hash -735587079, now seen corresponding path program 1 times
[2020-11-25 13:57:26,355 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:57:26,368 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:57:26,422 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 13:57:26,422 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:57:26,422 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 13:57:26,422 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:57:26,422 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 13:57:26,422 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 13:57:26,423 INFO  L87              Difference]: Start difference. First operand 1987 states and 2126 transitions. cyclomatic complexity: 141 Second operand 7 states.
[2020-11-25 13:57:27,285 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:57:27,285 INFO  L93              Difference]: Finished difference Result 2165 states and 2320 transitions.
[2020-11-25 13:57:27,285 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 13:57:27,286 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2165 states and 2320 transitions.
[2020-11-25 13:57:27,295 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:57:27,303 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2165 states to 2165 states and 2320 transitions.
[2020-11-25 13:57:27,303 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 734
[2020-11-25 13:57:27,303 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 734
[2020-11-25 13:57:27,303 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2165 states and 2320 transitions.
[2020-11-25 13:57:27,305 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:57:27,305 INFO  L728         BuchiCegarLoop]: Abstraction has 2165 states and 2320 transitions.
[2020-11-25 13:57:27,307 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2165 states and 2320 transitions.
[2020-11-25 13:57:27,345 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2165 to 2043.
[2020-11-25 13:57:27,345 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2043 states.
[2020-11-25 13:57:27,349 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2043 states to 2043 states and 2186 transitions.
[2020-11-25 13:57:27,350 INFO  L751         BuchiCegarLoop]: Abstraction has 2043 states and 2186 transitions.
[2020-11-25 13:57:27,350 INFO  L631         BuchiCegarLoop]: Abstraction has 2043 states and 2186 transitions.
[2020-11-25 13:57:27,350 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 13:57:27,350 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2043 states and 2186 transitions.
[2020-11-25 13:57:27,354 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:57:27,354 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:57:27,354 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:57:27,356 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:57:27,356 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_DiceToken0 := false;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3295]              assume null == 0;
[L3296]  CALL        call this := FreshRefGenerator__success();
[L1536]              havoc newRef;
[L1537]              assume Alloc[newRef] == false;
[L1538]              Alloc[newRef] := true;
[L1539]              assume newRef != null;
[L3296]  RET         call this := FreshRefGenerator__success();
[L3297]              assume now >= 0;
[L3298]              assume DType[this] == DiceToken;
[L3299]              assume msgvalue_MSG == 0;
[L3300]              gas := gas - 53000;
[L3301]  CALL        call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L502]               havoc __exception;
[L503]               revert := false;
[L504]   COND FALSE  !(__exception)
[L527]   CALL        call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1672]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1657]              assume msgsender_MSG != null;
[L1658]              Balance[this] := 0;
[L1672]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]  COND FALSE  !(revert)
[L1854]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1855]  COND FALSE  !(revert)
[L1858]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1692]              assume msgsender_MSG != null;
[L1693]              Balance[this] := 0;
[L1694]              owner_Owned[this] := null;
[L1695]              newOwner_Owned[this] := null;
[L1697]              owner_Owned[this] := msgsender_MSG;
[L1710]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]  COND FALSE  !(revert)
[L1858]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1859]  COND FALSE  !(revert)
[L1862]  CALL        call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1812]              assume msgsender_MSG != null;
[L1813]              Balance[this] := 0;
[L1814]              symbol_DiceToken[this] := 31320490;
[L1815]              name_DiceToken[this] := 31320490;
[L1816]              decimals_DiceToken[this] := 0;
[L1817]              _totalSupply_DiceToken[this] := 0;
[L1818]              balances_DiceToken[this] := zeroRefintArr();
[L1819]              sum_balances0[this] := 0;
[L1820]              allowed_DiceToken[this] := zeroRefRefintArr();
[L1821]              sum_allowed1[this] := 0;
[L1823]              decimals_DiceToken[this] := 18;
[L1824]              symbol_DiceToken[this] := 884691297;
[L1825]              name_DiceToken[this] := 869301625;
[L1826]              __var_2 := decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]              _totalSupply_DiceToken[this] := 30678 * (nonlinearPow(10, decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1828]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][owner_Owned[this]];
[L1829]              balances_DiceToken[this][owner_Owned[this]] := _totalSupply_DiceToken[this];
[L1830]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][owner_Owned[this]];
[L1831]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1862]  RET         call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1863]  COND FALSE  !(revert)
[L527]   RET         call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L528]               assume !revert && gas >= 0;
[L3301]  RET         call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L3302]              assume !revert && gas >= 0;
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND FALSE  !(choice == 12)
[L3218]  COND FALSE  !(choice == 11)
[L3225]  COND TRUE   choice == 10
[L3226]              gas := gas - 21000;
[L3227]  COND TRUE   gas >= 0
[L3228]              assume tokens_s453 >= 0 && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3229]              assume msgvalue_MSG == 0;
[L3230]  CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s453 && p1 != to_s453) && (p2 != from_s453 || p3 != msgsender_MSG)) && from_s453 != to_s453) && tokens_s453 <= balances_DiceToken[this][from_s453]) && tokens_s453 <= allowed_DiceToken[this][from_s453][msgsender_MSG]) && balances_DiceToken[this][to_s453] + tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s453 >= 0) && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s453] >= 0) && balances_DiceToken[this][to_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][from_s453] >= 0) && balances_DiceToken[this][from_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_DiceToken[this][from_s453][msgsender_MSG] >= 0) && allowed_DiceToken[this][from_s453][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DiceToken0 := true;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L780]               havoc __exception;
[L781]               revert := false;
[L782]   COND FALSE  !(__exception)
[L805]   CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L1995]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][from_s453], tokens_s453);
[L1603]  COND FALSE  !(!(b_s45 <= a_s45))
[L1607]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1995]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][from_s453], tokens_s453);
[L1996]  COND FALSE  !(revert)
[L1999]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][from_s453];
[L2000]              balances_DiceToken[this][from_s453] := __var_6;
[L2001]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][from_s453];
[L2002]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L1603]  COND FALSE  !(!(b_s45 <= a_s45))
[L1607]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2002]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L2003]  COND FALSE  !(revert)
[L2006]              sum_allowed1[from_s453] := sum_allowed1[from_s453] - allowed_DiceToken[this][from_s453][msgsender_MSG];
[L2007]              allowed_DiceToken[this][from_s453][msgsender_MSG] := __var_7;
[L2008]              sum_allowed1[from_s453] := sum_allowed1[from_s453] + allowed_DiceToken[this][from_s453][msgsender_MSG];
[L2009]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s453], tokens_s453);
[L1585]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1586]  COND FALSE  !(!(c_s23 >= a_s23))
[L2009]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s453], tokens_s453);
[L2010]  COND FALSE  !(revert)
[L2013]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][to_s453];
[L2014]              balances_DiceToken[this][to_s453] := __var_8;
[L2015]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][to_s453];
[L2016]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L2017]              success_s453 := true;
[L805]   RET         call success_s453 := transferFrom~address~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L806]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s453 == true && balances_DiceToken[this][from_s453] == old(balances_DiceToken[this][from_s453]) - tokens_s453) && balances_DiceToken[this][to_s453] == old(balances_DiceToken[this][to_s453]) + tokens_s453) && allowed_DiceToken[this][from_s453][msgsender_MSG] == old(allowed_DiceToken[this][from_s453][msgsender_MSG]) - tokens_s453) && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this])) && balances_DiceToken[this][p1] == old(balances_DiceToken[this][p1])) && allowed_DiceToken[this][p2][p3] == old(allowed_DiceToken[this][p2][p3])) && symbol_DiceToken[this] == old(symbol_DiceToken[this])) && name_DiceToken[this] == old(name_DiceToken[this])) && decimals_DiceToken[this] == old(decimals_DiceToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L3230]  RET         call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3305]  RET         call CorralChoice_DiceToken(this);

Loop:
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND FALSE  !(choice == 12)
[L3218]  COND FALSE  !(choice == 11)
[L3225]  COND TRUE   choice == 10
[L3226]              gas := gas - 21000;
[L3227]  COND TRUE   gas >= 0
[L3228]              assume tokens_s453 >= 0 && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3229]              assume msgvalue_MSG == 0;
[L3230]  CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s453 && p1 != to_s453) && (p2 != from_s453 || p3 != msgsender_MSG)) && from_s453 != to_s453) && tokens_s453 <= balances_DiceToken[this][from_s453]) && tokens_s453 <= allowed_DiceToken[this][from_s453][msgsender_MSG]) && balances_DiceToken[this][to_s453] + tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s453 >= 0) && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s453] >= 0) && balances_DiceToken[this][to_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][from_s453] >= 0) && balances_DiceToken[this][from_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_DiceToken[this][from_s453][msgsender_MSG] >= 0) && allowed_DiceToken[this][from_s453][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DiceToken0 := true;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L780]               havoc __exception;
[L781]               revert := false;
[L782]   COND FALSE  !(__exception)
[L805]   CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L1995]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][from_s453], tokens_s453);
[L1603]  COND FALSE  !(!(b_s45 <= a_s45))
[L1607]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1995]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][from_s453], tokens_s453);
[L1996]  COND FALSE  !(revert)
[L1999]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][from_s453];
[L2000]              balances_DiceToken[this][from_s453] := __var_6;
[L2001]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][from_s453];
[L2002]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L1603]  COND FALSE  !(!(b_s45 <= a_s45))
[L1607]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2002]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L2003]  COND FALSE  !(revert)
[L2006]              sum_allowed1[from_s453] := sum_allowed1[from_s453] - allowed_DiceToken[this][from_s453][msgsender_MSG];
[L2007]              allowed_DiceToken[this][from_s453][msgsender_MSG] := __var_7;
[L2008]              sum_allowed1[from_s453] := sum_allowed1[from_s453] + allowed_DiceToken[this][from_s453][msgsender_MSG];
[L2009]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s453], tokens_s453);
[L1585]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1586]  COND FALSE  !(!(c_s23 >= a_s23))
[L2009]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s453], tokens_s453);
[L2010]  COND FALSE  !(revert)
[L2013]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][to_s453];
[L2014]              balances_DiceToken[this][to_s453] := __var_8;
[L2015]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][to_s453];
[L2016]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L2017]              success_s453 := true;
[L805]   RET         call success_s453 := transferFrom~address~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L806]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s453 == true && balances_DiceToken[this][from_s453] == old(balances_DiceToken[this][from_s453]) - tokens_s453) && balances_DiceToken[this][to_s453] == old(balances_DiceToken[this][to_s453]) + tokens_s453) && allowed_DiceToken[this][from_s453][msgsender_MSG] == old(allowed_DiceToken[this][from_s453][msgsender_MSG]) - tokens_s453) && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this])) && balances_DiceToken[this][p1] == old(balances_DiceToken[this][p1])) && allowed_DiceToken[this][p2][p3] == old(allowed_DiceToken[this][p2][p3])) && symbol_DiceToken[this] == old(symbol_DiceToken[this])) && name_DiceToken[this] == old(name_DiceToken[this])) && decimals_DiceToken[this] == old(decimals_DiceToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L3230]  RET         call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3305]  RET         call CorralChoice_DiceToken(this);

[2020-11-25 13:57:27,367 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:57:27,367 INFO  L82        PathProgramCache]: Analyzing trace with hash 351380449, now seen corresponding path program 1 times
[2020-11-25 13:57:27,368 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:57:27,445 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:57:28,619 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 1 proven. 2 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 13:57:28,619 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 13:57:28,620 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-11-25 13:57:28,620 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:57:28,620 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 13:57:28,621 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=68, Invalid=634, Unknown=0, NotChecked=0, Total=702
[2020-11-25 13:57:28,621 INFO  L87              Difference]: Start difference. First operand 2043 states and 2186 transitions. cyclomatic complexity: 145 Second operand 27 states.
[2020-11-25 13:57:34,257 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:57:34,257 INFO  L93              Difference]: Finished difference Result 2146 states and 2319 transitions.
[2020-11-25 13:57:34,257 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-11-25 13:57:34,257 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2146 states and 2319 transitions.
[2020-11-25 13:57:34,262 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 13:57:34,268 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2146 states to 2146 states and 2319 transitions.
[2020-11-25 13:57:34,269 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 714
[2020-11-25 13:57:34,269 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 714
[2020-11-25 13:57:34,269 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2146 states and 2319 transitions.
[2020-11-25 13:57:34,271 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:57:34,271 INFO  L728         BuchiCegarLoop]: Abstraction has 2146 states and 2319 transitions.
[2020-11-25 13:57:34,273 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2146 states and 2319 transitions.
[2020-11-25 13:57:34,287 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2146 to 2113.
[2020-11-25 13:57:34,287 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2113 states.
[2020-11-25 13:57:34,289 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2113 states to 2113 states and 2266 transitions.
[2020-11-25 13:57:34,289 INFO  L751         BuchiCegarLoop]: Abstraction has 2113 states and 2266 transitions.
[2020-11-25 13:57:34,289 INFO  L631         BuchiCegarLoop]: Abstraction has 2113 states and 2266 transitions.
[2020-11-25 13:57:34,289 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 13:57:34,289 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2113 states and 2266 transitions.
[2020-11-25 13:57:34,293 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:57:34,293 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:57:34,293 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:57:34,295 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:57:34,295 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_DiceToken0 := false;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3295]              assume null == 0;
[L3296]  CALL        call this := FreshRefGenerator__success();
[L1536]              havoc newRef;
[L1537]              assume Alloc[newRef] == false;
[L1538]              Alloc[newRef] := true;
[L1539]              assume newRef != null;
[L3296]  RET         call this := FreshRefGenerator__success();
[L3297]              assume now >= 0;
[L3298]              assume DType[this] == DiceToken;
[L3299]              assume msgvalue_MSG == 0;
[L3300]              gas := gas - 53000;
[L3301]  CALL        call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L502]               havoc __exception;
[L503]               revert := false;
[L504]   COND FALSE  !(__exception)
[L527]   CALL        call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1672]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1657]              assume msgsender_MSG != null;
[L1658]              Balance[this] := 0;
[L1672]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]  COND FALSE  !(revert)
[L1854]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1855]  COND FALSE  !(revert)
[L1858]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1692]              assume msgsender_MSG != null;
[L1693]              Balance[this] := 0;
[L1694]              owner_Owned[this] := null;
[L1695]              newOwner_Owned[this] := null;
[L1697]              owner_Owned[this] := msgsender_MSG;
[L1710]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]  COND FALSE  !(revert)
[L1858]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1859]  COND FALSE  !(revert)
[L1862]  CALL        call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1812]              assume msgsender_MSG != null;
[L1813]              Balance[this] := 0;
[L1814]              symbol_DiceToken[this] := 31320490;
[L1815]              name_DiceToken[this] := 31320490;
[L1816]              decimals_DiceToken[this] := 0;
[L1817]              _totalSupply_DiceToken[this] := 0;
[L1818]              balances_DiceToken[this] := zeroRefintArr();
[L1819]              sum_balances0[this] := 0;
[L1820]              allowed_DiceToken[this] := zeroRefRefintArr();
[L1821]              sum_allowed1[this] := 0;
[L1823]              decimals_DiceToken[this] := 18;
[L1824]              symbol_DiceToken[this] := 884691297;
[L1825]              name_DiceToken[this] := 869301625;
[L1826]              __var_2 := decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]              _totalSupply_DiceToken[this] := 30678 * (nonlinearPow(10, decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1828]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][owner_Owned[this]];
[L1829]              balances_DiceToken[this][owner_Owned[this]] := _totalSupply_DiceToken[this];
[L1830]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][owner_Owned[this]];
[L1831]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1862]  RET         call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1863]  COND FALSE  !(revert)
[L527]   RET         call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L528]               assume !revert && gas >= 0;
[L3301]  RET         call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L3302]              assume !revert && gas >= 0;
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND FALSE  !(choice == 12)
[L3218]  COND FALSE  !(choice == 11)
[L3225]  COND TRUE   choice == 10
[L3226]              gas := gas - 21000;
[L3227]  COND TRUE   gas >= 0
[L3228]              assume tokens_s453 >= 0 && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3229]              assume msgvalue_MSG == 0;
[L3230]  CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s453 && p1 != to_s453) && (p2 != from_s453 || p3 != msgsender_MSG)) && from_s453 != to_s453) && tokens_s453 <= balances_DiceToken[this][from_s453]) && tokens_s453 <= allowed_DiceToken[this][from_s453][msgsender_MSG]) && balances_DiceToken[this][to_s453] + tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s453 >= 0) && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s453] >= 0) && balances_DiceToken[this][to_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][from_s453] >= 0) && balances_DiceToken[this][from_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_DiceToken[this][from_s453][msgsender_MSG] >= 0) && allowed_DiceToken[this][from_s453][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DiceToken0 := true;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L780]               havoc __exception;
[L781]               revert := false;
[L782]   COND TRUE   __exception
[L783]               __tmp__Balance := Balance;
[L784]               __tmp__DType := DType;
[L785]               __tmp__Alloc := Alloc;
[L786]               __tmp__balance_ADDR := balance_ADDR;
[L787]               __tmp__M_Ref_int := M_Ref_int;
[L788]               __tmp__sum_balances0 := sum_balances0;
[L789]               __tmp__alloc_allowed_DiceToken_lvl0 := alloc_allowed_DiceToken_lvl0;
[L790]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L791]               __tmp__sum_allowed1 := sum_allowed1;
[L792]               __tmp__Length := Length;
[L793]               __tmp__now := now;
[L794]               __tmp__owner_Owned := owner_Owned;
[L795]               __tmp__newOwner_Owned := newOwner_Owned;
[L796]               __tmp__symbol_DiceToken := symbol_DiceToken;
[L797]               __tmp__name_DiceToken := name_DiceToken;
[L798]               __tmp__decimals_DiceToken := decimals_DiceToken;
[L799]               __tmp___totalSupply_DiceToken := _totalSupply_DiceToken;
[L800]               __tmp__balances_DiceToken := balances_DiceToken;
[L801]               __tmp__allowed_DiceToken := allowed_DiceToken;
[L802]   CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L1965]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][from_s453], tokens_s453);
[L1594]  COND FALSE  !(!(b_s45 <= a_s45))
[L1598]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1965]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][from_s453], tokens_s453);
[L1966]  COND FALSE  !(revert)
[L1969]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_DiceToken[this][from_s453];
[L1970]              __tmp__balances_DiceToken[this][from_s453] := __var_6;
[L1971]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_DiceToken[this][from_s453];
[L1972]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L1594]  COND TRUE   !(b_s45 <= a_s45)
[L1595]              revert := true;
[L1972]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L1973]  COND TRUE   revert
[L802]   RET         call success_s453 := transferFrom~address~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L803]               assume revert || gas < 0;
[L3230]  RET         call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3305]  RET         call CorralChoice_DiceToken(this);

Loop:
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND FALSE  !(choice == 12)
[L3218]  COND FALSE  !(choice == 11)
[L3225]  COND TRUE   choice == 10
[L3226]              gas := gas - 21000;
[L3227]  COND TRUE   gas >= 0
[L3228]              assume tokens_s453 >= 0 && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3229]              assume msgvalue_MSG == 0;
[L3230]  CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s453 && p1 != to_s453) && (p2 != from_s453 || p3 != msgsender_MSG)) && from_s453 != to_s453) && tokens_s453 <= balances_DiceToken[this][from_s453]) && tokens_s453 <= allowed_DiceToken[this][from_s453][msgsender_MSG]) && balances_DiceToken[this][to_s453] + tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s453 >= 0) && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s453] >= 0) && balances_DiceToken[this][to_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][from_s453] >= 0) && balances_DiceToken[this][from_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_DiceToken[this][from_s453][msgsender_MSG] >= 0) && allowed_DiceToken[this][from_s453][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DiceToken0 := true;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L780]               havoc __exception;
[L781]               revert := false;
[L782]   COND TRUE   __exception
[L783]               __tmp__Balance := Balance;
[L784]               __tmp__DType := DType;
[L785]               __tmp__Alloc := Alloc;
[L786]               __tmp__balance_ADDR := balance_ADDR;
[L787]               __tmp__M_Ref_int := M_Ref_int;
[L788]               __tmp__sum_balances0 := sum_balances0;
[L789]               __tmp__alloc_allowed_DiceToken_lvl0 := alloc_allowed_DiceToken_lvl0;
[L790]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L791]               __tmp__sum_allowed1 := sum_allowed1;
[L792]               __tmp__Length := Length;
[L793]               __tmp__now := now;
[L794]               __tmp__owner_Owned := owner_Owned;
[L795]               __tmp__newOwner_Owned := newOwner_Owned;
[L796]               __tmp__symbol_DiceToken := symbol_DiceToken;
[L797]               __tmp__name_DiceToken := name_DiceToken;
[L798]               __tmp__decimals_DiceToken := decimals_DiceToken;
[L799]               __tmp___totalSupply_DiceToken := _totalSupply_DiceToken;
[L800]               __tmp__balances_DiceToken := balances_DiceToken;
[L801]               __tmp__allowed_DiceToken := allowed_DiceToken;
[L802]   CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L1965]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][from_s453], tokens_s453);
[L1594]  COND FALSE  !(!(b_s45 <= a_s45))
[L1598]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1965]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][from_s453], tokens_s453);
[L1966]  COND FALSE  !(revert)
[L1969]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_DiceToken[this][from_s453];
[L1970]              __tmp__balances_DiceToken[this][from_s453] := __var_6;
[L1971]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_DiceToken[this][from_s453];
[L1972]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L1594]  COND TRUE   !(b_s45 <= a_s45)
[L1595]              revert := true;
[L1972]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L1973]  COND TRUE   revert
[L802]   RET         call success_s453 := transferFrom~address~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L803]               assume revert || gas < 0;
[L3230]  RET         call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3305]  RET         call CorralChoice_DiceToken(this);

[2020-11-25 13:57:34,297 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:57:34,297 INFO  L82        PathProgramCache]: Analyzing trace with hash -155867353, now seen corresponding path program 1 times
[2020-11-25 13:57:34,298 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:57:34,305 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:57:34,334 INFO  L134       CoverageAnalysis]: Checked inductivity of 3 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 13:57:34,334 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:57:34,334 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 13:57:34,335 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:57:34,335 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 13:57:34,335 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 13:57:34,335 INFO  L87              Difference]: Start difference. First operand 2113 states and 2266 transitions. cyclomatic complexity: 157 Second operand 7 states.
[2020-11-25 13:57:34,690 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:57:34,690 INFO  L93              Difference]: Finished difference Result 2203 states and 2372 transitions.
[2020-11-25 13:57:34,690 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 13:57:34,690 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2203 states and 2372 transitions.
[2020-11-25 13:57:34,697 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 13:57:34,703 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2203 states to 2203 states and 2372 transitions.
[2020-11-25 13:57:34,703 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 752
[2020-11-25 13:57:34,704 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 752
[2020-11-25 13:57:34,704 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2203 states and 2372 transitions.
[2020-11-25 13:57:34,706 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:57:34,706 INFO  L728         BuchiCegarLoop]: Abstraction has 2203 states and 2372 transitions.
[2020-11-25 13:57:34,708 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2203 states and 2372 transitions.
[2020-11-25 13:57:34,723 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2203 to 2151.
[2020-11-25 13:57:34,724 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2151 states.
[2020-11-25 13:57:34,726 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2151 states to 2151 states and 2305 transitions.
[2020-11-25 13:57:34,726 INFO  L751         BuchiCegarLoop]: Abstraction has 2151 states and 2305 transitions.
[2020-11-25 13:57:34,726 INFO  L631         BuchiCegarLoop]: Abstraction has 2151 states and 2305 transitions.
[2020-11-25 13:57:34,726 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 13:57:34,726 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2151 states and 2305 transitions.
[2020-11-25 13:57:34,729 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:57:34,729 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:57:34,729 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:57:34,731 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:57:34,731 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_DiceToken0 := false;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3295]              assume null == 0;
[L3296]  CALL        call this := FreshRefGenerator__success();
[L1536]              havoc newRef;
[L1537]              assume Alloc[newRef] == false;
[L1538]              Alloc[newRef] := true;
[L1539]              assume newRef != null;
[L3296]  RET         call this := FreshRefGenerator__success();
[L3297]              assume now >= 0;
[L3298]              assume DType[this] == DiceToken;
[L3299]              assume msgvalue_MSG == 0;
[L3300]              gas := gas - 53000;
[L3301]  CALL        call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L502]               havoc __exception;
[L503]               revert := false;
[L504]   COND FALSE  !(__exception)
[L527]   CALL        call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1672]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1657]              assume msgsender_MSG != null;
[L1658]              Balance[this] := 0;
[L1672]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]  COND FALSE  !(revert)
[L1854]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1855]  COND FALSE  !(revert)
[L1858]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1692]              assume msgsender_MSG != null;
[L1693]              Balance[this] := 0;
[L1694]              owner_Owned[this] := null;
[L1695]              newOwner_Owned[this] := null;
[L1697]              owner_Owned[this] := msgsender_MSG;
[L1710]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]  COND FALSE  !(revert)
[L1858]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1859]  COND FALSE  !(revert)
[L1862]  CALL        call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1812]              assume msgsender_MSG != null;
[L1813]              Balance[this] := 0;
[L1814]              symbol_DiceToken[this] := 31320490;
[L1815]              name_DiceToken[this] := 31320490;
[L1816]              decimals_DiceToken[this] := 0;
[L1817]              _totalSupply_DiceToken[this] := 0;
[L1818]              balances_DiceToken[this] := zeroRefintArr();
[L1819]              sum_balances0[this] := 0;
[L1820]              allowed_DiceToken[this] := zeroRefRefintArr();
[L1821]              sum_allowed1[this] := 0;
[L1823]              decimals_DiceToken[this] := 18;
[L1824]              symbol_DiceToken[this] := 884691297;
[L1825]              name_DiceToken[this] := 869301625;
[L1826]              __var_2 := decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]              _totalSupply_DiceToken[this] := 30678 * (nonlinearPow(10, decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1828]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][owner_Owned[this]];
[L1829]              balances_DiceToken[this][owner_Owned[this]] := _totalSupply_DiceToken[this];
[L1830]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][owner_Owned[this]];
[L1831]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1862]  RET         call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1863]  COND FALSE  !(revert)
[L527]   RET         call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L528]               assume !revert && gas >= 0;
[L3301]  RET         call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L3302]              assume !revert && gas >= 0;
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND FALSE  !(choice == 12)
[L3218]  COND FALSE  !(choice == 11)
[L3225]  COND TRUE   choice == 10
[L3226]              gas := gas - 21000;
[L3227]  COND TRUE   gas >= 0
[L3228]              assume tokens_s453 >= 0 && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3229]              assume msgvalue_MSG == 0;
[L3230]  CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s453 && p1 != to_s453) && (p2 != from_s453 || p3 != msgsender_MSG)) && from_s453 != to_s453) && tokens_s453 <= balances_DiceToken[this][from_s453]) && tokens_s453 <= allowed_DiceToken[this][from_s453][msgsender_MSG]) && balances_DiceToken[this][to_s453] + tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s453 >= 0) && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s453] >= 0) && balances_DiceToken[this][to_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][from_s453] >= 0) && balances_DiceToken[this][from_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_DiceToken[this][from_s453][msgsender_MSG] >= 0) && allowed_DiceToken[this][from_s453][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DiceToken0 := true;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L780]               havoc __exception;
[L781]               revert := false;
[L782]   COND TRUE   __exception
[L783]               __tmp__Balance := Balance;
[L784]               __tmp__DType := DType;
[L785]               __tmp__Alloc := Alloc;
[L786]               __tmp__balance_ADDR := balance_ADDR;
[L787]               __tmp__M_Ref_int := M_Ref_int;
[L788]               __tmp__sum_balances0 := sum_balances0;
[L789]               __tmp__alloc_allowed_DiceToken_lvl0 := alloc_allowed_DiceToken_lvl0;
[L790]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L791]               __tmp__sum_allowed1 := sum_allowed1;
[L792]               __tmp__Length := Length;
[L793]               __tmp__now := now;
[L794]               __tmp__owner_Owned := owner_Owned;
[L795]               __tmp__newOwner_Owned := newOwner_Owned;
[L796]               __tmp__symbol_DiceToken := symbol_DiceToken;
[L797]               __tmp__name_DiceToken := name_DiceToken;
[L798]               __tmp__decimals_DiceToken := decimals_DiceToken;
[L799]               __tmp___totalSupply_DiceToken := _totalSupply_DiceToken;
[L800]               __tmp__balances_DiceToken := balances_DiceToken;
[L801]               __tmp__allowed_DiceToken := allowed_DiceToken;
[L802]   CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L1965]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][from_s453], tokens_s453);
[L1594]  COND FALSE  !(!(b_s45 <= a_s45))
[L1598]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1965]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][from_s453], tokens_s453);
[L1966]  COND FALSE  !(revert)
[L1969]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_DiceToken[this][from_s453];
[L1970]              __tmp__balances_DiceToken[this][from_s453] := __var_6;
[L1971]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_DiceToken[this][from_s453];
[L1972]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L1594]  COND FALSE  !(!(b_s45 <= a_s45))
[L1598]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1972]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L1973]  COND FALSE  !(revert)
[L1976]              __tmp__sum_allowed1[from_s453] := __tmp__sum_allowed1[from_s453] - __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG];
[L1977]              __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG] := __var_7;
[L1978]              __tmp__sum_allowed1[from_s453] := __tmp__sum_allowed1[from_s453] + __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG];
[L1979]  CALL        call __var_8 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][to_s453], tokens_s453);
[L1576]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1577]  COND TRUE   !(c_s23 >= a_s23)
[L1578]              revert := true;
[L1979]  RET         call __var_8 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][to_s453], tokens_s453);
[L1980]  COND TRUE   revert
[L802]   RET         call success_s453 := transferFrom~address~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L803]               assume revert || gas < 0;
[L3230]  RET         call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3305]  RET         call CorralChoice_DiceToken(this);

Loop:
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND FALSE  !(choice == 12)
[L3218]  COND FALSE  !(choice == 11)
[L3225]  COND TRUE   choice == 10
[L3226]              gas := gas - 21000;
[L3227]  COND TRUE   gas >= 0
[L3228]              assume tokens_s453 >= 0 && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3229]              assume msgvalue_MSG == 0;
[L3230]  CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s453 && p1 != to_s453) && (p2 != from_s453 || p3 != msgsender_MSG)) && from_s453 != to_s453) && tokens_s453 <= balances_DiceToken[this][from_s453]) && tokens_s453 <= allowed_DiceToken[this][from_s453][msgsender_MSG]) && balances_DiceToken[this][to_s453] + tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s453 >= 0) && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s453] >= 0) && balances_DiceToken[this][to_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][from_s453] >= 0) && balances_DiceToken[this][from_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_DiceToken[this][from_s453][msgsender_MSG] >= 0) && allowed_DiceToken[this][from_s453][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DiceToken0 := true;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L780]               havoc __exception;
[L781]               revert := false;
[L782]   COND TRUE   __exception
[L783]               __tmp__Balance := Balance;
[L784]               __tmp__DType := DType;
[L785]               __tmp__Alloc := Alloc;
[L786]               __tmp__balance_ADDR := balance_ADDR;
[L787]               __tmp__M_Ref_int := M_Ref_int;
[L788]               __tmp__sum_balances0 := sum_balances0;
[L789]               __tmp__alloc_allowed_DiceToken_lvl0 := alloc_allowed_DiceToken_lvl0;
[L790]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L791]               __tmp__sum_allowed1 := sum_allowed1;
[L792]               __tmp__Length := Length;
[L793]               __tmp__now := now;
[L794]               __tmp__owner_Owned := owner_Owned;
[L795]               __tmp__newOwner_Owned := newOwner_Owned;
[L796]               __tmp__symbol_DiceToken := symbol_DiceToken;
[L797]               __tmp__name_DiceToken := name_DiceToken;
[L798]               __tmp__decimals_DiceToken := decimals_DiceToken;
[L799]               __tmp___totalSupply_DiceToken := _totalSupply_DiceToken;
[L800]               __tmp__balances_DiceToken := balances_DiceToken;
[L801]               __tmp__allowed_DiceToken := allowed_DiceToken;
[L802]   CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L1965]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][from_s453], tokens_s453);
[L1594]  COND FALSE  !(!(b_s45 <= a_s45))
[L1598]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1965]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][from_s453], tokens_s453);
[L1966]  COND FALSE  !(revert)
[L1969]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_DiceToken[this][from_s453];
[L1970]              __tmp__balances_DiceToken[this][from_s453] := __var_6;
[L1971]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_DiceToken[this][from_s453];
[L1972]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L1594]  COND FALSE  !(!(b_s45 <= a_s45))
[L1598]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1972]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L1973]  COND FALSE  !(revert)
[L1976]              __tmp__sum_allowed1[from_s453] := __tmp__sum_allowed1[from_s453] - __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG];
[L1977]              __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG] := __var_7;
[L1978]              __tmp__sum_allowed1[from_s453] := __tmp__sum_allowed1[from_s453] + __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG];
[L1979]  CALL        call __var_8 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][to_s453], tokens_s453);
[L1576]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1577]  COND TRUE   !(c_s23 >= a_s23)
[L1578]              revert := true;
[L1979]  RET         call __var_8 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][to_s453], tokens_s453);
[L1980]  COND TRUE   revert
[L802]   RET         call success_s453 := transferFrom~address~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L803]               assume revert || gas < 0;
[L3230]  RET         call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3305]  RET         call CorralChoice_DiceToken(this);

[2020-11-25 13:57:34,734 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:57:34,734 INFO  L82        PathProgramCache]: Analyzing trace with hash -244523371, now seen corresponding path program 1 times
[2020-11-25 13:57:34,735 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:57:34,772 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:57:34,913 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-25 13:57:34,913 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:57:34,913 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-25 13:57:34,914 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:57:34,914 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-25 13:57:34,914 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=39, Invalid=303, Unknown=0, NotChecked=0, Total=342
[2020-11-25 13:57:34,915 INFO  L87              Difference]: Start difference. First operand 2151 states and 2305 transitions. cyclomatic complexity: 158 Second operand 19 states.
[2020-11-25 13:57:37,382 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:57:37,382 INFO  L93              Difference]: Finished difference Result 2239 states and 2430 transitions.
[2020-11-25 13:57:37,382 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 13:57:37,383 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2239 states and 2430 transitions.
[2020-11-25 13:57:37,387 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 13:57:37,392 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2239 states to 2239 states and 2430 transitions.
[2020-11-25 13:57:37,392 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 770
[2020-11-25 13:57:37,392 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 770
[2020-11-25 13:57:37,392 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2239 states and 2430 transitions.
[2020-11-25 13:57:37,394 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:57:37,394 INFO  L728         BuchiCegarLoop]: Abstraction has 2239 states and 2430 transitions.
[2020-11-25 13:57:37,396 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2239 states and 2430 transitions.
[2020-11-25 13:57:37,408 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2239 to 2159.
[2020-11-25 13:57:37,408 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2159 states.
[2020-11-25 13:57:37,410 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2159 states to 2159 states and 2315 transitions.
[2020-11-25 13:57:37,410 INFO  L751         BuchiCegarLoop]: Abstraction has 2159 states and 2315 transitions.
[2020-11-25 13:57:37,410 INFO  L631         BuchiCegarLoop]: Abstraction has 2159 states and 2315 transitions.
[2020-11-25 13:57:37,410 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 13:57:37,410 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2159 states and 2315 transitions.
[2020-11-25 13:57:37,413 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:57:37,413 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:57:37,413 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:57:37,414 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:57:37,414 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_DiceToken0 := false;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3295]              assume null == 0;
[L3296]  CALL        call this := FreshRefGenerator__success();
[L1536]              havoc newRef;
[L1537]              assume Alloc[newRef] == false;
[L1538]              Alloc[newRef] := true;
[L1539]              assume newRef != null;
[L3296]  RET         call this := FreshRefGenerator__success();
[L3297]              assume now >= 0;
[L3298]              assume DType[this] == DiceToken;
[L3299]              assume msgvalue_MSG == 0;
[L3300]              gas := gas - 53000;
[L3301]  CALL        call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L502]               havoc __exception;
[L503]               revert := false;
[L504]   COND FALSE  !(__exception)
[L527]   CALL        call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1672]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1657]              assume msgsender_MSG != null;
[L1658]              Balance[this] := 0;
[L1672]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]  COND FALSE  !(revert)
[L1854]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1855]  COND FALSE  !(revert)
[L1858]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1692]              assume msgsender_MSG != null;
[L1693]              Balance[this] := 0;
[L1694]              owner_Owned[this] := null;
[L1695]              newOwner_Owned[this] := null;
[L1697]              owner_Owned[this] := msgsender_MSG;
[L1710]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]  COND FALSE  !(revert)
[L1858]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1859]  COND FALSE  !(revert)
[L1862]  CALL        call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1812]              assume msgsender_MSG != null;
[L1813]              Balance[this] := 0;
[L1814]              symbol_DiceToken[this] := 31320490;
[L1815]              name_DiceToken[this] := 31320490;
[L1816]              decimals_DiceToken[this] := 0;
[L1817]              _totalSupply_DiceToken[this] := 0;
[L1818]              balances_DiceToken[this] := zeroRefintArr();
[L1819]              sum_balances0[this] := 0;
[L1820]              allowed_DiceToken[this] := zeroRefRefintArr();
[L1821]              sum_allowed1[this] := 0;
[L1823]              decimals_DiceToken[this] := 18;
[L1824]              symbol_DiceToken[this] := 884691297;
[L1825]              name_DiceToken[this] := 869301625;
[L1826]              __var_2 := decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]              _totalSupply_DiceToken[this] := 30678 * (nonlinearPow(10, decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1828]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][owner_Owned[this]];
[L1829]              balances_DiceToken[this][owner_Owned[this]] := _totalSupply_DiceToken[this];
[L1830]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][owner_Owned[this]];
[L1831]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1862]  RET         call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1863]  COND FALSE  !(revert)
[L527]   RET         call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L528]               assume !revert && gas >= 0;
[L3301]  RET         call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L3302]              assume !revert && gas >= 0;
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND FALSE  !(choice == 12)
[L3218]  COND FALSE  !(choice == 11)
[L3225]  COND TRUE   choice == 10
[L3226]              gas := gas - 21000;
[L3227]  COND TRUE   gas >= 0
[L3228]              assume tokens_s453 >= 0 && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3229]              assume msgvalue_MSG == 0;
[L3230]  CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s453 && p1 != to_s453) && (p2 != from_s453 || p3 != msgsender_MSG)) && from_s453 != to_s453) && tokens_s453 <= balances_DiceToken[this][from_s453]) && tokens_s453 <= allowed_DiceToken[this][from_s453][msgsender_MSG]) && balances_DiceToken[this][to_s453] + tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s453 >= 0) && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s453] >= 0) && balances_DiceToken[this][to_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][from_s453] >= 0) && balances_DiceToken[this][from_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_DiceToken[this][from_s453][msgsender_MSG] >= 0) && allowed_DiceToken[this][from_s453][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DiceToken0 := true;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L780]               havoc __exception;
[L781]               revert := false;
[L782]   COND TRUE   __exception
[L783]               __tmp__Balance := Balance;
[L784]               __tmp__DType := DType;
[L785]               __tmp__Alloc := Alloc;
[L786]               __tmp__balance_ADDR := balance_ADDR;
[L787]               __tmp__M_Ref_int := M_Ref_int;
[L788]               __tmp__sum_balances0 := sum_balances0;
[L789]               __tmp__alloc_allowed_DiceToken_lvl0 := alloc_allowed_DiceToken_lvl0;
[L790]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L791]               __tmp__sum_allowed1 := sum_allowed1;
[L792]               __tmp__Length := Length;
[L793]               __tmp__now := now;
[L794]               __tmp__owner_Owned := owner_Owned;
[L795]               __tmp__newOwner_Owned := newOwner_Owned;
[L796]               __tmp__symbol_DiceToken := symbol_DiceToken;
[L797]               __tmp__name_DiceToken := name_DiceToken;
[L798]               __tmp__decimals_DiceToken := decimals_DiceToken;
[L799]               __tmp___totalSupply_DiceToken := _totalSupply_DiceToken;
[L800]               __tmp__balances_DiceToken := balances_DiceToken;
[L801]               __tmp__allowed_DiceToken := allowed_DiceToken;
[L802]   CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L1965]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][from_s453], tokens_s453);
[L1594]  COND FALSE  !(!(b_s45 <= a_s45))
[L1598]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1965]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][from_s453], tokens_s453);
[L1966]  COND FALSE  !(revert)
[L1969]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_DiceToken[this][from_s453];
[L1970]              __tmp__balances_DiceToken[this][from_s453] := __var_6;
[L1971]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_DiceToken[this][from_s453];
[L1972]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L1594]  COND FALSE  !(!(b_s45 <= a_s45))
[L1598]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1972]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L1973]  COND FALSE  !(revert)
[L1976]              __tmp__sum_allowed1[from_s453] := __tmp__sum_allowed1[from_s453] - __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG];
[L1977]              __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG] := __var_7;
[L1978]              __tmp__sum_allowed1[from_s453] := __tmp__sum_allowed1[from_s453] + __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG];
[L1979]  CALL        call __var_8 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][to_s453], tokens_s453);
[L1576]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1577]  COND FALSE  !(!(c_s23 >= a_s23))
[L1979]  RET         call __var_8 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][to_s453], tokens_s453);
[L1980]  COND FALSE  !(revert)
[L1983]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_DiceToken[this][to_s453];
[L1984]              __tmp__balances_DiceToken[this][to_s453] := __var_8;
[L1985]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_DiceToken[this][to_s453];
[L1986]              success_s453 := true;
[L802]   RET         call success_s453 := transferFrom~address~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L803]               assume revert || gas < 0;
[L3230]  RET         call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3305]  RET         call CorralChoice_DiceToken(this);

Loop:
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND FALSE  !(choice == 12)
[L3218]  COND FALSE  !(choice == 11)
[L3225]  COND TRUE   choice == 10
[L3226]              gas := gas - 21000;
[L3227]  COND TRUE   gas >= 0
[L3228]              assume tokens_s453 >= 0 && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3229]              assume msgvalue_MSG == 0;
[L3230]  CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s453 && p1 != to_s453) && (p2 != from_s453 || p3 != msgsender_MSG)) && from_s453 != to_s453) && tokens_s453 <= balances_DiceToken[this][from_s453]) && tokens_s453 <= allowed_DiceToken[this][from_s453][msgsender_MSG]) && balances_DiceToken[this][to_s453] + tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s453 >= 0) && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s453] >= 0) && balances_DiceToken[this][to_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][from_s453] >= 0) && balances_DiceToken[this][from_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_DiceToken[this][from_s453][msgsender_MSG] >= 0) && allowed_DiceToken[this][from_s453][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DiceToken0 := true;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L780]               havoc __exception;
[L781]               revert := false;
[L782]   COND TRUE   __exception
[L783]               __tmp__Balance := Balance;
[L784]               __tmp__DType := DType;
[L785]               __tmp__Alloc := Alloc;
[L786]               __tmp__balance_ADDR := balance_ADDR;
[L787]               __tmp__M_Ref_int := M_Ref_int;
[L788]               __tmp__sum_balances0 := sum_balances0;
[L789]               __tmp__alloc_allowed_DiceToken_lvl0 := alloc_allowed_DiceToken_lvl0;
[L790]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L791]               __tmp__sum_allowed1 := sum_allowed1;
[L792]               __tmp__Length := Length;
[L793]               __tmp__now := now;
[L794]               __tmp__owner_Owned := owner_Owned;
[L795]               __tmp__newOwner_Owned := newOwner_Owned;
[L796]               __tmp__symbol_DiceToken := symbol_DiceToken;
[L797]               __tmp__name_DiceToken := name_DiceToken;
[L798]               __tmp__decimals_DiceToken := decimals_DiceToken;
[L799]               __tmp___totalSupply_DiceToken := _totalSupply_DiceToken;
[L800]               __tmp__balances_DiceToken := balances_DiceToken;
[L801]               __tmp__allowed_DiceToken := allowed_DiceToken;
[L802]   CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L1965]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][from_s453], tokens_s453);
[L1594]  COND FALSE  !(!(b_s45 <= a_s45))
[L1598]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1965]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][from_s453], tokens_s453);
[L1966]  COND FALSE  !(revert)
[L1969]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_DiceToken[this][from_s453];
[L1970]              __tmp__balances_DiceToken[this][from_s453] := __var_6;
[L1971]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_DiceToken[this][from_s453];
[L1972]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L1594]  COND FALSE  !(!(b_s45 <= a_s45))
[L1598]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1972]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L1973]  COND FALSE  !(revert)
[L1976]              __tmp__sum_allowed1[from_s453] := __tmp__sum_allowed1[from_s453] - __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG];
[L1977]              __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG] := __var_7;
[L1978]              __tmp__sum_allowed1[from_s453] := __tmp__sum_allowed1[from_s453] + __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG];
[L1979]  CALL        call __var_8 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][to_s453], tokens_s453);
[L1576]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1577]  COND FALSE  !(!(c_s23 >= a_s23))
[L1979]  RET         call __var_8 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][to_s453], tokens_s453);
[L1980]  COND FALSE  !(revert)
[L1983]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_DiceToken[this][to_s453];
[L1984]              __tmp__balances_DiceToken[this][to_s453] := __var_8;
[L1985]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_DiceToken[this][to_s453];
[L1986]              success_s453 := true;
[L802]   RET         call success_s453 := transferFrom~address~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L803]               assume revert || gas < 0;
[L3230]  RET         call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3305]  RET         call CorralChoice_DiceToken(this);

[2020-11-25 13:57:37,417 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:57:37,417 INFO  L82        PathProgramCache]: Analyzing trace with hash 660728095, now seen corresponding path program 1 times
[2020-11-25 13:57:37,418 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:57:37,425 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:57:37,445 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-25 13:57:37,445 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:57:37,445 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 13:57:37,445 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:57:37,445 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 13:57:37,445 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 13:57:37,445 INFO  L87              Difference]: Start difference. First operand 2159 states and 2315 transitions. cyclomatic complexity: 160 Second operand 5 states.
[2020-11-25 13:57:37,668 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:57:37,668 INFO  L93              Difference]: Finished difference Result 2657 states and 2936 transitions.
[2020-11-25 13:57:37,668 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 13:57:37,668 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2657 states and 2936 transitions.
[2020-11-25 13:57:37,674 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 13:57:37,679 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2657 states to 1953 states and 2229 transitions.
[2020-11-25 13:57:37,679 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 523
[2020-11-25 13:57:37,680 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 523
[2020-11-25 13:57:37,680 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1953 states and 2229 transitions.
[2020-11-25 13:57:37,681 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:57:37,681 INFO  L728         BuchiCegarLoop]: Abstraction has 1953 states and 2229 transitions.
[2020-11-25 13:57:37,682 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1953 states and 2229 transitions.
[2020-11-25 13:57:37,690 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1953 to 1423.
[2020-11-25 13:57:37,690 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1423 states.
[2020-11-25 13:57:37,692 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1423 states to 1423 states and 1538 transitions.
[2020-11-25 13:57:37,692 INFO  L751         BuchiCegarLoop]: Abstraction has 1423 states and 1538 transitions.
[2020-11-25 13:57:37,692 INFO  L631         BuchiCegarLoop]: Abstraction has 1423 states and 1538 transitions.
[2020-11-25 13:57:37,692 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 13:57:37,692 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1423 states and 1538 transitions.
[2020-11-25 13:57:37,693 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:57:37,693 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:57:37,693 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:57:37,694 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:57:37,694 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_DiceToken0 := false;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3295]              assume null == 0;
[L3296]  CALL        call this := FreshRefGenerator__success();
[L1536]              havoc newRef;
[L1537]              assume Alloc[newRef] == false;
[L1538]              Alloc[newRef] := true;
[L1539]              assume newRef != null;
[L3296]  RET         call this := FreshRefGenerator__success();
[L3297]              assume now >= 0;
[L3298]              assume DType[this] == DiceToken;
[L3299]              assume msgvalue_MSG == 0;
[L3300]              gas := gas - 53000;
[L3301]  CALL        call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L502]               havoc __exception;
[L503]               revert := false;
[L504]   COND FALSE  !(__exception)
[L527]   CALL        call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1672]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1657]              assume msgsender_MSG != null;
[L1658]              Balance[this] := 0;
[L1672]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]  COND FALSE  !(revert)
[L1854]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1855]  COND FALSE  !(revert)
[L1858]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1692]              assume msgsender_MSG != null;
[L1693]              Balance[this] := 0;
[L1694]              owner_Owned[this] := null;
[L1695]              newOwner_Owned[this] := null;
[L1697]              owner_Owned[this] := msgsender_MSG;
[L1710]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]  COND FALSE  !(revert)
[L1858]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1859]  COND FALSE  !(revert)
[L1862]  CALL        call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1812]              assume msgsender_MSG != null;
[L1813]              Balance[this] := 0;
[L1814]              symbol_DiceToken[this] := 31320490;
[L1815]              name_DiceToken[this] := 31320490;
[L1816]              decimals_DiceToken[this] := 0;
[L1817]              _totalSupply_DiceToken[this] := 0;
[L1818]              balances_DiceToken[this] := zeroRefintArr();
[L1819]              sum_balances0[this] := 0;
[L1820]              allowed_DiceToken[this] := zeroRefRefintArr();
[L1821]              sum_allowed1[this] := 0;
[L1823]              decimals_DiceToken[this] := 18;
[L1824]              symbol_DiceToken[this] := 884691297;
[L1825]              name_DiceToken[this] := 869301625;
[L1826]              __var_2 := decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]              _totalSupply_DiceToken[this] := 30678 * (nonlinearPow(10, decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1828]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][owner_Owned[this]];
[L1829]              balances_DiceToken[this][owner_Owned[this]] := _totalSupply_DiceToken[this];
[L1830]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][owner_Owned[this]];
[L1831]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1862]  RET         call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1863]  COND FALSE  !(revert)
[L527]   RET         call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L528]               assume !revert && gas >= 0;
[L3301]  RET         call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L3302]              assume !revert && gas >= 0;
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND FALSE  !(choice == 12)
[L3218]  COND TRUE   choice == 11
[L3219]              gas := gas - 21000;
[L3220]  COND TRUE   gas >= 0
[L3221]              assume tokens_s394 >= 0 && tokens_s394 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3222]              assume msgvalue_MSG == 0;
[L3223]  CALL        call success_s394 := approve~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, spender_s394, tokens_s394);
[L722]               havoc __exception;
[L723]               revert := false;
[L724]   COND FALSE  !(__exception)
[L747]   CALL        call success_s394 := approve~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s394, tokens_s394);
[L1952]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_DiceToken[this][msgsender_MSG][spender_s394];
[L1953]              allowed_DiceToken[this][msgsender_MSG][spender_s394] := tokens_s394;
[L1954]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_DiceToken[this][msgsender_MSG][spender_s394];
[L1955]              assert { :EventEmitted "Approval_DiceToken" } true;
[L1956]              success_s394 := true;
[L747]   RET         call success_s394 := approve~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s394, tokens_s394);
[L748]               assume !revert && gas >= 0;
[L3223]  RET         call success_s394 := approve~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, spender_s394, tokens_s394);
[L3305]  RET         call CorralChoice_DiceToken(this);
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND FALSE  !(choice == 12)
[L3218]  COND FALSE  !(choice == 11)
[L3225]  COND TRUE   choice == 10
[L3226]              gas := gas - 21000;
[L3227]  COND TRUE   gas >= 0
[L3228]              assume tokens_s453 >= 0 && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3229]              assume msgvalue_MSG == 0;
[L3230]  CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s453 && p1 != to_s453) && (p2 != from_s453 || p3 != msgsender_MSG)) && from_s453 != to_s453) && tokens_s453 <= balances_DiceToken[this][from_s453]) && tokens_s453 <= allowed_DiceToken[this][from_s453][msgsender_MSG]) && balances_DiceToken[this][to_s453] + tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s453 >= 0) && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s453] >= 0) && balances_DiceToken[this][to_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][from_s453] >= 0) && balances_DiceToken[this][from_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_DiceToken[this][from_s453][msgsender_MSG] >= 0) && allowed_DiceToken[this][from_s453][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DiceToken0 := true;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L780]               havoc __exception;
[L781]               revert := false;
[L782]   COND FALSE  !(__exception)
[L805]   CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L1995]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][from_s453], tokens_s453);
[L1603]  COND FALSE  !(!(b_s45 <= a_s45))
[L1607]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1995]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][from_s453], tokens_s453);
[L1996]  COND FALSE  !(revert)
[L1999]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][from_s453];
[L2000]              balances_DiceToken[this][from_s453] := __var_6;
[L2001]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][from_s453];
[L2002]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L1603]  COND FALSE  !(!(b_s45 <= a_s45))
[L1607]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2002]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L2003]  COND FALSE  !(revert)
[L2006]              sum_allowed1[from_s453] := sum_allowed1[from_s453] - allowed_DiceToken[this][from_s453][msgsender_MSG];
[L2007]              allowed_DiceToken[this][from_s453][msgsender_MSG] := __var_7;
[L2008]              sum_allowed1[from_s453] := sum_allowed1[from_s453] + allowed_DiceToken[this][from_s453][msgsender_MSG];
[L2009]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s453], tokens_s453);
[L1585]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1586]  COND FALSE  !(!(c_s23 >= a_s23))
[L2009]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s453], tokens_s453);
[L2010]  COND FALSE  !(revert)
[L2013]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][to_s453];
[L2014]              balances_DiceToken[this][to_s453] := __var_8;
[L2015]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][to_s453];
[L2016]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L2017]              success_s453 := true;
[L805]   RET         call success_s453 := transferFrom~address~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L806]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s453 == true && balances_DiceToken[this][from_s453] == old(balances_DiceToken[this][from_s453]) - tokens_s453) && balances_DiceToken[this][to_s453] == old(balances_DiceToken[this][to_s453]) + tokens_s453) && allowed_DiceToken[this][from_s453][msgsender_MSG] == old(allowed_DiceToken[this][from_s453][msgsender_MSG]) - tokens_s453) && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this])) && balances_DiceToken[this][p1] == old(balances_DiceToken[this][p1])) && allowed_DiceToken[this][p2][p3] == old(allowed_DiceToken[this][p2][p3])) && symbol_DiceToken[this] == old(symbol_DiceToken[this])) && name_DiceToken[this] == old(name_DiceToken[this])) && decimals_DiceToken[this] == old(decimals_DiceToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L3230]  RET         call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3305]  RET         call CorralChoice_DiceToken(this);

Loop:
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND TRUE   choice == 15
[L3194]              gas := gas - 21000;
[L3195]  COND FALSE  !(gas >= 0)
[L3305]  RET         call CorralChoice_DiceToken(this);

[2020-11-25 13:57:37,697 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:57:37,697 INFO  L82        PathProgramCache]: Analyzing trace with hash 24496641, now seen corresponding path program 1 times
[2020-11-25 13:57:37,698 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:57:37,755 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:57:38,696 INFO  L134       CoverageAnalysis]: Checked inductivity of 52 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 49 trivial. 0 not checked.
[2020-11-25 13:57:38,696 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 13:57:38,696 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-11-25 13:57:38,697 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:57:38,697 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 13:57:38,697 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=61, Invalid=641, Unknown=0, NotChecked=0, Total=702
[2020-11-25 13:57:38,697 INFO  L87              Difference]: Start difference. First operand 1423 states and 1538 transitions. cyclomatic complexity: 118 Second operand 27 states.
[2020-11-25 13:57:43,425 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:57:43,425 INFO  L93              Difference]: Finished difference Result 1462 states and 1589 transitions.
[2020-11-25 13:57:43,425 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-11-25 13:57:43,426 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1462 states and 1589 transitions.
[2020-11-25 13:57:43,428 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:57:43,431 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1462 states to 1462 states and 1589 transitions.
[2020-11-25 13:57:43,431 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 421
[2020-11-25 13:57:43,431 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 421
[2020-11-25 13:57:43,431 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1462 states and 1589 transitions.
[2020-11-25 13:57:43,432 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:57:43,432 INFO  L728         BuchiCegarLoop]: Abstraction has 1462 states and 1589 transitions.
[2020-11-25 13:57:43,433 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1462 states and 1589 transitions.
[2020-11-25 13:57:43,441 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1462 to 1455.
[2020-11-25 13:57:43,441 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1455 states.
[2020-11-25 13:57:43,443 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1455 states to 1455 states and 1581 transitions.
[2020-11-25 13:57:43,443 INFO  L751         BuchiCegarLoop]: Abstraction has 1455 states and 1581 transitions.
[2020-11-25 13:57:43,443 INFO  L631         BuchiCegarLoop]: Abstraction has 1455 states and 1581 transitions.
[2020-11-25 13:57:43,443 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 13:57:43,443 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1455 states and 1581 transitions.
[2020-11-25 13:57:43,445 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:57:43,445 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:57:43,445 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:57:43,446 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:57:43,446 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_DiceToken0 := false;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3295]              assume null == 0;
[L3296]  CALL        call this := FreshRefGenerator__success();
[L1536]              havoc newRef;
[L1537]              assume Alloc[newRef] == false;
[L1538]              Alloc[newRef] := true;
[L1539]              assume newRef != null;
[L3296]  RET         call this := FreshRefGenerator__success();
[L3297]              assume now >= 0;
[L3298]              assume DType[this] == DiceToken;
[L3299]              assume msgvalue_MSG == 0;
[L3300]              gas := gas - 53000;
[L3301]  CALL        call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L502]               havoc __exception;
[L503]               revert := false;
[L504]   COND FALSE  !(__exception)
[L527]   CALL        call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1672]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1657]              assume msgsender_MSG != null;
[L1658]              Balance[this] := 0;
[L1672]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]  COND FALSE  !(revert)
[L1854]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1855]  COND FALSE  !(revert)
[L1858]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1692]              assume msgsender_MSG != null;
[L1693]              Balance[this] := 0;
[L1694]              owner_Owned[this] := null;
[L1695]              newOwner_Owned[this] := null;
[L1697]              owner_Owned[this] := msgsender_MSG;
[L1710]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]  COND FALSE  !(revert)
[L1858]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1859]  COND FALSE  !(revert)
[L1862]  CALL        call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1812]              assume msgsender_MSG != null;
[L1813]              Balance[this] := 0;
[L1814]              symbol_DiceToken[this] := 31320490;
[L1815]              name_DiceToken[this] := 31320490;
[L1816]              decimals_DiceToken[this] := 0;
[L1817]              _totalSupply_DiceToken[this] := 0;
[L1818]              balances_DiceToken[this] := zeroRefintArr();
[L1819]              sum_balances0[this] := 0;
[L1820]              allowed_DiceToken[this] := zeroRefRefintArr();
[L1821]              sum_allowed1[this] := 0;
[L1823]              decimals_DiceToken[this] := 18;
[L1824]              symbol_DiceToken[this] := 884691297;
[L1825]              name_DiceToken[this] := 869301625;
[L1826]              __var_2 := decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]              _totalSupply_DiceToken[this] := 30678 * (nonlinearPow(10, decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1828]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][owner_Owned[this]];
[L1829]              balances_DiceToken[this][owner_Owned[this]] := _totalSupply_DiceToken[this];
[L1830]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][owner_Owned[this]];
[L1831]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1862]  RET         call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1863]  COND FALSE  !(revert)
[L527]   RET         call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L528]               assume !revert && gas >= 0;
[L3301]  RET         call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L3302]              assume !revert && gas >= 0;
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND TRUE   choice == 12
[L3212]              gas := gas - 21000;
[L3213]  COND TRUE   gas >= 0
[L3214]              assume tokens_s366 >= 0 && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              assume msgvalue_MSG == 0;
[L3216]  CALL        call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L666]               havoc __exception;
[L667]               revert := false;
[L668]   COND FALSE  !(__exception)
[L691]   CALL        call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L1922]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1603]  COND FALSE  !(!(b_s45 <= a_s45))
[L1607]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1922]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1923]  COND FALSE  !(revert)
[L1926]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][msgsender_MSG];
[L1927]              balances_DiceToken[this][msgsender_MSG] := __var_4;
[L1928]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][msgsender_MSG];
[L1929]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1585]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1586]  COND FALSE  !(!(c_s23 >= a_s23))
[L1929]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1930]  COND FALSE  !(revert)
[L1933]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][to_s366];
[L1934]              balances_DiceToken[this][to_s366] := __var_5;
[L1935]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][to_s366];
[L1936]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1937]              success_s366 := true;
[L691]   RET         call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L692]               assume !revert && gas >= 0;
[L3216]  RET         call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3305]  RET         call CorralChoice_DiceToken(this);
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND FALSE  !(choice == 12)
[L3218]  COND FALSE  !(choice == 11)
[L3225]  COND TRUE   choice == 10
[L3226]              gas := gas - 21000;
[L3227]  COND TRUE   gas >= 0
[L3228]              assume tokens_s453 >= 0 && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3229]              assume msgvalue_MSG == 0;
[L3230]  CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s453 && p1 != to_s453) && (p2 != from_s453 || p3 != msgsender_MSG)) && from_s453 != to_s453) && tokens_s453 <= balances_DiceToken[this][from_s453]) && tokens_s453 <= allowed_DiceToken[this][from_s453][msgsender_MSG]) && balances_DiceToken[this][to_s453] + tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s453 >= 0) && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s453] >= 0) && balances_DiceToken[this][to_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][from_s453] >= 0) && balances_DiceToken[this][from_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_DiceToken[this][from_s453][msgsender_MSG] >= 0) && allowed_DiceToken[this][from_s453][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DiceToken0 := true;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L780]               havoc __exception;
[L781]               revert := false;
[L782]   COND FALSE  !(__exception)
[L805]   CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L1995]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][from_s453], tokens_s453);
[L1603]  COND FALSE  !(!(b_s45 <= a_s45))
[L1607]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1995]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][from_s453], tokens_s453);
[L1996]  COND FALSE  !(revert)
[L1999]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][from_s453];
[L2000]              balances_DiceToken[this][from_s453] := __var_6;
[L2001]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][from_s453];
[L2002]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L1603]  COND FALSE  !(!(b_s45 <= a_s45))
[L1607]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2002]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L2003]  COND FALSE  !(revert)
[L2006]              sum_allowed1[from_s453] := sum_allowed1[from_s453] - allowed_DiceToken[this][from_s453][msgsender_MSG];
[L2007]              allowed_DiceToken[this][from_s453][msgsender_MSG] := __var_7;
[L2008]              sum_allowed1[from_s453] := sum_allowed1[from_s453] + allowed_DiceToken[this][from_s453][msgsender_MSG];
[L2009]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s453], tokens_s453);
[L1585]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1586]  COND FALSE  !(!(c_s23 >= a_s23))
[L2009]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s453], tokens_s453);
[L2010]  COND FALSE  !(revert)
[L2013]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][to_s453];
[L2014]              balances_DiceToken[this][to_s453] := __var_8;
[L2015]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][to_s453];
[L2016]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L2017]              success_s453 := true;
[L805]   RET         call success_s453 := transferFrom~address~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L806]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s453 == true && balances_DiceToken[this][from_s453] == old(balances_DiceToken[this][from_s453]) - tokens_s453) && balances_DiceToken[this][to_s453] == old(balances_DiceToken[this][to_s453]) + tokens_s453) && allowed_DiceToken[this][from_s453][msgsender_MSG] == old(allowed_DiceToken[this][from_s453][msgsender_MSG]) - tokens_s453) && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this])) && balances_DiceToken[this][p1] == old(balances_DiceToken[this][p1])) && allowed_DiceToken[this][p2][p3] == old(allowed_DiceToken[this][p2][p3])) && symbol_DiceToken[this] == old(symbol_DiceToken[this])) && name_DiceToken[this] == old(name_DiceToken[this])) && decimals_DiceToken[this] == old(decimals_DiceToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L3230]  RET         call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3305]  RET         call CorralChoice_DiceToken(this);

Loop:
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND TRUE   choice == 12
[L3212]              gas := gas - 21000;
[L3213]  COND TRUE   gas >= 0
[L3214]              assume tokens_s366 >= 0 && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              assume msgvalue_MSG == 0;
[L3216]  CALL        call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L666]               havoc __exception;
[L667]               revert := false;
[L668]   COND FALSE  !(__exception)
[L691]   CALL        call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L1922]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1603]  COND FALSE  !(!(b_s45 <= a_s45))
[L1607]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1922]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1923]  COND FALSE  !(revert)
[L1926]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][msgsender_MSG];
[L1927]              balances_DiceToken[this][msgsender_MSG] := __var_4;
[L1928]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][msgsender_MSG];
[L1929]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1585]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1586]  COND FALSE  !(!(c_s23 >= a_s23))
[L1929]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1930]  COND FALSE  !(revert)
[L1933]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][to_s366];
[L1934]              balances_DiceToken[this][to_s366] := __var_5;
[L1935]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][to_s366];
[L1936]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1937]              success_s366 := true;
[L691]   RET         call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L692]               assume !revert && gas >= 0;
[L3216]  RET         call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3305]  RET         call CorralChoice_DiceToken(this);

[2020-11-25 13:57:43,449 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:57:43,449 INFO  L82        PathProgramCache]: Analyzing trace with hash 924765533, now seen corresponding path program 1 times
[2020-11-25 13:57:43,449 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:57:43,532 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:57:44,263 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 48 trivial. 0 not checked.
[2020-11-25 13:57:44,263 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 13:57:44,263 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [30] total 30
[2020-11-25 13:57:44,263 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:57:44,263 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 31 interpolants.
[2020-11-25 13:57:44,264 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=79, Invalid=851, Unknown=0, NotChecked=0, Total=930
[2020-11-25 13:57:44,264 INFO  L87              Difference]: Start difference. First operand 1455 states and 1581 transitions. cyclomatic complexity: 131 Second operand 31 states.
[2020-11-25 13:57:48,879 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:57:48,879 INFO  L93              Difference]: Finished difference Result 1482 states and 1625 transitions.
[2020-11-25 13:57:48,880 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 32 states. 
[2020-11-25 13:57:48,880 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1482 states and 1625 transitions.
[2020-11-25 13:57:48,885 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 13:57:48,890 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1482 states to 1482 states and 1625 transitions.
[2020-11-25 13:57:48,890 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 425
[2020-11-25 13:57:48,891 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 425
[2020-11-25 13:57:48,891 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1482 states and 1625 transitions.
[2020-11-25 13:57:48,892 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:57:48,892 INFO  L728         BuchiCegarLoop]: Abstraction has 1482 states and 1625 transitions.
[2020-11-25 13:57:48,895 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1482 states and 1625 transitions.
[2020-11-25 13:57:48,908 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1482 to 1463.
[2020-11-25 13:57:48,908 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1463 states.
[2020-11-25 13:57:48,910 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1463 states to 1463 states and 1602 transitions.
[2020-11-25 13:57:48,910 INFO  L751         BuchiCegarLoop]: Abstraction has 1463 states and 1602 transitions.
[2020-11-25 13:57:48,910 INFO  L631         BuchiCegarLoop]: Abstraction has 1463 states and 1602 transitions.
[2020-11-25 13:57:48,910 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 13:57:48,910 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1463 states and 1602 transitions.
[2020-11-25 13:57:48,913 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 13:57:48,913 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:57:48,913 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:57:48,914 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:57:48,914 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_DiceToken0 := false;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3295]              assume null == 0;
[L3296]  CALL        call this := FreshRefGenerator__success();
[L1536]              havoc newRef;
[L1537]              assume Alloc[newRef] == false;
[L1538]              Alloc[newRef] := true;
[L1539]              assume newRef != null;
[L3296]  RET         call this := FreshRefGenerator__success();
[L3297]              assume now >= 0;
[L3298]              assume DType[this] == DiceToken;
[L3299]              assume msgvalue_MSG == 0;
[L3300]              gas := gas - 53000;
[L3301]  CALL        call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L502]               havoc __exception;
[L503]               revert := false;
[L504]   COND FALSE  !(__exception)
[L527]   CALL        call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1672]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1657]              assume msgsender_MSG != null;
[L1658]              Balance[this] := 0;
[L1672]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]  COND FALSE  !(revert)
[L1854]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1855]  COND FALSE  !(revert)
[L1858]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1692]              assume msgsender_MSG != null;
[L1693]              Balance[this] := 0;
[L1694]              owner_Owned[this] := null;
[L1695]              newOwner_Owned[this] := null;
[L1697]              owner_Owned[this] := msgsender_MSG;
[L1710]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]  COND FALSE  !(revert)
[L1858]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1859]  COND FALSE  !(revert)
[L1862]  CALL        call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1812]              assume msgsender_MSG != null;
[L1813]              Balance[this] := 0;
[L1814]              symbol_DiceToken[this] := 31320490;
[L1815]              name_DiceToken[this] := 31320490;
[L1816]              decimals_DiceToken[this] := 0;
[L1817]              _totalSupply_DiceToken[this] := 0;
[L1818]              balances_DiceToken[this] := zeroRefintArr();
[L1819]              sum_balances0[this] := 0;
[L1820]              allowed_DiceToken[this] := zeroRefRefintArr();
[L1821]              sum_allowed1[this] := 0;
[L1823]              decimals_DiceToken[this] := 18;
[L1824]              symbol_DiceToken[this] := 884691297;
[L1825]              name_DiceToken[this] := 869301625;
[L1826]              __var_2 := decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]              _totalSupply_DiceToken[this] := 30678 * (nonlinearPow(10, decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1828]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][owner_Owned[this]];
[L1829]              balances_DiceToken[this][owner_Owned[this]] := _totalSupply_DiceToken[this];
[L1830]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][owner_Owned[this]];
[L1831]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1862]  RET         call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1863]  COND FALSE  !(revert)
[L527]   RET         call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L528]               assume !revert && gas >= 0;
[L3301]  RET         call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L3302]              assume !revert && gas >= 0;
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND TRUE   choice == 12
[L3212]              gas := gas - 21000;
[L3213]  COND TRUE   gas >= 0
[L3214]              assume tokens_s366 >= 0 && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              assume msgvalue_MSG == 0;
[L3216]  CALL        call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L666]               havoc __exception;
[L667]               revert := false;
[L668]   COND FALSE  !(__exception)
[L691]   CALL        call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L1922]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1603]  COND FALSE  !(!(b_s45 <= a_s45))
[L1607]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1922]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1923]  COND FALSE  !(revert)
[L1926]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][msgsender_MSG];
[L1927]              balances_DiceToken[this][msgsender_MSG] := __var_4;
[L1928]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][msgsender_MSG];
[L1929]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1585]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1586]  COND FALSE  !(!(c_s23 >= a_s23))
[L1929]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1930]  COND FALSE  !(revert)
[L1933]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][to_s366];
[L1934]              balances_DiceToken[this][to_s366] := __var_5;
[L1935]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][to_s366];
[L1936]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1937]              success_s366 := true;
[L691]   RET         call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L692]               assume !revert && gas >= 0;
[L3216]  RET         call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3305]  RET         call CorralChoice_DiceToken(this);
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND FALSE  !(choice == 12)
[L3218]  COND FALSE  !(choice == 11)
[L3225]  COND TRUE   choice == 10
[L3226]              gas := gas - 21000;
[L3227]  COND TRUE   gas >= 0
[L3228]              assume tokens_s453 >= 0 && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3229]              assume msgvalue_MSG == 0;
[L3230]  CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s453 && p1 != to_s453) && (p2 != from_s453 || p3 != msgsender_MSG)) && from_s453 != to_s453) && tokens_s453 <= balances_DiceToken[this][from_s453]) && tokens_s453 <= allowed_DiceToken[this][from_s453][msgsender_MSG]) && balances_DiceToken[this][to_s453] + tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s453 >= 0) && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s453] >= 0) && balances_DiceToken[this][to_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][from_s453] >= 0) && balances_DiceToken[this][from_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_DiceToken[this][from_s453][msgsender_MSG] >= 0) && allowed_DiceToken[this][from_s453][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DiceToken0 := true;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L780]               havoc __exception;
[L781]               revert := false;
[L782]   COND TRUE   __exception
[L783]               __tmp__Balance := Balance;
[L784]               __tmp__DType := DType;
[L785]               __tmp__Alloc := Alloc;
[L786]               __tmp__balance_ADDR := balance_ADDR;
[L787]               __tmp__M_Ref_int := M_Ref_int;
[L788]               __tmp__sum_balances0 := sum_balances0;
[L789]               __tmp__alloc_allowed_DiceToken_lvl0 := alloc_allowed_DiceToken_lvl0;
[L790]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L791]               __tmp__sum_allowed1 := sum_allowed1;
[L792]               __tmp__Length := Length;
[L793]               __tmp__now := now;
[L794]               __tmp__owner_Owned := owner_Owned;
[L795]               __tmp__newOwner_Owned := newOwner_Owned;
[L796]               __tmp__symbol_DiceToken := symbol_DiceToken;
[L797]               __tmp__name_DiceToken := name_DiceToken;
[L798]               __tmp__decimals_DiceToken := decimals_DiceToken;
[L799]               __tmp___totalSupply_DiceToken := _totalSupply_DiceToken;
[L800]               __tmp__balances_DiceToken := balances_DiceToken;
[L801]               __tmp__allowed_DiceToken := allowed_DiceToken;
[L802]   CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L1965]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][from_s453], tokens_s453);
[L1594]  COND FALSE  !(!(b_s45 <= a_s45))
[L1598]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1965]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][from_s453], tokens_s453);
[L1966]  COND FALSE  !(revert)
[L1969]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_DiceToken[this][from_s453];
[L1970]              __tmp__balances_DiceToken[this][from_s453] := __var_6;
[L1971]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_DiceToken[this][from_s453];
[L1972]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L1594]  COND FALSE  !(!(b_s45 <= a_s45))
[L1598]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1972]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L1973]  COND FALSE  !(revert)
[L1976]              __tmp__sum_allowed1[from_s453] := __tmp__sum_allowed1[from_s453] - __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG];
[L1977]              __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG] := __var_7;
[L1978]              __tmp__sum_allowed1[from_s453] := __tmp__sum_allowed1[from_s453] + __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG];
[L1979]  CALL        call __var_8 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][to_s453], tokens_s453);
[L1576]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1577]  COND TRUE   !(c_s23 >= a_s23)
[L1578]              revert := true;
[L1979]  RET         call __var_8 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][to_s453], tokens_s453);
[L1980]  COND TRUE   revert
[L802]   RET         call success_s453 := transferFrom~address~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L803]               assume revert || gas < 0;
[L3230]  RET         call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3305]  RET         call CorralChoice_DiceToken(this);

Loop:
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND FALSE  !(choice == 12)
[L3218]  COND FALSE  !(choice == 11)
[L3225]  COND TRUE   choice == 10
[L3226]              gas := gas - 21000;
[L3227]  COND TRUE   gas >= 0
[L3228]              assume tokens_s453 >= 0 && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3229]              assume msgvalue_MSG == 0;
[L3230]  CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s453 && p1 != to_s453) && (p2 != from_s453 || p3 != msgsender_MSG)) && from_s453 != to_s453) && tokens_s453 <= balances_DiceToken[this][from_s453]) && tokens_s453 <= allowed_DiceToken[this][from_s453][msgsender_MSG]) && balances_DiceToken[this][to_s453] + tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s453 >= 0) && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s453] >= 0) && balances_DiceToken[this][to_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][from_s453] >= 0) && balances_DiceToken[this][from_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_DiceToken[this][from_s453][msgsender_MSG] >= 0) && allowed_DiceToken[this][from_s453][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DiceToken0 := true;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L780]               havoc __exception;
[L781]               revert := false;
[L782]   COND TRUE   __exception
[L783]               __tmp__Balance := Balance;
[L784]               __tmp__DType := DType;
[L785]               __tmp__Alloc := Alloc;
[L786]               __tmp__balance_ADDR := balance_ADDR;
[L787]               __tmp__M_Ref_int := M_Ref_int;
[L788]               __tmp__sum_balances0 := sum_balances0;
[L789]               __tmp__alloc_allowed_DiceToken_lvl0 := alloc_allowed_DiceToken_lvl0;
[L790]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L791]               __tmp__sum_allowed1 := sum_allowed1;
[L792]               __tmp__Length := Length;
[L793]               __tmp__now := now;
[L794]               __tmp__owner_Owned := owner_Owned;
[L795]               __tmp__newOwner_Owned := newOwner_Owned;
[L796]               __tmp__symbol_DiceToken := symbol_DiceToken;
[L797]               __tmp__name_DiceToken := name_DiceToken;
[L798]               __tmp__decimals_DiceToken := decimals_DiceToken;
[L799]               __tmp___totalSupply_DiceToken := _totalSupply_DiceToken;
[L800]               __tmp__balances_DiceToken := balances_DiceToken;
[L801]               __tmp__allowed_DiceToken := allowed_DiceToken;
[L802]   CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L1965]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][from_s453], tokens_s453);
[L1594]  COND FALSE  !(!(b_s45 <= a_s45))
[L1598]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1965]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][from_s453], tokens_s453);
[L1966]  COND FALSE  !(revert)
[L1969]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_DiceToken[this][from_s453];
[L1970]              __tmp__balances_DiceToken[this][from_s453] := __var_6;
[L1971]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_DiceToken[this][from_s453];
[L1972]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L1594]  COND FALSE  !(!(b_s45 <= a_s45))
[L1598]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1972]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L1973]  COND FALSE  !(revert)
[L1976]              __tmp__sum_allowed1[from_s453] := __tmp__sum_allowed1[from_s453] - __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG];
[L1977]              __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG] := __var_7;
[L1978]              __tmp__sum_allowed1[from_s453] := __tmp__sum_allowed1[from_s453] + __tmp__allowed_DiceToken[this][from_s453][msgsender_MSG];
[L1979]  CALL        call __var_8 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][to_s453], tokens_s453);
[L1576]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1577]  COND TRUE   !(c_s23 >= a_s23)
[L1578]              revert := true;
[L1979]  RET         call __var_8 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][to_s453], tokens_s453);
[L1980]  COND TRUE   revert
[L802]   RET         call success_s453 := transferFrom~address~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L803]               assume revert || gas < 0;
[L3230]  RET         call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3305]  RET         call CorralChoice_DiceToken(this);

[2020-11-25 13:57:48,919 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:57:48,919 INFO  L82        PathProgramCache]: Analyzing trace with hash -827838567, now seen corresponding path program 1 times
[2020-11-25 13:57:48,920 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:57:48,941 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:57:49,126 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 51 trivial. 0 not checked.
[2020-11-25 13:57:49,126 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:57:49,127 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 13:57:49,127 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:57:49,127 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 13:57:49,127 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=16, Invalid=56, Unknown=0, NotChecked=0, Total=72
[2020-11-25 13:57:49,127 INFO  L87              Difference]: Start difference. First operand 1463 states and 1602 transitions. cyclomatic complexity: 146 Second operand 9 states.
[2020-11-25 13:57:49,572 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:57:49,572 INFO  L93              Difference]: Finished difference Result 1493 states and 1648 transitions.
[2020-11-25 13:57:49,573 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 13:57:49,573 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1493 states and 1648 transitions.
[2020-11-25 13:57:49,576 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:57:49,579 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1493 states to 1453 states and 1606 transitions.
[2020-11-25 13:57:49,579 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 433
[2020-11-25 13:57:49,579 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 433
[2020-11-25 13:57:49,579 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1453 states and 1606 transitions.
[2020-11-25 13:57:49,580 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:57:49,581 INFO  L728         BuchiCegarLoop]: Abstraction has 1453 states and 1606 transitions.
[2020-11-25 13:57:49,582 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1453 states and 1606 transitions.
[2020-11-25 13:57:49,588 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1453 to 1383.
[2020-11-25 13:57:49,589 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1383 states.
[2020-11-25 13:57:49,590 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1383 states to 1383 states and 1504 transitions.
[2020-11-25 13:57:49,590 INFO  L751         BuchiCegarLoop]: Abstraction has 1383 states and 1504 transitions.
[2020-11-25 13:57:49,590 INFO  L631         BuchiCegarLoop]: Abstraction has 1383 states and 1504 transitions.
[2020-11-25 13:57:49,590 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 13:57:49,590 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1383 states and 1504 transitions.
[2020-11-25 13:57:49,591 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:57:49,591 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:57:49,591 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:57:49,592 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:57:49,592 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_DiceToken0 := false;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3295]              assume null == 0;
[L3296]  CALL        call this := FreshRefGenerator__success();
[L1536]              havoc newRef;
[L1537]              assume Alloc[newRef] == false;
[L1538]              Alloc[newRef] := true;
[L1539]              assume newRef != null;
[L3296]  RET         call this := FreshRefGenerator__success();
[L3297]              assume now >= 0;
[L3298]              assume DType[this] == DiceToken;
[L3299]              assume msgvalue_MSG == 0;
[L3300]              gas := gas - 53000;
[L3301]  CALL        call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L502]               havoc __exception;
[L503]               revert := false;
[L504]   COND FALSE  !(__exception)
[L527]   CALL        call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1672]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1657]              assume msgsender_MSG != null;
[L1658]              Balance[this] := 0;
[L1672]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]  COND FALSE  !(revert)
[L1854]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1855]  COND FALSE  !(revert)
[L1858]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1692]              assume msgsender_MSG != null;
[L1693]              Balance[this] := 0;
[L1694]              owner_Owned[this] := null;
[L1695]              newOwner_Owned[this] := null;
[L1697]              owner_Owned[this] := msgsender_MSG;
[L1710]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]  COND FALSE  !(revert)
[L1858]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1859]  COND FALSE  !(revert)
[L1862]  CALL        call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1812]              assume msgsender_MSG != null;
[L1813]              Balance[this] := 0;
[L1814]              symbol_DiceToken[this] := 31320490;
[L1815]              name_DiceToken[this] := 31320490;
[L1816]              decimals_DiceToken[this] := 0;
[L1817]              _totalSupply_DiceToken[this] := 0;
[L1818]              balances_DiceToken[this] := zeroRefintArr();
[L1819]              sum_balances0[this] := 0;
[L1820]              allowed_DiceToken[this] := zeroRefRefintArr();
[L1821]              sum_allowed1[this] := 0;
[L1823]              decimals_DiceToken[this] := 18;
[L1824]              symbol_DiceToken[this] := 884691297;
[L1825]              name_DiceToken[this] := 869301625;
[L1826]              __var_2 := decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]              _totalSupply_DiceToken[this] := 30678 * (nonlinearPow(10, decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1828]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][owner_Owned[this]];
[L1829]              balances_DiceToken[this][owner_Owned[this]] := _totalSupply_DiceToken[this];
[L1830]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][owner_Owned[this]];
[L1831]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1862]  RET         call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1863]  COND FALSE  !(revert)
[L527]   RET         call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L528]               assume !revert && gas >= 0;
[L3301]  RET         call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L3302]              assume !revert && gas >= 0;
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND FALSE  !(choice == 12)
[L3218]  COND FALSE  !(choice == 11)
[L3225]  COND TRUE   choice == 10
[L3226]              gas := gas - 21000;
[L3227]  COND TRUE   gas >= 0
[L3228]              assume tokens_s453 >= 0 && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3229]              assume msgvalue_MSG == 0;
[L3230]  CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != from_s453 && p1 != to_s453) && (p2 != from_s453 || p3 != msgsender_MSG)) && from_s453 != to_s453) && tokens_s453 <= balances_DiceToken[this][from_s453]) && tokens_s453 <= allowed_DiceToken[this][from_s453][msgsender_MSG]) && balances_DiceToken[this][to_s453] + tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s453 >= 0) && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s453] >= 0) && balances_DiceToken[this][to_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][from_s453] >= 0) && balances_DiceToken[this][from_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_DiceToken[this][from_s453][msgsender_MSG] >= 0) && allowed_DiceToken[this][from_s453][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L780]               havoc __exception;
[L781]               revert := false;
[L782]   COND FALSE  !(__exception)
[L805]   CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L1995]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][from_s453], tokens_s453);
[L1603]  COND FALSE  !(!(b_s45 <= a_s45))
[L1607]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1995]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][from_s453], tokens_s453);
[L1996]  COND FALSE  !(revert)
[L1999]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][from_s453];
[L2000]              balances_DiceToken[this][from_s453] := __var_6;
[L2001]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][from_s453];
[L2002]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L1603]  COND FALSE  !(!(b_s45 <= a_s45))
[L1607]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2002]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L2003]  COND FALSE  !(revert)
[L2006]              sum_allowed1[from_s453] := sum_allowed1[from_s453] - allowed_DiceToken[this][from_s453][msgsender_MSG];
[L2007]              allowed_DiceToken[this][from_s453][msgsender_MSG] := __var_7;
[L2008]              sum_allowed1[from_s453] := sum_allowed1[from_s453] + allowed_DiceToken[this][from_s453][msgsender_MSG];
[L2009]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s453], tokens_s453);
[L1585]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1586]  COND FALSE  !(!(c_s23 >= a_s23))
[L2009]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s453], tokens_s453);
[L2010]  COND FALSE  !(revert)
[L2013]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][to_s453];
[L2014]              balances_DiceToken[this][to_s453] := __var_8;
[L2015]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][to_s453];
[L2016]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L2017]              success_s453 := true;
[L805]   RET         call success_s453 := transferFrom~address~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L806]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s453 == true && balances_DiceToken[this][from_s453] == old(balances_DiceToken[this][from_s453]) - tokens_s453) && balances_DiceToken[this][to_s453] == old(balances_DiceToken[this][to_s453]) + tokens_s453) && allowed_DiceToken[this][from_s453][msgsender_MSG] == old(allowed_DiceToken[this][from_s453][msgsender_MSG]) - tokens_s453) && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this])) && balances_DiceToken[this][p1] == old(balances_DiceToken[this][p1])) && allowed_DiceToken[this][p2][p3] == old(allowed_DiceToken[this][p2][p3])) && symbol_DiceToken[this] == old(symbol_DiceToken[this])) && name_DiceToken[this] == old(name_DiceToken[this])) && decimals_DiceToken[this] == old(decimals_DiceToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L3230]  RET         call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3305]  RET         call CorralChoice_DiceToken(this);
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND FALSE  !(choice == 12)
[L3218]  COND FALSE  !(choice == 11)
[L3225]  COND TRUE   choice == 10
[L3226]              gas := gas - 21000;
[L3227]  COND TRUE   gas >= 0
[L3228]              assume tokens_s453 >= 0 && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3229]              assume msgvalue_MSG == 0;
[L3230]  CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s453 && p1 != to_s453) && (p2 != from_s453 || p3 != msgsender_MSG)) && from_s453 != to_s453) && tokens_s453 <= balances_DiceToken[this][from_s453]) && tokens_s453 <= allowed_DiceToken[this][from_s453][msgsender_MSG]) && balances_DiceToken[this][to_s453] + tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s453 >= 0) && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s453] >= 0) && balances_DiceToken[this][to_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][from_s453] >= 0) && balances_DiceToken[this][from_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_DiceToken[this][from_s453][msgsender_MSG] >= 0) && allowed_DiceToken[this][from_s453][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DiceToken0 := true;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L780]               havoc __exception;
[L781]               revert := false;
[L782]   COND FALSE  !(__exception)
[L805]   CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L1995]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][from_s453], tokens_s453);
[L1603]  COND FALSE  !(!(b_s45 <= a_s45))
[L1607]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1995]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][from_s453], tokens_s453);
[L1996]  COND FALSE  !(revert)
[L1999]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][from_s453];
[L2000]              balances_DiceToken[this][from_s453] := __var_6;
[L2001]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][from_s453];
[L2002]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L1603]  COND FALSE  !(!(b_s45 <= a_s45))
[L1607]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2002]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L2003]  COND FALSE  !(revert)
[L2006]              sum_allowed1[from_s453] := sum_allowed1[from_s453] - allowed_DiceToken[this][from_s453][msgsender_MSG];
[L2007]              allowed_DiceToken[this][from_s453][msgsender_MSG] := __var_7;
[L2008]              sum_allowed1[from_s453] := sum_allowed1[from_s453] + allowed_DiceToken[this][from_s453][msgsender_MSG];
[L2009]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s453], tokens_s453);
[L1585]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1586]  COND FALSE  !(!(c_s23 >= a_s23))
[L2009]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s453], tokens_s453);
[L2010]  COND FALSE  !(revert)
[L2013]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][to_s453];
[L2014]              balances_DiceToken[this][to_s453] := __var_8;
[L2015]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][to_s453];
[L2016]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L2017]              success_s453 := true;
[L805]   RET         call success_s453 := transferFrom~address~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L806]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s453 == true && balances_DiceToken[this][from_s453] == old(balances_DiceToken[this][from_s453]) - tokens_s453) && balances_DiceToken[this][to_s453] == old(balances_DiceToken[this][to_s453]) + tokens_s453) && allowed_DiceToken[this][from_s453][msgsender_MSG] == old(allowed_DiceToken[this][from_s453][msgsender_MSG]) - tokens_s453) && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this])) && balances_DiceToken[this][p1] == old(balances_DiceToken[this][p1])) && allowed_DiceToken[this][p2][p3] == old(allowed_DiceToken[this][p2][p3])) && symbol_DiceToken[this] == old(symbol_DiceToken[this])) && name_DiceToken[this] == old(name_DiceToken[this])) && decimals_DiceToken[this] == old(decimals_DiceToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L3230]  RET         call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3305]  RET         call CorralChoice_DiceToken(this);

Loop:
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND TRUE   choice == 15
[L3194]              gas := gas - 21000;
[L3195]  COND FALSE  !(gas >= 0)
[L3305]  RET         call CorralChoice_DiceToken(this);

[2020-11-25 13:57:49,595 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:57:49,595 INFO  L82        PathProgramCache]: Analyzing trace with hash 1737886094, now seen corresponding path program 1 times
[2020-11-25 13:57:49,595 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:57:49,680 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:57:50,950 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 23 refuted. 0 times theorem prover too weak. 43 trivial. 0 not checked.
[2020-11-25 13:57:50,951 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 13:57:50,951 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [46] total 46
[2020-11-25 13:57:50,951 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:57:50,951 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 47 interpolants.
[2020-11-25 13:57:50,952 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=159, Invalid=2003, Unknown=0, NotChecked=0, Total=2162
[2020-11-25 13:57:50,952 INFO  L87              Difference]: Start difference. First operand 1383 states and 1504 transitions. cyclomatic complexity: 126 Second operand 47 states.
[2020-11-25 13:57:57,256 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:57:57,257 INFO  L93              Difference]: Finished difference Result 1575 states and 1768 transitions.
[2020-11-25 13:57:57,257 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 37 states. 
[2020-11-25 13:57:57,257 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1575 states and 1768 transitions.
[2020-11-25 13:57:57,260 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:57:57,263 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1575 states to 1575 states and 1768 transitions.
[2020-11-25 13:57:57,263 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 488
[2020-11-25 13:57:57,263 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 488
[2020-11-25 13:57:57,263 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1575 states and 1768 transitions.
[2020-11-25 13:57:57,265 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:57:57,265 INFO  L728         BuchiCegarLoop]: Abstraction has 1575 states and 1768 transitions.
[2020-11-25 13:57:57,266 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1575 states and 1768 transitions.
[2020-11-25 13:57:57,273 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1575 to 1538.
[2020-11-25 13:57:57,273 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1538 states.
[2020-11-25 13:57:57,275 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1538 states to 1538 states and 1722 transitions.
[2020-11-25 13:57:57,275 INFO  L751         BuchiCegarLoop]: Abstraction has 1538 states and 1722 transitions.
[2020-11-25 13:57:57,275 INFO  L631         BuchiCegarLoop]: Abstraction has 1538 states and 1722 transitions.
[2020-11-25 13:57:57,275 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 13:57:57,275 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1538 states and 1722 transitions.
[2020-11-25 13:57:57,276 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:57:57,277 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:57:57,277 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:57:57,277 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:57:57,277 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_DiceToken0 := false;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3295]              assume null == 0;
[L3296]  CALL        call this := FreshRefGenerator__success();
[L1536]              havoc newRef;
[L1537]              assume Alloc[newRef] == false;
[L1538]              Alloc[newRef] := true;
[L1539]              assume newRef != null;
[L3296]  RET         call this := FreshRefGenerator__success();
[L3297]              assume now >= 0;
[L3298]              assume DType[this] == DiceToken;
[L3299]              assume msgvalue_MSG == 0;
[L3300]              gas := gas - 53000;
[L3301]  CALL        call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L502]               havoc __exception;
[L503]               revert := false;
[L504]   COND FALSE  !(__exception)
[L527]   CALL        call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1672]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1657]              assume msgsender_MSG != null;
[L1658]              Balance[this] := 0;
[L1672]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]  COND FALSE  !(revert)
[L1854]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1855]  COND FALSE  !(revert)
[L1858]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1692]              assume msgsender_MSG != null;
[L1693]              Balance[this] := 0;
[L1694]              owner_Owned[this] := null;
[L1695]              newOwner_Owned[this] := null;
[L1697]              owner_Owned[this] := msgsender_MSG;
[L1710]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]  COND FALSE  !(revert)
[L1858]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1859]  COND FALSE  !(revert)
[L1862]  CALL        call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1812]              assume msgsender_MSG != null;
[L1813]              Balance[this] := 0;
[L1814]              symbol_DiceToken[this] := 31320490;
[L1815]              name_DiceToken[this] := 31320490;
[L1816]              decimals_DiceToken[this] := 0;
[L1817]              _totalSupply_DiceToken[this] := 0;
[L1818]              balances_DiceToken[this] := zeroRefintArr();
[L1819]              sum_balances0[this] := 0;
[L1820]              allowed_DiceToken[this] := zeroRefRefintArr();
[L1821]              sum_allowed1[this] := 0;
[L1823]              decimals_DiceToken[this] := 18;
[L1824]              symbol_DiceToken[this] := 884691297;
[L1825]              name_DiceToken[this] := 869301625;
[L1826]              __var_2 := decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]              _totalSupply_DiceToken[this] := 30678 * (nonlinearPow(10, decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1828]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][owner_Owned[this]];
[L1829]              balances_DiceToken[this][owner_Owned[this]] := _totalSupply_DiceToken[this];
[L1830]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][owner_Owned[this]];
[L1831]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1862]  RET         call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1863]  COND FALSE  !(revert)
[L527]   RET         call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L528]               assume !revert && gas >= 0;
[L3301]  RET         call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L3302]              assume !revert && gas >= 0;
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND FALSE  !(choice == 12)
[L3218]  COND FALSE  !(choice == 11)
[L3225]  COND FALSE  !(choice == 10)
[L3232]  COND FALSE  !(choice == 9)
[L3238]  COND FALSE  !(choice == 8)
[L3244]  COND FALSE  !(choice == 7)
[L3250]  COND FALSE  !(choice == 6)
[L3256]  COND FALSE  !(choice == 5)
[L3262]  COND FALSE  !(choice == 4)
[L3268]  COND FALSE  !(choice == 3)
[L3274]  COND FALSE  !(choice == 2)
[L3280]  COND TRUE   choice == 1
[L3281]              gas := gas - 21000;
[L3282]  COND TRUE   gas >= 0
[L3283]              assume tokens_s496 >= 0 && tokens_s496 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3284]              assume msgvalue_MSG == 0;
[L3285]  CALL        call success_s496 := transferAnyERC20Token~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s496, tokens_s496);
[L893]               havoc __exception;
[L894]               revert := false;
[L895]   COND FALSE  !(__exception)
[L918]   CALL        call success_s496 := transferAnyERC20Token~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s496, tokens_s496);
[L2085]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L2085]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2086]  COND FALSE  !(revert)
[L2089]              assume DType[tokenAddress_s496] == ERC20Interface || DType[tokenAddress_s496] == DiceToken;
[L2090]              __var_10 := tokenAddress_s496;
[L2091]  COND TRUE   DType[__var_10] == DiceToken
[L2092]  CALL        call __var_9 := transfer~address~uint256_DiceToken__success(__var_10, this, __var_11, owner_Owned[this], tokens_s496);
[L1922]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1603]  COND FALSE  !(!(b_s45 <= a_s45))
[L1607]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1922]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1923]  COND FALSE  !(revert)
[L1926]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][msgsender_MSG];
[L1927]              balances_DiceToken[this][msgsender_MSG] := __var_4;
[L1928]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][msgsender_MSG];
[L1929]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1585]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1586]  COND FALSE  !(!(c_s23 >= a_s23))
[L1929]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1930]  COND FALSE  !(revert)
[L1933]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][to_s366];
[L1934]              balances_DiceToken[this][to_s366] := __var_5;
[L1935]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][to_s366];
[L1936]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1937]              success_s366 := true;
[L2092]  RET         call __var_9 := transfer~address~uint256_DiceToken__success(__var_10, this, __var_11, owner_Owned[this], tokens_s496);
[L2093]  COND FALSE  !(revert)
[L2101]              success_s496 := __var_9;
[L918]   RET         call success_s496 := transferAnyERC20Token~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s496, tokens_s496);
[L919]               assume !revert && gas >= 0;
[L3285]  RET         call success_s496 := transferAnyERC20Token~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s496, tokens_s496);
[L3305]  RET         call CorralChoice_DiceToken(this);
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND FALSE  !(choice == 12)
[L3218]  COND FALSE  !(choice == 11)
[L3225]  COND TRUE   choice == 10
[L3226]              gas := gas - 21000;
[L3227]  COND TRUE   gas >= 0
[L3228]              assume tokens_s453 >= 0 && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3229]              assume msgvalue_MSG == 0;
[L3230]  CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s453 && p1 != to_s453) && (p2 != from_s453 || p3 != msgsender_MSG)) && from_s453 != to_s453) && tokens_s453 <= balances_DiceToken[this][from_s453]) && tokens_s453 <= allowed_DiceToken[this][from_s453][msgsender_MSG]) && balances_DiceToken[this][to_s453] + tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s453 >= 0) && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s453] >= 0) && balances_DiceToken[this][to_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][from_s453] >= 0) && balances_DiceToken[this][from_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_DiceToken[this][from_s453][msgsender_MSG] >= 0) && allowed_DiceToken[this][from_s453][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DiceToken0 := true;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L780]               havoc __exception;
[L781]               revert := false;
[L782]   COND FALSE  !(__exception)
[L805]   CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L1995]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][from_s453], tokens_s453);
[L1603]  COND FALSE  !(!(b_s45 <= a_s45))
[L1607]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1995]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][from_s453], tokens_s453);
[L1996]  COND FALSE  !(revert)
[L1999]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][from_s453];
[L2000]              balances_DiceToken[this][from_s453] := __var_6;
[L2001]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][from_s453];
[L2002]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L1603]  COND FALSE  !(!(b_s45 <= a_s45))
[L1607]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2002]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L2003]  COND FALSE  !(revert)
[L2006]              sum_allowed1[from_s453] := sum_allowed1[from_s453] - allowed_DiceToken[this][from_s453][msgsender_MSG];
[L2007]              allowed_DiceToken[this][from_s453][msgsender_MSG] := __var_7;
[L2008]              sum_allowed1[from_s453] := sum_allowed1[from_s453] + allowed_DiceToken[this][from_s453][msgsender_MSG];
[L2009]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s453], tokens_s453);
[L1585]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1586]  COND FALSE  !(!(c_s23 >= a_s23))
[L2009]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s453], tokens_s453);
[L2010]  COND FALSE  !(revert)
[L2013]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][to_s453];
[L2014]              balances_DiceToken[this][to_s453] := __var_8;
[L2015]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][to_s453];
[L2016]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L2017]              success_s453 := true;
[L805]   RET         call success_s453 := transferFrom~address~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L806]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s453 == true && balances_DiceToken[this][from_s453] == old(balances_DiceToken[this][from_s453]) - tokens_s453) && balances_DiceToken[this][to_s453] == old(balances_DiceToken[this][to_s453]) + tokens_s453) && allowed_DiceToken[this][from_s453][msgsender_MSG] == old(allowed_DiceToken[this][from_s453][msgsender_MSG]) - tokens_s453) && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this])) && balances_DiceToken[this][p1] == old(balances_DiceToken[this][p1])) && allowed_DiceToken[this][p2][p3] == old(allowed_DiceToken[this][p2][p3])) && symbol_DiceToken[this] == old(symbol_DiceToken[this])) && name_DiceToken[this] == old(name_DiceToken[this])) && decimals_DiceToken[this] == old(decimals_DiceToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L3230]  RET         call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3305]  RET         call CorralChoice_DiceToken(this);

Loop:
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND FALSE  !(choice == 12)
[L3218]  COND TRUE   choice == 11
[L3219]              gas := gas - 21000;
[L3220]  COND TRUE   gas >= 0
[L3221]              assume tokens_s394 >= 0 && tokens_s394 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3222]              assume msgvalue_MSG == 0;
[L3223]  CALL        call success_s394 := approve~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, spender_s394, tokens_s394);
[L722]               havoc __exception;
[L723]               revert := false;
[L724]   COND FALSE  !(__exception)
[L747]   CALL        call success_s394 := approve~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s394, tokens_s394);
[L1952]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_DiceToken[this][msgsender_MSG][spender_s394];
[L1953]              allowed_DiceToken[this][msgsender_MSG][spender_s394] := tokens_s394;
[L1954]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_DiceToken[this][msgsender_MSG][spender_s394];
[L1955]              assert { :EventEmitted "Approval_DiceToken" } true;
[L1956]              success_s394 := true;
[L747]   RET         call success_s394 := approve~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s394, tokens_s394);
[L748]               assume !revert && gas >= 0;
[L3223]  RET         call success_s394 := approve~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, spender_s394, tokens_s394);
[L3305]  RET         call CorralChoice_DiceToken(this);

[2020-11-25 13:57:57,280 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:57:57,280 INFO  L82        PathProgramCache]: Analyzing trace with hash 762414785, now seen corresponding path program 1 times
[2020-11-25 13:57:57,281 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:57:57,337 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:57:58,278 INFO  L134       CoverageAnalysis]: Checked inductivity of 53 backedges. 0 proven. 51 refuted. 0 times theorem prover too weak. 2 trivial. 0 not checked.
[2020-11-25 13:57:58,278 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 13:57:58,278 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [46] total 46
[2020-11-25 13:57:58,278 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:57:58,278 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 47 interpolants.
[2020-11-25 13:57:58,279 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=169, Invalid=1993, Unknown=0, NotChecked=0, Total=2162
[2020-11-25 13:57:58,279 INFO  L87              Difference]: Start difference. First operand 1538 states and 1722 transitions. cyclomatic complexity: 192 Second operand 47 states.
[2020-11-25 13:58:03,618 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:58:03,618 INFO  L93              Difference]: Finished difference Result 1603 states and 1843 transitions.
[2020-11-25 13:58:03,618 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 46 states. 
[2020-11-25 13:58:03,619 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1603 states and 1843 transitions.
[2020-11-25 13:58:03,622 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 13:58:03,626 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1603 states to 1603 states and 1843 transitions.
[2020-11-25 13:58:03,626 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 499
[2020-11-25 13:58:03,626 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 499
[2020-11-25 13:58:03,626 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1603 states and 1843 transitions.
[2020-11-25 13:58:03,628 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:58:03,628 INFO  L728         BuchiCegarLoop]: Abstraction has 1603 states and 1843 transitions.
[2020-11-25 13:58:03,629 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1603 states and 1843 transitions.
[2020-11-25 13:58:03,636 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1603 to 1545.
[2020-11-25 13:58:03,637 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1545 states.
[2020-11-25 13:58:03,638 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1545 states to 1545 states and 1740 transitions.
[2020-11-25 13:58:03,638 INFO  L751         BuchiCegarLoop]: Abstraction has 1545 states and 1740 transitions.
[2020-11-25 13:58:03,638 INFO  L631         BuchiCegarLoop]: Abstraction has 1545 states and 1740 transitions.
[2020-11-25 13:58:03,638 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 13:58:03,638 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1545 states and 1740 transitions.
[2020-11-25 13:58:03,640 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:58:03,640 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:58:03,640 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:58:03,641 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:58:03,641 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_DiceToken0 := false;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3295]              assume null == 0;
[L3296]  CALL        call this := FreshRefGenerator__success();
[L1536]              havoc newRef;
[L1537]              assume Alloc[newRef] == false;
[L1538]              Alloc[newRef] := true;
[L1539]              assume newRef != null;
[L3296]  RET         call this := FreshRefGenerator__success();
[L3297]              assume now >= 0;
[L3298]              assume DType[this] == DiceToken;
[L3299]              assume msgvalue_MSG == 0;
[L3300]              gas := gas - 53000;
[L3301]  CALL        call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L502]               havoc __exception;
[L503]               revert := false;
[L504]   COND FALSE  !(__exception)
[L527]   CALL        call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1672]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1657]              assume msgsender_MSG != null;
[L1658]              Balance[this] := 0;
[L1672]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]  COND FALSE  !(revert)
[L1854]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1855]  COND FALSE  !(revert)
[L1858]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1692]              assume msgsender_MSG != null;
[L1693]              Balance[this] := 0;
[L1694]              owner_Owned[this] := null;
[L1695]              newOwner_Owned[this] := null;
[L1697]              owner_Owned[this] := msgsender_MSG;
[L1710]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]  COND FALSE  !(revert)
[L1858]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1859]  COND FALSE  !(revert)
[L1862]  CALL        call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1812]              assume msgsender_MSG != null;
[L1813]              Balance[this] := 0;
[L1814]              symbol_DiceToken[this] := 31320490;
[L1815]              name_DiceToken[this] := 31320490;
[L1816]              decimals_DiceToken[this] := 0;
[L1817]              _totalSupply_DiceToken[this] := 0;
[L1818]              balances_DiceToken[this] := zeroRefintArr();
[L1819]              sum_balances0[this] := 0;
[L1820]              allowed_DiceToken[this] := zeroRefRefintArr();
[L1821]              sum_allowed1[this] := 0;
[L1823]              decimals_DiceToken[this] := 18;
[L1824]              symbol_DiceToken[this] := 884691297;
[L1825]              name_DiceToken[this] := 869301625;
[L1826]              __var_2 := decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]              _totalSupply_DiceToken[this] := 30678 * (nonlinearPow(10, decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1828]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][owner_Owned[this]];
[L1829]              balances_DiceToken[this][owner_Owned[this]] := _totalSupply_DiceToken[this];
[L1830]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][owner_Owned[this]];
[L1831]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1862]  RET         call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1863]  COND FALSE  !(revert)
[L527]   RET         call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L528]               assume !revert && gas >= 0;
[L3301]  RET         call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L3302]              assume !revert && gas >= 0;
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND FALSE  !(choice == 12)
[L3218]  COND TRUE   choice == 11
[L3219]              gas := gas - 21000;
[L3220]  COND TRUE   gas >= 0
[L3221]              assume tokens_s394 >= 0 && tokens_s394 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3222]              assume msgvalue_MSG == 0;
[L3223]  CALL        call success_s394 := approve~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, spender_s394, tokens_s394);
[L722]               havoc __exception;
[L723]               revert := false;
[L724]   COND FALSE  !(__exception)
[L747]   CALL        call success_s394 := approve~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s394, tokens_s394);
[L1952]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_DiceToken[this][msgsender_MSG][spender_s394];
[L1953]              allowed_DiceToken[this][msgsender_MSG][spender_s394] := tokens_s394;
[L1954]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_DiceToken[this][msgsender_MSG][spender_s394];
[L1955]              assert { :EventEmitted "Approval_DiceToken" } true;
[L1956]              success_s394 := true;
[L747]   RET         call success_s394 := approve~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s394, tokens_s394);
[L748]               assume !revert && gas >= 0;
[L3223]  RET         call success_s394 := approve~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, spender_s394, tokens_s394);
[L3305]  RET         call CorralChoice_DiceToken(this);
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND TRUE   choice == 12
[L3212]              gas := gas - 21000;
[L3213]  COND TRUE   gas >= 0
[L3214]              assume tokens_s366 >= 0 && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              assume msgvalue_MSG == 0;
[L3216]  CALL        call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L666]               havoc __exception;
[L667]               revert := false;
[L668]   COND FALSE  !(__exception)
[L691]   CALL        call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L1922]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1603]  COND FALSE  !(!(b_s45 <= a_s45))
[L1607]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1922]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1923]  COND FALSE  !(revert)
[L1926]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][msgsender_MSG];
[L1927]              balances_DiceToken[this][msgsender_MSG] := __var_4;
[L1928]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][msgsender_MSG];
[L1929]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1585]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1586]  COND FALSE  !(!(c_s23 >= a_s23))
[L1929]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1930]  COND FALSE  !(revert)
[L1933]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][to_s366];
[L1934]              balances_DiceToken[this][to_s366] := __var_5;
[L1935]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][to_s366];
[L1936]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1937]              success_s366 := true;
[L691]   RET         call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L692]               assume !revert && gas >= 0;
[L3216]  RET         call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3305]  RET         call CorralChoice_DiceToken(this);
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND FALSE  !(choice == 12)
[L3218]  COND FALSE  !(choice == 11)
[L3225]  COND TRUE   choice == 10
[L3226]              gas := gas - 21000;
[L3227]  COND TRUE   gas >= 0
[L3228]              assume tokens_s453 >= 0 && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3229]              assume msgvalue_MSG == 0;
[L3230]  CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s453 && p1 != to_s453) && (p2 != from_s453 || p3 != msgsender_MSG)) && from_s453 != to_s453) && tokens_s453 <= balances_DiceToken[this][from_s453]) && tokens_s453 <= allowed_DiceToken[this][from_s453][msgsender_MSG]) && balances_DiceToken[this][to_s453] + tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s453 >= 0) && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s453] >= 0) && balances_DiceToken[this][to_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][from_s453] >= 0) && balances_DiceToken[this][from_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_DiceToken[this][from_s453][msgsender_MSG] >= 0) && allowed_DiceToken[this][from_s453][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DiceToken0 := true;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L780]               havoc __exception;
[L781]               revert := false;
[L782]   COND FALSE  !(__exception)
[L805]   CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L1995]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][from_s453], tokens_s453);
[L1603]  COND FALSE  !(!(b_s45 <= a_s45))
[L1607]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1995]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][from_s453], tokens_s453);
[L1996]  COND FALSE  !(revert)
[L1999]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][from_s453];
[L2000]              balances_DiceToken[this][from_s453] := __var_6;
[L2001]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][from_s453];
[L2002]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L1603]  COND FALSE  !(!(b_s45 <= a_s45))
[L1607]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2002]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L2003]  COND FALSE  !(revert)
[L2006]              sum_allowed1[from_s453] := sum_allowed1[from_s453] - allowed_DiceToken[this][from_s453][msgsender_MSG];
[L2007]              allowed_DiceToken[this][from_s453][msgsender_MSG] := __var_7;
[L2008]              sum_allowed1[from_s453] := sum_allowed1[from_s453] + allowed_DiceToken[this][from_s453][msgsender_MSG];
[L2009]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s453], tokens_s453);
[L1585]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1586]  COND FALSE  !(!(c_s23 >= a_s23))
[L2009]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s453], tokens_s453);
[L2010]  COND FALSE  !(revert)
[L2013]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][to_s453];
[L2014]              balances_DiceToken[this][to_s453] := __var_8;
[L2015]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][to_s453];
[L2016]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L2017]              success_s453 := true;
[L805]   RET         call success_s453 := transferFrom~address~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L806]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s453 == true && balances_DiceToken[this][from_s453] == old(balances_DiceToken[this][from_s453]) - tokens_s453) && balances_DiceToken[this][to_s453] == old(balances_DiceToken[this][to_s453]) + tokens_s453) && allowed_DiceToken[this][from_s453][msgsender_MSG] == old(allowed_DiceToken[this][from_s453][msgsender_MSG]) - tokens_s453) && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this])) && balances_DiceToken[this][p1] == old(balances_DiceToken[this][p1])) && allowed_DiceToken[this][p2][p3] == old(allowed_DiceToken[this][p2][p3])) && symbol_DiceToken[this] == old(symbol_DiceToken[this])) && name_DiceToken[this] == old(name_DiceToken[this])) && decimals_DiceToken[this] == old(decimals_DiceToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L3230]  RET         call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3305]  RET         call CorralChoice_DiceToken(this);

Loop:
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND FALSE  !(choice == 12)
[L3218]  COND FALSE  !(choice == 11)
[L3225]  COND TRUE   choice == 10
[L3226]              gas := gas - 21000;
[L3227]  COND TRUE   gas >= 0
[L3228]              assume tokens_s453 >= 0 && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3229]              assume msgvalue_MSG == 0;
[L3230]  CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s453 && p1 != to_s453) && (p2 != from_s453 || p3 != msgsender_MSG)) && from_s453 != to_s453) && tokens_s453 <= balances_DiceToken[this][from_s453]) && tokens_s453 <= allowed_DiceToken[this][from_s453][msgsender_MSG]) && balances_DiceToken[this][to_s453] + tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s453 >= 0) && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s453] >= 0) && balances_DiceToken[this][to_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][from_s453] >= 0) && balances_DiceToken[this][from_s453] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_DiceToken[this][from_s453][msgsender_MSG] >= 0) && allowed_DiceToken[this][from_s453][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DiceToken0 := true;
[L3]                 call_transferFrom_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L780]               havoc __exception;
[L781]               revert := false;
[L782]   COND FALSE  !(__exception)
[L805]   CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L1995]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][from_s453], tokens_s453);
[L1603]  COND FALSE  !(!(b_s45 <= a_s45))
[L1607]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1995]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][from_s453], tokens_s453);
[L1996]  COND FALSE  !(revert)
[L1999]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][from_s453];
[L2000]              balances_DiceToken[this][from_s453] := __var_6;
[L2001]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][from_s453];
[L2002]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L1603]  COND FALSE  !(!(b_s45 <= a_s45))
[L1607]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2002]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L2003]  COND FALSE  !(revert)
[L2006]              sum_allowed1[from_s453] := sum_allowed1[from_s453] - allowed_DiceToken[this][from_s453][msgsender_MSG];
[L2007]              allowed_DiceToken[this][from_s453][msgsender_MSG] := __var_7;
[L2008]              sum_allowed1[from_s453] := sum_allowed1[from_s453] + allowed_DiceToken[this][from_s453][msgsender_MSG];
[L2009]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s453], tokens_s453);
[L1585]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1586]  COND FALSE  !(!(c_s23 >= a_s23))
[L2009]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s453], tokens_s453);
[L2010]  COND FALSE  !(revert)
[L2013]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][to_s453];
[L2014]              balances_DiceToken[this][to_s453] := __var_8;
[L2015]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][to_s453];
[L2016]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L2017]              success_s453 := true;
[L805]   RET         call success_s453 := transferFrom~address~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L806]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s453 == true && balances_DiceToken[this][from_s453] == old(balances_DiceToken[this][from_s453]) - tokens_s453) && balances_DiceToken[this][to_s453] == old(balances_DiceToken[this][to_s453]) + tokens_s453) && allowed_DiceToken[this][from_s453][msgsender_MSG] == old(allowed_DiceToken[this][from_s453][msgsender_MSG]) - tokens_s453) && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this])) && balances_DiceToken[this][p1] == old(balances_DiceToken[this][p1])) && allowed_DiceToken[this][p2][p3] == old(allowed_DiceToken[this][p2][p3])) && symbol_DiceToken[this] == old(symbol_DiceToken[this])) && name_DiceToken[this] == old(name_DiceToken[this])) && decimals_DiceToken[this] == old(decimals_DiceToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L3230]  RET         call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3305]  RET         call CorralChoice_DiceToken(this);

[2020-11-25 13:58:03,645 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:58:03,645 INFO  L82        PathProgramCache]: Analyzing trace with hash -87456899, now seen corresponding path program 1 times
[2020-11-25 13:58:03,645 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:58:03,803 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:58:04,110 INFO  L134       CoverageAnalysis]: Checked inductivity of 149 backedges. 3 proven. 0 refuted. 0 times theorem prover too weak. 146 trivial. 0 not checked.
[2020-11-25 13:58:04,110 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:58:04,110 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-25 13:58:04,110 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:58:04,111 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 13:58:04,111 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=38, Invalid=234, Unknown=0, NotChecked=0, Total=272
[2020-11-25 13:58:04,111 INFO  L87              Difference]: Start difference. First operand 1545 states and 1740 transitions. cyclomatic complexity: 204 Second operand 17 states.
[2020-11-25 13:58:05,283 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:58:05,283 INFO  L93              Difference]: Finished difference Result 806 states and 896 transitions.
[2020-11-25 13:58:05,283 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 13:58:05,283 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 806 states and 896 transitions.
[2020-11-25 13:58:05,284 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 13:58:05,285 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 806 states to 0 states and 0 transitions.
[2020-11-25 13:58:05,285 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 13:58:05,285 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 13:58:05,285 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 13:58:05,285 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:58:05,285 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 13:58:05,285 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 13:58:05,285 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 13:58:05,285 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 13:58:05,285 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 13:58:05,285 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 13:58:05,285 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 13:58:05,288 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:58:05 BasicIcfg
[2020-11-25 13:58:05,288 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 13:58:05,288 INFO  L168              Benchmark]: Toolchain (without parser) took 42373.29 ms. Allocated memory was 1.0 GB in the beginning and 3.3 GB in the end (delta: 2.3 GB). Free memory was 940.6 MB in the beginning and 3.0 GB in the end (delta: -2.1 GB). Peak memory consumption was 185.4 MB. Max. memory is 15.3 GB.
[2020-11-25 13:58:05,289 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.20 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 13:58:05,290 INFO  L168              Benchmark]: Boogie Preprocessor took 84.72 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 13:58:05,290 INFO  L168              Benchmark]: UtopiaSpecLang took 58.45 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 13:58:05,290 INFO  L168              Benchmark]: Boogie Printer took 13.66 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 13:58:05,290 INFO  L168              Benchmark]: RCFGBuilder took 642.96 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 817.1 MB in the end (delta: 96.6 MB). Peak memory consumption was 96.6 MB. Max. memory is 15.3 GB.
[2020-11-25 13:58:05,290 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.30 ms. Allocated memory is still 1.0 GB. Free memory was 817.1 MB in the beginning and 813.5 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 13:58:05,291 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1188.94 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 199.8 MB). Free memory was 813.5 MB in the beginning and 1.2 GB in the end (delta: -349.2 MB). Peak memory consumption was 188.6 MB. Max. memory is 15.3 GB.
[2020-11-25 13:58:05,291 INFO  L168              Benchmark]: BlockEncodingV2 took 113.24 ms. Allocated memory is still 1.2 GB. Free memory was 1.2 GB in the beginning and 1.1 GB in the end (delta: 54.5 MB). Peak memory consumption was 54.5 MB. Max. memory is 15.3 GB.
[2020-11-25 13:58:05,291 INFO  L168              Benchmark]: BuchiAutomizer took 40230.71 ms. Allocated memory was 1.2 GB in the beginning and 3.3 GB in the end (delta: 2.1 GB). Free memory was 1.1 GB in the beginning and 3.0 GB in the end (delta: -1.9 GB). Peak memory consumption was 153.3 MB. Max. memory is 15.3 GB.
[2020-11-25 13:58:05,293 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2836 locations, 4822 edges
  - StatisticsResult: Encoded RCFG
    2802 locations, 4737 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.20 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 84.72 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 58.45 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 13.66 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 642.96 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 817.1 MB in the end (delta: 96.6 MB). Peak memory consumption was 96.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.30 ms. Allocated memory is still 1.0 GB. Free memory was 817.1 MB in the beginning and 813.5 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1188.94 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 199.8 MB). Free memory was 813.5 MB in the beginning and 1.2 GB in the end (delta: -349.2 MB). Peak memory consumption was 188.6 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 113.24 ms. Allocated memory is still 1.2 GB. Free memory was 1.2 GB in the beginning and 1.1 GB in the end (delta: 54.5 MB). Peak memory consumption was 54.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 40230.71 ms. Allocated memory was 1.2 GB in the beginning and 3.3 GB in the end (delta: 2.1 GB). Free memory was 1.1 GB in the beginning and 3.0 GB in the end (delta: -1.9 GB). Peak memory consumption was 153.3 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1193 locations, 1490 edges
  - StatisticsResult: BuchiProgram size
    2836 locations, 4822 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 13 terminating modules (13 trivial, 0 deterministic, 0 nondeterministic). 13 modules have a trivial ranking function, the largest among these consists of 47 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 40.1s and 14 iterations.  TraceHistogramMax:3. Analysis of lassos took 6.6s. Construction of modules took 26.7s. BÃ¼chi inclusion checks took 6.1s. Highest rank in rank-based complementation 0. Minimization of det autom 13. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 12 MinimizatonAttempts, 1760 StatesRemovedByMinimization, 11 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 2159 states and ocurred in iteration 6.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 22120 SDtfs, 31601 SDslu, 88246 SDs, 0 SdLazy, 155862 SolverSat, 5521 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 26.7s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU13 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_DiceToken0) ==> ( <>(success_transferFrom_DiceToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
