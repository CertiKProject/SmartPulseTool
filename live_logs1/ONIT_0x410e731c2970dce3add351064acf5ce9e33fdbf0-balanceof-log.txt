This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 02:36:55,096 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 02:36:55,097 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 02:36:55,108 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 02:36:55,108 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 02:36:55,109 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 02:36:55,109 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 02:36:55,111 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 02:36:55,112 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 02:36:55,113 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 02:36:55,114 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 02:36:55,114 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 02:36:55,115 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 02:36:55,115 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 02:36:55,116 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 02:36:55,117 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 02:36:55,117 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 02:36:55,119 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 02:36:55,120 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 02:36:55,121 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 02:36:55,122 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 02:36:55,123 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 02:36:55,125 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 02:36:55,125 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 02:36:55,125 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 02:36:55,125 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 02:36:55,126 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 02:36:55,126 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 02:36:55,126 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 02:36:55,127 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 02:36:55,127 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 02:36:55,128 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 02:36:55,128 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 02:36:55,129 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 02:36:55,129 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 02:36:55,130 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 02:36:55,130 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 02:36:55,130 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 02:36:55,130 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 02:36:55,131 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 02:36:55,132 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 02:36:55,132 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 02:36:55,140 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 02:36:55,140 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 02:36:55,141 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 02:36:55,141 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 02:36:55,141 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 02:36:55,141 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 02:36:55,141 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 02:36:55,141 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 02:36:55,141 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 02:36:55,141 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 02:36:55,142 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 02:36:55,142 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 02:36:55,142 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 02:36:55,142 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 02:36:55,142 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 02:36:55,142 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 02:36:55,142 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 02:36:55,142 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 02:36:55,143 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 02:36:55,143 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 02:36:55,143 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 02:36:55,143 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 02:36:55,143 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 02:36:55,143 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 02:36:55,143 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 02:36:55,143 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 02:36:55,172 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 02:36:55,186 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 02:36:55,188 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 02:36:55,189 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 02:36:55,190 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 02:36:55,190 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_balanceof.bpl
[2020-11-25 02:36:55,191 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_balanceof.bpl'
[2020-11-25 02:36:55,332 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 02:36:55,333 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 02:36:55,333 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 02:36:55,333 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 02:36:55,333 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 02:36:55,350 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:36:55" (1/1) ...
[2020-11-25 02:36:55,352 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:36:55" (1/1) ...
[2020-11-25 02:36:55,410 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:36:55" (1/1) ...
[2020-11-25 02:36:55,411 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:36:55" (1/1) ...
[2020-11-25 02:36:55,454 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:36:55" (1/1) ...
[2020-11-25 02:36:55,480 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:36:55" (1/1) ...
[2020-11-25 02:36:55,496 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:36:55" (1/1) ...
[2020-11-25 02:36:55,516 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 02:36:55,517 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 02:36:55,517 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 02:36:55,519 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 02:36:55,523 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:36:55" (1/1) ...
[2020-11-25 02:36:55,549 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ONIT.balanceOf(owner), _balances_ERC20[this][owner] >= 0 && _balances_ERC20[this][owner] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ONIT.balanceOf(owner), return == _balances_ERC20[this][owner] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && implementation_ONIT[this] == old(implementation_ONIT[this]) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]]) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && newOwner_Ownable[this] == old(newOwner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 02:36:55,555 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ONIT.balanceOf(owner), _balances_ERC20[this][owner] >= 0 && _balances_ERC20[this][owner] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ONIT.balanceOf(owner), return == _balances_ERC20[this][owner] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && implementation_ONIT[this] == old(implementation_ONIT[this]) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]]) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && newOwner_Ownable[this] == old(newOwner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 02:36:55,563 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ONIT.balanceOf(owner), _balances_ERC20[this][owner] >= 0 && _balances_ERC20[this][owner] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ONIT.balanceOf(owner), return == _balances_ERC20[this][owner] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && implementation_ONIT[this] == old(implementation_ONIT[this]) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]]) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && newOwner_Ownable[this] == old(newOwner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 02:36:55,571 INFO  L636   opiaSpecLangObserver]: Parsed ( _balances_ERC20[this][owner_s1254]>=0 && _balances_ERC20[this][owner_s1254]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]],[IdentifierExpression[owner_s1254,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]],IntegerLiteral[0]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]],[IdentifierExpression[owner_s1254,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 02:36:55,575 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( __ret_0_==_balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowed_ERC20[this]==( old(_allowed_ERC20[this]) ) ) && implementation_ONIT[this]==( old(implementation_ONIT[this]) ) ) && M_Ref_Ref[timelockList_ONIT[this]]==( old(M_Ref_Ref[timelockList_ONIT[this]]) ) ) && frozenAccount_ONIT[this]==( old(frozenAccount_ONIT[this]) ) ) && _paused_Pausable[this]==( old(_paused_Pausable[this]) ) ) && _pausers_PauserRole[this]==( old(_pausers_PauserRole[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) && newOwner_Ownable[this]==( old(newOwner_Ownable[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,balanceOf~address_ONIT>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]],[IdentifierExpression[owner_s1254,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[implementation_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[implementation_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[M_Ref_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[timelockList_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[M_Ref_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[timelockList_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[frozenAccount_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[frozenAccount_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ONIT>]]]]]]
[2020-11-25 02:36:55,581 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ONIT.balanceOf(owner), _balances_ERC20[this][owner] >= 0 && _balances_ERC20[this][owner] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ONIT.balanceOf(owner), return == _balances_ERC20[this][owner] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && implementation_ONIT[this] == old(implementation_ONIT[this]) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]]) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && newOwner_Ownable[this] == old(newOwner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 02:36:55,581 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_balanceOf_ONIT0) ==> ( <>AP(success_balanceOf_ONIT0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 02:36:55,602 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:36:55 PropertyContainer
[2020-11-25 02:36:55,602 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 02:36:55,603 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 02:36:55,603 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 02:36:55,603 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 02:36:55,604 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:36:55" (1/2) ...
[2020-11-25 02:36:55,604 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 02:36:55,604 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 02:36:55,631 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:36:55" (2/2) ...
[2020-11-25 02:36:55,631 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 02:36:55,632 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 02:36:55,632 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 02:36:55,632 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 02:36:55,633 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:36:55" (1/2) ...
[2020-11-25 02:36:55,685 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 02:36:55,685 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 02:36:55,685 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT.LockInfo_ctor__success
[2020-11-25 02:36:55,685 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:36:55,686 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 02:36:55,686 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 02:36:55,686 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:36:55,686 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:36:55,686 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:36:55,686 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:36:55,686 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:36:55,686 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:36:55,686 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 02:36:55,687 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 02:36:55,687 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 02:36:55,687 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 02:36:55,687 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 02:36:55,687 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 02:36:55,687 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 02:36:55,687 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 02:36:55,687 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_Ownable
[2020-11-25 02:36:55,688 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_Ownable
[2020-11-25 02:36:55,688 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 02:36:55,688 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 02:36:55,688 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Ownable
[2020-11-25 02:36:55,688 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Ownable
[2020-11-25 02:36:55,688 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 02:36:55,688 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 02:36:55,688 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Ownable
[2020-11-25 02:36:55,688 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Ownable
[2020-11-25 02:36:55,689 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:36:55,689 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 02:36:55,689 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 02:36:55,689 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 02:36:55,689 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 02:36:55,689 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 02:36:55,689 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 02:36:55,689 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole
[2020-11-25 02:36:55,689 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole
[2020-11-25 02:36:55,689 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 02:36:55,689 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 02:36:55,690 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:36:55,690 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:36:55,690 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:36:55,690 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 02:36:55,690 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 02:36:55,690 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 02:36:55,690 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 02:36:55,690 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 02:36:55,690 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 02:36:55,690 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 02:36:55,691 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 02:36:55,691 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:36:55,691 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 02:36:55,691 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 02:36:55,691 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 02:36:55,691 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 02:36:55,691 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 02:36:55,691 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 02:36:55,691 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 02:36:55,691 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 02:36:55,692 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:36:55,692 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 02:36:55,692 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 02:36:55,692 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 02:36:55,692 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 02:36:55,692 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 02:36:55,692 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 02:36:55,692 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 02:36:55,692 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 02:36:55,692 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 02:36:55,692 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 02:36:55,693 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 02:36:55,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 02:36:55,693 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:36:55,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:36:55,693 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:36:55,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:36:55,693 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:36:55,693 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:36:55,693 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:36:55,693 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:36:55,693 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:36:55,694 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:36:55,694 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:36:55,694 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:36:55,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:36:55,694 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:36:55,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:36:55,694 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:36:55,694 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:36:55,694 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:36:55,694 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:36:55,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:36:55,695 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 02:36:55,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 02:36:55,695 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 02:36:55,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 02:36:55,695 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 02:36:55,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 02:36:55,695 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT_NoBaseCtor__success
[2020-11-25 02:36:55,695 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT
[2020-11-25 02:36:55,695 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT
[2020-11-25 02:36:55,695 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ONIT
[2020-11-25 02:36:55,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ONIT
[2020-11-25 02:36:55,696 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ONIT
[2020-11-25 02:36:55,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ONIT
[2020-11-25 02:36:55,696 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ONIT
[2020-11-25 02:36:55,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ONIT
[2020-11-25 02:36:55,696 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_ONIT
[2020-11-25 02:36:55,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_ONIT
[2020-11-25 02:36:55,696 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_ONIT
[2020-11-25 02:36:55,696 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_ONIT
[2020-11-25 02:36:55,696 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ONIT
[2020-11-25 02:36:55,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ONIT
[2020-11-25 02:36:55,697 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_ONIT
[2020-11-25 02:36:55,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_ONIT
[2020-11-25 02:36:55,697 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_ONIT
[2020-11-25 02:36:55,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_ONIT
[2020-11-25 02:36:55,697 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_ONIT
[2020-11-25 02:36:55,697 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_ONIT
[2020-11-25 02:36:55,697 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_ONIT__success
[2020-11-25 02:36:55,697 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_ONIT__success
[2020-11-25 02:36:55,697 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_ONIT__success
[2020-11-25 02:36:55,698 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~uint256_ONIT
[2020-11-25 02:36:55,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~uint256_ONIT
[2020-11-25 02:36:55,698 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_ONIT__success
[2020-11-25 02:36:55,698 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ONIT__success
[2020-11-25 02:36:55,698 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_ONIT
[2020-11-25 02:36:55,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_ONIT
[2020-11-25 02:36:55,698 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_ONIT
[2020-11-25 02:36:55,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_ONIT
[2020-11-25 02:36:55,698 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ONIT
[2020-11-25 02:36:55,698 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ONIT
[2020-11-25 02:36:55,698 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 02:36:55,699 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 02:36:55,699 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 02:36:55,699 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 02:36:55,699 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__success
[2020-11-25 02:36:55,699 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 02:36:55,699 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 02:36:55,699 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 02:36:55,699 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__success
[2020-11-25 02:36:55,699 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 02:36:55,700 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 02:36:55,700 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 02:36:55,700 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 02:36:55,700 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 02:36:55,700 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 02:36:55,700 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 02:36:55,700 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 02:36:55,700 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 02:36:55,700 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 02:36:55,701 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 02:36:55,701 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 02:36:55,701 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 02:36:55,701 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 02:36:55,701 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:36:55,701 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:36:55,701 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:36:55,701 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:36:55,701 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ONIT
[2020-11-25 02:36:55,701 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 02:36:55,701 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 02:36:55,702 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 02:36:55,702 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT.LockInfo_ctor__fail
[2020-11-25 02:36:55,702 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:36:55,702 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 02:36:55,702 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 02:36:55,702 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:36:55,702 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:36:55,702 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:36:55,702 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:36:55,702 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:36:55,702 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:36:55,702 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 02:36:55,703 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 02:36:55,703 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 02:36:55,703 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 02:36:55,703 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 02:36:55,703 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 02:36:55,703 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 02:36:55,703 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 02:36:55,703 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_Ownable__success
[2020-11-25 02:36:55,703 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_Ownable__fail
[2020-11-25 02:36:55,703 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 02:36:55,703 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 02:36:55,704 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Ownable__success
[2020-11-25 02:36:55,704 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Ownable__fail
[2020-11-25 02:36:55,704 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 02:36:55,704 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 02:36:55,704 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Ownable__success
[2020-11-25 02:36:55,704 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Ownable__fail
[2020-11-25 02:36:55,704 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:36:55,704 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 02:36:55,704 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 02:36:55,704 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 02:36:55,704 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:36:55,704 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 02:36:55,705 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:36:55,705 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__success
[2020-11-25 02:36:55,705 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__fail
[2020-11-25 02:36:55,705 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 02:36:55,705 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:36:55,705 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:36:55,705 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:36:55,705 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:36:55,705 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 02:36:55,705 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 02:36:55,705 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 02:36:55,705 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 02:36:55,706 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 02:36:55,706 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 02:36:55,706 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 02:36:55,706 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 02:36:55,706 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:36:55,706 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 02:36:55,706 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 02:36:55,706 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:36:55,706 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 02:36:55,706 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 02:36:55,706 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 02:36:55,706 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 02:36:55,707 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 02:36:55,707 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:36:55,707 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 02:36:55,707 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:36:55,707 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:36:55,707 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:36:55,707 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:36:55,707 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:36:55,707 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:36:55,707 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:36:55,707 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:36:55,707 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:36:55,708 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:36:55,708 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:36:55,708 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:36:55,708 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:36:55,708 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:36:55,708 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:36:55,708 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:36:55,708 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:36:55,708 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:36:55,708 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:36:55,708 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:36:55,708 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:36:55,709 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:36:55,709 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:36:55,709 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:36:55,709 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:36:55,709 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 02:36:55,709 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 02:36:55,709 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 02:36:55,709 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:36:55,709 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 02:36:55,709 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:36:55,709 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT_NoBaseCtor__fail
[2020-11-25 02:36:55,709 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT__success
[2020-11-25 02:36:55,710 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT__fail
[2020-11-25 02:36:55,710 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ONIT__success
[2020-11-25 02:36:55,710 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ONIT__fail
[2020-11-25 02:36:55,710 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ONIT__success
[2020-11-25 02:36:55,710 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ONIT__fail
[2020-11-25 02:36:55,710 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ONIT__success
[2020-11-25 02:36:55,710 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ONIT__fail
[2020-11-25 02:36:55,710 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_ONIT__success
[2020-11-25 02:36:55,710 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_ONIT__fail
[2020-11-25 02:36:55,710 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_ONIT__success
[2020-11-25 02:36:55,710 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_ONIT__fail
[2020-11-25 02:36:55,710 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ONIT__success
[2020-11-25 02:36:55,711 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:36:55,711 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_ONIT__success
[2020-11-25 02:36:55,711 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:36:55,711 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_ONIT__success
[2020-11-25 02:36:55,711 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_ONIT__fail
[2020-11-25 02:36:55,711 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_ONIT__success
[2020-11-25 02:36:55,711 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_ONIT__fail
[2020-11-25 02:36:55,711 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:36:55,711 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_ONIT__fail
[2020-11-25 02:36:55,711 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_ONIT__fail
[2020-11-25 02:36:55,711 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~uint256_ONIT__success
[2020-11-25 02:36:55,712 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~uint256_ONIT__fail
[2020-11-25 02:36:55,712 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_ONIT__fail
[2020-11-25 02:36:55,712 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ONIT__fail
[2020-11-25 02:36:55,712 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_ONIT__success
[2020-11-25 02:36:55,712 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_ONIT__fail
[2020-11-25 02:36:55,712 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_ONIT__success
[2020-11-25 02:36:55,712 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_ONIT__fail
[2020-11-25 02:36:55,712 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ONIT__success
[2020-11-25 02:36:55,712 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ONIT__fail
[2020-11-25 02:36:55,712 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 02:36:55,712 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 02:36:55,713 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 02:36:55,713 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 02:36:55,713 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__fail
[2020-11-25 02:36:55,713 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 02:36:55,713 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 02:36:55,713 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 02:36:55,713 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__fail
[2020-11-25 02:36:55,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 02:36:55,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 02:36:55,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 02:36:55,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 02:36:55,713 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT.LockInfo_ctor__fail
[2020-11-25 02:36:55,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT.LockInfo_ctor__success
[2020-11-25 02:36:55,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:36:55,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:36:55,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 02:36:55,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 02:36:55,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:36:55,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:36:55,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:36:55,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:36:55,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:36:55,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:36:55,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:36:55,714 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:36:55,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:36:55,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:36:55,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:36:55,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:36:55,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 02:36:55,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 02:36:55,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 02:36:55,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 02:36:55,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 02:36:55,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 02:36:55,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 02:36:55,715 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 02:36:55,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 02:36:55,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 02:36:55,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 02:36:55,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 02:36:55,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_Ownable__fail
[2020-11-25 02:36:55,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_Ownable__success
[2020-11-25 02:36:55,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 02:36:55,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 02:36:55,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Ownable__fail
[2020-11-25 02:36:55,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Ownable__success
[2020-11-25 02:36:55,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 02:36:55,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 02:36:55,716 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Ownable__fail
[2020-11-25 02:36:55,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Ownable__success
[2020-11-25 02:36:55,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:36:55,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:36:55,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 02:36:55,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 02:36:55,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:36:55,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 02:36:55,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:36:55,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 02:36:55,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__fail
[2020-11-25 02:36:55,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__success
[2020-11-25 02:36:55,717 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:36:55,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 02:36:55,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:36:55,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:36:55,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:36:55,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:36:55,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:36:55,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:36:55,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 02:36:55,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 02:36:55,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 02:36:55,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 02:36:55,718 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 02:36:55,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 02:36:55,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 02:36:55,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 02:36:55,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:36:55,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:36:55,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 02:36:55,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 02:36:55,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:36:55,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:36:55,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 02:36:55,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 02:36:55,719 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 02:36:55,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 02:36:55,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:36:55,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 02:36:55,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:36:55,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 02:36:55,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:36:55,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:36:55,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:36:55,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:36:55,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:36:55,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:36:55,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:36:55,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:36:55,721 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:36:55,721 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:36:55,721 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:36:55,721 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:36:55,721 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:36:55,721 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:36:55,721 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:36:55,721 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:36:55,722 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:36:55,722 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:36:55,722 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:36:55,722 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:36:55,722 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:36:55,722 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:36:55,722 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:36:55,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:36:55,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:36:55,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:36:55,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:36:55,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:36:55,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:36:55,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:36:55,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 02:36:55,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 02:36:55,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:36:55,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 02:36:55,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:36:55,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 02:36:55,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT_NoBaseCtor__fail
[2020-11-25 02:36:55,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT_NoBaseCtor__success
[2020-11-25 02:36:55,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT__fail
[2020-11-25 02:36:55,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT__success
[2020-11-25 02:36:55,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ONIT__fail
[2020-11-25 02:36:55,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ONIT__success
[2020-11-25 02:36:55,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ONIT__fail
[2020-11-25 02:36:55,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ONIT__success
[2020-11-25 02:36:55,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ONIT__fail
[2020-11-25 02:36:55,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ONIT__success
[2020-11-25 02:36:55,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_ONIT__fail
[2020-11-25 02:36:55,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_ONIT__success
[2020-11-25 02:36:55,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_ONIT__fail
[2020-11-25 02:36:55,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_ONIT__success
[2020-11-25 02:36:55,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:36:55,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ONIT__success
[2020-11-25 02:36:55,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:36:55,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_ONIT__success
[2020-11-25 02:36:55,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_ONIT__fail
[2020-11-25 02:36:55,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_ONIT__success
[2020-11-25 02:36:55,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_ONIT__fail
[2020-11-25 02:36:55,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_ONIT__success
[2020-11-25 02:36:55,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:36:55,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_ONIT__success
[2020-11-25 02:36:55,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_ONIT__fail
[2020-11-25 02:36:55,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_ONIT__success
[2020-11-25 02:36:55,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_ONIT__fail
[2020-11-25 02:36:55,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_ONIT__success
[2020-11-25 02:36:55,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~uint256_ONIT__fail
[2020-11-25 02:36:55,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~uint256_ONIT__success
[2020-11-25 02:36:55,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_ONIT__fail
[2020-11-25 02:36:55,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_ONIT__success
[2020-11-25 02:36:55,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ONIT__fail
[2020-11-25 02:36:55,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ONIT__success
[2020-11-25 02:36:55,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_ONIT__fail
[2020-11-25 02:36:55,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_ONIT__success
[2020-11-25 02:36:55,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_ONIT__fail
[2020-11-25 02:36:55,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_ONIT__success
[2020-11-25 02:36:55,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ONIT__fail
[2020-11-25 02:36:55,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ONIT__success
[2020-11-25 02:36:55,730 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 02:36:55,730 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 02:36:55,730 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 02:36:55,730 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 02:36:55,730 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 02:36:55,730 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 02:36:55,730 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 02:36:55,730 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 02:36:55,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__fail
[2020-11-25 02:36:55,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__success
[2020-11-25 02:36:55,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 02:36:55,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 02:36:55,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 02:36:55,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 02:36:55,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 02:36:55,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 02:36:55,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__fail
[2020-11-25 02:36:55,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__success
[2020-11-25 02:36:55,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 02:36:55,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 02:36:55,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 02:36:55,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 02:36:55,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 02:36:55,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 02:36:55,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 02:36:55,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 02:36:55,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 02:36:55,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 02:36:55,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 02:36:55,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 02:36:55,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 02:36:55,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 02:36:55,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:36:55,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:36:55,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:36:55,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:36:55,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ONIT
[2020-11-25 02:36:55,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 02:36:55,734 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 02:36:55,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 02:36:56,231 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:36:56,231 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:36:56,231 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:36:56,900 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 02:36:56,900 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 02:36:56,905 INFO  L202        PluginConnector]: Adding new model ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:36:56 BoogieIcfgContainer
[2020-11-25 02:36:56,905 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:36:55" (2/2) ...
[2020-11-25 02:36:56,905 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 02:36:56,905 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@1758c707 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:36:56, skipping insertion in model container
[2020-11-25 02:36:56,905 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 02:36:56,905 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 02:36:56,906 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 02:36:56,907 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 02:36:56,907 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:36:55" (1/3) ...
[2020-11-25 02:36:56,907 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@7c7422a7 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:36:56, skipping insertion in model container
[2020-11-25 02:36:56,907 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:36:55" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 02:36:56,948 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:36:56 NWAContainer
[2020-11-25 02:36:56,948 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 02:36:56,948 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 02:36:56,948 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 02:36:56,949 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 02:36:56,949 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:36:56" (3/4) ...
[2020-11-25 02:36:56,950 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@37a156e5 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:36:56, skipping insertion in model container
[2020-11-25 02:36:56,950 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:36:56" (4/4) ...
[2020-11-25 02:36:56,955 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 02:36:56,966 INFO  L110   BuchiProductObserver]: Initial RCFG 4668 locations, 6455 edges
[2020-11-25 02:36:56,966 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 02:36:56,978 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 02:37:00,232 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 02:37:00,246 INFO  L110   BuchiProductObserver]: BuchiProgram size 11592 locations, 20999 edges
[2020-11-25 02:37:00,246 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:37:00 BoogieIcfgContainer
[2020-11-25 02:37:00,246 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 02:37:00,247 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 02:37:00,247 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 02:37:00,248 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 02:37:00,249 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:37:00" (1/1) ...
[2020-11-25 02:37:00,427 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 02:37:00,429 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 02:37:00,448 INFO  L313           BlockEncoder]: Initial Icfg 11592 locations, 20999 edges
[2020-11-25 02:37:00,448 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 02:37:00,448 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 02:37:00,449 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 02:37:00,449 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 02:37:00,476 INFO  L70    emoveInfeasibleEdges]: Removed 219 edges and 23 locations because of local infeasibility
[2020-11-25 02:37:00,497 INFO  L70        RemoveSinkStates]: Removed 104 edges and 69 locations by removing sink states
[2020-11-25 02:37:00,523 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 02:37:00,532 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 02:37:00,539 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 02:37:00,539 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 02:37:00,544 INFO  L313           BlockEncoder]: Encoded RCFG 11446 locations, 20596 edges
[2020-11-25 02:37:00,544 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:37:00 BasicIcfg
[2020-11-25 02:37:00,544 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 02:37:00,545 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 02:37:00,545 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 02:37:00,546 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 02:37:00,547 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:37:00,547 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:36:55" (1/6) ...
[2020-11-25 02:37:00,548 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3371fcdc and model type ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:37:00, skipping insertion in model container
[2020-11-25 02:37:00,548 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:37:00,548 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:36:55" (2/6) ...
[2020-11-25 02:37:00,548 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3371fcdc and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:37:00, skipping insertion in model container
[2020-11-25 02:37:00,548 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:37:00,548 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:36:56" (3/6) ...
[2020-11-25 02:37:00,549 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3371fcdc and model type ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:37:00, skipping insertion in model container
[2020-11-25 02:37:00,549 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:37:00,549 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:36:56" (4/6) ...
[2020-11-25 02:37:00,549 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3371fcdc and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:37:00, skipping insertion in model container
[2020-11-25 02:37:00,549 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:37:00,549 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:37:00" (5/6) ...
[2020-11-25 02:37:00,549 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3371fcdc and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:37:00, skipping insertion in model container
[2020-11-25 02:37:00,549 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:37:00,549 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:37:00" (6/6) ...
[2020-11-25 02:37:00,550 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_balanceof.bpl_BEv2
[2020-11-25 02:37:00,582 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 02:37:00,583 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 02:37:00,583 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 02:37:00,583 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 02:37:00,583 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 02:37:00,583 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 02:37:00,583 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 02:37:00,583 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 02:37:00,583 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 02:37:00,663 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11446 states.
[2020-11-25 02:37:00,751 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:37:00,752 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:37:00,752 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:37:00,759 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:37:00,760 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:37:00,760 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 02:37:00,760 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11446 states.
[2020-11-25 02:37:00,804 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:37:00,804 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:37:00,804 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:37:00,806 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:37:00,806 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND TRUE   revert
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:37:00,819 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:37:00,820 INFO  L82        PathProgramCache]: Analyzing trace with hash 1144367224, now seen corresponding path program 1 times
[2020-11-25 02:37:00,824 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:37:00,847 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:37:00,887 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:37:00,889 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:37:00,889 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:37:01,397 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:37:01,405 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:37:01,405 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:37:01,406 INFO  L87              Difference]: Start difference. First operand 11446 states. Second operand 3 states.
[2020-11-25 02:37:01,869 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:37:01,870 INFO  L93              Difference]: Finished difference Result 7352 states and 8606 transitions.
[2020-11-25 02:37:01,870 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:37:01,871 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7352 states and 8606 transitions.
[2020-11-25 02:37:01,900 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:37:01,935 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7352 states to 7352 states and 8606 transitions.
[2020-11-25 02:37:01,936 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 02:37:01,939 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1362
[2020-11-25 02:37:01,939 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7352 states and 8606 transitions.
[2020-11-25 02:37:01,953 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:37:01,953 INFO  L728         BuchiCegarLoop]: Abstraction has 7352 states and 8606 transitions.
[2020-11-25 02:37:01,973 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7352 states and 8606 transitions.
[2020-11-25 02:37:02,062 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7352 to 7352.
[2020-11-25 02:37:02,062 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7352 states.
[2020-11-25 02:37:02,072 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7352 states to 7352 states and 8606 transitions.
[2020-11-25 02:37:02,073 INFO  L751         BuchiCegarLoop]: Abstraction has 7352 states and 8606 transitions.
[2020-11-25 02:37:02,073 INFO  L631         BuchiCegarLoop]: Abstraction has 7352 states and 8606 transitions.
[2020-11-25 02:37:02,073 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 02:37:02,073 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7352 states and 8606 transitions.
[2020-11-25 02:37:02,085 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:37:02,085 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:37:02,085 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:37:02,087 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:37:02,087 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND TRUE   revert
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND TRUE   revert
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND TRUE   revert
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:37:02,091 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:37:02,091 INFO  L82        PathProgramCache]: Analyzing trace with hash 1568378048, now seen corresponding path program 1 times
[2020-11-25 02:37:02,092 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:37:02,105 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:37:02,133 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:37:02,133 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:37:02,133 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:37:02,134 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:37:02,134 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:37:02,134 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:37:02,134 INFO  L87              Difference]: Start difference. First operand 7352 states and 8606 transitions. cyclomatic complexity: 1264 Second operand 3 states.
[2020-11-25 02:37:02,331 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:37:02,331 INFO  L93              Difference]: Finished difference Result 9378 states and 10959 transitions.
[2020-11-25 02:37:02,331 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:37:02,332 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9378 states and 10959 transitions.
[2020-11-25 02:37:02,356 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:37:02,391 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9378 states to 9378 states and 10959 transitions.
[2020-11-25 02:37:02,391 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1905
[2020-11-25 02:37:02,392 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1905
[2020-11-25 02:37:02,392 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9378 states and 10959 transitions.
[2020-11-25 02:37:02,401 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:37:02,401 INFO  L728         BuchiCegarLoop]: Abstraction has 9378 states and 10959 transitions.
[2020-11-25 02:37:02,409 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9378 states and 10959 transitions.
[2020-11-25 02:37:02,491 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9378 to 8182.
[2020-11-25 02:37:02,491 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8182 states.
[2020-11-25 02:37:02,501 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8182 states to 8182 states and 9513 transitions.
[2020-11-25 02:37:02,501 INFO  L751         BuchiCegarLoop]: Abstraction has 8182 states and 9513 transitions.
[2020-11-25 02:37:02,501 INFO  L631         BuchiCegarLoop]: Abstraction has 8182 states and 9513 transitions.
[2020-11-25 02:37:02,501 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 02:37:02,502 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8182 states and 9513 transitions.
[2020-11-25 02:37:02,513 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:37:02,513 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:37:02,513 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:37:02,515 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:37:02,515 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND TRUE   !(account_s164 != null)
[L5838]               revert := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND TRUE   revert
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND TRUE   revert
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND TRUE   revert
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND TRUE   revert
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0)
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0)
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:37:02,519 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:37:02,520 INFO  L82        PathProgramCache]: Analyzing trace with hash 1877116596, now seen corresponding path program 1 times
[2020-11-25 02:37:02,521 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:37:02,532 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:37:02,604 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 02:37:02,604 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:37:02,604 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 02:37:02,605 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:37:02,605 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:37:02,605 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:37:02,605 INFO  L87              Difference]: Start difference. First operand 8182 states and 9513 transitions. cyclomatic complexity: 1341 Second operand 9 states.
[2020-11-25 02:37:02,748 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:37:02,748 INFO  L93              Difference]: Finished difference Result 8228 states and 9588 transitions.
[2020-11-25 02:37:02,748 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:37:02,748 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8228 states and 9588 transitions.
[2020-11-25 02:37:02,766 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:37:02,793 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8228 states to 8228 states and 9588 transitions.
[2020-11-25 02:37:02,793 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1591
[2020-11-25 02:37:02,794 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1591
[2020-11-25 02:37:02,794 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8228 states and 9588 transitions.
[2020-11-25 02:37:02,802 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:37:02,802 INFO  L728         BuchiCegarLoop]: Abstraction has 8228 states and 9588 transitions.
[2020-11-25 02:37:02,809 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8228 states and 9588 transitions.
[2020-11-25 02:37:02,877 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8228 to 8219.
[2020-11-25 02:37:02,877 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8219 states.
[2020-11-25 02:37:02,888 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8219 states to 8219 states and 9572 transitions.
[2020-11-25 02:37:02,888 INFO  L751         BuchiCegarLoop]: Abstraction has 8219 states and 9572 transitions.
[2020-11-25 02:37:02,888 INFO  L631         BuchiCegarLoop]: Abstraction has 8219 states and 9572 transitions.
[2020-11-25 02:37:02,888 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 02:37:02,888 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8219 states and 9572 transitions.
[2020-11-25 02:37:02,899 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:37:02,899 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:37:02,899 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:37:02,901 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:37:02,902 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND TRUE   DType[this] == Pausable
[L6125]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND TRUE   !(account_s218 != null)
[L5909]               revert := true;
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND TRUE   revert
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND TRUE   revert
[L6125]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6126]   COND TRUE   revert
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND TRUE   revert
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND TRUE   revert
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0)
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0)
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:37:02,906 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:37:02,906 INFO  L82        PathProgramCache]: Analyzing trace with hash 1020171349, now seen corresponding path program 1 times
[2020-11-25 02:37:02,907 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:37:02,916 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:37:02,975 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 02:37:02,975 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:37:02,975 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 02:37:02,976 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:37:02,976 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 02:37:02,976 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 02:37:02,976 INFO  L87              Difference]: Start difference. First operand 8219 states and 9572 transitions. cyclomatic complexity: 1363 Second operand 10 states.
[2020-11-25 02:37:03,097 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:37:03,098 INFO  L93              Difference]: Finished difference Result 8279 states and 9663 transitions.
[2020-11-25 02:37:03,098 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 02:37:03,098 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8279 states and 9663 transitions.
[2020-11-25 02:37:03,116 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:37:03,144 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8279 states to 8279 states and 9663 transitions.
[2020-11-25 02:37:03,144 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1598
[2020-11-25 02:37:03,145 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1598
[2020-11-25 02:37:03,145 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8279 states and 9663 transitions.
[2020-11-25 02:37:03,152 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:37:03,152 INFO  L728         BuchiCegarLoop]: Abstraction has 8279 states and 9663 transitions.
[2020-11-25 02:37:03,160 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8279 states and 9663 transitions.
[2020-11-25 02:37:03,221 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8279 to 8226.
[2020-11-25 02:37:03,221 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8226 states.
[2020-11-25 02:37:03,230 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8226 states to 8226 states and 9580 transitions.
[2020-11-25 02:37:03,231 INFO  L751         BuchiCegarLoop]: Abstraction has 8226 states and 9580 transitions.
[2020-11-25 02:37:03,231 INFO  L631         BuchiCegarLoop]: Abstraction has 8226 states and 9580 transitions.
[2020-11-25 02:37:03,231 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 02:37:03,231 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8226 states and 9580 transitions.
[2020-11-25 02:37:03,240 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:37:03,240 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:37:03,240 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:37:03,242 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:37:03,242 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND TRUE   DType[this] == Pausable
[L6125]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND TRUE   !!__var_2
[L5846]               revert := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND TRUE   revert
[L6125]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6126]   COND TRUE   revert
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND TRUE   revert
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND TRUE   revert
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0)
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0)
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:37:03,246 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:37:03,246 INFO  L82        PathProgramCache]: Analyzing trace with hash -1858888410, now seen corresponding path program 1 times
[2020-11-25 02:37:03,247 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:37:03,256 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:37:03,298 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 51 trivial. 0 not checked.
[2020-11-25 02:37:03,298 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:37:03,299 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:37:03,299 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:37:03,299 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:37:03,299 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:37:03,299 INFO  L87              Difference]: Start difference. First operand 8226 states and 9580 transitions. cyclomatic complexity: 1364 Second operand 3 states.
[2020-11-25 02:37:03,430 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:37:03,430 INFO  L93              Difference]: Finished difference Result 9398 states and 10633 transitions.
[2020-11-25 02:37:03,430 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:37:03,430 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9398 states and 10633 transitions.
[2020-11-25 02:37:03,450 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:37:03,487 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9398 states to 8704 states and 9811 transitions.
[2020-11-25 02:37:03,487 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1696
[2020-11-25 02:37:03,489 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1782
[2020-11-25 02:37:03,489 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8704 states and 9811 transitions.
[2020-11-25 02:37:03,497 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:37:03,497 INFO  L728         BuchiCegarLoop]: Abstraction has 8704 states and 9811 transitions.
[2020-11-25 02:37:03,506 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8704 states and 9811 transitions.
[2020-11-25 02:37:03,567 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8704 to 7684.
[2020-11-25 02:37:03,567 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7684 states.
[2020-11-25 02:37:03,579 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7684 states to 7684 states and 8541 transitions.
[2020-11-25 02:37:03,579 INFO  L751         BuchiCegarLoop]: Abstraction has 7684 states and 8541 transitions.
[2020-11-25 02:37:03,579 INFO  L631         BuchiCegarLoop]: Abstraction has 7684 states and 8541 transitions.
[2020-11-25 02:37:03,579 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 02:37:03,579 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7684 states and 8541 transitions.
[2020-11-25 02:37:03,590 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:37:03,590 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:37:03,591 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:37:03,594 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:37:03,594 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND TRUE   DType[this] == ERC20Pausable
[L6120]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6120]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6121]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND TRUE   DType[this] == ERC20Pausable
[L6120]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6120]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6121]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND TRUE   DType[this] == ERC20Pausable
[L6120]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6120]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6121]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND TRUE   DType[this] == ERC20Pausable
[L6120]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6120]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6121]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0)
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0)
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:37:03,603 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:37:03,603 INFO  L82        PathProgramCache]: Analyzing trace with hash 1462298420, now seen corresponding path program 1 times
[2020-11-25 02:37:03,604 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:37:03,623 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:37:03,838 INFO  L134       CoverageAnalysis]: Checked inductivity of 936 backedges. 0 proven. 27 refuted. 0 times theorem prover too weak. 909 trivial. 0 not checked.
[2020-11-25 02:37:03,838 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:37:03,838 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 02:37:03,839 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:37:03,839 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:37:03,839 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:37:03,839 INFO  L87              Difference]: Start difference. First operand 7684 states and 8541 transitions. cyclomatic complexity: 867 Second operand 7 states.
[2020-11-25 02:37:03,979 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:37:03,979 INFO  L93              Difference]: Finished difference Result 7707 states and 8568 transitions.
[2020-11-25 02:37:03,979 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:37:03,979 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7707 states and 8568 transitions.
[2020-11-25 02:37:03,994 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:37:04,012 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7707 states to 7690 states and 8548 transitions.
[2020-11-25 02:37:04,013 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1541
[2020-11-25 02:37:04,013 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1541
[2020-11-25 02:37:04,013 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7690 states and 8548 transitions.
[2020-11-25 02:37:04,018 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:37:04,018 INFO  L728         BuchiCegarLoop]: Abstraction has 7690 states and 8548 transitions.
[2020-11-25 02:37:04,024 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7690 states and 8548 transitions.
[2020-11-25 02:37:04,068 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7690 to 7690.
[2020-11-25 02:37:04,068 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7690 states.
[2020-11-25 02:37:04,076 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7690 states to 7690 states and 8548 transitions.
[2020-11-25 02:37:04,076 INFO  L751         BuchiCegarLoop]: Abstraction has 7690 states and 8548 transitions.
[2020-11-25 02:37:04,076 INFO  L631         BuchiCegarLoop]: Abstraction has 7690 states and 8548 transitions.
[2020-11-25 02:37:04,077 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 02:37:04,077 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7690 states and 8548 transitions.
[2020-11-25 02:37:04,085 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:37:04,085 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:37:04,085 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:37:04,087 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:37:04,087 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0)
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0)
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:37:04,093 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:37:04,093 INFO  L82        PathProgramCache]: Analyzing trace with hash -1784627938, now seen corresponding path program 1 times
[2020-11-25 02:37:04,094 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:37:04,117 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:37:04,306 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 02:37:04,306 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:37:04,306 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 02:37:04,307 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:37:04,307 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 02:37:04,307 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 02:37:04,307 INFO  L87              Difference]: Start difference. First operand 7690 states and 8548 transitions. cyclomatic complexity: 868 Second operand 6 states.
[2020-11-25 02:37:04,434 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:37:04,434 INFO  L93              Difference]: Finished difference Result 7731 states and 8596 transitions.
[2020-11-25 02:37:04,434 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 02:37:04,435 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7731 states and 8596 transitions.
[2020-11-25 02:37:04,449 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:37:04,466 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7731 states to 7723 states and 8587 transitions.
[2020-11-25 02:37:04,467 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1541
[2020-11-25 02:37:04,467 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1541
[2020-11-25 02:37:04,467 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7723 states and 8587 transitions.
[2020-11-25 02:37:04,472 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:37:04,472 INFO  L728         BuchiCegarLoop]: Abstraction has 7723 states and 8587 transitions.
[2020-11-25 02:37:04,478 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7723 states and 8587 transitions.
[2020-11-25 02:37:04,528 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7723 to 7700.
[2020-11-25 02:37:04,529 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7700 states.
[2020-11-25 02:37:04,537 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7700 states to 7700 states and 8558 transitions.
[2020-11-25 02:37:04,537 INFO  L751         BuchiCegarLoop]: Abstraction has 7700 states and 8558 transitions.
[2020-11-25 02:37:04,537 INFO  L631         BuchiCegarLoop]: Abstraction has 7700 states and 8558 transitions.
[2020-11-25 02:37:04,537 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 02:37:04,537 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7700 states and 8558 transitions.
[2020-11-25 02:37:04,546 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:37:04,546 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:37:04,546 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:37:04,548 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:37:04,548 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND TRUE   gas < 0
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND TRUE   gas < 0
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:37:04,554 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:37:04,554 INFO  L82        PathProgramCache]: Analyzing trace with hash 445949607, now seen corresponding path program 1 times
[2020-11-25 02:37:04,555 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:37:04,568 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:37:04,776 INFO  L134       CoverageAnalysis]: Checked inductivity of 948 backedges. 0 proven. 36 refuted. 0 times theorem prover too weak. 912 trivial. 0 not checked.
[2020-11-25 02:37:04,777 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:37:04,777 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 02:37:04,777 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:37:04,777 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:37:04,777 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:37:04,778 INFO  L87              Difference]: Start difference. First operand 7700 states and 8558 transitions. cyclomatic complexity: 868 Second operand 7 states.
[2020-11-25 02:37:04,899 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:37:04,899 INFO  L93              Difference]: Finished difference Result 7723 states and 8585 transitions.
[2020-11-25 02:37:04,899 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:37:04,900 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7723 states and 8585 transitions.
[2020-11-25 02:37:04,913 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:37:04,927 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7723 states to 7706 states and 8565 transitions.
[2020-11-25 02:37:04,927 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1541
[2020-11-25 02:37:04,928 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1541
[2020-11-25 02:37:04,928 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7706 states and 8565 transitions.
[2020-11-25 02:37:04,932 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:37:04,932 INFO  L728         BuchiCegarLoop]: Abstraction has 7706 states and 8565 transitions.
[2020-11-25 02:37:04,938 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7706 states and 8565 transitions.
[2020-11-25 02:37:04,977 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7706 to 7700.
[2020-11-25 02:37:04,978 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7700 states.
[2020-11-25 02:37:04,985 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7700 states to 7700 states and 8558 transitions.
[2020-11-25 02:37:04,985 INFO  L751         BuchiCegarLoop]: Abstraction has 7700 states and 8558 transitions.
[2020-11-25 02:37:04,985 INFO  L631         BuchiCegarLoop]: Abstraction has 7700 states and 8558 transitions.
[2020-11-25 02:37:04,985 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 02:37:04,986 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7700 states and 8558 transitions.
[2020-11-25 02:37:04,993 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:37:04,994 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:37:04,994 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:37:04,995 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:37:04,995 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND TRUE   gas < 0
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND TRUE   gas < 0
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:37:05,001 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:37:05,001 INFO  L82        PathProgramCache]: Analyzing trace with hash -17496227, now seen corresponding path program 1 times
[2020-11-25 02:37:05,002 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:37:05,017 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:37:05,186 INFO  L134       CoverageAnalysis]: Checked inductivity of 927 backedges. 6 proven. 31 refuted. 0 times theorem prover too weak. 890 trivial. 0 not checked.
[2020-11-25 02:37:05,186 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:37:05,186 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:37:05,187 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:37:05,187 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:37:05,187 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:37:05,187 INFO  L87              Difference]: Start difference. First operand 7700 states and 8558 transitions. cyclomatic complexity: 868 Second operand 8 states.
[2020-11-25 02:37:05,341 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:37:05,341 INFO  L93              Difference]: Finished difference Result 7721 states and 8582 transitions.
[2020-11-25 02:37:05,342 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:37:05,342 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7721 states and 8582 transitions.
[2020-11-25 02:37:05,354 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:37:05,366 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7721 states to 7707 states and 8566 transitions.
[2020-11-25 02:37:05,366 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1541
[2020-11-25 02:37:05,367 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1541
[2020-11-25 02:37:05,367 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7707 states and 8566 transitions.
[2020-11-25 02:37:05,371 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:37:05,371 INFO  L728         BuchiCegarLoop]: Abstraction has 7707 states and 8566 transitions.
[2020-11-25 02:37:05,377 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7707 states and 8566 transitions.
[2020-11-25 02:37:05,413 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7707 to 7707.
[2020-11-25 02:37:05,413 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7707 states.
[2020-11-25 02:37:05,420 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7707 states to 7707 states and 8566 transitions.
[2020-11-25 02:37:05,421 INFO  L751         BuchiCegarLoop]: Abstraction has 7707 states and 8566 transitions.
[2020-11-25 02:37:05,421 INFO  L631         BuchiCegarLoop]: Abstraction has 7707 states and 8566 transitions.
[2020-11-25 02:37:05,421 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 02:37:05,421 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7707 states and 8566 transitions.
[2020-11-25 02:37:05,429 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:37:05,429 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:37:05,429 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:37:05,430 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:37:05,431 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND TRUE   __exception
[L3017]               __tmp__Balance := Balance;
[L3018]               __tmp__DType := DType;
[L3019]               __tmp__Alloc := Alloc;
[L3020]               __tmp__balance_ADDR := balance_ADDR;
[L3021]               __tmp__M_Ref_bool := M_Ref_bool;
[L3022]               __tmp__sum := sum;
[L3023]               __tmp__M_Ref_int := M_Ref_int;
[L3024]               __tmp__sum__balances0 := sum__balances0;
[L3025]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3026]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3027]               __tmp__sum__allowed1 := sum__allowed1;
[L3028]               __tmp__M_int_Ref := M_int_Ref;
[L3029]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3030]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3031]               __tmp__Length := Length;
[L3032]               __tmp__now := now;
[L3033]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3034]               __tmp__owner_Ownable := owner_Ownable;
[L3035]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3036]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3037]               __tmp___paused_Pausable := _paused_Pausable;
[L3038]               __tmp___balances_ERC20 := _balances_ERC20;
[L3039]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3040]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3041]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3042]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3043]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3044]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3045]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3046]               __tmp__implementation_ONIT := implementation_ONIT;
[L3047]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3048]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3049]   CALL        call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L7395]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7395]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7396]   COND FALSE  !(revert)
[L7399]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7275]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7275]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7276]   COND FALSE  !(revert)
[L7279]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7248]               assume msgsender_MSG != null;
[L7249]               __tmp__Balance[this] := 0;
[L7250]               __tmp___name_ERC20Detailed[this] := -1540954157;
[L7251]               __tmp___symbol_ERC20Detailed[this] := -1540954157;
[L7252]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7254]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7255]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7256]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7279]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7280]   COND FALSE  !(revert)
[L7399]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7400]   COND FALSE  !(revert)
[L7403]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6577]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L6577]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   COND FALSE  !(revert)
[L6581]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6552]               assume msgsender_MSG != null;
[L6553]               __tmp__Balance[this] := 0;
[L6554]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6555]               __tmp__sum__balances0[this] := 0;
[L6556]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6557]               __tmp__sum__allowed1[this] := 0;
[L6558]               __tmp___totalSupply_ERC20[this] := 0;
[L6581]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6582]   COND FALSE  !(revert)
[L7403]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7404]   COND FALSE  !(revert)
[L7407]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L7407]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7408]   COND FALSE  !(revert)
[L7411]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND TRUE   __tmp__DType[this] == ONIT
[L6077]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6077]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6078]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L7411]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7412]   COND FALSE  !(revert)
[L7415]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6421]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6425]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND TRUE   __tmp__DType[this] == ONIT
[L6077]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6077]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6078]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L6425]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6426]   COND FALSE  !(revert)
[L6429]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               __tmp__Balance[this] := 0;
[L6404]               __tmp___paused_Pausable[this] := false;
[L6406]               __tmp___paused_Pausable[this] := false;
[L6429]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7415]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7416]   COND FALSE  !(revert)
[L7419]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7091]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7091]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7095]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6577]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L6577]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   COND FALSE  !(revert)
[L6581]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6552]               assume msgsender_MSG != null;
[L6553]               __tmp__Balance[this] := 0;
[L6554]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6555]               __tmp__sum__balances0[this] := 0;
[L6556]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6557]               __tmp__sum__allowed1[this] := 0;
[L6558]               __tmp___totalSupply_ERC20[this] := 0;
[L6581]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6582]   COND FALSE  !(revert)
[L7095]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7096]   COND FALSE  !(revert)
[L7099]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L7099]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7100]   COND FALSE  !(revert)
[L7103]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND TRUE   __tmp__DType[this] == ONIT
[L6077]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6077]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6078]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L7103]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7104]   COND FALSE  !(revert)
[L7107]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6421]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6425]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND TRUE   __tmp__DType[this] == ONIT
[L6077]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6077]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6078]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L6425]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6426]   COND FALSE  !(revert)
[L6429]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               __tmp__Balance[this] := 0;
[L6404]               __tmp___paused_Pausable[this] := false;
[L6406]               __tmp___paused_Pausable[this] := false;
[L6429]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7107]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7108]   COND FALSE  !(revert)
[L7111]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7076]               assume msgsender_MSG != null;
[L7077]               __tmp__Balance[this] := 0;
[L7111]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7112]   COND FALSE  !(revert)
[L7419]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7420]   COND FALSE  !(revert)
[L7423]   CALL        call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7338]               assume msgsender_MSG != null;
[L7339]               __tmp__Balance[this] := 0;
[L7340]               __tmp__implementation_ONIT[this] := null;
[L7342]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L7342]   RET         call __var_36 := FreshRefGenerator__fail();
[L7343]   COND FALSE  !(revert)
[L7346]               __tmp__timelockList_ONIT[this] := __var_36;
[L7348]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]] := zeroRefboolArr();
[L7349]               __tmp__frozenAccount_ONIT[this] := zeroRefboolArr();
[L7351]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7352]   COND TRUE   __tmp__DType[this] == ONIT
[L7353]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6919]               __var_23 := null;
[L6920]   COND FALSE  !(!(account_s946 != null))
[L6924]   CALL        call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND FALSE  !(!(c_s106 >= a_s106))
[L5744]               __ret_0_ := c_s106;
[L6924]   RET         call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L6925]   COND FALSE  !(revert)
[L6928]               __tmp___totalSupply_ERC20[this] := __var_24;
[L6929]   CALL        call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND FALSE  !(!(c_s106 >= a_s106))
[L5744]               __ret_0_ := c_s106;
[L6929]   RET         call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L6930]   COND FALSE  !(revert)
[L6933]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s946];
[L6934]               __tmp___balances_ERC20[this][account_s946] := __var_25;
[L6935]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s946];
[L7353]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7354]   COND FALSE  !(revert)
[L7423]   RET         call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7424]   COND FALSE  !(revert)
[L3049]   RET         call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L3050]               assume revert || gas < 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND TRUE   gas < 0
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND TRUE   gas < 0
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:37:05,436 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:37:05,436 INFO  L82        PathProgramCache]: Analyzing trace with hash 1179632643, now seen corresponding path program 1 times
[2020-11-25 02:37:05,437 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:37:05,458 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:37:05,618 INFO  L134       CoverageAnalysis]: Checked inductivity of 894 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 894 trivial. 0 not checked.
[2020-11-25 02:37:05,618 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:37:05,618 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:37:05,619 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:37:05,619 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:37:05,619 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:37:05,619 INFO  L87              Difference]: Start difference. First operand 7707 states and 8566 transitions. cyclomatic complexity: 869 Second operand 4 states.
[2020-11-25 02:37:06,242 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:37:06,242 INFO  L93              Difference]: Finished difference Result 7978 states and 8834 transitions.
[2020-11-25 02:37:06,242 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:37:06,242 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7978 states and 8834 transitions.
[2020-11-25 02:37:06,261 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:37:06,276 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7978 states to 7955 states and 8807 transitions.
[2020-11-25 02:37:06,277 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1545
[2020-11-25 02:37:06,277 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1545
[2020-11-25 02:37:06,277 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7955 states and 8807 transitions.
[2020-11-25 02:37:06,280 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:37:06,280 INFO  L728         BuchiCegarLoop]: Abstraction has 7955 states and 8807 transitions.
[2020-11-25 02:37:06,286 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7955 states and 8807 transitions.
[2020-11-25 02:37:06,325 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7955 to 7807.
[2020-11-25 02:37:06,325 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7807 states.
[2020-11-25 02:37:06,334 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7807 states to 7807 states and 8654 transitions.
[2020-11-25 02:37:06,334 INFO  L751         BuchiCegarLoop]: Abstraction has 7807 states and 8654 transitions.
[2020-11-25 02:37:06,334 INFO  L631         BuchiCegarLoop]: Abstraction has 7807 states and 8654 transitions.
[2020-11-25 02:37:06,334 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 02:37:06,334 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7807 states and 8654 transitions.
[2020-11-25 02:37:06,344 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:37:06,344 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:37:06,344 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:37:06,348 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:37:06,348 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND TRUE   DType[this] == Pausable
[L6125]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6125]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6126]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:37:06,354 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:37:06,354 INFO  L82        PathProgramCache]: Analyzing trace with hash 2003387923, now seen corresponding path program 1 times
[2020-11-25 02:37:06,355 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:37:06,370 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:37:06,571 INFO  L134       CoverageAnalysis]: Checked inductivity of 919 backedges. 12 proven. 6 refuted. 0 times theorem prover too weak. 901 trivial. 0 not checked.
[2020-11-25 02:37:06,571 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:37:06,571 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:37:06,572 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:37:06,572 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:37:06,572 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:37:06,572 INFO  L87              Difference]: Start difference. First operand 7807 states and 8654 transitions. cyclomatic complexity: 857 Second operand 8 states.
[2020-11-25 02:37:06,714 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:37:06,714 INFO  L93              Difference]: Finished difference Result 7828 states and 8678 transitions.
[2020-11-25 02:37:06,714 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:37:06,714 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7828 states and 8678 transitions.
[2020-11-25 02:37:06,727 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:37:06,739 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7828 states to 7807 states and 8653 transitions.
[2020-11-25 02:37:06,739 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1543
[2020-11-25 02:37:06,740 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1543
[2020-11-25 02:37:06,740 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7807 states and 8653 transitions.
[2020-11-25 02:37:06,744 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:37:06,744 INFO  L728         BuchiCegarLoop]: Abstraction has 7807 states and 8653 transitions.
[2020-11-25 02:37:06,749 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7807 states and 8653 transitions.
[2020-11-25 02:37:06,784 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7807 to 7807.
[2020-11-25 02:37:06,785 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7807 states.
[2020-11-25 02:37:06,792 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7807 states to 7807 states and 8653 transitions.
[2020-11-25 02:37:06,793 INFO  L751         BuchiCegarLoop]: Abstraction has 7807 states and 8653 transitions.
[2020-11-25 02:37:06,793 INFO  L631         BuchiCegarLoop]: Abstraction has 7807 states and 8653 transitions.
[2020-11-25 02:37:06,793 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 02:37:06,793 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7807 states and 8653 transitions.
[2020-11-25 02:37:06,801 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:37:06,801 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:37:06,801 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:37:06,802 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:37:06,803 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:37:06,807 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:37:06,807 INFO  L82        PathProgramCache]: Analyzing trace with hash -1556603104, now seen corresponding path program 1 times
[2020-11-25 02:37:06,808 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:37:06,828 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:37:07,063 INFO  L134       CoverageAnalysis]: Checked inductivity of 931 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 931 trivial. 0 not checked.
[2020-11-25 02:37:07,063 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:37:07,064 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 02:37:07,065 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:37:07,066 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 02:37:07,066 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 02:37:07,066 INFO  L87              Difference]: Start difference. First operand 7807 states and 8653 transitions. cyclomatic complexity: 856 Second operand 10 states.
[2020-11-25 02:37:10,884 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:37:10,884 INFO  L93              Difference]: Finished difference Result 8197 states and 9139 transitions.
[2020-11-25 02:37:10,884 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 02:37:10,884 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8197 states and 9139 transitions.
[2020-11-25 02:37:10,899 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 02:37:10,914 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8197 states to 8197 states and 9139 transitions.
[2020-11-25 02:37:10,914 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1638
[2020-11-25 02:37:10,915 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1638
[2020-11-25 02:37:10,915 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8197 states and 9139 transitions.
[2020-11-25 02:37:10,919 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:37:10,920 INFO  L728         BuchiCegarLoop]: Abstraction has 8197 states and 9139 transitions.
[2020-11-25 02:37:10,925 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8197 states and 9139 transitions.
[2020-11-25 02:37:10,963 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8197 to 8133.
[2020-11-25 02:37:10,963 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8133 states.
[2020-11-25 02:37:10,971 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8133 states to 8133 states and 9053 transitions.
[2020-11-25 02:37:10,971 INFO  L751         BuchiCegarLoop]: Abstraction has 8133 states and 9053 transitions.
[2020-11-25 02:37:10,971 INFO  L631         BuchiCegarLoop]: Abstraction has 8133 states and 9053 transitions.
[2020-11-25 02:37:10,971 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 02:37:10,972 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8133 states and 9053 transitions.
[2020-11-25 02:37:10,979 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:37:10,979 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:37:10,979 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:37:10,981 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:37:10,981 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND TRUE   __exception
[L3017]               __tmp__Balance := Balance;
[L3018]               __tmp__DType := DType;
[L3019]               __tmp__Alloc := Alloc;
[L3020]               __tmp__balance_ADDR := balance_ADDR;
[L3021]               __tmp__M_Ref_bool := M_Ref_bool;
[L3022]               __tmp__sum := sum;
[L3023]               __tmp__M_Ref_int := M_Ref_int;
[L3024]               __tmp__sum__balances0 := sum__balances0;
[L3025]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3026]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3027]               __tmp__sum__allowed1 := sum__allowed1;
[L3028]               __tmp__M_int_Ref := M_int_Ref;
[L3029]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3030]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3031]               __tmp__Length := Length;
[L3032]               __tmp__now := now;
[L3033]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3034]               __tmp__owner_Ownable := owner_Ownable;
[L3035]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3036]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3037]               __tmp___paused_Pausable := _paused_Pausable;
[L3038]               __tmp___balances_ERC20 := _balances_ERC20;
[L3039]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3040]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3041]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3042]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3043]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3044]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3045]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3046]               __tmp__implementation_ONIT := implementation_ONIT;
[L3047]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3048]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3049]   CALL        call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L7395]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7395]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7396]   COND FALSE  !(revert)
[L7399]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7275]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7275]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7276]   COND FALSE  !(revert)
[L7279]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7248]               assume msgsender_MSG != null;
[L7249]               __tmp__Balance[this] := 0;
[L7250]               __tmp___name_ERC20Detailed[this] := -1540954157;
[L7251]               __tmp___symbol_ERC20Detailed[this] := -1540954157;
[L7252]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7254]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7255]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7256]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7279]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7280]   COND FALSE  !(revert)
[L7399]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7400]   COND FALSE  !(revert)
[L7403]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6577]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L6577]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   COND FALSE  !(revert)
[L6581]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6552]               assume msgsender_MSG != null;
[L6553]               __tmp__Balance[this] := 0;
[L6554]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6555]               __tmp__sum__balances0[this] := 0;
[L6556]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6557]               __tmp__sum__allowed1[this] := 0;
[L6558]               __tmp___totalSupply_ERC20[this] := 0;
[L6581]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6582]   COND FALSE  !(revert)
[L7403]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7404]   COND FALSE  !(revert)
[L7407]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L7407]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7408]   COND FALSE  !(revert)
[L7411]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6081]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L6082]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6082]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6083]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L7411]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7412]   COND FALSE  !(revert)
[L7415]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6421]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6425]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6081]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L6082]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6082]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6083]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L6425]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6426]   COND FALSE  !(revert)
[L6429]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               __tmp__Balance[this] := 0;
[L6404]               __tmp___paused_Pausable[this] := false;
[L6406]               __tmp___paused_Pausable[this] := false;
[L6429]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7415]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7416]   COND FALSE  !(revert)
[L7419]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7091]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7091]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7095]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6577]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L6577]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   COND FALSE  !(revert)
[L6581]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6552]               assume msgsender_MSG != null;
[L6553]               __tmp__Balance[this] := 0;
[L6554]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6555]               __tmp__sum__balances0[this] := 0;
[L6556]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6557]               __tmp__sum__allowed1[this] := 0;
[L6558]               __tmp___totalSupply_ERC20[this] := 0;
[L6581]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6582]   COND FALSE  !(revert)
[L7095]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7096]   COND FALSE  !(revert)
[L7099]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L7099]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7100]   COND FALSE  !(revert)
[L7103]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6081]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L6082]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6082]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6083]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L7103]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7104]   COND FALSE  !(revert)
[L7107]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6421]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6425]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6081]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L6082]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6082]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6083]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L6425]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6426]   COND FALSE  !(revert)
[L6429]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               __tmp__Balance[this] := 0;
[L6404]               __tmp___paused_Pausable[this] := false;
[L6406]               __tmp___paused_Pausable[this] := false;
[L6429]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7107]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7108]   COND FALSE  !(revert)
[L7111]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7076]               assume msgsender_MSG != null;
[L7077]               __tmp__Balance[this] := 0;
[L7111]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7112]   COND FALSE  !(revert)
[L7419]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7420]   COND FALSE  !(revert)
[L7423]   CALL        call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7338]               assume msgsender_MSG != null;
[L7339]               __tmp__Balance[this] := 0;
[L7340]               __tmp__implementation_ONIT[this] := null;
[L7342]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L7342]   RET         call __var_36 := FreshRefGenerator__fail();
[L7343]   COND FALSE  !(revert)
[L7346]               __tmp__timelockList_ONIT[this] := __var_36;
[L7348]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]] := zeroRefboolArr();
[L7349]               __tmp__frozenAccount_ONIT[this] := zeroRefboolArr();
[L7351]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7352]   COND TRUE   __tmp__DType[this] == ONIT
[L7353]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6919]               __var_23 := null;
[L6920]   COND FALSE  !(!(account_s946 != null))
[L6924]   CALL        call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND FALSE  !(!(c_s106 >= a_s106))
[L5744]               __ret_0_ := c_s106;
[L6924]   RET         call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L6925]   COND FALSE  !(revert)
[L6928]               __tmp___totalSupply_ERC20[this] := __var_24;
[L6929]   CALL        call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND FALSE  !(!(c_s106 >= a_s106))
[L5744]               __ret_0_ := c_s106;
[L6929]   RET         call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L6930]   COND FALSE  !(revert)
[L6933]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s946];
[L6934]               __tmp___balances_ERC20[this][account_s946] := __var_25;
[L6935]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s946];
[L7353]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7354]   COND FALSE  !(revert)
[L7423]   RET         call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7424]   COND FALSE  !(revert)
[L3049]   RET         call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L3050]               assume revert || gas < 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false
[L7554]   CALL        call __var_38 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7554]   RET         call __var_38 := FreshRefGenerator__success();
[L7555]   COND FALSE  !(revert)
[L7558]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] == 0;
[L7559]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] := true;
[L7560]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] == zerointRefArr();
[L7561]               assume M_Ref_Ref[timelockList_ONIT[this]][owner_s1254] == __var_38;
[L7562]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] == 0;
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:37:10,986 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:37:10,986 INFO  L82        PathProgramCache]: Analyzing trace with hash -684074236, now seen corresponding path program 1 times
[2020-11-25 02:37:10,987 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:37:10,998 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:37:11,193 INFO  L134       CoverageAnalysis]: Checked inductivity of 901 backedges. 0 proven. 27 refuted. 0 times theorem prover too weak. 874 trivial. 0 not checked.
[2020-11-25 02:37:11,193 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:37:11,193 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:37:11,194 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:37:11,194 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:37:11,194 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:37:11,194 INFO  L87              Difference]: Start difference. First operand 8133 states and 9053 transitions. cyclomatic complexity: 936 Second operand 8 states.
[2020-11-25 02:37:12,670 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:37:12,670 INFO  L93              Difference]: Finished difference Result 11472 states and 12968 transitions.
[2020-11-25 02:37:12,671 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:37:12,671 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11472 states and 12968 transitions.
[2020-11-25 02:37:12,702 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 02:37:12,725 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11472 states to 11455 states and 12948 transitions.
[2020-11-25 02:37:12,726 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2336
[2020-11-25 02:37:12,727 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2336
[2020-11-25 02:37:12,727 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11455 states and 12948 transitions.
[2020-11-25 02:37:12,733 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:37:12,733 INFO  L728         BuchiCegarLoop]: Abstraction has 11455 states and 12948 transitions.
[2020-11-25 02:37:12,740 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11455 states and 12948 transitions.
[2020-11-25 02:37:12,801 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11455 to 11321.
[2020-11-25 02:37:12,801 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11321 states.
[2020-11-25 02:37:12,815 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11321 states to 11321 states and 12814 transitions.
[2020-11-25 02:37:12,815 INFO  L751         BuchiCegarLoop]: Abstraction has 11321 states and 12814 transitions.
[2020-11-25 02:37:12,815 INFO  L631         BuchiCegarLoop]: Abstraction has 11321 states and 12814 transitions.
[2020-11-25 02:37:12,815 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 02:37:12,815 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11321 states and 12814 transitions.
[2020-11-25 02:37:12,828 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 02:37:12,828 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:37:12,828 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:37:12,830 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:37:12,830 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND TRUE   __exception
[L3017]               __tmp__Balance := Balance;
[L3018]               __tmp__DType := DType;
[L3019]               __tmp__Alloc := Alloc;
[L3020]               __tmp__balance_ADDR := balance_ADDR;
[L3021]               __tmp__M_Ref_bool := M_Ref_bool;
[L3022]               __tmp__sum := sum;
[L3023]               __tmp__M_Ref_int := M_Ref_int;
[L3024]               __tmp__sum__balances0 := sum__balances0;
[L3025]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3026]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3027]               __tmp__sum__allowed1 := sum__allowed1;
[L3028]               __tmp__M_int_Ref := M_int_Ref;
[L3029]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3030]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3031]               __tmp__Length := Length;
[L3032]               __tmp__now := now;
[L3033]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3034]               __tmp__owner_Ownable := owner_Ownable;
[L3035]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3036]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3037]               __tmp___paused_Pausable := _paused_Pausable;
[L3038]               __tmp___balances_ERC20 := _balances_ERC20;
[L3039]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3040]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3041]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3042]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3043]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3044]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3045]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3046]               __tmp__implementation_ONIT := implementation_ONIT;
[L3047]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3048]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3049]   CALL        call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L7395]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7395]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7396]   COND FALSE  !(revert)
[L7399]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7275]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7275]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7276]   COND FALSE  !(revert)
[L7279]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7248]               assume msgsender_MSG != null;
[L7249]               __tmp__Balance[this] := 0;
[L7250]               __tmp___name_ERC20Detailed[this] := -1540954157;
[L7251]               __tmp___symbol_ERC20Detailed[this] := -1540954157;
[L7252]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7254]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7255]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7256]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7279]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7280]   COND FALSE  !(revert)
[L7399]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7400]   COND FALSE  !(revert)
[L7403]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6577]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L6577]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   COND FALSE  !(revert)
[L6581]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6552]               assume msgsender_MSG != null;
[L6553]               __tmp__Balance[this] := 0;
[L6554]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6555]               __tmp__sum__balances0[this] := 0;
[L6556]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6557]               __tmp__sum__allowed1[this] := 0;
[L6558]               __tmp___totalSupply_ERC20[this] := 0;
[L6581]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6582]   COND FALSE  !(revert)
[L7403]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7404]   COND FALSE  !(revert)
[L7407]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L7407]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7408]   COND FALSE  !(revert)
[L7411]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6081]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L6086]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L6091]   COND TRUE   __tmp__DType[this] == PauserRole
[L6092]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6092]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6093]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L7411]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7412]   COND FALSE  !(revert)
[L7415]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6421]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6425]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6081]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L6086]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L6091]   COND TRUE   __tmp__DType[this] == PauserRole
[L6092]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6092]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6093]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L6425]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6426]   COND FALSE  !(revert)
[L6429]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               __tmp__Balance[this] := 0;
[L6404]               __tmp___paused_Pausable[this] := false;
[L6406]               __tmp___paused_Pausable[this] := false;
[L6429]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7415]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7416]   COND FALSE  !(revert)
[L7419]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7091]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7091]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7095]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6577]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L6577]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   COND FALSE  !(revert)
[L6581]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6552]               assume msgsender_MSG != null;
[L6553]               __tmp__Balance[this] := 0;
[L6554]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6555]               __tmp__sum__balances0[this] := 0;
[L6556]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6557]               __tmp__sum__allowed1[this] := 0;
[L6558]               __tmp___totalSupply_ERC20[this] := 0;
[L6581]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6582]   COND FALSE  !(revert)
[L7095]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7096]   COND FALSE  !(revert)
[L7099]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L7099]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7100]   COND FALSE  !(revert)
[L7103]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6081]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L6086]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L6091]   COND TRUE   __tmp__DType[this] == PauserRole
[L6092]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6092]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6093]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L7103]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7104]   COND FALSE  !(revert)
[L7107]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6421]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6425]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6081]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L6086]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L6091]   COND TRUE   __tmp__DType[this] == PauserRole
[L6092]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6092]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6093]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L6425]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6426]   COND FALSE  !(revert)
[L6429]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               __tmp__Balance[this] := 0;
[L6404]               __tmp___paused_Pausable[this] := false;
[L6406]               __tmp___paused_Pausable[this] := false;
[L6429]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7107]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7108]   COND FALSE  !(revert)
[L7111]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7076]               assume msgsender_MSG != null;
[L7077]               __tmp__Balance[this] := 0;
[L7111]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7112]   COND FALSE  !(revert)
[L7419]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7420]   COND FALSE  !(revert)
[L7423]   CALL        call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7338]               assume msgsender_MSG != null;
[L7339]               __tmp__Balance[this] := 0;
[L7340]               __tmp__implementation_ONIT[this] := null;
[L7342]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L7342]   RET         call __var_36 := FreshRefGenerator__fail();
[L7343]   COND FALSE  !(revert)
[L7346]               __tmp__timelockList_ONIT[this] := __var_36;
[L7348]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]] := zeroRefboolArr();
[L7349]               __tmp__frozenAccount_ONIT[this] := zeroRefboolArr();
[L7351]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7352]   COND TRUE   __tmp__DType[this] == ONIT
[L7353]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6919]               __var_23 := null;
[L6920]   COND FALSE  !(!(account_s946 != null))
[L6924]   CALL        call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND FALSE  !(!(c_s106 >= a_s106))
[L5744]               __ret_0_ := c_s106;
[L6924]   RET         call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L6925]   COND FALSE  !(revert)
[L6928]               __tmp___totalSupply_ERC20[this] := __var_24;
[L6929]   CALL        call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND FALSE  !(!(c_s106 >= a_s106))
[L5744]               __ret_0_ := c_s106;
[L6929]   RET         call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L6930]   COND FALSE  !(revert)
[L6933]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s946];
[L6934]               __tmp___balances_ERC20[this][account_s946] := __var_25;
[L6935]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s946];
[L7353]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7354]   COND FALSE  !(revert)
[L7423]   RET         call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7424]   COND FALSE  !(revert)
[L3049]   RET         call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L3050]               assume revert || gas < 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false
[L7554]   CALL        call __var_38 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7554]   RET         call __var_38 := FreshRefGenerator__success();
[L7555]   COND FALSE  !(revert)
[L7558]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] == 0;
[L7559]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] := true;
[L7560]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] == zerointRefArr();
[L7561]               assume M_Ref_Ref[timelockList_ONIT[this]][owner_s1254] == __var_38;
[L7562]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] == 0;
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:37:12,835 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:37:12,835 INFO  L82        PathProgramCache]: Analyzing trace with hash 217390852, now seen corresponding path program 1 times
[2020-11-25 02:37:12,835 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:37:12,846 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:37:13,063 INFO  L134       CoverageAnalysis]: Checked inductivity of 913 backedges. 0 proven. 36 refuted. 0 times theorem prover too weak. 877 trivial. 0 not checked.
[2020-11-25 02:37:13,063 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:37:13,063 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:37:13,064 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:37:13,064 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:37:13,065 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:37:13,065 INFO  L87              Difference]: Start difference. First operand 11321 states and 12814 transitions. cyclomatic complexity: 1520 Second operand 8 states.
[2020-11-25 02:37:14,559 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:37:14,560 INFO  L93              Difference]: Finished difference Result 11476 states and 12973 transitions.
[2020-11-25 02:37:14,560 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:37:14,560 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11476 states and 12973 transitions.
[2020-11-25 02:37:14,585 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 02:37:14,607 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11476 states to 11459 states and 12953 transitions.
[2020-11-25 02:37:14,607 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2334
[2020-11-25 02:37:14,609 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2334
[2020-11-25 02:37:14,609 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11459 states and 12953 transitions.
[2020-11-25 02:37:14,615 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:37:14,615 INFO  L728         BuchiCegarLoop]: Abstraction has 11459 states and 12953 transitions.
[2020-11-25 02:37:14,621 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11459 states and 12953 transitions.
[2020-11-25 02:37:14,680 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11459 to 11321.
[2020-11-25 02:37:14,680 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11321 states.
[2020-11-25 02:37:14,695 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11321 states to 11321 states and 12814 transitions.
[2020-11-25 02:37:14,695 INFO  L751         BuchiCegarLoop]: Abstraction has 11321 states and 12814 transitions.
[2020-11-25 02:37:14,695 INFO  L631         BuchiCegarLoop]: Abstraction has 11321 states and 12814 transitions.
[2020-11-25 02:37:14,695 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 02:37:14,695 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11321 states and 12814 transitions.
[2020-11-25 02:37:14,707 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 02:37:14,707 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:37:14,707 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:37:14,709 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:37:14,709 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND TRUE   __exception
[L3017]               __tmp__Balance := Balance;
[L3018]               __tmp__DType := DType;
[L3019]               __tmp__Alloc := Alloc;
[L3020]               __tmp__balance_ADDR := balance_ADDR;
[L3021]               __tmp__M_Ref_bool := M_Ref_bool;
[L3022]               __tmp__sum := sum;
[L3023]               __tmp__M_Ref_int := M_Ref_int;
[L3024]               __tmp__sum__balances0 := sum__balances0;
[L3025]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3026]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3027]               __tmp__sum__allowed1 := sum__allowed1;
[L3028]               __tmp__M_int_Ref := M_int_Ref;
[L3029]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3030]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3031]               __tmp__Length := Length;
[L3032]               __tmp__now := now;
[L3033]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3034]               __tmp__owner_Ownable := owner_Ownable;
[L3035]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3036]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3037]               __tmp___paused_Pausable := _paused_Pausable;
[L3038]               __tmp___balances_ERC20 := _balances_ERC20;
[L3039]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3040]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3041]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3042]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3043]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3044]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3045]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3046]               __tmp__implementation_ONIT := implementation_ONIT;
[L3047]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3048]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3049]   CALL        call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L7395]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7395]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7396]   COND FALSE  !(revert)
[L7399]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7275]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7275]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7276]   COND FALSE  !(revert)
[L7279]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7248]               assume msgsender_MSG != null;
[L7249]               __tmp__Balance[this] := 0;
[L7250]               __tmp___name_ERC20Detailed[this] := -1540954157;
[L7251]               __tmp___symbol_ERC20Detailed[this] := -1540954157;
[L7252]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7254]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7255]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7256]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7279]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7280]   COND FALSE  !(revert)
[L7399]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7400]   COND FALSE  !(revert)
[L7403]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6577]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L6577]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   COND FALSE  !(revert)
[L6581]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6552]               assume msgsender_MSG != null;
[L6553]               __tmp__Balance[this] := 0;
[L6554]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6555]               __tmp__sum__balances0[this] := 0;
[L6556]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6557]               __tmp__sum__allowed1[this] := 0;
[L6558]               __tmp___totalSupply_ERC20[this] := 0;
[L6581]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6582]   COND FALSE  !(revert)
[L7403]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7404]   COND FALSE  !(revert)
[L7407]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L7407]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7408]   COND FALSE  !(revert)
[L7411]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND TRUE   __tmp__DType[this] == ONIT
[L6077]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6077]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6078]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L7411]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7412]   COND FALSE  !(revert)
[L7415]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6421]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6425]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6081]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L6082]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6082]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6083]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L6425]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6426]   COND FALSE  !(revert)
[L6429]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               __tmp__Balance[this] := 0;
[L6404]               __tmp___paused_Pausable[this] := false;
[L6406]               __tmp___paused_Pausable[this] := false;
[L6429]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7415]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7416]   COND FALSE  !(revert)
[L7419]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7091]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7091]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7095]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6577]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L6577]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   COND FALSE  !(revert)
[L6581]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6552]               assume msgsender_MSG != null;
[L6553]               __tmp__Balance[this] := 0;
[L6554]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6555]               __tmp__sum__balances0[this] := 0;
[L6556]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6557]               __tmp__sum__allowed1[this] := 0;
[L6558]               __tmp___totalSupply_ERC20[this] := 0;
[L6581]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6582]   COND FALSE  !(revert)
[L7095]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7096]   COND FALSE  !(revert)
[L7099]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L7099]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7100]   COND FALSE  !(revert)
[L7103]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6081]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L6082]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6082]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6083]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L7103]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7104]   COND FALSE  !(revert)
[L7107]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6421]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6425]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6081]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L6082]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6082]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6083]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L6425]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6426]   COND FALSE  !(revert)
[L6429]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               __tmp__Balance[this] := 0;
[L6404]               __tmp___paused_Pausable[this] := false;
[L6406]               __tmp___paused_Pausable[this] := false;
[L6429]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7107]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7108]   COND FALSE  !(revert)
[L7111]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7076]               assume msgsender_MSG != null;
[L7077]               __tmp__Balance[this] := 0;
[L7111]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7112]   COND FALSE  !(revert)
[L7419]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7420]   COND FALSE  !(revert)
[L7423]   CALL        call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7338]               assume msgsender_MSG != null;
[L7339]               __tmp__Balance[this] := 0;
[L7340]               __tmp__implementation_ONIT[this] := null;
[L7342]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L7342]   RET         call __var_36 := FreshRefGenerator__fail();
[L7343]   COND FALSE  !(revert)
[L7346]               __tmp__timelockList_ONIT[this] := __var_36;
[L7348]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]] := zeroRefboolArr();
[L7349]               __tmp__frozenAccount_ONIT[this] := zeroRefboolArr();
[L7351]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7352]   COND TRUE   __tmp__DType[this] == ONIT
[L7353]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6919]               __var_23 := null;
[L6920]   COND FALSE  !(!(account_s946 != null))
[L6924]   CALL        call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND FALSE  !(!(c_s106 >= a_s106))
[L5744]               __ret_0_ := c_s106;
[L6924]   RET         call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L6925]   COND FALSE  !(revert)
[L6928]               __tmp___totalSupply_ERC20[this] := __var_24;
[L6929]   CALL        call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND FALSE  !(!(c_s106 >= a_s106))
[L5744]               __ret_0_ := c_s106;
[L6929]   RET         call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L6930]   COND FALSE  !(revert)
[L6933]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s946];
[L6934]               __tmp___balances_ERC20[this][account_s946] := __var_25;
[L6935]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s946];
[L7353]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7354]   COND FALSE  !(revert)
[L7423]   RET         call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7424]   COND FALSE  !(revert)
[L3049]   RET         call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L3050]               assume revert || gas < 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0)
[L7532]               __ret_0_ := totalBalance_s1254;
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:37:14,713 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:37:14,714 INFO  L82        PathProgramCache]: Analyzing trace with hash 565185635, now seen corresponding path program 1 times
[2020-11-25 02:37:14,714 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:37:14,728 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:37:14,894 INFO  L134       CoverageAnalysis]: Checked inductivity of 886 backedges. 6 proven. 25 refuted. 0 times theorem prover too weak. 855 trivial. 0 not checked.
[2020-11-25 02:37:14,894 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:37:14,894 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 02:37:14,895 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:37:14,895 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:37:14,895 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:37:14,895 INFO  L87              Difference]: Start difference. First operand 11321 states and 12814 transitions. cyclomatic complexity: 1520 Second operand 9 states.
[2020-11-25 02:37:16,603 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:37:16,603 INFO  L93              Difference]: Finished difference Result 11480 states and 12977 transitions.
[2020-11-25 02:37:16,603 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 02:37:16,603 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11480 states and 12977 transitions.
[2020-11-25 02:37:16,626 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 02:37:16,648 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11480 states to 11466 states and 12961 transitions.
[2020-11-25 02:37:16,648 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2334
[2020-11-25 02:37:16,649 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2334
[2020-11-25 02:37:16,650 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11466 states and 12961 transitions.
[2020-11-25 02:37:16,655 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:37:16,655 INFO  L728         BuchiCegarLoop]: Abstraction has 11466 states and 12961 transitions.
[2020-11-25 02:37:16,662 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11466 states and 12961 transitions.
[2020-11-25 02:37:16,715 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11466 to 11334.
[2020-11-25 02:37:16,715 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11334 states.
[2020-11-25 02:37:16,729 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11334 states to 11334 states and 12829 transitions.
[2020-11-25 02:37:16,729 INFO  L751         BuchiCegarLoop]: Abstraction has 11334 states and 12829 transitions.
[2020-11-25 02:37:16,729 INFO  L631         BuchiCegarLoop]: Abstraction has 11334 states and 12829 transitions.
[2020-11-25 02:37:16,729 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 02:37:16,729 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11334 states and 12829 transitions.
[2020-11-25 02:37:16,740 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 02:37:16,740 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:37:16,740 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:37:16,741 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:37:16,742 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0)
[L7532]               __ret_0_ := totalBalance_s1254;
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:37:16,746 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:37:16,746 INFO  L82        PathProgramCache]: Analyzing trace with hash 1092813996, now seen corresponding path program 1 times
[2020-11-25 02:37:16,746 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:37:16,767 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:37:16,959 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 02:37:16,959 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:37:16,959 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 02:37:16,960 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:37:16,960 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 02:37:16,960 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 02:37:16,960 INFO  L87              Difference]: Start difference. First operand 11334 states and 12829 transitions. cyclomatic complexity: 1522 Second operand 5 states.
[2020-11-25 02:37:19,290 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:37:19,290 INFO  L93              Difference]: Finished difference Result 13682 states and 15738 transitions.
[2020-11-25 02:37:19,291 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:37:19,291 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13682 states and 15738 transitions.
[2020-11-25 02:37:19,325 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 24
[2020-11-25 02:37:19,356 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13682 states to 11908 states and 13875 transitions.
[2020-11-25 02:37:19,356 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2025
[2020-11-25 02:37:19,357 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2025
[2020-11-25 02:37:19,358 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11908 states and 13875 transitions.
[2020-11-25 02:37:19,366 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:37:19,367 INFO  L728         BuchiCegarLoop]: Abstraction has 11908 states and 13875 transitions.
[2020-11-25 02:37:19,373 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11908 states and 13875 transitions.
[2020-11-25 02:37:19,447 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11908 to 10303.
[2020-11-25 02:37:19,447 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10303 states.
[2020-11-25 02:37:19,458 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10303 states to 10303 states and 11828 transitions.
[2020-11-25 02:37:19,458 INFO  L751         BuchiCegarLoop]: Abstraction has 10303 states and 11828 transitions.
[2020-11-25 02:37:19,459 INFO  L631         BuchiCegarLoop]: Abstraction has 10303 states and 11828 transitions.
[2020-11-25 02:37:19,459 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 02:37:19,459 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10303 states and 11828 transitions.
[2020-11-25 02:37:19,501 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 10
[2020-11-25 02:37:19,501 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:37:19,502 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:37:19,503 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:37:19,503 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND TRUE   DType[this] == ERC20Pausable
[L6120]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6120]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6121]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:37:19,551 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:37:19,552 INFO  L82        PathProgramCache]: Analyzing trace with hash 49473298, now seen corresponding path program 1 times
[2020-11-25 02:37:19,552 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:37:19,569 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:37:19,729 INFO  L134       CoverageAnalysis]: Checked inductivity of 918 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 893 trivial. 0 not checked.
[2020-11-25 02:37:19,729 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:37:19,729 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 02:37:19,730 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:37:19,730 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:37:19,730 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:37:19,730 INFO  L87              Difference]: Start difference. First operand 10303 states and 11828 transitions. cyclomatic complexity: 1551 Second operand 9 states.
[2020-11-25 02:37:19,856 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:37:19,856 INFO  L93              Difference]: Finished difference Result 10334 states and 11861 transitions.
[2020-11-25 02:37:19,856 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:37:19,856 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10334 states and 11861 transitions.
[2020-11-25 02:37:19,873 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 10
[2020-11-25 02:37:19,891 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10334 states to 10299 states and 11822 transitions.
[2020-11-25 02:37:19,891 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1773
[2020-11-25 02:37:19,892 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1773
[2020-11-25 02:37:19,892 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10299 states and 11822 transitions.
[2020-11-25 02:37:19,897 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:37:19,897 INFO  L728         BuchiCegarLoop]: Abstraction has 10299 states and 11822 transitions.
[2020-11-25 02:37:19,902 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10299 states and 11822 transitions.
[2020-11-25 02:37:19,949 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10299 to 10299.
[2020-11-25 02:37:19,949 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10299 states.
[2020-11-25 02:37:19,961 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10299 states to 10299 states and 11822 transitions.
[2020-11-25 02:37:19,961 INFO  L751         BuchiCegarLoop]: Abstraction has 10299 states and 11822 transitions.
[2020-11-25 02:37:19,961 INFO  L631         BuchiCegarLoop]: Abstraction has 10299 states and 11822 transitions.
[2020-11-25 02:37:19,961 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 02:37:19,961 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10299 states and 11822 transitions.
[2020-11-25 02:37:19,970 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 10
[2020-11-25 02:37:19,970 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:37:19,970 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:37:19,972 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:37:19,972 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:37:19,976 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:37:19,976 INFO  L82        PathProgramCache]: Analyzing trace with hash -1551442579, now seen corresponding path program 1 times
[2020-11-25 02:37:19,977 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:37:19,994 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:37:20,200 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 02:37:20,200 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:37:20,200 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 02:37:20,201 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:37:20,201 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 02:37:20,201 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=132, Unknown=0, NotChecked=0, Total=156
[2020-11-25 02:37:20,201 INFO  L87              Difference]: Start difference. First operand 10299 states and 11822 transitions. cyclomatic complexity: 1549 Second operand 13 states.
[2020-11-25 02:37:24,495 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:37:24,496 INFO  L93              Difference]: Finished difference Result 11310 states and 13082 transitions.
[2020-11-25 02:37:24,496 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 02:37:24,497 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11310 states and 13082 transitions.
[2020-11-25 02:37:24,519 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 10
[2020-11-25 02:37:24,545 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11310 states to 11296 states and 13068 transitions.
[2020-11-25 02:37:24,546 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1964
[2020-11-25 02:37:24,546 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1964
[2020-11-25 02:37:24,546 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11296 states and 13068 transitions.
[2020-11-25 02:37:24,552 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:37:24,552 INFO  L728         BuchiCegarLoop]: Abstraction has 11296 states and 13068 transitions.
[2020-11-25 02:37:24,557 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11296 states and 13068 transitions.
[2020-11-25 02:37:24,613 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11296 to 10503.
[2020-11-25 02:37:24,613 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10503 states.
[2020-11-25 02:37:24,626 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10503 states to 10503 states and 12035 transitions.
[2020-11-25 02:37:24,626 INFO  L751         BuchiCegarLoop]: Abstraction has 10503 states and 12035 transitions.
[2020-11-25 02:37:24,626 INFO  L631         BuchiCegarLoop]: Abstraction has 10503 states and 12035 transitions.
[2020-11-25 02:37:24,626 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 02:37:24,626 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10503 states and 12035 transitions.
[2020-11-25 02:37:24,636 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 02:37:24,636 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:37:24,637 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:37:24,638 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:37:24,638 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND TRUE   __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false
[L7485]   CALL        call __var_38 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L7485]   RET         call __var_38 := FreshRefGenerator__fail();
[L7486]   COND FALSE  !(revert)
[L7489]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] == 0;
[L7490]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] := true;
[L7491]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] == zerointRefArr();
[L7492]               assume __tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254] == __var_38;
[L7493]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] == 0;
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND TRUE   choice == 30
[L12149]              gas := gas - 21000;
[L12150]  COND TRUE   gas >= 0
[L12151]              assume msgvalue_MSG == 0;
[L12152]  CALL        call transferOwnership~address_Ownable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L452]                havoc __exception;
[L453]                revert := false;
[L454]    COND TRUE   __exception
[L455]                __tmp__Balance := Balance;
[L456]                __tmp__DType := DType;
[L457]                __tmp__Alloc := Alloc;
[L458]                __tmp__balance_ADDR := balance_ADDR;
[L459]                __tmp__M_Ref_bool := M_Ref_bool;
[L460]                __tmp__sum := sum;
[L461]                __tmp__M_Ref_int := M_Ref_int;
[L462]                __tmp__sum__balances0 := sum__balances0;
[L463]                __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L464]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L465]                __tmp__sum__allowed1 := sum__allowed1;
[L466]                __tmp__M_int_Ref := M_int_Ref;
[L467]                __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L468]                __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L469]                __tmp__Length := Length;
[L470]                __tmp__now := now;
[L471]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L472]                __tmp__owner_Ownable := owner_Ownable;
[L473]                __tmp__newOwner_Ownable := newOwner_Ownable;
[L474]                __tmp___pausers_PauserRole := _pausers_PauserRole;
[L475]                __tmp___paused_Pausable := _paused_Pausable;
[L476]                __tmp___balances_ERC20 := _balances_ERC20;
[L477]                __tmp___allowed_ERC20 := _allowed_ERC20;
[L478]                __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L479]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L480]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L481]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L482]                __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L483]                __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L484]                __tmp__implementation_ONIT := implementation_ONIT;
[L485]                __tmp__timelockList_ONIT := timelockList_ONIT;
[L486]                __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L487]    CALL        call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L5987]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10735]  COND TRUE   !(msgsender_MSG == __tmp__owner_Ownable[this])
[L10736]              revert := true;
[L5987]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5988]   COND TRUE   revert
[L487]    RET         call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L488]                assume revert || gas < 0;
[L12152]  RET         call transferOwnership~address_Ownable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:37:24,642 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:37:24,642 INFO  L82        PathProgramCache]: Analyzing trace with hash -10849586, now seen corresponding path program 1 times
[2020-11-25 02:37:24,643 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:37:24,660 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:37:24,816 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 02:37:24,816 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:37:24,816 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:37:24,816 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:37:24,816 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:37:24,816 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:37:24,817 INFO  L87              Difference]: Start difference. First operand 10503 states and 12035 transitions. cyclomatic complexity: 1564 Second operand 3 states.
[2020-11-25 02:37:24,882 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:37:24,883 INFO  L93              Difference]: Finished difference Result 10425 states and 11929 transitions.
[2020-11-25 02:37:24,883 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:37:24,883 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10425 states and 11929 transitions.
[2020-11-25 02:37:24,901 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:37:24,920 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10425 states to 10405 states and 11907 transitions.
[2020-11-25 02:37:24,920 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1843
[2020-11-25 02:37:24,921 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1843
[2020-11-25 02:37:24,921 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10405 states and 11907 transitions.
[2020-11-25 02:37:24,926 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:37:24,926 INFO  L728         BuchiCegarLoop]: Abstraction has 10405 states and 11907 transitions.
[2020-11-25 02:37:24,931 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10405 states and 11907 transitions.
[2020-11-25 02:37:24,980 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10405 to 10246.
[2020-11-25 02:37:24,981 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10246 states.
[2020-11-25 02:37:24,992 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10246 states to 10246 states and 11716 transitions.
[2020-11-25 02:37:24,992 INFO  L751         BuchiCegarLoop]: Abstraction has 10246 states and 11716 transitions.
[2020-11-25 02:37:24,992 INFO  L631         BuchiCegarLoop]: Abstraction has 10246 states and 11716 transitions.
[2020-11-25 02:37:24,992 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 02:37:24,992 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10246 states and 11716 transitions.
[2020-11-25 02:37:25,001 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:37:25,001 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:37:25,001 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:37:25,003 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:37:25,003 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false
[L7554]   CALL        call __var_38 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7554]   RET         call __var_38 := FreshRefGenerator__success();
[L7555]   COND FALSE  !(revert)
[L7558]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] == 0;
[L7559]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] := true;
[L7560]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] == zerointRefArr();
[L7561]               assume M_Ref_Ref[timelockList_ONIT[this]][owner_s1254] == __var_38;
[L7562]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] == 0;
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:37:25,007 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:37:25,007 INFO  L82        PathProgramCache]: Analyzing trace with hash -2093942201, now seen corresponding path program 1 times
[2020-11-25 02:37:25,008 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:37:25,025 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:37:25,194 INFO  L134       CoverageAnalysis]: Checked inductivity of 919 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 919 trivial. 0 not checked.
[2020-11-25 02:37:25,194 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:37:25,194 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:37:25,195 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:37:25,195 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:37:25,195 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:37:25,195 INFO  L87              Difference]: Start difference. First operand 10246 states and 11716 transitions. cyclomatic complexity: 1498 Second operand 3 states.
[2020-11-25 02:37:25,264 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:37:25,264 INFO  L93              Difference]: Finished difference Result 10086 states and 11517 transitions.
[2020-11-25 02:37:25,264 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:37:25,264 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10086 states and 11517 transitions.
[2020-11-25 02:37:25,281 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:37:25,299 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10086 states to 10066 states and 11495 transitions.
[2020-11-25 02:37:25,299 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1707
[2020-11-25 02:37:25,300 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1707
[2020-11-25 02:37:25,300 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10066 states and 11495 transitions.
[2020-11-25 02:37:25,305 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:37:25,305 INFO  L728         BuchiCegarLoop]: Abstraction has 10066 states and 11495 transitions.
[2020-11-25 02:37:25,310 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10066 states and 11495 transitions.
[2020-11-25 02:37:25,353 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10066 to 10066.
[2020-11-25 02:37:25,353 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10066 states.
[2020-11-25 02:37:25,364 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10066 states to 10066 states and 11495 transitions.
[2020-11-25 02:37:25,364 INFO  L751         BuchiCegarLoop]: Abstraction has 10066 states and 11495 transitions.
[2020-11-25 02:37:25,365 INFO  L631         BuchiCegarLoop]: Abstraction has 10066 states and 11495 transitions.
[2020-11-25 02:37:25,365 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-25 02:37:25,365 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10066 states and 11495 transitions.
[2020-11-25 02:37:25,374 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:37:25,374 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:37:25,374 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:37:25,375 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:37:25,376 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND TRUE   DType[this] == Pausable
[L6125]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6125]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6126]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:37:25,381 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:37:25,381 INFO  L82        PathProgramCache]: Analyzing trace with hash 2021148610, now seen corresponding path program 1 times
[2020-11-25 02:37:25,382 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:37:25,401 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:37:25,619 INFO  L134       CoverageAnalysis]: Checked inductivity of 1057 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 1032 trivial. 0 not checked.
[2020-11-25 02:37:25,619 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:37:25,619 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 02:37:25,620 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:37:25,620 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:37:25,620 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:37:25,620 INFO  L87              Difference]: Start difference. First operand 10066 states and 11495 transitions. cyclomatic complexity: 1453 Second operand 9 states.
[2020-11-25 02:37:25,748 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:37:25,748 INFO  L93              Difference]: Finished difference Result 10084 states and 11514 transitions.
[2020-11-25 02:37:25,748 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:37:25,748 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10084 states and 11514 transitions.
[2020-11-25 02:37:25,765 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:37:25,782 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10084 states to 10042 states and 11466 transitions.
[2020-11-25 02:37:25,782 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1707
[2020-11-25 02:37:25,783 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1707
[2020-11-25 02:37:25,783 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10042 states and 11466 transitions.
[2020-11-25 02:37:25,788 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:37:25,789 INFO  L728         BuchiCegarLoop]: Abstraction has 10042 states and 11466 transitions.
[2020-11-25 02:37:25,794 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10042 states and 11466 transitions.
[2020-11-25 02:37:25,835 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10042 to 10042.
[2020-11-25 02:37:25,835 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10042 states.
[2020-11-25 02:37:25,846 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10042 states to 10042 states and 11466 transitions.
[2020-11-25 02:37:25,847 INFO  L751         BuchiCegarLoop]: Abstraction has 10042 states and 11466 transitions.
[2020-11-25 02:37:25,847 INFO  L631         BuchiCegarLoop]: Abstraction has 10042 states and 11466 transitions.
[2020-11-25 02:37:25,847 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-11-25 02:37:25,847 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10042 states and 11466 transitions.
[2020-11-25 02:37:25,855 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:37:25,856 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:37:25,856 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:37:25,857 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:37:25,857 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:37:25,862 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:37:25,862 INFO  L82        PathProgramCache]: Analyzing trace with hash -259748337, now seen corresponding path program 1 times
[2020-11-25 02:37:25,862 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:37:25,884 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:37:26,569 INFO  L134       CoverageAnalysis]: Checked inductivity of 1069 backedges. 102 proven. 1 refuted. 0 times theorem prover too weak. 966 trivial. 0 not checked.
[2020-11-25 02:37:26,569 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:37:26,569 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [21] total 21
[2020-11-25 02:37:26,569 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:37:26,570 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-25 02:37:26,570 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=58, Invalid=404, Unknown=0, NotChecked=0, Total=462
[2020-11-25 02:37:26,570 INFO  L87              Difference]: Start difference. First operand 10042 states and 11466 transitions. cyclomatic complexity: 1448 Second operand 22 states.
[2020-11-25 02:37:36,128 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:37:36,128 INFO  L93              Difference]: Finished difference Result 11296 states and 13019 transitions.
[2020-11-25 02:37:36,128 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 02:37:36,129 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11296 states and 13019 transitions.
[2020-11-25 02:37:36,150 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 02:37:36,172 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11296 states to 11282 states and 13005 transitions.
[2020-11-25 02:37:36,172 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2032
[2020-11-25 02:37:36,172 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2032
[2020-11-25 02:37:36,173 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11282 states and 13005 transitions.
[2020-11-25 02:37:36,179 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:37:36,179 INFO  L728         BuchiCegarLoop]: Abstraction has 11282 states and 13005 transitions.
[2020-11-25 02:37:36,184 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11282 states and 13005 transitions.
[2020-11-25 02:37:36,230 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11282 to 10586.
[2020-11-25 02:37:36,230 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10586 states.
[2020-11-25 02:37:36,242 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10586 states to 10586 states and 12175 transitions.
[2020-11-25 02:37:36,242 INFO  L751         BuchiCegarLoop]: Abstraction has 10586 states and 12175 transitions.
[2020-11-25 02:37:36,242 INFO  L631         BuchiCegarLoop]: Abstraction has 10586 states and 12175 transitions.
[2020-11-25 02:37:36,242 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-11-25 02:37:36,243 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10586 states and 12175 transitions.
[2020-11-25 02:37:36,252 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 02:37:36,252 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:37:36,252 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:37:36,253 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:37:36,253 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(_balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false
[L7554]   CALL        call __var_38 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7554]   RET         call __var_38 := FreshRefGenerator__success();
[L7555]   COND FALSE  !(revert)
[L7558]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] == 0;
[L7559]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] := true;
[L7560]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] == zerointRefArr();
[L7561]               assume M_Ref_Ref[timelockList_ONIT[this]][owner_s1254] == __var_38;
[L7562]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] == 0;
[L7564]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0)
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]);
[L2]                  success_balanceOf_ONIT0 := true;
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:37:36,258 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:37:36,259 INFO  L82        PathProgramCache]: Analyzing trace with hash -1079141234, now seen corresponding path program 1 times
[2020-11-25 02:37:36,259 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:37:36,280 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:37:36,719 INFO  L134       CoverageAnalysis]: Checked inductivity of 1077 backedges. 106 proven. 1 refuted. 0 times theorem prover too weak. 970 trivial. 0 not checked.
[2020-11-25 02:37:36,719 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:37:36,719 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [21] total 21
[2020-11-25 02:37:36,720 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:37:36,720 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-25 02:37:36,720 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=58, Invalid=404, Unknown=0, NotChecked=0, Total=462
[2020-11-25 02:37:36,720 INFO  L87              Difference]: Start difference. First operand 10586 states and 12175 transitions. cyclomatic complexity: 1623 Second operand 22 states.
[2020-11-25 02:37:46,585 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:37:46,585 INFO  L93              Difference]: Finished difference Result 11290 states and 13059 transitions.
[2020-11-25 02:37:46,585 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 02:37:46,585 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11290 states and 13059 transitions.
[2020-11-25 02:37:46,608 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:37:46,632 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11290 states to 11290 states and 13059 transitions.
[2020-11-25 02:37:46,632 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2032
[2020-11-25 02:37:46,633 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2032
[2020-11-25 02:37:46,633 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11290 states and 13059 transitions.
[2020-11-25 02:37:46,639 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:37:46,639 INFO  L728         BuchiCegarLoop]: Abstraction has 11290 states and 13059 transitions.
[2020-11-25 02:37:46,644 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11290 states and 13059 transitions.
[2020-11-25 02:37:46,693 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11290 to 10586.
[2020-11-25 02:37:46,694 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10586 states.
[2020-11-25 02:37:46,706 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10586 states to 10586 states and 12175 transitions.
[2020-11-25 02:37:46,706 INFO  L751         BuchiCegarLoop]: Abstraction has 10586 states and 12175 transitions.
[2020-11-25 02:37:46,706 INFO  L631         BuchiCegarLoop]: Abstraction has 10586 states and 12175 transitions.
[2020-11-25 02:37:46,706 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-11-25 02:37:46,706 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10586 states and 12175 transitions.
[2020-11-25 02:37:46,716 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 02:37:46,716 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:37:46,716 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:37:46,717 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:37:46,717 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:37:46,722 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:37:46,722 INFO  L82        PathProgramCache]: Analyzing trace with hash 1252523198, now seen corresponding path program 1 times
[2020-11-25 02:37:46,723 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:37:46,743 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:37:47,134 INFO  L134       CoverageAnalysis]: Checked inductivity of 1070 backedges. 102 proven. 1 refuted. 0 times theorem prover too weak. 967 trivial. 0 not checked.
[2020-11-25 02:37:47,134 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:37:47,134 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [16] total 16
[2020-11-25 02:37:47,135 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:37:47,135 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 02:37:47,135 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=42, Invalid=230, Unknown=0, NotChecked=0, Total=272
[2020-11-25 02:37:47,135 INFO  L87              Difference]: Start difference. First operand 10586 states and 12175 transitions. cyclomatic complexity: 1623 Second operand 17 states.
[2020-11-25 02:37:53,337 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:37:53,337 INFO  L93              Difference]: Finished difference Result 10998 states and 12704 transitions.
[2020-11-25 02:37:53,337 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 02:37:53,337 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10998 states and 12704 transitions.
[2020-11-25 02:37:53,360 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 02:37:53,385 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10998 states to 10998 states and 12704 transitions.
[2020-11-25 02:37:53,385 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1961
[2020-11-25 02:37:53,386 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1961
[2020-11-25 02:37:53,386 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10998 states and 12704 transitions.
[2020-11-25 02:37:53,392 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:37:53,392 INFO  L728         BuchiCegarLoop]: Abstraction has 10998 states and 12704 transitions.
[2020-11-25 02:37:53,398 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10998 states and 12704 transitions.
[2020-11-25 02:37:53,444 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10998 to 10626.
[2020-11-25 02:37:53,444 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10626 states.
[2020-11-25 02:37:53,457 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10626 states to 10626 states and 12244 transitions.
[2020-11-25 02:37:53,458 INFO  L751         BuchiCegarLoop]: Abstraction has 10626 states and 12244 transitions.
[2020-11-25 02:37:53,458 INFO  L631         BuchiCegarLoop]: Abstraction has 10626 states and 12244 transitions.
[2020-11-25 02:37:53,458 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-11-25 02:37:53,458 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10626 states and 12244 transitions.
[2020-11-25 02:37:53,467 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 02:37:53,467 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:37:53,467 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:37:53,469 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:37:53,469 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(_balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false
[L7554]   CALL        call __var_38 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7554]   RET         call __var_38 := FreshRefGenerator__success();
[L7555]   COND FALSE  !(revert)
[L7558]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] == 0;
[L7559]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] := true;
[L7560]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] == zerointRefArr();
[L7561]               assume M_Ref_Ref[timelockList_ONIT[this]][owner_s1254] == __var_38;
[L7562]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] == 0;
[L7564]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0)
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]);
[L2]                  success_balanceOf_ONIT0 := true;
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:37:53,473 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:37:53,474 INFO  L82        PathProgramCache]: Analyzing trace with hash -1563455201, now seen corresponding path program 1 times
[2020-11-25 02:37:53,474 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:37:53,495 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:37:53,933 INFO  L134       CoverageAnalysis]: Checked inductivity of 1078 backedges. 106 proven. 1 refuted. 0 times theorem prover too weak. 971 trivial. 0 not checked.
[2020-11-25 02:37:53,933 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:37:53,933 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [16] total 16
[2020-11-25 02:37:53,934 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:37:53,934 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 02:37:53,934 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=42, Invalid=230, Unknown=0, NotChecked=0, Total=272
[2020-11-25 02:37:53,934 INFO  L87              Difference]: Start difference. First operand 10626 states and 12244 transitions. cyclomatic complexity: 1654 Second operand 17 states.
[2020-11-25 02:38:01,612 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:38:01,612 INFO  L93              Difference]: Finished difference Result 10990 states and 12678 transitions.
[2020-11-25 02:38:01,612 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 02:38:01,613 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10990 states and 12678 transitions.
[2020-11-25 02:38:01,635 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:38:01,659 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10990 states to 10990 states and 12678 transitions.
[2020-11-25 02:38:01,659 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1953
[2020-11-25 02:38:01,660 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1953
[2020-11-25 02:38:01,660 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10990 states and 12678 transitions.
[2020-11-25 02:38:01,666 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:38:01,666 INFO  L728         BuchiCegarLoop]: Abstraction has 10990 states and 12678 transitions.
[2020-11-25 02:38:01,672 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10990 states and 12678 transitions.
[2020-11-25 02:38:01,720 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10990 to 10512.
[2020-11-25 02:38:01,720 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10512 states.
[2020-11-25 02:38:01,732 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10512 states to 10512 states and 12067 transitions.
[2020-11-25 02:38:01,733 INFO  L751         BuchiCegarLoop]: Abstraction has 10512 states and 12067 transitions.
[2020-11-25 02:38:01,733 INFO  L631         BuchiCegarLoop]: Abstraction has 10512 states and 12067 transitions.
[2020-11-25 02:38:01,733 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-11-25 02:38:01,733 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10512 states and 12067 transitions.
[2020-11-25 02:38:01,742 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:38:01,743 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:38:01,743 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:38:01,744 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:38:01,744 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false
[L7655]   CALL        call __var_41 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7655]   RET         call __var_41 := FreshRefGenerator__success();
[L7656]   COND FALSE  !(revert)
[L7659]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7660]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] := true;
[L7661]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7662]               assume M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7663]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:38:01,749 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:38:01,750 INFO  L82        PathProgramCache]: Analyzing trace with hash 240320233, now seen corresponding path program 1 times
[2020-11-25 02:38:01,751 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:38:01,773 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:38:02,255 INFO  L134       CoverageAnalysis]: Checked inductivity of 1075 backedges. 98 proven. 1 refuted. 0 times theorem prover too weak. 976 trivial. 0 not checked.
[2020-11-25 02:38:02,255 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:38:02,255 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [21] total 21
[2020-11-25 02:38:02,255 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:38:02,256 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-25 02:38:02,256 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=58, Invalid=404, Unknown=0, NotChecked=0, Total=462
[2020-11-25 02:38:02,256 INFO  L87              Difference]: Start difference. First operand 10512 states and 12067 transitions. cyclomatic complexity: 1585 Second operand 22 states.
[2020-11-25 02:38:12,721 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:38:12,721 INFO  L93              Difference]: Finished difference Result 11368 states and 13120 transitions.
[2020-11-25 02:38:12,722 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 02:38:12,722 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11368 states and 13120 transitions.
[2020-11-25 02:38:12,745 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 02:38:12,768 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11368 states to 11368 states and 13120 transitions.
[2020-11-25 02:38:12,769 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2052
[2020-11-25 02:38:12,769 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2052
[2020-11-25 02:38:12,769 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11368 states and 13120 transitions.
[2020-11-25 02:38:12,776 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:38:12,776 INFO  L728         BuchiCegarLoop]: Abstraction has 11368 states and 13120 transitions.
[2020-11-25 02:38:12,781 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11368 states and 13120 transitions.
[2020-11-25 02:38:12,842 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11368 to 10648.
[2020-11-25 02:38:12,842 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10648 states.
[2020-11-25 02:38:12,861 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10648 states to 10648 states and 12260 transitions.
[2020-11-25 02:38:12,861 INFO  L751         BuchiCegarLoop]: Abstraction has 10648 states and 12260 transitions.
[2020-11-25 02:38:12,861 INFO  L631         BuchiCegarLoop]: Abstraction has 10648 states and 12260 transitions.
[2020-11-25 02:38:12,862 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-11-25 02:38:12,862 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10648 states and 12260 transitions.
[2020-11-25 02:38:12,876 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 02:38:12,876 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:38:12,876 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:38:12,879 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:38:12,879 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false
[L8339]   CALL        call __var_67 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8339]   RET         call __var_67 := FreshRefGenerator__success();
[L8340]   COND FALSE  !(revert)
[L8343]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8344]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] := true;
[L8345]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == zerointRefArr();
[L8346]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1645] == __var_67;
[L8347]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8349]               idx_s1645 := 0;
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND FALSE  !(DType[this] == ONIT)
[L7183]   COND TRUE   DType[this] == ERC20Pausable
[L7184]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7184]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7185]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:38:12,886 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:38:12,886 INFO  L82        PathProgramCache]: Analyzing trace with hash -996926984, now seen corresponding path program 1 times
[2020-11-25 02:38:12,888 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:38:12,920 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:38:13,242 INFO  L134       CoverageAnalysis]: Checked inductivity of 1075 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1074 trivial. 0 not checked.
[2020-11-25 02:38:13,243 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:38:13,243 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 02:38:13,244 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:38:13,244 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:38:13,245 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:38:13,245 INFO  L87              Difference]: Start difference. First operand 10648 states and 12260 transitions. cyclomatic complexity: 1648 Second operand 7 states.
[2020-11-25 02:38:13,415 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:38:13,415 INFO  L93              Difference]: Finished difference Result 10804 states and 12412 transitions.
[2020-11-25 02:38:13,415 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:38:13,415 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10804 states and 12412 transitions.
[2020-11-25 02:38:13,435 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 02:38:13,456 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10804 states to 10628 states and 12232 transitions.
[2020-11-25 02:38:13,456 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1821
[2020-11-25 02:38:13,457 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1821
[2020-11-25 02:38:13,457 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10628 states and 12232 transitions.
[2020-11-25 02:38:13,462 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:38:13,462 INFO  L728         BuchiCegarLoop]: Abstraction has 10628 states and 12232 transitions.
[2020-11-25 02:38:13,468 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10628 states and 12232 transitions.
[2020-11-25 02:38:13,514 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10628 to 10628.
[2020-11-25 02:38:13,514 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10628 states.
[2020-11-25 02:38:13,528 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10628 states to 10628 states and 12232 transitions.
[2020-11-25 02:38:13,528 INFO  L751         BuchiCegarLoop]: Abstraction has 10628 states and 12232 transitions.
[2020-11-25 02:38:13,528 INFO  L631         BuchiCegarLoop]: Abstraction has 10628 states and 12232 transitions.
[2020-11-25 02:38:13,528 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-11-25 02:38:13,528 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10628 states and 12232 transitions.
[2020-11-25 02:38:13,538 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 02:38:13,538 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:38:13,538 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:38:13,540 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:38:13,540 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false
[L8339]   CALL        call __var_67 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8339]   RET         call __var_67 := FreshRefGenerator__success();
[L8340]   COND FALSE  !(revert)
[L8343]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8344]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] := true;
[L8345]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == zerointRefArr();
[L8346]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1645] == __var_67;
[L8347]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8349]               idx_s1645 := 0;
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND FALSE  !(DType[this] == ONIT)
[L6666]   COND TRUE   DType[this] == ERC20Pausable
[L6667]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6667]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6668]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:38:13,544 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:38:13,545 INFO  L82        PathProgramCache]: Analyzing trace with hash 1804812331, now seen corresponding path program 1 times
[2020-11-25 02:38:13,545 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:38:13,566 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:38:13,810 INFO  L134       CoverageAnalysis]: Checked inductivity of 1075 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1074 trivial. 0 not checked.
[2020-11-25 02:38:13,810 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:38:13,810 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 02:38:13,811 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:38:13,811 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:38:13,811 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:38:13,811 INFO  L87              Difference]: Start difference. First operand 10628 states and 12232 transitions. cyclomatic complexity: 1640 Second operand 8 states.
[2020-11-25 02:38:13,935 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:38:13,935 INFO  L93              Difference]: Finished difference Result 10804 states and 12404 transitions.
[2020-11-25 02:38:13,935 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:38:13,935 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10804 states and 12404 transitions.
[2020-11-25 02:38:13,955 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 02:38:13,976 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10804 states to 10612 states and 12208 transitions.
[2020-11-25 02:38:13,976 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1817
[2020-11-25 02:38:13,977 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1817
[2020-11-25 02:38:13,977 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10612 states and 12208 transitions.
[2020-11-25 02:38:13,983 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:38:13,983 INFO  L728         BuchiCegarLoop]: Abstraction has 10612 states and 12208 transitions.
[2020-11-25 02:38:13,988 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10612 states and 12208 transitions.
[2020-11-25 02:38:14,035 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10612 to 10612.
[2020-11-25 02:38:14,035 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10612 states.
[2020-11-25 02:38:14,049 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10612 states to 10612 states and 12208 transitions.
[2020-11-25 02:38:14,049 INFO  L751         BuchiCegarLoop]: Abstraction has 10612 states and 12208 transitions.
[2020-11-25 02:38:14,049 INFO  L631         BuchiCegarLoop]: Abstraction has 10612 states and 12208 transitions.
[2020-11-25 02:38:14,049 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-11-25 02:38:14,049 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10612 states and 12208 transitions.
[2020-11-25 02:38:14,059 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 02:38:14,059 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:38:14,060 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:38:14,061 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:38:14,061 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false
[L8339]   CALL        call __var_67 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8339]   RET         call __var_67 := FreshRefGenerator__success();
[L8340]   COND FALSE  !(revert)
[L8343]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8344]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] := true;
[L8345]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == zerointRefArr();
[L8346]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1645] == __var_67;
[L8347]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8349]               idx_s1645 := 0;
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:38:14,065 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:38:14,066 INFO  L82        PathProgramCache]: Analyzing trace with hash 1698298882, now seen corresponding path program 1 times
[2020-11-25 02:38:14,066 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:38:14,087 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:38:14,485 INFO  L134       CoverageAnalysis]: Checked inductivity of 1076 backedges. 1 proven. 98 refuted. 0 times theorem prover too weak. 977 trivial. 0 not checked.
[2020-11-25 02:38:14,485 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:38:14,485 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [15] total 15
[2020-11-25 02:38:14,486 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:38:14,486 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 02:38:14,486 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=179, Unknown=0, NotChecked=0, Total=210
[2020-11-25 02:38:14,486 INFO  L87              Difference]: Start difference. First operand 10612 states and 12208 transitions. cyclomatic complexity: 1632 Second operand 15 states.
[2020-11-25 02:38:19,789 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:38:19,789 INFO  L93              Difference]: Finished difference Result 11016 states and 12746 transitions.
[2020-11-25 02:38:19,789 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 02:38:19,790 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11016 states and 12746 transitions.
[2020-11-25 02:38:19,810 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 02:38:19,831 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11016 states to 11016 states and 12746 transitions.
[2020-11-25 02:38:19,832 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1985
[2020-11-25 02:38:19,832 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1985
[2020-11-25 02:38:19,832 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11016 states and 12746 transitions.
[2020-11-25 02:38:19,838 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:38:19,838 INFO  L728         BuchiCegarLoop]: Abstraction has 11016 states and 12746 transitions.
[2020-11-25 02:38:19,843 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11016 states and 12746 transitions.
[2020-11-25 02:38:19,893 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11016 to 10632.
[2020-11-25 02:38:19,893 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10632 states.
[2020-11-25 02:38:19,905 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10632 states to 10632 states and 12280 transitions.
[2020-11-25 02:38:19,905 INFO  L751         BuchiCegarLoop]: Abstraction has 10632 states and 12280 transitions.
[2020-11-25 02:38:19,906 INFO  L631         BuchiCegarLoop]: Abstraction has 10632 states and 12280 transitions.
[2020-11-25 02:38:19,906 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-11-25 02:38:19,906 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10632 states and 12280 transitions.
[2020-11-25 02:38:19,915 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 02:38:19,915 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:38:19,915 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:38:19,917 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:38:19,917 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false
[L8339]   CALL        call __var_67 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8339]   RET         call __var_67 := FreshRefGenerator__success();
[L8340]   COND FALSE  !(revert)
[L8343]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8344]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] := true;
[L8345]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == zerointRefArr();
[L8346]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1645] == __var_67;
[L8347]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8349]               idx_s1645 := 0;
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND FALSE  !(DType[this] == ONIT)
[L7233]   COND TRUE   DType[this] == ERC20Pausable
[L7234]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND FALSE  !(DType[this] == ONIT)
[L6761]   COND TRUE   DType[this] == ERC20Pausable
[L6762]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6762]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6763]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7234]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7235]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:38:19,921 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:38:19,921 INFO  L82        PathProgramCache]: Analyzing trace with hash -1295638829, now seen corresponding path program 1 times
[2020-11-25 02:38:19,922 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:38:19,942 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:38:20,173 INFO  L134       CoverageAnalysis]: Checked inductivity of 1082 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1081 trivial. 0 not checked.
[2020-11-25 02:38:20,173 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:38:20,174 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 02:38:20,174 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:38:20,174 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:38:20,174 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:38:20,174 INFO  L87              Difference]: Start difference. First operand 10632 states and 12280 transitions. cyclomatic complexity: 1686 Second operand 7 states.
[2020-11-25 02:38:20,278 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:38:20,278 INFO  L93              Difference]: Finished difference Result 10764 states and 12408 transitions.
[2020-11-25 02:38:20,279 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:38:20,279 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10764 states and 12408 transitions.
[2020-11-25 02:38:20,298 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 02:38:20,318 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10764 states to 10612 states and 12252 transitions.
[2020-11-25 02:38:20,318 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1813
[2020-11-25 02:38:20,319 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1813
[2020-11-25 02:38:20,319 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10612 states and 12252 transitions.
[2020-11-25 02:38:20,324 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:38:20,324 INFO  L728         BuchiCegarLoop]: Abstraction has 10612 states and 12252 transitions.
[2020-11-25 02:38:20,329 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10612 states and 12252 transitions.
[2020-11-25 02:38:20,377 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10612 to 10612.
[2020-11-25 02:38:20,377 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10612 states.
[2020-11-25 02:38:20,389 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10612 states to 10612 states and 12252 transitions.
[2020-11-25 02:38:20,390 INFO  L751         BuchiCegarLoop]: Abstraction has 10612 states and 12252 transitions.
[2020-11-25 02:38:20,390 INFO  L631         BuchiCegarLoop]: Abstraction has 10612 states and 12252 transitions.
[2020-11-25 02:38:20,390 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-11-25 02:38:20,390 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10612 states and 12252 transitions.
[2020-11-25 02:38:20,399 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 02:38:20,399 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:38:20,399 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:38:20,401 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:38:20,401 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false
[L8339]   CALL        call __var_67 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8339]   RET         call __var_67 := FreshRefGenerator__success();
[L8340]   COND FALSE  !(revert)
[L8343]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8344]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] := true;
[L8345]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == zerointRefArr();
[L8346]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1645] == __var_67;
[L8347]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8349]               idx_s1645 := 0;
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND FALSE  !(DType[this] == ONIT)
[L6761]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6766]   COND TRUE   DType[this] == ERC20
[L6767]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6767]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6768]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:38:20,405 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:38:20,405 INFO  L82        PathProgramCache]: Analyzing trace with hash 1466732953, now seen corresponding path program 1 times
[2020-11-25 02:38:20,406 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:38:20,426 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:38:20,689 INFO  L134       CoverageAnalysis]: Checked inductivity of 1082 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1081 trivial. 0 not checked.
[2020-11-25 02:38:20,689 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:38:20,689 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 02:38:20,690 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:38:20,690 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:38:20,690 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:38:20,690 INFO  L87              Difference]: Start difference. First operand 10612 states and 12252 transitions. cyclomatic complexity: 1678 Second operand 8 states.
[2020-11-25 02:38:20,805 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:38:20,805 INFO  L93              Difference]: Finished difference Result 10768 states and 12404 transitions.
[2020-11-25 02:38:20,805 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:38:20,805 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10768 states and 12404 transitions.
[2020-11-25 02:38:20,824 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 02:38:20,845 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10768 states to 10592 states and 12224 transitions.
[2020-11-25 02:38:20,845 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1809
[2020-11-25 02:38:20,846 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1809
[2020-11-25 02:38:20,846 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10592 states and 12224 transitions.
[2020-11-25 02:38:20,851 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:38:20,851 INFO  L728         BuchiCegarLoop]: Abstraction has 10592 states and 12224 transitions.
[2020-11-25 02:38:20,856 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10592 states and 12224 transitions.
[2020-11-25 02:38:20,904 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10592 to 10592.
[2020-11-25 02:38:20,904 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10592 states.
[2020-11-25 02:38:20,917 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10592 states to 10592 states and 12224 transitions.
[2020-11-25 02:38:20,917 INFO  L751         BuchiCegarLoop]: Abstraction has 10592 states and 12224 transitions.
[2020-11-25 02:38:20,917 INFO  L631         BuchiCegarLoop]: Abstraction has 10592 states and 12224 transitions.
[2020-11-25 02:38:20,917 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-11-25 02:38:20,917 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10592 states and 12224 transitions.
[2020-11-25 02:38:20,927 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 02:38:20,927 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:38:20,927 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:38:20,928 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:38:20,928 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false
[L8339]   CALL        call __var_67 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8339]   RET         call __var_67 := FreshRefGenerator__success();
[L8340]   COND FALSE  !(revert)
[L8343]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8344]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] := true;
[L8345]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == zerointRefArr();
[L8346]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1645] == __var_67;
[L8347]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8349]               idx_s1645 := 0;
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:38:20,933 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:38:20,933 INFO  L82        PathProgramCache]: Analyzing trace with hash -1787124868, now seen corresponding path program 1 times
[2020-11-25 02:38:20,934 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:38:20,959 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:38:21,285 INFO  L134       CoverageAnalysis]: Checked inductivity of 1082 backedges. 1 proven. 100 refuted. 0 times theorem prover too weak. 981 trivial. 0 not checked.
[2020-11-25 02:38:21,285 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:38:21,285 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [15] total 15
[2020-11-25 02:38:21,286 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:38:21,286 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 02:38:21,286 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=179, Unknown=0, NotChecked=0, Total=210
[2020-11-25 02:38:21,286 INFO  L87              Difference]: Start difference. First operand 10592 states and 12224 transitions. cyclomatic complexity: 1670 Second operand 15 states.
[2020-11-25 02:38:26,234 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:38:26,234 INFO  L93              Difference]: Finished difference Result 11020 states and 12763 transitions.
[2020-11-25 02:38:26,234 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 02:38:26,234 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11020 states and 12763 transitions.
[2020-11-25 02:38:26,257 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 02:38:26,279 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11020 states to 11020 states and 12763 transitions.
[2020-11-25 02:38:26,279 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1977
[2020-11-25 02:38:26,280 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1977
[2020-11-25 02:38:26,280 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11020 states and 12763 transitions.
[2020-11-25 02:38:26,287 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:38:26,287 INFO  L728         BuchiCegarLoop]: Abstraction has 11020 states and 12763 transitions.
[2020-11-25 02:38:26,292 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11020 states and 12763 transitions.
[2020-11-25 02:38:26,342 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11020 to 10620.
[2020-11-25 02:38:26,342 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10620 states.
[2020-11-25 02:38:26,355 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10620 states to 10620 states and 12254 transitions.
[2020-11-25 02:38:26,355 INFO  L751         BuchiCegarLoop]: Abstraction has 10620 states and 12254 transitions.
[2020-11-25 02:38:26,355 INFO  L631         BuchiCegarLoop]: Abstraction has 10620 states and 12254 transitions.
[2020-11-25 02:38:26,355 INFO  L445         BuchiCegarLoop]: ======== Iteration 33============
[2020-11-25 02:38:26,355 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10620 states and 12254 transitions.
[2020-11-25 02:38:26,365 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 02:38:26,365 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:38:26,365 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:38:26,367 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:38:26,367 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false
[L7733]   CALL        call __var_45 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7733]   RET         call __var_45 := FreshRefGenerator__success();
[L7734]   COND FALSE  !(revert)
[L7737]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == 0;
[L7738]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] := true;
[L7739]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == zerointRefArr();
[L7740]               assume M_Ref_Ref[timelockList_ONIT[this]][from_s1322] == __var_45;
[L7741]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == 0;
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:38:26,371 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:38:26,371 INFO  L82        PathProgramCache]: Analyzing trace with hash -561456570, now seen corresponding path program 1 times
[2020-11-25 02:38:26,372 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:38:26,395 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:38:26,889 INFO  L134       CoverageAnalysis]: Checked inductivity of 1082 backedges. 100 proven. 1 refuted. 0 times theorem prover too weak. 981 trivial. 0 not checked.
[2020-11-25 02:38:26,889 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:38:26,889 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [21] total 21
[2020-11-25 02:38:26,890 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:38:26,890 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-25 02:38:26,890 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=58, Invalid=404, Unknown=0, NotChecked=0, Total=462
[2020-11-25 02:38:26,890 INFO  L87              Difference]: Start difference. First operand 10620 states and 12254 transitions. cyclomatic complexity: 1672 Second operand 22 states.
[2020-11-25 02:38:36,215 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:38:36,215 INFO  L93              Difference]: Finished difference Result 11346 states and 13187 transitions.
[2020-11-25 02:38:36,215 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 02:38:36,215 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11346 states and 13187 transitions.
[2020-11-25 02:38:36,240 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:38:36,264 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11346 states to 11346 states and 13187 transitions.
[2020-11-25 02:38:36,264 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2040
[2020-11-25 02:38:36,265 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2040
[2020-11-25 02:38:36,265 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11346 states and 13187 transitions.
[2020-11-25 02:38:36,272 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:38:36,272 INFO  L728         BuchiCegarLoop]: Abstraction has 11346 states and 13187 transitions.
[2020-11-25 02:38:36,277 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11346 states and 13187 transitions.
[2020-11-25 02:38:36,331 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11346 to 10612.
[2020-11-25 02:38:36,331 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10612 states.
[2020-11-25 02:38:36,344 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10612 states to 10612 states and 12232 transitions.
[2020-11-25 02:38:36,344 INFO  L751         BuchiCegarLoop]: Abstraction has 10612 states and 12232 transitions.
[2020-11-25 02:38:36,344 INFO  L631         BuchiCegarLoop]: Abstraction has 10612 states and 12232 transitions.
[2020-11-25 02:38:36,344 INFO  L445         BuchiCegarLoop]: ======== Iteration 34============
[2020-11-25 02:38:36,344 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10612 states and 12232 transitions.
[2020-11-25 02:38:36,354 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 02:38:36,354 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:38:36,354 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:38:36,356 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:38:36,356 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND FALSE  !(choice == 6)
[L12304]  COND TRUE   choice == 5
[L12305]              gas := gas - 21000;
[L12306]  COND TRUE   gas >= 0
[L12307]              assume value_s1410 >= 0 && value_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12308]              assume releaseTime_s1410 >= 0 && releaseTime_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12309]              assume msgvalue_MSG == 0;
[L12310]  CALL        call __ret_0_lock := lock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3520]               havoc __exception;
[L3521]               revert := false;
[L3522]   COND FALSE  !(__exception)
[L3558]   CALL        call __ret_0_ := lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7845]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND FALSE  !(DType[this] == ONIT)
[L10865]  COND TRUE   DType[this] == ERC20Pausable
[L10866]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10866]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10867]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7845]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7846]   COND FALSE  !(revert)
[L7849]   COND FALSE  !(!(_balances_ERC20[this][holder_s1410] >= value_s1410))
[L7853]   CALL        call __var_49 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L8052]   CALL        call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8052]   RET         call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L8053]   COND FALSE  !(revert)
[L8056]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1527];
[L8057]               _balances_ERC20[this][holder_s1527] := __var_53;
[L8058]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1527];
[L8059]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] == false
[L8060]   CALL        call __var_54 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8060]   RET         call __var_54 := FreshRefGenerator__success();
[L8061]   COND FALSE  !(revert)
[L8064]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8065]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] := true;
[L8066]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == zerointRefArr();
[L8067]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1527] == __var_54;
[L8068]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8070]   CALL        call __var_56 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8070]   RET         call __var_56 := FreshRefGenerator__success();
[L8071]   COND FALSE  !(revert)
[L8074]               assume DType[__var_56] == ONIT.LockInfo;
[L8075]   CALL        call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5620]               _releaseTime_ONIT.LockInfo[this] := _releaseTime;
[L5621]               _amount_ONIT.LockInfo[this] := _amount;
[L8075]   RET         call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L8076]   COND FALSE  !(revert)
[L8079]               __var_55 := __var_56;
[L8080]               __var_58 := Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]];
[L8081]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]][__var_58] := __var_55;
[L8082]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] := __var_58 + 1;
[L8083]               assert { :EventEmitted "Lock_ONIT" } true;
[L8084]               __ret_0_ := true;
[L7853]   RET         call __var_49 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7854]   COND FALSE  !(revert)
[L7857]               __ret_0_ := true;
[L3558]   RET         call __ret_0_ := lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3559]               assume !revert && gas >= 0;
[L12310]  RET         call __ret_0_lock := lock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:38:36,360 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:38:36,360 INFO  L82        PathProgramCache]: Analyzing trace with hash -835960136, now seen corresponding path program 1 times
[2020-11-25 02:38:36,361 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:38:36,382 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:38:36,652 INFO  L134       CoverageAnalysis]: Checked inductivity of 1131 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1130 trivial. 0 not checked.
[2020-11-25 02:38:36,652 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:38:36,652 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:38:36,652 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:38:36,652 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:38:36,652 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:38:36,652 INFO  L87              Difference]: Start difference. First operand 10612 states and 12232 transitions. cyclomatic complexity: 1658 Second operand 3 states.
[2020-11-25 02:38:36,727 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:38:36,728 INFO  L93              Difference]: Finished difference Result 10628 states and 12276 transitions.
[2020-11-25 02:38:36,728 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:38:36,728 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10628 states and 12276 transitions.
[2020-11-25 02:38:36,745 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 02:38:36,765 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10628 states to 10628 states and 12276 transitions.
[2020-11-25 02:38:36,765 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1809
[2020-11-25 02:38:36,766 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1809
[2020-11-25 02:38:36,766 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10628 states and 12276 transitions.
[2020-11-25 02:38:36,772 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:38:36,772 INFO  L728         BuchiCegarLoop]: Abstraction has 10628 states and 12276 transitions.
[2020-11-25 02:38:36,777 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10628 states and 12276 transitions.
[2020-11-25 02:38:36,825 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10628 to 10616.
[2020-11-25 02:38:36,825 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10616 states.
[2020-11-25 02:38:36,837 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10616 states to 10616 states and 12236 transitions.
[2020-11-25 02:38:36,837 INFO  L751         BuchiCegarLoop]: Abstraction has 10616 states and 12236 transitions.
[2020-11-25 02:38:36,837 INFO  L631         BuchiCegarLoop]: Abstraction has 10616 states and 12236 transitions.
[2020-11-25 02:38:36,838 INFO  L445         BuchiCegarLoop]: ======== Iteration 35============
[2020-11-25 02:38:36,838 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10616 states and 12236 transitions.
[2020-11-25 02:38:36,847 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 02:38:36,847 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:38:36,847 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:38:36,848 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:38:36,848 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND FALSE  !(choice == 6)
[L12304]  COND TRUE   choice == 5
[L12305]              gas := gas - 21000;
[L12306]  COND TRUE   gas >= 0
[L12307]              assume value_s1410 >= 0 && value_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12308]              assume releaseTime_s1410 >= 0 && releaseTime_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12309]              assume msgvalue_MSG == 0;
[L12310]  CALL        call __ret_0_lock := lock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3520]               havoc __exception;
[L3521]               revert := false;
[L3522]   COND FALSE  !(__exception)
[L3558]   CALL        call __ret_0_ := lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7845]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND TRUE   DType[this] == ONIT
[L10861]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10861]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10862]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7845]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7846]   COND FALSE  !(revert)
[L7849]   COND FALSE  !(!(_balances_ERC20[this][holder_s1410] >= value_s1410))
[L7853]   CALL        call __var_49 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L8052]   CALL        call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8052]   RET         call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L8053]   COND FALSE  !(revert)
[L8056]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1527];
[L8057]               _balances_ERC20[this][holder_s1527] := __var_53;
[L8058]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1527];
[L8059]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] == false
[L8060]   CALL        call __var_54 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8060]   RET         call __var_54 := FreshRefGenerator__success();
[L8061]   COND FALSE  !(revert)
[L8064]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8065]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] := true;
[L8066]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == zerointRefArr();
[L8067]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1527] == __var_54;
[L8068]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8070]   CALL        call __var_56 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8070]   RET         call __var_56 := FreshRefGenerator__success();
[L8071]   COND FALSE  !(revert)
[L8074]               assume DType[__var_56] == ONIT.LockInfo;
[L8075]   CALL        call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5620]               _releaseTime_ONIT.LockInfo[this] := _releaseTime;
[L5621]               _amount_ONIT.LockInfo[this] := _amount;
[L8075]   RET         call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L8076]   COND FALSE  !(revert)
[L8079]               __var_55 := __var_56;
[L8080]               __var_58 := Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]];
[L8081]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]][__var_58] := __var_55;
[L8082]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] := __var_58 + 1;
[L8083]               assert { :EventEmitted "Lock_ONIT" } true;
[L8084]               __ret_0_ := true;
[L7853]   RET         call __var_49 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7854]   COND FALSE  !(revert)
[L7857]               __ret_0_ := true;
[L3558]   RET         call __ret_0_ := lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3559]               assume !revert && gas >= 0;
[L12310]  RET         call __ret_0_lock := lock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:38:36,853 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:38:36,853 INFO  L82        PathProgramCache]: Analyzing trace with hash -886416099, now seen corresponding path program 1 times
[2020-11-25 02:38:36,854 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:38:36,898 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:38:38,477 INFO  L134       CoverageAnalysis]: Checked inductivity of 1131 backedges. 116 proven. 1 refuted. 0 times theorem prover too weak. 1014 trivial. 0 not checked.
[2020-11-25 02:38:38,477 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:38:38,478 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [53] total 53
[2020-11-25 02:38:38,480 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:38:38,480 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 54 interpolants.
[2020-11-25 02:38:38,482 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=171, Invalid=2691, Unknown=0, NotChecked=0, Total=2862
[2020-11-25 02:38:38,482 INFO  L87              Difference]: Start difference. First operand 10616 states and 12236 transitions. cyclomatic complexity: 1658 Second operand 54 states.
[2020-11-25 02:39:16,546 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:39:16,546 INFO  L93              Difference]: Finished difference Result 11434 states and 13441 transitions.
[2020-11-25 02:39:16,547 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 60 states. 
[2020-11-25 02:39:16,547 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11434 states and 13441 transitions.
[2020-11-25 02:39:16,572 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:39:16,598 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11434 states to 11434 states and 13441 transitions.
[2020-11-25 02:39:16,598 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2009
[2020-11-25 02:39:16,598 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2009
[2020-11-25 02:39:16,598 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11434 states and 13441 transitions.
[2020-11-25 02:39:16,605 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:39:16,606 INFO  L728         BuchiCegarLoop]: Abstraction has 11434 states and 13441 transitions.
[2020-11-25 02:39:16,611 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11434 states and 13441 transitions.
[2020-11-25 02:39:16,666 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11434 to 10796.
[2020-11-25 02:39:16,666 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10796 states.
[2020-11-25 02:39:16,680 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10796 states to 10796 states and 12578 transitions.
[2020-11-25 02:39:16,681 INFO  L751         BuchiCegarLoop]: Abstraction has 10796 states and 12578 transitions.
[2020-11-25 02:39:16,681 INFO  L631         BuchiCegarLoop]: Abstraction has 10796 states and 12578 transitions.
[2020-11-25 02:39:16,681 INFO  L445         BuchiCegarLoop]: ======== Iteration 36============
[2020-11-25 02:39:16,681 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10796 states and 12578 transitions.
[2020-11-25 02:39:16,690 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:39:16,690 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:39:16,690 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:39:16,692 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:39:16,692 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false
[L7655]   CALL        call __var_41 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7655]   RET         call __var_41 := FreshRefGenerator__success();
[L7656]   COND FALSE  !(revert)
[L7659]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7660]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] := true;
[L7661]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7662]               assume M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7663]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND FALSE  !(DType[this] == ONIT)
[L6666]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6671]   COND TRUE   DType[this] == ERC20
[L6672]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6672]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6673]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:39:16,696 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:39:16,696 INFO  L82        PathProgramCache]: Analyzing trace with hash 1538615813, now seen corresponding path program 1 times
[2020-11-25 02:39:16,697 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:39:16,716 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:39:16,974 INFO  L134       CoverageAnalysis]: Checked inductivity of 1076 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1075 trivial. 0 not checked.
[2020-11-25 02:39:16,975 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:39:16,975 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 02:39:16,975 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:39:16,975 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:39:16,975 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:39:16,976 INFO  L87              Difference]: Start difference. First operand 10796 states and 12578 transitions. cyclomatic complexity: 1828 Second operand 8 states.
[2020-11-25 02:39:17,109 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:39:17,109 INFO  L93              Difference]: Finished difference Result 10972 states and 12750 transitions.
[2020-11-25 02:39:17,109 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:39:17,109 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10972 states and 12750 transitions.
[2020-11-25 02:39:17,129 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:39:17,151 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10972 states to 10772 states and 12546 transitions.
[2020-11-25 02:39:17,151 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1846
[2020-11-25 02:39:17,152 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1846
[2020-11-25 02:39:17,152 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10772 states and 12546 transitions.
[2020-11-25 02:39:17,158 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:39:17,158 INFO  L728         BuchiCegarLoop]: Abstraction has 10772 states and 12546 transitions.
[2020-11-25 02:39:17,163 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10772 states and 12546 transitions.
[2020-11-25 02:39:17,215 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10772 to 10772.
[2020-11-25 02:39:17,215 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10772 states.
[2020-11-25 02:39:17,229 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10772 states to 10772 states and 12546 transitions.
[2020-11-25 02:39:17,229 INFO  L751         BuchiCegarLoop]: Abstraction has 10772 states and 12546 transitions.
[2020-11-25 02:39:17,229 INFO  L631         BuchiCegarLoop]: Abstraction has 10772 states and 12546 transitions.
[2020-11-25 02:39:17,229 INFO  L445         BuchiCegarLoop]: ======== Iteration 37============
[2020-11-25 02:39:17,229 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10772 states and 12546 transitions.
[2020-11-25 02:39:17,239 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:39:17,239 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:39:17,239 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:39:17,240 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:39:17,240 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false
[L7655]   CALL        call __var_41 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7655]   RET         call __var_41 := FreshRefGenerator__success();
[L7656]   COND FALSE  !(revert)
[L7659]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7660]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] := true;
[L7661]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7662]               assume M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7663]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:39:17,245 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:39:17,245 INFO  L82        PathProgramCache]: Analyzing trace with hash 1268578596, now seen corresponding path program 1 times
[2020-11-25 02:39:17,246 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:39:17,267 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:39:17,685 INFO  L134       CoverageAnalysis]: Checked inductivity of 1076 backedges. 98 proven. 1 refuted. 0 times theorem prover too weak. 977 trivial. 0 not checked.
[2020-11-25 02:39:17,685 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:39:17,685 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [16] total 16
[2020-11-25 02:39:17,686 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:39:17,686 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 02:39:17,686 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=42, Invalid=230, Unknown=0, NotChecked=0, Total=272
[2020-11-25 02:39:17,686 INFO  L87              Difference]: Start difference. First operand 10772 states and 12546 transitions. cyclomatic complexity: 1820 Second operand 17 states.
[2020-11-25 02:39:25,167 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:39:25,167 INFO  L93              Difference]: Finished difference Result 11178 states and 13106 transitions.
[2020-11-25 02:39:25,167 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 02:39:25,167 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11178 states and 13106 transitions.
[2020-11-25 02:39:25,193 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:39:25,218 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11178 states to 11178 states and 13106 transitions.
[2020-11-25 02:39:25,218 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2002
[2020-11-25 02:39:25,219 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2002
[2020-11-25 02:39:25,219 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11178 states and 13106 transitions.
[2020-11-25 02:39:25,226 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:39:25,226 INFO  L728         BuchiCegarLoop]: Abstraction has 11178 states and 13106 transitions.
[2020-11-25 02:39:25,231 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11178 states and 13106 transitions.
[2020-11-25 02:39:25,285 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11178 to 10772.
[2020-11-25 02:39:25,285 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10772 states.
[2020-11-25 02:39:25,300 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10772 states to 10772 states and 12546 transitions.
[2020-11-25 02:39:25,300 INFO  L751         BuchiCegarLoop]: Abstraction has 10772 states and 12546 transitions.
[2020-11-25 02:39:25,300 INFO  L631         BuchiCegarLoop]: Abstraction has 10772 states and 12546 transitions.
[2020-11-25 02:39:25,300 INFO  L445         BuchiCegarLoop]: ======== Iteration 38============
[2020-11-25 02:39:25,300 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10772 states and 12546 transitions.
[2020-11-25 02:39:25,310 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:39:25,310 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:39:25,310 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:39:25,312 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:39:25,312 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(_balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false
[L7554]   CALL        call __var_38 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7554]   RET         call __var_38 := FreshRefGenerator__success();
[L7555]   COND FALSE  !(revert)
[L7558]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] == 0;
[L7559]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] := true;
[L7560]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] == zerointRefArr();
[L7561]               assume M_Ref_Ref[timelockList_ONIT[this]][owner_s1254] == __var_38;
[L7562]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] == 0;
[L7564]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0)
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]);
[L2]                  success_balanceOf_ONIT0 := true;
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:39:25,316 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:39:25,316 INFO  L82        PathProgramCache]: Analyzing trace with hash 54105789, now seen corresponding path program 1 times
[2020-11-25 02:39:25,317 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:39:25,340 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:39:26,040 INFO  L134       CoverageAnalysis]: Checked inductivity of 1329 backedges. 206 proven. 4 refuted. 0 times theorem prover too weak. 1119 trivial. 0 not checked.
[2020-11-25 02:39:26,040 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:39:26,040 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [21] total 21
[2020-11-25 02:39:26,041 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:39:26,041 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-25 02:39:26,041 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=64, Invalid=398, Unknown=0, NotChecked=0, Total=462
[2020-11-25 02:39:26,041 INFO  L87              Difference]: Start difference. First operand 10772 states and 12546 transitions. cyclomatic complexity: 1820 Second operand 22 states.
[2020-11-25 02:39:36,318 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:39:36,318 INFO  L93              Difference]: Finished difference Result 11162 states and 13154 transitions.
[2020-11-25 02:39:36,319 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 02:39:36,319 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11162 states and 13154 transitions.
[2020-11-25 02:39:36,343 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 14
[2020-11-25 02:39:36,369 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11162 states to 11162 states and 13154 transitions.
[2020-11-25 02:39:36,369 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1984
[2020-11-25 02:39:36,370 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1984
[2020-11-25 02:39:36,370 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11162 states and 13154 transitions.
[2020-11-25 02:39:36,377 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:39:36,377 INFO  L728         BuchiCegarLoop]: Abstraction has 11162 states and 13154 transitions.
[2020-11-25 02:39:36,382 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11162 states and 13154 transitions.
[2020-11-25 02:39:36,439 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11162 to 10790.
[2020-11-25 02:39:36,439 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10790 states.
[2020-11-25 02:39:36,456 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10790 states to 10790 states and 12692 transitions.
[2020-11-25 02:39:36,456 INFO  L751         BuchiCegarLoop]: Abstraction has 10790 states and 12692 transitions.
[2020-11-25 02:39:36,456 INFO  L631         BuchiCegarLoop]: Abstraction has 10790 states and 12692 transitions.
[2020-11-25 02:39:36,456 INFO  L445         BuchiCegarLoop]: ======== Iteration 39============
[2020-11-25 02:39:36,456 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10790 states and 12692 transitions.
[2020-11-25 02:39:36,466 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 14
[2020-11-25 02:39:36,466 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:39:36,466 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:39:36,468 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:39:36,468 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND FALSE  !(choice == 6)
[L12304]  COND FALSE  !(choice == 5)
[L12312]  COND FALSE  !(choice == 4)
[L12320]  COND TRUE   choice == 3
[L12321]              gas := gas - 21000;
[L12322]  COND TRUE   gas >= 0
[L12323]              assume idx_s1468 >= 0 && idx_s1468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12324]              assume msgvalue_MSG == 0;
[L12325]  CALL        call __ret_0_unlock := unlock~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L3694]               havoc __exception;
[L3695]               revert := false;
[L3696]   COND FALSE  !(__exception)
[L3732]   CALL        call __ret_0_ := unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L7942]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND TRUE   DType[this] == ONIT
[L10861]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10861]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10862]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7942]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7943]   COND FALSE  !(revert)
[L7946]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1468] == false)
[L7957]   COND FALSE  !(!(Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1468]] > idx_s1468))
[L7961]   CALL        call __var_52 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false
[L8260]   CALL        call __var_65 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8260]   RET         call __var_65 := FreshRefGenerator__success();
[L8261]   COND FALSE  !(revert)
[L8264]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] == 0;
[L8265]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] := true;
[L8266]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] == zerointRefArr();
[L8267]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1600] == __var_65;
[L8268]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] == 0;
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L7961]   RET         call __var_52 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L7962]   COND FALSE  !(revert)
[L7965]               __ret_0_ := true;
[L3732]   RET         call __ret_0_ := unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L3733]               assume !revert && gas >= 0;
[L12325]  RET         call __ret_0_unlock := unlock~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:39:36,473 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:39:36,473 INFO  L82        PathProgramCache]: Analyzing trace with hash -2116744547, now seen corresponding path program 1 times
[2020-11-25 02:39:36,474 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:39:36,495 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:39:36,736 INFO  L134       CoverageAnalysis]: Checked inductivity of 1099 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1098 trivial. 0 not checked.
[2020-11-25 02:39:36,736 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:39:36,736 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:39:36,737 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:39:36,737 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:39:36,737 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:39:36,737 INFO  L87              Difference]: Start difference. First operand 10790 states and 12692 transitions. cyclomatic complexity: 1953 Second operand 3 states.
[2020-11-25 02:39:36,800 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:39:36,800 INFO  L93              Difference]: Finished difference Result 10610 states and 12462 transitions.
[2020-11-25 02:39:36,800 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:39:36,800 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10610 states and 12462 transitions.
[2020-11-25 02:39:36,820 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 14
[2020-11-25 02:39:36,843 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10610 states to 10610 states and 12462 transitions.
[2020-11-25 02:39:36,844 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1848
[2020-11-25 02:39:36,844 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1848
[2020-11-25 02:39:36,844 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10610 states and 12462 transitions.
[2020-11-25 02:39:36,851 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:39:36,851 INFO  L728         BuchiCegarLoop]: Abstraction has 10610 states and 12462 transitions.
[2020-11-25 02:39:36,856 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10610 states and 12462 transitions.
[2020-11-25 02:39:36,908 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10610 to 10610.
[2020-11-25 02:39:36,908 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10610 states.
[2020-11-25 02:39:36,923 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10610 states to 10610 states and 12462 transitions.
[2020-11-25 02:39:36,923 INFO  L751         BuchiCegarLoop]: Abstraction has 10610 states and 12462 transitions.
[2020-11-25 02:39:36,923 INFO  L631         BuchiCegarLoop]: Abstraction has 10610 states and 12462 transitions.
[2020-11-25 02:39:36,923 INFO  L445         BuchiCegarLoop]: ======== Iteration 40============
[2020-11-25 02:39:36,923 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10610 states and 12462 transitions.
[2020-11-25 02:39:36,932 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 14
[2020-11-25 02:39:36,932 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:39:36,932 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:39:36,934 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:39:36,934 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND FALSE  !(choice == 6)
[L12304]  COND FALSE  !(choice == 5)
[L12312]  COND FALSE  !(choice == 4)
[L12320]  COND TRUE   choice == 3
[L12321]              gas := gas - 21000;
[L12322]  COND TRUE   gas >= 0
[L12323]              assume idx_s1468 >= 0 && idx_s1468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12324]              assume msgvalue_MSG == 0;
[L12325]  CALL        call __ret_0_unlock := unlock~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L3694]               havoc __exception;
[L3695]               revert := false;
[L3696]   COND FALSE  !(__exception)
[L3732]   CALL        call __ret_0_ := unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L7942]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND TRUE   DType[this] == ONIT
[L10861]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10861]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10862]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7942]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7943]   COND FALSE  !(revert)
[L7946]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1468] == false)
[L7957]   COND FALSE  !(!(Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1468]] > idx_s1468))
[L7961]   CALL        call __var_52 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L8197]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false
[L8198]   CALL        call __var_59 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8198]   RET         call __var_59 := FreshRefGenerator__success();
[L8199]   COND FALSE  !(revert)
[L8202]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] == 0;
[L8203]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] := true;
[L8204]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] == zerointRefArr();
[L8205]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1600] == __var_59;
[L8206]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] == 0;
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L7961]   RET         call __var_52 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L7962]   COND FALSE  !(revert)
[L7965]               __ret_0_ := true;
[L3732]   RET         call __ret_0_ := unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L3733]               assume !revert && gas >= 0;
[L12325]  RET         call __ret_0_unlock := unlock~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:39:36,938 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:39:36,938 INFO  L82        PathProgramCache]: Analyzing trace with hash 803038631, now seen corresponding path program 1 times
[2020-11-25 02:39:36,939 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:39:36,958 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:39:37,185 INFO  L134       CoverageAnalysis]: Checked inductivity of 1100 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1099 trivial. 0 not checked.
[2020-11-25 02:39:37,185 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:39:37,185 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:39:37,185 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:39:37,185 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:39:37,185 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:39:37,186 INFO  L87              Difference]: Start difference. First operand 10610 states and 12462 transitions. cyclomatic complexity: 1903 Second operand 4 states.
[2020-11-25 02:39:37,266 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:39:37,266 INFO  L93              Difference]: Finished difference Result 10590 states and 12432 transitions.
[2020-11-25 02:39:37,266 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:39:37,266 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10590 states and 12432 transitions.
[2020-11-25 02:39:37,287 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 14
[2020-11-25 02:39:37,310 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10590 states to 10530 states and 12364 transitions.
[2020-11-25 02:39:37,310 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1848
[2020-11-25 02:39:37,311 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1848
[2020-11-25 02:39:37,311 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10530 states and 12364 transitions.
[2020-11-25 02:39:37,318 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:39:37,318 INFO  L728         BuchiCegarLoop]: Abstraction has 10530 states and 12364 transitions.
[2020-11-25 02:39:37,323 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10530 states and 12364 transitions.
[2020-11-25 02:39:37,374 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10530 to 10530.
[2020-11-25 02:39:37,374 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10530 states.
[2020-11-25 02:39:37,389 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10530 states to 10530 states and 12364 transitions.
[2020-11-25 02:39:37,389 INFO  L751         BuchiCegarLoop]: Abstraction has 10530 states and 12364 transitions.
[2020-11-25 02:39:37,389 INFO  L631         BuchiCegarLoop]: Abstraction has 10530 states and 12364 transitions.
[2020-11-25 02:39:37,389 INFO  L445         BuchiCegarLoop]: ======== Iteration 41============
[2020-11-25 02:39:37,389 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10530 states and 12364 transitions.
[2020-11-25 02:39:37,398 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 14
[2020-11-25 02:39:37,398 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:39:37,398 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:39:37,400 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:39:37,400 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(_balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false
[L7554]   CALL        call __var_38 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7554]   RET         call __var_38 := FreshRefGenerator__success();
[L7555]   COND FALSE  !(revert)
[L7558]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] == 0;
[L7559]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] := true;
[L7560]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] == zerointRefArr();
[L7561]               assume M_Ref_Ref[timelockList_ONIT[this]][owner_s1254] == __var_38;
[L7562]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] == 0;
[L7564]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0)
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]);
[L2]                  success_balanceOf_ONIT0 := true;
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:39:37,405 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:39:37,405 INFO  L82        PathProgramCache]: Analyzing trace with hash 415507760, now seen corresponding path program 1 times
[2020-11-25 02:39:37,405 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:39:37,429 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:39:38,136 INFO  L134       CoverageAnalysis]: Checked inductivity of 1328 backedges. 206 proven. 4 refuted. 0 times theorem prover too weak. 1118 trivial. 0 not checked.
[2020-11-25 02:39:38,136 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:39:38,136 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-11-25 02:39:38,137 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:39:38,137 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 02:39:38,137 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=81, Invalid=621, Unknown=0, NotChecked=0, Total=702
[2020-11-25 02:39:38,137 INFO  L87              Difference]: Start difference. First operand 10530 states and 12364 transitions. cyclomatic complexity: 1885 Second operand 27 states.
[2020-11-25 02:39:51,870 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:39:51,870 INFO  L93              Difference]: Finished difference Result 11080 states and 13026 transitions.
[2020-11-25 02:39:51,870 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 32 states. 
[2020-11-25 02:39:51,870 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11080 states and 13026 transitions.
[2020-11-25 02:39:51,894 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:39:51,919 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11080 states to 11080 states and 13026 transitions.
[2020-11-25 02:39:51,919 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2053
[2020-11-25 02:39:51,920 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2053
[2020-11-25 02:39:51,920 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11080 states and 13026 transitions.
[2020-11-25 02:39:51,926 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:39:51,927 INFO  L728         BuchiCegarLoop]: Abstraction has 11080 states and 13026 transitions.
[2020-11-25 02:39:51,931 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11080 states and 13026 transitions.
[2020-11-25 02:39:51,985 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11080 to 10522.
[2020-11-25 02:39:51,985 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10522 states.
[2020-11-25 02:39:51,999 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10522 states to 10522 states and 12292 transitions.
[2020-11-25 02:39:51,999 INFO  L751         BuchiCegarLoop]: Abstraction has 10522 states and 12292 transitions.
[2020-11-25 02:39:51,999 INFO  L631         BuchiCegarLoop]: Abstraction has 10522 states and 12292 transitions.
[2020-11-25 02:39:51,999 INFO  L445         BuchiCegarLoop]: ======== Iteration 42============
[2020-11-25 02:39:51,999 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10522 states and 12292 transitions.
[2020-11-25 02:39:52,009 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:39:52,009 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:39:52,009 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:39:52,010 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:39:52,010 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND FALSE  !(choice == 6)
[L12304]  COND FALSE  !(choice == 5)
[L12312]  COND FALSE  !(choice == 4)
[L12320]  COND TRUE   choice == 3
[L12321]              gas := gas - 21000;
[L12322]  COND TRUE   gas >= 0
[L12323]              assume idx_s1468 >= 0 && idx_s1468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12324]              assume msgvalue_MSG == 0;
[L12325]  CALL        call __ret_0_unlock := unlock~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L3694]               havoc __exception;
[L3695]               revert := false;
[L3696]   COND FALSE  !(__exception)
[L3732]   CALL        call __ret_0_ := unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L7942]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND TRUE   DType[this] == ONIT
[L10861]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10861]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10862]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7942]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7943]   COND FALSE  !(revert)
[L7946]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1468] == false
[L7947]   CALL        call __var_51 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7947]   RET         call __var_51 := FreshRefGenerator__success();
[L7948]   COND FALSE  !(revert)
[L7951]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1468]] == 0;
[L7952]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1468] := true;
[L7953]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1468]] == zerointRefArr();
[L7954]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1468] == __var_51;
[L7955]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1468]] == 0;
[L7957]   COND FALSE  !(!(Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1468]] > idx_s1468))
[L7961]   CALL        call __var_52 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L7961]   RET         call __var_52 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L7962]   COND FALSE  !(revert)
[L7965]               __ret_0_ := true;
[L3732]   RET         call __ret_0_ := unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L3733]               assume !revert && gas >= 0;
[L12325]  RET         call __ret_0_unlock := unlock~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:39:52,014 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:39:52,014 INFO  L82        PathProgramCache]: Analyzing trace with hash 1205285565, now seen corresponding path program 1 times
[2020-11-25 02:39:52,015 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:39:52,035 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:39:52,294 INFO  L134       CoverageAnalysis]: Checked inductivity of 1099 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1098 trivial. 0 not checked.
[2020-11-25 02:39:52,294 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:39:52,294 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 02:39:52,294 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:39:52,294 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:39:52,294 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=29, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:39:52,295 INFO  L87              Difference]: Start difference. First operand 10522 states and 12292 transitions. cyclomatic complexity: 1818 Second operand 7 states.
[2020-11-25 02:39:54,624 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:39:54,624 INFO  L93              Difference]: Finished difference Result 10736 states and 12859 transitions.
[2020-11-25 02:39:54,624 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:39:54,624 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10736 states and 12859 transitions.
[2020-11-25 02:39:54,650 INFO  L131   ngComponentsAnalysis]: Automaton has 10 accepting balls. 20
[2020-11-25 02:39:54,678 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10736 states to 10692 states and 12807 transitions.
[2020-11-25 02:39:54,678 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1898
[2020-11-25 02:39:54,679 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1898
[2020-11-25 02:39:54,679 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10692 states and 12807 transitions.
[2020-11-25 02:39:54,686 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:39:54,686 INFO  L728         BuchiCegarLoop]: Abstraction has 10692 states and 12807 transitions.
[2020-11-25 02:39:54,691 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10692 states and 12807 transitions.
[2020-11-25 02:39:54,747 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10692 to 10462.
[2020-11-25 02:39:54,747 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10462 states.
[2020-11-25 02:39:54,761 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10462 states to 10462 states and 12222 transitions.
[2020-11-25 02:39:54,761 INFO  L751         BuchiCegarLoop]: Abstraction has 10462 states and 12222 transitions.
[2020-11-25 02:39:54,761 INFO  L631         BuchiCegarLoop]: Abstraction has 10462 states and 12222 transitions.
[2020-11-25 02:39:54,761 INFO  L445         BuchiCegarLoop]: ======== Iteration 43============
[2020-11-25 02:39:54,761 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10462 states and 12222 transitions.
[2020-11-25 02:39:54,771 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 02:39:54,771 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:39:54,771 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:39:54,772 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:39:54,772 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND FALSE  !(choice == 6)
[L12304]  COND FALSE  !(choice == 5)
[L12312]  COND TRUE   choice == 4
[L12313]              gas := gas - 21000;
[L12314]  COND TRUE   gas >= 0
[L12315]              assume value_s1439 >= 0 && value_s1439 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12316]              assume releaseTime_s1439 >= 0 && releaseTime_s1439 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12317]              assume msgvalue_MSG == 0;
[L12318]  CALL        call __ret_0_transferWithLock := transferWithLock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L3608]               havoc __exception;
[L3609]               revert := false;
[L3610]   COND FALSE  !(__exception)
[L3646]   CALL        call __ret_0_ := transferWithLock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L7887]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND TRUE   DType[this] == ONIT
[L10861]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10861]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10862]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7887]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7888]   COND FALSE  !(revert)
[L7891]   COND TRUE   DType[this] == ONIT
[L7892]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, holder_s1439, value_s1439);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7892]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, holder_s1439, value_s1439);
[L7893]   COND FALSE  !(revert)
[L7899]   CALL        call __var_50 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L8052]   CALL        call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8052]   RET         call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L8053]   COND FALSE  !(revert)
[L8056]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1527];
[L8057]               _balances_ERC20[this][holder_s1527] := __var_53;
[L8058]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1527];
[L8059]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] == false
[L8060]   CALL        call __var_54 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8060]   RET         call __var_54 := FreshRefGenerator__success();
[L8061]   COND FALSE  !(revert)
[L8064]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8065]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] := true;
[L8066]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == zerointRefArr();
[L8067]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1527] == __var_54;
[L8068]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8070]   CALL        call __var_56 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8070]   RET         call __var_56 := FreshRefGenerator__success();
[L8071]   COND FALSE  !(revert)
[L8074]               assume DType[__var_56] == ONIT.LockInfo;
[L8075]   CALL        call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5620]               _releaseTime_ONIT.LockInfo[this] := _releaseTime;
[L5621]               _amount_ONIT.LockInfo[this] := _amount;
[L8075]   RET         call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L8076]   COND FALSE  !(revert)
[L8079]               __var_55 := __var_56;
[L8080]               __var_58 := Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]];
[L8081]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]][__var_58] := __var_55;
[L8082]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] := __var_58 + 1;
[L8083]               assert { :EventEmitted "Lock_ONIT" } true;
[L8084]               __ret_0_ := true;
[L7899]   RET         call __var_50 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L7900]   COND FALSE  !(revert)
[L7903]               __ret_0_ := true;
[L3646]   RET         call __ret_0_ := transferWithLock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L3647]               assume !revert && gas >= 0;
[L12318]  RET         call __ret_0_transferWithLock := transferWithLock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:39:54,777 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:39:54,777 INFO  L82        PathProgramCache]: Analyzing trace with hash 1346692212, now seen corresponding path program 1 times
[2020-11-25 02:39:54,778 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:39:54,835 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:39:54,898 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:39:55,075 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:39:55,076 INFO  L82        PathProgramCache]: Analyzing trace with hash -996558704, now seen corresponding path program 1 times
[2020-11-25 02:39:55,076 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:39:55,082 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:39:55,088 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:39:55,104 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:39:55,105 INFO  L82        PathProgramCache]: Analyzing trace with hash -1337794499, now seen corresponding path program 1 times
[2020-11-25 02:39:55,105 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:39:55,134 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:39:55,965 INFO  L134       CoverageAnalysis]: Checked inductivity of 1154 backedges. 102 proven. 3 refuted. 0 times theorem prover too weak. 1049 trivial. 0 not checked.
[2020-11-25 02:39:55,966 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:39:55,966 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [24] total 24
[2020-11-25 02:39:55,966 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-25 02:39:55,967 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=71, Invalid=529, Unknown=0, NotChecked=0, Total=600
[2020-11-25 02:39:55,967 INFO  L87              Difference]: Start difference. First operand 10462 states and 12222 transitions. cyclomatic complexity: 1808 Second operand 25 states.
[2020-11-25 02:40:08,509 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:40:08,509 INFO  L93              Difference]: Finished difference Result 10736 states and 12651 transitions.
[2020-11-25 02:40:08,509 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-11-25 02:40:08,509 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10736 states and 12651 transitions.
[2020-11-25 02:40:08,545 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 02:40:08,576 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10736 states to 10736 states and 12651 transitions.
[2020-11-25 02:40:08,577 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1994
[2020-11-25 02:40:08,577 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1994
[2020-11-25 02:40:08,577 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10736 states and 12651 transitions.
[2020-11-25 02:40:08,586 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:40:08,586 INFO  L728         BuchiCegarLoop]: Abstraction has 10736 states and 12651 transitions.
[2020-11-25 02:40:08,592 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10736 states and 12651 transitions.
[2020-11-25 02:40:08,658 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10736 to 10532.
[2020-11-25 02:40:08,658 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10532 states.
[2020-11-25 02:40:08,674 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10532 states to 10532 states and 12401 transitions.
[2020-11-25 02:40:08,674 INFO  L751         BuchiCegarLoop]: Abstraction has 10532 states and 12401 transitions.
[2020-11-25 02:40:08,674 INFO  L631         BuchiCegarLoop]: Abstraction has 10532 states and 12401 transitions.
[2020-11-25 02:40:08,674 INFO  L445         BuchiCegarLoop]: ======== Iteration 44============
[2020-11-25 02:40:08,674 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10532 states and 12401 transitions.
[2020-11-25 02:40:08,686 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 02:40:08,686 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:40:08,686 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:40:08,688 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:40:08,688 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false
[L7655]   CALL        call __var_41 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7655]   RET         call __var_41 := FreshRefGenerator__success();
[L7656]   COND FALSE  !(revert)
[L7659]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7660]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] := true;
[L7661]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7662]               assume M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7663]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:40:08,693 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:40:08,693 INFO  L82        PathProgramCache]: Analyzing trace with hash -2111333109, now seen corresponding path program 1 times
[2020-11-25 02:40:08,694 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:40:08,719 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:40:09,479 INFO  L134       CoverageAnalysis]: Checked inductivity of 1322 backedges. 202 proven. 4 refuted. 0 times theorem prover too weak. 1116 trivial. 0 not checked.
[2020-11-25 02:40:09,479 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:40:09,479 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [28] total 28
[2020-11-25 02:40:09,480 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:40:09,480 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 29 interpolants.
[2020-11-25 02:40:09,480 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=88, Invalid=724, Unknown=0, NotChecked=0, Total=812
[2020-11-25 02:40:09,480 INFO  L87              Difference]: Start difference. First operand 10532 states and 12401 transitions. cyclomatic complexity: 1921 Second operand 29 states.
[2020-11-25 02:40:23,821 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:40:23,822 INFO  L93              Difference]: Finished difference Result 11114 states and 13382 transitions.
[2020-11-25 02:40:23,822 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 32 states. 
[2020-11-25 02:40:23,822 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11114 states and 13382 transitions.
[2020-11-25 02:40:23,849 INFO  L131   ngComponentsAnalysis]: Automaton has 10 accepting balls. 20
[2020-11-25 02:40:23,878 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11114 states to 11114 states and 13382 transitions.
[2020-11-25 02:40:23,878 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2089
[2020-11-25 02:40:23,879 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2089
[2020-11-25 02:40:23,879 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11114 states and 13382 transitions.
[2020-11-25 02:40:23,887 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:40:23,887 INFO  L728         BuchiCegarLoop]: Abstraction has 11114 states and 13382 transitions.
[2020-11-25 02:40:23,893 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11114 states and 13382 transitions.
[2020-11-25 02:40:23,955 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11114 to 10546.
[2020-11-25 02:40:23,955 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10546 states.
[2020-11-25 02:40:23,971 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10546 states to 10546 states and 12524 transitions.
[2020-11-25 02:40:23,971 INFO  L751         BuchiCegarLoop]: Abstraction has 10546 states and 12524 transitions.
[2020-11-25 02:40:23,971 INFO  L631         BuchiCegarLoop]: Abstraction has 10546 states and 12524 transitions.
[2020-11-25 02:40:23,971 INFO  L445         BuchiCegarLoop]: ======== Iteration 45============
[2020-11-25 02:40:23,971 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10546 states and 12524 transitions.
[2020-11-25 02:40:23,981 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 02:40:23,981 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:40:23,981 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:40:23,983 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:40:23,983 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false
[L8339]   CALL        call __var_67 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8339]   RET         call __var_67 := FreshRefGenerator__success();
[L8340]   COND FALSE  !(revert)
[L8343]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8344]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] := true;
[L8345]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == zerointRefArr();
[L8346]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1645] == __var_67;
[L8347]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8349]               idx_s1645 := 0;
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:40:23,988 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:40:23,988 INFO  L82        PathProgramCache]: Analyzing trace with hash -1806365024, now seen corresponding path program 1 times
[2020-11-25 02:40:23,989 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:40:24,012 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:40:24,301 INFO  L134       CoverageAnalysis]: Checked inductivity of 1323 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 1318 trivial. 0 not checked.
[2020-11-25 02:40:24,301 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:40:24,301 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 02:40:24,302 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:40:24,302 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 02:40:24,302 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=19, Unknown=0, NotChecked=0, Total=30
[2020-11-25 02:40:24,302 INFO  L87              Difference]: Start difference. First operand 10546 states and 12524 transitions. cyclomatic complexity: 2034 Second operand 6 states.
[2020-11-25 02:40:26,008 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:40:26,008 INFO  L93              Difference]: Finished difference Result 10690 states and 12694 transitions.
[2020-11-25 02:40:26,009 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:40:26,009 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10690 states and 12694 transitions.
[2020-11-25 02:40:26,034 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 02:40:26,061 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10690 states to 10690 states and 12694 transitions.
[2020-11-25 02:40:26,061 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1990
[2020-11-25 02:40:26,062 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1990
[2020-11-25 02:40:26,062 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10690 states and 12694 transitions.
[2020-11-25 02:40:26,069 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:40:26,069 INFO  L728         BuchiCegarLoop]: Abstraction has 10690 states and 12694 transitions.
[2020-11-25 02:40:26,075 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10690 states and 12694 transitions.
[2020-11-25 02:40:26,130 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10690 to 10544.
[2020-11-25 02:40:26,131 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10544 states.
[2020-11-25 02:40:26,146 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10544 states to 10544 states and 12528 transitions.
[2020-11-25 02:40:26,146 INFO  L751         BuchiCegarLoop]: Abstraction has 10544 states and 12528 transitions.
[2020-11-25 02:40:26,146 INFO  L631         BuchiCegarLoop]: Abstraction has 10544 states and 12528 transitions.
[2020-11-25 02:40:26,146 INFO  L445         BuchiCegarLoop]: ======== Iteration 46============
[2020-11-25 02:40:26,147 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10544 states and 12528 transitions.
[2020-11-25 02:40:26,156 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 02:40:26,157 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:40:26,157 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:40:26,158 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:40:26,158 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND FALSE  !(__var_69)
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND FALSE  !(!(c_s106 >= a_s106))
[L5744]               __ret_0_ := c_s106;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND FALSE  !(revert)
[L7525]               totalBalance_s1254 := totalBalance_s1254;
[L7526]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7527]   COND FALSE  !(gas < 0)
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:40:26,163 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:40:26,163 INFO  L82        PathProgramCache]: Analyzing trace with hash -760090929, now seen corresponding path program 1 times
[2020-11-25 02:40:26,164 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:40:26,188 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:40:26,612 INFO  L134       CoverageAnalysis]: Checked inductivity of 1301 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 1295 trivial. 0 not checked.
[2020-11-25 02:40:26,613 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:40:26,613 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:40:26,613 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:40:26,613 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:40:26,613 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:40:26,613 INFO  L87              Difference]: Start difference. First operand 10544 states and 12528 transitions. cyclomatic complexity: 2042 Second operand 4 states.
[2020-11-25 02:40:26,681 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:40:26,682 INFO  L93              Difference]: Finished difference Result 10616 states and 12616 transitions.
[2020-11-25 02:40:26,682 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:40:26,682 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10616 states and 12616 transitions.
[2020-11-25 02:40:26,704 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 02:40:26,730 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10616 states to 10616 states and 12616 transitions.
[2020-11-25 02:40:26,730 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1878
[2020-11-25 02:40:26,731 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1878
[2020-11-25 02:40:26,731 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10616 states and 12616 transitions.
[2020-11-25 02:40:26,738 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:40:26,738 INFO  L728         BuchiCegarLoop]: Abstraction has 10616 states and 12616 transitions.
[2020-11-25 02:40:26,743 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10616 states and 12616 transitions.
[2020-11-25 02:40:26,800 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10616 to 10544.
[2020-11-25 02:40:26,800 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10544 states.
[2020-11-25 02:40:26,816 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10544 states to 10544 states and 12520 transitions.
[2020-11-25 02:40:26,816 INFO  L751         BuchiCegarLoop]: Abstraction has 10544 states and 12520 transitions.
[2020-11-25 02:40:26,816 INFO  L631         BuchiCegarLoop]: Abstraction has 10544 states and 12520 transitions.
[2020-11-25 02:40:26,816 INFO  L445         BuchiCegarLoop]: ======== Iteration 47============
[2020-11-25 02:40:26,816 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10544 states and 12520 transitions.
[2020-11-25 02:40:26,826 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 02:40:26,826 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:40:26,826 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:40:26,828 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:40:26,828 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND FALSE  !(!(c_s106 >= a_s106))
[L5744]               __ret_0_ := c_s106;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND FALSE  !(revert)
[L7525]               totalBalance_s1254 := totalBalance_s1254;
[L7526]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7527]   COND FALSE  !(gas < 0)
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:40:26,833 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:40:26,833 INFO  L82        PathProgramCache]: Analyzing trace with hash -1402087534, now seen corresponding path program 1 times
[2020-11-25 02:40:26,834 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:40:26,860 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:40:27,622 INFO  L134       CoverageAnalysis]: Checked inductivity of 1301 backedges. 103 proven. 206 refuted. 0 times theorem prover too weak. 992 trivial. 0 not checked.
[2020-11-25 02:40:27,623 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:40:27,624 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-11-25 02:40:27,625 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:40:27,626 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 02:40:27,626 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=87, Invalid=563, Unknown=0, NotChecked=0, Total=650
[2020-11-25 02:40:27,627 INFO  L87              Difference]: Start difference. First operand 10544 states and 12520 transitions. cyclomatic complexity: 2034 Second operand 26 states.
[2020-11-25 02:40:39,780 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:40:39,780 INFO  L93              Difference]: Finished difference Result 10720 states and 12804 transitions.
[2020-11-25 02:40:39,780 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 02:40:39,781 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10720 states and 12804 transitions.
[2020-11-25 02:40:39,806 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 02:40:39,833 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10720 states to 10720 states and 12804 transitions.
[2020-11-25 02:40:39,833 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1998
[2020-11-25 02:40:39,834 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1998
[2020-11-25 02:40:39,834 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10720 states and 12804 transitions.
[2020-11-25 02:40:39,841 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:40:39,841 INFO  L728         BuchiCegarLoop]: Abstraction has 10720 states and 12804 transitions.
[2020-11-25 02:40:39,846 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10720 states and 12804 transitions.
[2020-11-25 02:40:39,903 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10720 to 10554.
[2020-11-25 02:40:39,903 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10554 states.
[2020-11-25 02:40:39,919 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10554 states to 10554 states and 12602 transitions.
[2020-11-25 02:40:39,920 INFO  L751         BuchiCegarLoop]: Abstraction has 10554 states and 12602 transitions.
[2020-11-25 02:40:39,920 INFO  L631         BuchiCegarLoop]: Abstraction has 10554 states and 12602 transitions.
[2020-11-25 02:40:39,920 INFO  L445         BuchiCegarLoop]: ======== Iteration 48============
[2020-11-25 02:40:39,920 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10554 states and 12602 transitions.
[2020-11-25 02:40:39,929 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 02:40:39,930 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:40:39,930 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:40:39,931 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:40:39,931 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND FALSE  !(choice == 6)
[L12304]  COND TRUE   choice == 5
[L12305]              gas := gas - 21000;
[L12306]  COND TRUE   gas >= 0
[L12307]              assume value_s1410 >= 0 && value_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12308]              assume releaseTime_s1410 >= 0 && releaseTime_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12309]              assume msgvalue_MSG == 0;
[L12310]  CALL        call __ret_0_lock := lock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3520]               havoc __exception;
[L3521]               revert := false;
[L3522]   COND FALSE  !(__exception)
[L3558]   CALL        call __ret_0_ := lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7845]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND TRUE   DType[this] == ONIT
[L10861]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10861]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10862]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7845]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7846]   COND FALSE  !(revert)
[L7849]   COND FALSE  !(!(_balances_ERC20[this][holder_s1410] >= value_s1410))
[L7853]   CALL        call __var_49 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L8052]   CALL        call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8052]   RET         call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L8053]   COND FALSE  !(revert)
[L8056]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1527];
[L8057]               _balances_ERC20[this][holder_s1527] := __var_53;
[L8058]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1527];
[L8059]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] == false)
[L8070]   CALL        call __var_56 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8070]   RET         call __var_56 := FreshRefGenerator__success();
[L8071]   COND FALSE  !(revert)
[L8074]               assume DType[__var_56] == ONIT.LockInfo;
[L8075]   CALL        call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5620]               _releaseTime_ONIT.LockInfo[this] := _releaseTime;
[L5621]               _amount_ONIT.LockInfo[this] := _amount;
[L8075]   RET         call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L8076]   COND FALSE  !(revert)
[L8079]               __var_55 := __var_56;
[L8080]               __var_58 := Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]];
[L8081]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]][__var_58] := __var_55;
[L8082]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] := __var_58 + 1;
[L8083]               assert { :EventEmitted "Lock_ONIT" } true;
[L8084]               __ret_0_ := true;
[L7853]   RET         call __var_49 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7854]   COND FALSE  !(revert)
[L7857]               __ret_0_ := true;
[L3558]   RET         call __ret_0_ := lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3559]               assume !revert && gas >= 0;
[L12310]  RET         call __ret_0_lock := lock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND TRUE   choice == 30
[L12149]              gas := gas - 21000;
[L12150]  COND TRUE   gas >= 0
[L12151]              assume msgvalue_MSG == 0;
[L12152]  CALL        call transferOwnership~address_Ownable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L452]                havoc __exception;
[L453]                revert := false;
[L454]    COND TRUE   __exception
[L455]                __tmp__Balance := Balance;
[L456]                __tmp__DType := DType;
[L457]                __tmp__Alloc := Alloc;
[L458]                __tmp__balance_ADDR := balance_ADDR;
[L459]                __tmp__M_Ref_bool := M_Ref_bool;
[L460]                __tmp__sum := sum;
[L461]                __tmp__M_Ref_int := M_Ref_int;
[L462]                __tmp__sum__balances0 := sum__balances0;
[L463]                __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L464]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L465]                __tmp__sum__allowed1 := sum__allowed1;
[L466]                __tmp__M_int_Ref := M_int_Ref;
[L467]                __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L468]                __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L469]                __tmp__Length := Length;
[L470]                __tmp__now := now;
[L471]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L472]                __tmp__owner_Ownable := owner_Ownable;
[L473]                __tmp__newOwner_Ownable := newOwner_Ownable;
[L474]                __tmp___pausers_PauserRole := _pausers_PauserRole;
[L475]                __tmp___paused_Pausable := _paused_Pausable;
[L476]                __tmp___balances_ERC20 := _balances_ERC20;
[L477]                __tmp___allowed_ERC20 := _allowed_ERC20;
[L478]                __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L479]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L480]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L481]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L482]                __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L483]                __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L484]                __tmp__implementation_ONIT := implementation_ONIT;
[L485]                __tmp__timelockList_ONIT := timelockList_ONIT;
[L486]                __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L487]    CALL        call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L5987]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10735]  COND TRUE   !(msgsender_MSG == __tmp__owner_Ownable[this])
[L10736]              revert := true;
[L5987]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5988]   COND TRUE   revert
[L487]    RET         call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L488]                assume revert || gas < 0;
[L12152]  RET         call transferOwnership~address_Ownable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:40:39,936 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:40:39,936 INFO  L82        PathProgramCache]: Analyzing trace with hash -1200387361, now seen corresponding path program 1 times
[2020-11-25 02:40:39,937 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:40:39,967 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:40:41,477 INFO  L134       CoverageAnalysis]: Checked inductivity of 1348 backedges. 228 proven. 106 refuted. 0 times theorem prover too weak. 1014 trivial. 0 not checked.
[2020-11-25 02:40:41,477 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:40:41,477 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [57] total 57
[2020-11-25 02:40:41,477 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:40:41,478 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 58 interpolants.
[2020-11-25 02:40:41,478 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=208, Invalid=3098, Unknown=0, NotChecked=0, Total=3306
[2020-11-25 02:40:41,478 INFO  L87              Difference]: Start difference. First operand 10554 states and 12602 transitions. cyclomatic complexity: 2108 Second operand 58 states.
[2020-11-25 02:41:22,184 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:41:22,184 INFO  L93              Difference]: Finished difference Result 11862 states and 14757 transitions.
[2020-11-25 02:41:22,185 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 76 states. 
[2020-11-25 02:41:22,185 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11862 states and 14757 transitions.
[2020-11-25 02:41:22,216 INFO  L131   ngComponentsAnalysis]: Automaton has 10 accepting balls. 20
[2020-11-25 02:41:22,251 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11862 states to 11848 states and 14743 transitions.
[2020-11-25 02:41:22,251 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2233
[2020-11-25 02:41:22,252 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2268
[2020-11-25 02:41:22,252 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11848 states and 14743 transitions.
[2020-11-25 02:41:22,262 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:41:22,262 INFO  L728         BuchiCegarLoop]: Abstraction has 11848 states and 14743 transitions.
[2020-11-25 02:41:22,267 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11848 states and 14743 transitions.
[2020-11-25 02:41:22,336 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11848 to 11054.
[2020-11-25 02:41:22,336 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11054 states.
[2020-11-25 02:41:22,354 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11054 states to 11054 states and 13445 transitions.
[2020-11-25 02:41:22,354 INFO  L751         BuchiCegarLoop]: Abstraction has 11054 states and 13445 transitions.
[2020-11-25 02:41:22,354 INFO  L631         BuchiCegarLoop]: Abstraction has 11054 states and 13445 transitions.
[2020-11-25 02:41:22,354 INFO  L445         BuchiCegarLoop]: ======== Iteration 49============
[2020-11-25 02:41:22,354 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11054 states and 13445 transitions.
[2020-11-25 02:41:22,365 INFO  L131   ngComponentsAnalysis]: Automaton has 10 accepting balls. 20
[2020-11-25 02:41:22,365 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:41:22,365 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:41:22,367 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:41:22,367 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false
[L8339]   CALL        call __var_67 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8339]   RET         call __var_67 := FreshRefGenerator__success();
[L8340]   COND FALSE  !(revert)
[L8343]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8344]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] := true;
[L8345]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == zerointRefArr();
[L8346]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1645] == __var_67;
[L8347]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8349]               idx_s1645 := 0;
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND FALSE  !(DType[this] == ONIT)
[L6761]   COND TRUE   DType[this] == ERC20Pausable
[L6762]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6762]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6763]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:41:22,371 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:41:22,371 INFO  L82        PathProgramCache]: Analyzing trace with hash -740167246, now seen corresponding path program 1 times
[2020-11-25 02:41:22,372 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:41:22,396 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:41:22,751 INFO  L134       CoverageAnalysis]: Checked inductivity of 1331 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 1326 trivial. 0 not checked.
[2020-11-25 02:41:22,751 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:41:22,751 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 02:41:22,751 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:41:22,752 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:41:22,752 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:41:22,752 INFO  L87              Difference]: Start difference. First operand 11054 states and 13445 transitions. cyclomatic complexity: 2463 Second operand 8 states.
[2020-11-25 02:41:22,971 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:41:22,971 INFO  L93              Difference]: Finished difference Result 11234 states and 13621 transitions.
[2020-11-25 02:41:22,971 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:41:22,971 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11234 states and 13621 transitions.
[2020-11-25 02:41:22,998 INFO  L131   ngComponentsAnalysis]: Automaton has 10 accepting balls. 20
[2020-11-25 02:41:23,029 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11234 states to 11034 states and 13417 transitions.
[2020-11-25 02:41:23,029 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1988
[2020-11-25 02:41:23,030 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1988
[2020-11-25 02:41:23,030 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11034 states and 13417 transitions.
[2020-11-25 02:41:23,038 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:41:23,038 INFO  L728         BuchiCegarLoop]: Abstraction has 11034 states and 13417 transitions.
[2020-11-25 02:41:23,043 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11034 states and 13417 transitions.
[2020-11-25 02:41:23,107 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11034 to 11034.
[2020-11-25 02:41:23,107 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11034 states.
[2020-11-25 02:41:23,126 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11034 states to 11034 states and 13417 transitions.
[2020-11-25 02:41:23,126 INFO  L751         BuchiCegarLoop]: Abstraction has 11034 states and 13417 transitions.
[2020-11-25 02:41:23,127 INFO  L631         BuchiCegarLoop]: Abstraction has 11034 states and 13417 transitions.
[2020-11-25 02:41:23,127 INFO  L445         BuchiCegarLoop]: ======== Iteration 50============
[2020-11-25 02:41:23,127 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11034 states and 13417 transitions.
[2020-11-25 02:41:23,137 INFO  L131   ngComponentsAnalysis]: Automaton has 10 accepting balls. 20
[2020-11-25 02:41:23,137 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:41:23,137 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:41:23,139 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:41:23,139 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false
[L8339]   CALL        call __var_67 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8339]   RET         call __var_67 := FreshRefGenerator__success();
[L8340]   COND FALSE  !(revert)
[L8343]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8344]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] := true;
[L8345]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == zerointRefArr();
[L8346]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1645] == __var_67;
[L8347]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8349]               idx_s1645 := 0;
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:41:23,144 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:41:23,144 INFO  L82        PathProgramCache]: Analyzing trace with hash 1550703507, now seen corresponding path program 1 times
[2020-11-25 02:41:23,144 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:41:23,168 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:41:23,462 INFO  L134       CoverageAnalysis]: Checked inductivity of 1332 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 1327 trivial. 0 not checked.
[2020-11-25 02:41:23,462 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:41:23,462 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 02:41:23,462 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:41:23,462 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 02:41:23,462 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=19, Unknown=0, NotChecked=0, Total=30
[2020-11-25 02:41:23,462 INFO  L87              Difference]: Start difference. First operand 11034 states and 13417 transitions. cyclomatic complexity: 2455 Second operand 6 states.
[2020-11-25 02:41:24,790 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:41:24,790 INFO  L93              Difference]: Finished difference Result 11144 states and 13505 transitions.
[2020-11-25 02:41:24,790 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:41:24,790 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11144 states and 13505 transitions.
[2020-11-25 02:41:24,819 INFO  L131   ngComponentsAnalysis]: Automaton has 10 accepting balls. 20
[2020-11-25 02:41:24,849 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11144 states to 10996 states and 13325 transitions.
[2020-11-25 02:41:24,849 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2100
[2020-11-25 02:41:24,850 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2100
[2020-11-25 02:41:24,850 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10996 states and 13325 transitions.
[2020-11-25 02:41:24,858 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:41:24,858 INFO  L728         BuchiCegarLoop]: Abstraction has 10996 states and 13325 transitions.
[2020-11-25 02:41:24,863 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10996 states and 13325 transitions.
[2020-11-25 02:41:24,923 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10996 to 10874.
[2020-11-25 02:41:24,923 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10874 states.
[2020-11-25 02:41:24,941 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10874 states to 10874 states and 13185 transitions.
[2020-11-25 02:41:24,941 INFO  L751         BuchiCegarLoop]: Abstraction has 10874 states and 13185 transitions.
[2020-11-25 02:41:24,941 INFO  L631         BuchiCegarLoop]: Abstraction has 10874 states and 13185 transitions.
[2020-11-25 02:41:24,941 INFO  L445         BuchiCegarLoop]: ======== Iteration 51============
[2020-11-25 02:41:24,941 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10874 states and 13185 transitions.
[2020-11-25 02:41:24,951 INFO  L131   ngComponentsAnalysis]: Automaton has 10 accepting balls. 20
[2020-11-25 02:41:24,951 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:41:24,951 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:41:24,953 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:41:24,953 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false
[L7733]   CALL        call __var_45 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7733]   RET         call __var_45 := FreshRefGenerator__success();
[L7734]   COND FALSE  !(revert)
[L7737]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == 0;
[L7738]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] := true;
[L7739]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == zerointRefArr();
[L7740]               assume M_Ref_Ref[timelockList_ONIT[this]][from_s1322] == __var_45;
[L7741]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == 0;
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:41:24,958 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:41:24,958 INFO  L82        PathProgramCache]: Analyzing trace with hash 210190985, now seen corresponding path program 1 times
[2020-11-25 02:41:24,959 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:41:24,983 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:41:25,692 INFO  L134       CoverageAnalysis]: Checked inductivity of 1332 backedges. 204 proven. 4 refuted. 0 times theorem prover too weak. 1124 trivial. 0 not checked.
[2020-11-25 02:41:25,692 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:41:25,692 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [21] total 21
[2020-11-25 02:41:25,693 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:41:25,693 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-25 02:41:25,693 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=64, Invalid=398, Unknown=0, NotChecked=0, Total=462
[2020-11-25 02:41:25,693 INFO  L87              Difference]: Start difference. First operand 10874 states and 13185 transitions. cyclomatic complexity: 2379 Second operand 22 states.
[2020-11-25 02:41:35,684 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:41:35,684 INFO  L93              Difference]: Finished difference Result 11024 states and 13550 transitions.
[2020-11-25 02:41:35,684 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 02:41:35,684 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11024 states and 13550 transitions.
[2020-11-25 02:41:35,713 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 22
[2020-11-25 02:41:35,745 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11024 states to 11024 states and 13550 transitions.
[2020-11-25 02:41:35,745 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2106
[2020-11-25 02:41:35,746 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2106
[2020-11-25 02:41:35,746 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11024 states and 13550 transitions.
[2020-11-25 02:41:35,754 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:41:35,754 INFO  L728         BuchiCegarLoop]: Abstraction has 11024 states and 13550 transitions.
[2020-11-25 02:41:35,759 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11024 states and 13550 transitions.
[2020-11-25 02:41:35,822 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11024 to 10888.
[2020-11-25 02:41:35,822 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10888 states.
[2020-11-25 02:41:35,841 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10888 states to 10888 states and 13329 transitions.
[2020-11-25 02:41:35,841 INFO  L751         BuchiCegarLoop]: Abstraction has 10888 states and 13329 transitions.
[2020-11-25 02:41:35,841 INFO  L631         BuchiCegarLoop]: Abstraction has 10888 states and 13329 transitions.
[2020-11-25 02:41:35,841 INFO  L445         BuchiCegarLoop]: ======== Iteration 52============
[2020-11-25 02:41:35,841 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10888 states and 13329 transitions.
[2020-11-25 02:41:35,852 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 22
[2020-11-25 02:41:35,852 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:41:35,852 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:41:35,854 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:41:35,854 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND FALSE  !(!(c_s106 >= a_s106))
[L5744]               __ret_0_ := c_s106;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND FALSE  !(revert)
[L7525]               totalBalance_s1254 := totalBalance_s1254;
[L7526]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7527]   COND FALSE  !(gas < 0)
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:41:35,858 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:41:35,858 INFO  L82        PathProgramCache]: Analyzing trace with hash 1689195421, now seen corresponding path program 1 times
[2020-11-25 02:41:35,859 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:41:35,884 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:41:36,628 INFO  L134       CoverageAnalysis]: Checked inductivity of 1315 backedges. 105 proven. 212 refuted. 0 times theorem prover too weak. 998 trivial. 0 not checked.
[2020-11-25 02:41:36,628 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:41:36,628 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-11-25 02:41:36,629 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:41:36,629 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 02:41:36,629 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=87, Invalid=563, Unknown=0, NotChecked=0, Total=650
[2020-11-25 02:41:36,629 INFO  L87              Difference]: Start difference. First operand 10888 states and 13329 transitions. cyclomatic complexity: 2514 Second operand 26 states.
[2020-11-25 02:41:48,865 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:41:48,866 INFO  L93              Difference]: Finished difference Result 11030 states and 13506 transitions.
[2020-11-25 02:41:48,866 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 02:41:48,866 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11030 states and 13506 transitions.
[2020-11-25 02:41:48,894 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 22
[2020-11-25 02:41:48,925 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11030 states to 11030 states and 13506 transitions.
[2020-11-25 02:41:48,925 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2110
[2020-11-25 02:41:48,926 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2110
[2020-11-25 02:41:48,926 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11030 states and 13506 transitions.
[2020-11-25 02:41:48,934 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:41:48,934 INFO  L728         BuchiCegarLoop]: Abstraction has 11030 states and 13506 transitions.
[2020-11-25 02:41:48,939 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11030 states and 13506 transitions.
[2020-11-25 02:41:49,003 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11030 to 10884.
[2020-11-25 02:41:49,003 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10884 states.
[2020-11-25 02:41:49,021 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10884 states to 10884 states and 13281 transitions.
[2020-11-25 02:41:49,021 INFO  L751         BuchiCegarLoop]: Abstraction has 10884 states and 13281 transitions.
[2020-11-25 02:41:49,022 INFO  L631         BuchiCegarLoop]: Abstraction has 10884 states and 13281 transitions.
[2020-11-25 02:41:49,022 INFO  L445         BuchiCegarLoop]: ======== Iteration 53============
[2020-11-25 02:41:49,022 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10884 states and 13281 transitions.
[2020-11-25 02:41:49,032 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 22
[2020-11-25 02:41:49,032 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:41:49,032 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:41:49,034 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:41:49,034 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND FALSE  !(choice == 6)
[L12304]  COND FALSE  !(choice == 5)
[L12312]  COND FALSE  !(choice == 4)
[L12320]  COND TRUE   choice == 3
[L12321]              gas := gas - 21000;
[L12322]  COND TRUE   gas >= 0
[L12323]              assume idx_s1468 >= 0 && idx_s1468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12324]              assume msgvalue_MSG == 0;
[L12325]  CALL        call __ret_0_unlock := unlock~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L3694]               havoc __exception;
[L3695]               revert := false;
[L3696]   COND FALSE  !(__exception)
[L3732]   CALL        call __ret_0_ := unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L7942]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND TRUE   DType[this] == ONIT
[L10861]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10861]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10862]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7942]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7943]   COND FALSE  !(revert)
[L7946]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1468] == false)
[L7957]   COND FALSE  !(!(Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1468]] > idx_s1468))
[L7961]   CALL        call __var_52 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L7961]   RET         call __var_52 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L7962]   COND FALSE  !(revert)
[L7965]               __ret_0_ := true;
[L3732]   RET         call __ret_0_ := unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L3733]               assume !revert && gas >= 0;
[L12325]  RET         call __ret_0_unlock := unlock~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1468, idx_s1468);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:41:49,037 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:41:49,038 INFO  L82        PathProgramCache]: Analyzing trace with hash 208034255, now seen corresponding path program 1 times
[2020-11-25 02:41:49,038 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:41:49,062 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:41:49,628 INFO  L134       CoverageAnalysis]: Checked inductivity of 1316 backedges. 115 proven. 205 refuted. 0 times theorem prover too weak. 996 trivial. 0 not checked.
[2020-11-25 02:41:49,628 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:41:49,628 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [20] total 20
[2020-11-25 02:41:49,628 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:41:49,629 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-11-25 02:41:49,629 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=69, Invalid=311, Unknown=0, NotChecked=0, Total=380
[2020-11-25 02:41:49,629 INFO  L87              Difference]: Start difference. First operand 10884 states and 13281 transitions. cyclomatic complexity: 2470 Second operand 20 states.
[2020-11-25 02:42:00,599 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:42:00,599 INFO  L93              Difference]: Finished difference Result 11022 states and 13488 transitions.
[2020-11-25 02:42:00,599 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-11-25 02:42:00,600 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11022 states and 13488 transitions.
[2020-11-25 02:42:00,653 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 22
[2020-11-25 02:42:00,700 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11022 states to 11022 states and 13488 transitions.
[2020-11-25 02:42:00,700 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2110
[2020-11-25 02:42:00,701 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2110
[2020-11-25 02:42:00,701 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11022 states and 13488 transitions.
[2020-11-25 02:42:00,713 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:42:00,713 INFO  L728         BuchiCegarLoop]: Abstraction has 11022 states and 13488 transitions.
[2020-11-25 02:42:00,720 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11022 states and 13488 transitions.
[2020-11-25 02:42:00,800 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11022 to 10888.
[2020-11-25 02:42:00,800 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10888 states.
[2020-11-25 02:42:00,819 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10888 states to 10888 states and 13313 transitions.
[2020-11-25 02:42:00,819 INFO  L751         BuchiCegarLoop]: Abstraction has 10888 states and 13313 transitions.
[2020-11-25 02:42:00,819 INFO  L631         BuchiCegarLoop]: Abstraction has 10888 states and 13313 transitions.
[2020-11-25 02:42:00,819 INFO  L445         BuchiCegarLoop]: ======== Iteration 54============
[2020-11-25 02:42:00,819 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10888 states and 13313 transitions.
[2020-11-25 02:42:00,830 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 22
[2020-11-25 02:42:00,830 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:42:00,830 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:42:00,832 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:42:00,832 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND FALSE  !(choice == 6)
[L12304]  COND TRUE   choice == 5
[L12305]              gas := gas - 21000;
[L12306]  COND TRUE   gas >= 0
[L12307]              assume value_s1410 >= 0 && value_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12308]              assume releaseTime_s1410 >= 0 && releaseTime_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12309]              assume msgvalue_MSG == 0;
[L12310]  CALL        call __ret_0_lock := lock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3520]               havoc __exception;
[L3521]               revert := false;
[L3522]   COND FALSE  !(__exception)
[L3558]   CALL        call __ret_0_ := lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7845]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND TRUE   DType[this] == ONIT
[L10861]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10861]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10862]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7845]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7846]   COND FALSE  !(revert)
[L7849]   COND FALSE  !(!(_balances_ERC20[this][holder_s1410] >= value_s1410))
[L7853]   CALL        call __var_49 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L8052]   CALL        call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8052]   RET         call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L8053]   COND FALSE  !(revert)
[L8056]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1527];
[L8057]               _balances_ERC20[this][holder_s1527] := __var_53;
[L8058]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1527];
[L8059]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] == false
[L8060]   CALL        call __var_54 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8060]   RET         call __var_54 := FreshRefGenerator__success();
[L8061]   COND FALSE  !(revert)
[L8064]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8065]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] := true;
[L8066]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == zerointRefArr();
[L8067]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1527] == __var_54;
[L8068]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8070]   CALL        call __var_56 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8070]   RET         call __var_56 := FreshRefGenerator__success();
[L8071]   COND FALSE  !(revert)
[L8074]               assume DType[__var_56] == ONIT.LockInfo;
[L8075]   CALL        call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5620]               _releaseTime_ONIT.LockInfo[this] := _releaseTime;
[L5621]               _amount_ONIT.LockInfo[this] := _amount;
[L8075]   RET         call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L8076]   COND FALSE  !(revert)
[L8079]               __var_55 := __var_56;
[L8080]               __var_58 := Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]];
[L8081]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]][__var_58] := __var_55;
[L8082]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] := __var_58 + 1;
[L8083]               assert { :EventEmitted "Lock_ONIT" } true;
[L8084]               __ret_0_ := true;
[L7853]   RET         call __var_49 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7854]   COND FALSE  !(revert)
[L7857]               __ret_0_ := true;
[L3558]   RET         call __ret_0_ := lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3559]               assume !revert && gas >= 0;
[L12310]  RET         call __ret_0_lock := lock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:42:00,836 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:42:00,836 INFO  L82        PathProgramCache]: Analyzing trace with hash 2016969234, now seen corresponding path program 1 times
[2020-11-25 02:42:00,836 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:42:00,879 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:42:00,921 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:42:01,190 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:42:01,191 INFO  L82        PathProgramCache]: Analyzing trace with hash 176138427, now seen corresponding path program 1 times
[2020-11-25 02:42:01,191 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:42:01,193 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:42:01,201 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:42:01,201 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:42:01,201 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:42:01,201 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 02:42:01,201 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:42:01,201 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:42:01,201 INFO  L87              Difference]: Start difference. First operand 10888 states and 13313 transitions. cyclomatic complexity: 2498 Second operand 4 states.
[2020-11-25 02:42:01,745 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:42:01,745 INFO  L93              Difference]: Finished difference Result 11431 states and 14772 transitions.
[2020-11-25 02:42:01,745 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:42:01,745 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11431 states and 14772 transitions.
[2020-11-25 02:42:01,784 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 44
[2020-11-25 02:42:01,830 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11431 states to 11431 states and 14772 transitions.
[2020-11-25 02:42:01,830 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2016
[2020-11-25 02:42:01,831 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2016
[2020-11-25 02:42:01,831 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11431 states and 14772 transitions.
[2020-11-25 02:42:01,843 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:42:01,843 INFO  L728         BuchiCegarLoop]: Abstraction has 11431 states and 14772 transitions.
[2020-11-25 02:42:01,848 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11431 states and 14772 transitions.
[2020-11-25 02:42:01,928 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11431 to 10822.
[2020-11-25 02:42:01,928 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10822 states.
[2020-11-25 02:42:01,947 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10822 states to 10822 states and 13082 transitions.
[2020-11-25 02:42:01,947 INFO  L751         BuchiCegarLoop]: Abstraction has 10822 states and 13082 transitions.
[2020-11-25 02:42:01,947 INFO  L631         BuchiCegarLoop]: Abstraction has 10822 states and 13082 transitions.
[2020-11-25 02:42:01,947 INFO  L445         BuchiCegarLoop]: ======== Iteration 55============
[2020-11-25 02:42:01,947 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10822 states and 13082 transitions.
[2020-11-25 02:42:01,958 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 22
[2020-11-25 02:42:01,958 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:42:01,958 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:42:01,959 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:42:01,959 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND FALSE  !(choice == 6)
[L12304]  COND TRUE   choice == 5
[L12305]              gas := gas - 21000;
[L12306]  COND TRUE   gas >= 0
[L12307]              assume value_s1410 >= 0 && value_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12308]              assume releaseTime_s1410 >= 0 && releaseTime_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12309]              assume msgvalue_MSG == 0;
[L12310]  CALL        call __ret_0_lock := lock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3520]               havoc __exception;
[L3521]               revert := false;
[L3522]   COND FALSE  !(__exception)
[L3558]   CALL        call __ret_0_ := lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7845]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND TRUE   DType[this] == ONIT
[L10861]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10861]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10862]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7845]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7846]   COND FALSE  !(revert)
[L7849]   COND FALSE  !(!(_balances_ERC20[this][holder_s1410] >= value_s1410))
[L7853]   CALL        call __var_49 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L8052]   CALL        call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8052]   RET         call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L8053]   COND FALSE  !(revert)
[L8056]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1527];
[L8057]               _balances_ERC20[this][holder_s1527] := __var_53;
[L8058]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1527];
[L8059]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] == false
[L8060]   CALL        call __var_54 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8060]   RET         call __var_54 := FreshRefGenerator__success();
[L8061]   COND FALSE  !(revert)
[L8064]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8065]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] := true;
[L8066]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == zerointRefArr();
[L8067]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1527] == __var_54;
[L8068]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8070]   CALL        call __var_56 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8070]   RET         call __var_56 := FreshRefGenerator__success();
[L8071]   COND FALSE  !(revert)
[L8074]               assume DType[__var_56] == ONIT.LockInfo;
[L8075]   CALL        call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5620]               _releaseTime_ONIT.LockInfo[this] := _releaseTime;
[L5621]               _amount_ONIT.LockInfo[this] := _amount;
[L8075]   RET         call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L8076]   COND FALSE  !(revert)
[L8079]               __var_55 := __var_56;
[L8080]               __var_58 := Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]];
[L8081]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]][__var_58] := __var_55;
[L8082]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] := __var_58 + 1;
[L8083]               assert { :EventEmitted "Lock_ONIT" } true;
[L8084]               __ret_0_ := true;
[L7853]   RET         call __var_49 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7854]   COND FALSE  !(revert)
[L7857]               __ret_0_ := true;
[L3558]   RET         call __ret_0_ := lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3559]               assume !revert && gas >= 0;
[L12310]  RET         call __ret_0_lock := lock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND TRUE   __exception
[L3099]               __tmp__Balance := Balance;
[L3100]               __tmp__DType := DType;
[L3101]               __tmp__Alloc := Alloc;
[L3102]               __tmp__balance_ADDR := balance_ADDR;
[L3103]               __tmp__M_Ref_bool := M_Ref_bool;
[L3104]               __tmp__sum := sum;
[L3105]               __tmp__M_Ref_int := M_Ref_int;
[L3106]               __tmp__sum__balances0 := sum__balances0;
[L3107]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3108]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3109]               __tmp__sum__allowed1 := sum__allowed1;
[L3110]               __tmp__M_int_Ref := M_int_Ref;
[L3111]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3112]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3113]               __tmp__Length := Length;
[L3114]               __tmp__now := now;
[L3115]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3116]               __tmp__owner_Ownable := owner_Ownable;
[L3117]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3118]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3119]               __tmp___paused_Pausable := _paused_Pausable;
[L3120]               __tmp___balances_ERC20 := _balances_ERC20;
[L3121]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3122]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3123]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3124]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3125]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3126]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3127]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3128]               __tmp__implementation_ONIT := implementation_ONIT;
[L3129]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3130]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3131]   CALL        call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7475]   COND TRUE   __tmp__DType[this] == ONIT
[L7476]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6613]               __ret_0_ := __tmp___balances_ERC20[this][owner_s640];
[L7476]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7477]   COND FALSE  !(revert)
[L7483]               totalBalance_s1254 := totalBalance_s1254;
[L7484]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7495]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]] > 0
[L7496]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7507]               i_s1254 := 0;
[L7508]   COND TRUE   i_s1254 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]]
[L7510]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][owner_s1254] == false)
[L7521]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND TRUE   !(c_s106 >= a_s106)
[L5741]               revert := true;
[L7521]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__fail(this, this, 0, totalBalance_s1254, __tmp___amount_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7522]   COND TRUE   revert
[L3131]   RET         call __ret_0_ := balanceOf~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3132]               assume revert || gas < 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:42:01,963 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:42:01,963 INFO  L82        PathProgramCache]: Analyzing trace with hash 11618875, now seen corresponding path program 1 times
[2020-11-25 02:42:01,964 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:42:01,996 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:42:05,179 INFO  L134       CoverageAnalysis]: Checked inductivity of 1396 backedges. 328 proven. 6 refuted. 0 times theorem prover too weak. 1062 trivial. 0 not checked.
[2020-11-25 02:42:05,179 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:42:05,179 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [61] total 61
[2020-11-25 02:42:05,180 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:42:05,180 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 62 interpolants.
[2020-11-25 02:42:05,181 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=209, Invalid=3573, Unknown=0, NotChecked=0, Total=3782
[2020-11-25 02:42:05,181 INFO  L87              Difference]: Start difference. First operand 10822 states and 13082 transitions. cyclomatic complexity: 2333 Second operand 62 states.
[2020-11-25 02:42:06,009 WARN  L188               SmtUtils]: Spent 204.00 ms on a formula simplification. DAG size of input: 221 DAG size of output: 164
[2020-11-25 02:42:06,473 WARN  L188               SmtUtils]: Spent 217.00 ms on a formula simplification. DAG size of input: 221 DAG size of output: 164
[2020-11-25 02:42:06,869 WARN  L188               SmtUtils]: Spent 208.00 ms on a formula simplification. DAG size of input: 221 DAG size of output: 164
[2020-11-25 02:42:09,216 WARN  L188               SmtUtils]: Spent 277.00 ms on a formula simplification. DAG size of input: 234 DAG size of output: 177
[2020-11-25 02:42:27,411 WARN  L188               SmtUtils]: Spent 191.00 ms on a formula simplification. DAG size of input: 218 DAG size of output: 161
[2020-11-25 02:43:07,009 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:43:07,009 INFO  L93              Difference]: Finished difference Result 11186 states and 13850 transitions.
[2020-11-25 02:43:07,009 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 70 states. 
[2020-11-25 02:43:07,009 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11186 states and 13850 transitions.
[2020-11-25 02:43:07,039 INFO  L131   ngComponentsAnalysis]: Automaton has 13 accepting balls. 26
[2020-11-25 02:43:07,073 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11186 states to 11186 states and 13850 transitions.
[2020-11-25 02:43:07,073 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2137
[2020-11-25 02:43:07,074 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2137
[2020-11-25 02:43:07,074 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11186 states and 13850 transitions.
[2020-11-25 02:43:07,083 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:43:07,083 INFO  L728         BuchiCegarLoop]: Abstraction has 11186 states and 13850 transitions.
[2020-11-25 02:43:07,088 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11186 states and 13850 transitions.
[2020-11-25 02:43:07,155 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11186 to 10822.
[2020-11-25 02:43:07,156 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10822 states.
[2020-11-25 02:43:07,175 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10822 states to 10822 states and 13082 transitions.
[2020-11-25 02:43:07,175 INFO  L751         BuchiCegarLoop]: Abstraction has 10822 states and 13082 transitions.
[2020-11-25 02:43:07,175 INFO  L631         BuchiCegarLoop]: Abstraction has 10822 states and 13082 transitions.
[2020-11-25 02:43:07,175 INFO  L445         BuchiCegarLoop]: ======== Iteration 56============
[2020-11-25 02:43:07,175 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10822 states and 13082 transitions.
[2020-11-25 02:43:07,185 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 22
[2020-11-25 02:43:07,186 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:43:07,186 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:43:07,187 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:43:07,187 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ONIT0 := false;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND FALSE  !(choice == 6)
[L12304]  COND FALSE  !(choice == 5)
[L12312]  COND TRUE   choice == 4
[L12313]              gas := gas - 21000;
[L12314]  COND TRUE   gas >= 0
[L12315]              assume value_s1439 >= 0 && value_s1439 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12316]              assume releaseTime_s1439 >= 0 && releaseTime_s1439 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12317]              assume msgvalue_MSG == 0;
[L12318]  CALL        call __ret_0_transferWithLock := transferWithLock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L3608]               havoc __exception;
[L3609]               revert := false;
[L3610]   COND FALSE  !(__exception)
[L3646]   CALL        call __ret_0_ := transferWithLock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L7887]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND TRUE   DType[this] == ONIT
[L10861]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10861]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10862]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7887]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7888]   COND FALSE  !(revert)
[L7891]   COND TRUE   DType[this] == ONIT
[L7892]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, holder_s1439, value_s1439);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7892]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, holder_s1439, value_s1439);
[L7893]   COND FALSE  !(revert)
[L7899]   CALL        call __var_50 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L8052]   CALL        call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8052]   RET         call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L8053]   COND FALSE  !(revert)
[L8056]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1527];
[L8057]               _balances_ERC20[this][holder_s1527] := __var_53;
[L8058]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1527];
[L8059]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] == false)
[L8070]   CALL        call __var_56 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8070]   RET         call __var_56 := FreshRefGenerator__success();
[L8071]   COND FALSE  !(revert)
[L8074]               assume DType[__var_56] == ONIT.LockInfo;
[L8075]   CALL        call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5620]               _releaseTime_ONIT.LockInfo[this] := _releaseTime;
[L5621]               _amount_ONIT.LockInfo[this] := _amount;
[L8075]   RET         call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L8076]   COND FALSE  !(revert)
[L8079]               __var_55 := __var_56;
[L8080]               __var_58 := Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]];
[L8081]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]][__var_58] := __var_55;
[L8082]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] := __var_58 + 1;
[L8083]               assert { :EventEmitted "Lock_ONIT" } true;
[L8084]               __ret_0_ := true;
[L7899]   RET         call __var_50 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L7900]   COND FALSE  !(revert)
[L7903]               __ret_0_ := true;
[L3646]   RET         call __ret_0_ := transferWithLock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L3647]               assume !revert && gas >= 0;
[L12318]  RET         call __ret_0_transferWithLock := transferWithLock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND TRUE   gas >= 0
[L12133]              assume msgvalue_MSG == 0;
[L12134]  CALL        call __ret_0_owner := owner_Ownable(this, msgsender_MSG, msgvalue_MSG);
[L614]                havoc __exception;
[L615]                revert := false;
[L616]    COND FALSE  !(__exception)
[L652]    CALL        call __ret_0_ := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6047]               __ret_0_ := owner_Ownable[this];
[L652]    RET         call __ret_0_ := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L653]                assume !revert && gas >= 0;
[L12134]  RET         call __ret_0_owner := owner_Ownable(this, msgsender_MSG, msgvalue_MSG);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:43:07,191 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:43:07,191 INFO  L82        PathProgramCache]: Analyzing trace with hash 2001628872, now seen corresponding path program 1 times
[2020-11-25 02:43:07,192 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:43:07,248 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:43:07,286 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:43:07,387 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:43:07,388 INFO  L82        PathProgramCache]: Analyzing trace with hash 1721142359, now seen corresponding path program 1 times
[2020-11-25 02:43:07,388 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:43:07,392 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:43:07,395 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:43:07,400 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:43:07,400 INFO  L82        PathProgramCache]: Analyzing trace with hash 1653175454, now seen corresponding path program 1 times
[2020-11-25 02:43:07,401 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:43:07,465 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:43:07,511 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.001s / 0.004s total
Resizing node table from 2473 to 4943
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3019 to 6037
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 883 to 1759
[2020-11-25 02:43:07,968 WARN  L188               SmtUtils]: Spent 139.00 ms on a formula simplification that was a NOOP. DAG size: 404
Garbage collection #1: 167 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 167 to 331
Garbage collection #2: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #3: 661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 661 to 1321
Garbage collection #4: 1321 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1321 to 2633
Garbage collection #5: 2633 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2633 to 5261
Garbage collection #6: 5261 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 5261 to 10513
Garbage collection #7: 10513 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 10513 to 21023
[2020-11-25 02:43:08,282 WARN  L188               SmtUtils]: Spent 215.00 ms on a formula simplification that was a NOOP. DAG size: 332
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 8053 to 16103
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2179 to 4357
[2020-11-25 02:43:08,344 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-11-25 02:43:09,145 WARN  L188               SmtUtils]: Spent 115.00 ms on a formula simplification. DAG size of input: 231 DAG size of output: 217
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
[2020-11-25 02:43:10,402 WARN  L188               SmtUtils]: Spent 1.00 s on a formula simplification. DAG size of input: 447 DAG size of output: 421
Garbage collection #1: 151 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 151 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 631 to 1259
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
[2020-11-25 02:43:10,724 WARN  L188               SmtUtils]: Spent 128.00 ms on a formula simplification. DAG size of input: 217 DAG size of output: 216
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 02:43:10,971 WARN  L188               SmtUtils]: Spent 207.00 ms on a formula simplification that was a NOOP. DAG size: 415
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
[2020-11-25 02:43:11,137 WARN  L188               SmtUtils]: Spent 160.00 ms on a formula simplification that was a NOOP. DAG size: 375
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-11-25 02:43:11,398 WARN  L188               SmtUtils]: Spent 160.00 ms on a formula simplification. DAG size of input: 357 DAG size of output: 284
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
[2020-11-25 02:43:11,589 WARN  L188               SmtUtils]: Spent 156.00 ms on a formula simplification that was a NOOP. DAG size: 433
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
[2020-11-25 02:43:11,697 WARN  L188               SmtUtils]: Spent 103.00 ms on a formula simplification that was a NOOP. DAG size: 359
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #4: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 02:43:12,340 WARN  L188               SmtUtils]: Spent 323.00 ms on a formula simplification. DAG size of input: 207 DAG size of output: 203
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
[2020-11-25 02:43:12,561 WARN  L188               SmtUtils]: Spent 133.00 ms on a formula simplification. DAG size of input: 155 DAG size of output: 150
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 02:43:12,712 WARN  L188               SmtUtils]: Spent 103.00 ms on a formula simplification. DAG size of input: 138 DAG size of output: 137
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 02:43:13,112 WARN  L188               SmtUtils]: Spent 370.00 ms on a formula simplification. DAG size of input: 318 DAG size of output: 313
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-25 02:43:13,280 WARN  L188               SmtUtils]: Spent 165.00 ms on a formula simplification that was a NOOP. DAG size: 295
[2020-11-25 02:43:13,780 WARN  L188               SmtUtils]: Spent 495.00 ms on a formula simplification. DAG size of input: 438 DAG size of output: 347
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-11-25 02:43:13,897 WARN  L188               SmtUtils]: Spent 111.00 ms on a formula simplification that was a NOOP. DAG size: 243
[2020-11-25 02:43:14,365 WARN  L188               SmtUtils]: Spent 467.00 ms on a formula simplification that was a NOOP. DAG size: 478
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 9181 to 18353
[2020-11-25 02:43:14,590 WARN  L188               SmtUtils]: Spent 218.00 ms on a formula simplification that was a NOOP. DAG size: 392
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-25 02:43:14,961 WARN  L188               SmtUtils]: Spent 176.00 ms on a formula simplification. DAG size of input: 346 DAG size of output: 297
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
[2020-11-25 02:43:15,160 WARN  L188               SmtUtils]: Spent 164.00 ms on a formula simplification that was a NOOP. DAG size: 437
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 11177 to 22349
[2020-11-25 02:43:15,268 WARN  L188               SmtUtils]: Spent 103.00 ms on a formula simplification that was a NOOP. DAG size: 357
[2020-11-25 02:43:26,187 WARN  L188               SmtUtils]: Spent 10.91 s on a formula simplification. DAG size of input: 1292 DAG size of output: 1276
Garbage collection #1: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #2: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #3: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #4: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #5: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
Garbage collection #6: 17077 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17077 to 34147
Garbage collection #7: 34147 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 34147 to 68281
Garbage collection #8: 68281 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 68281 to 118277
Garbage collection #9: 118277 nodes / 0 free / 0.003s / 0.004s total
Resizing node table from 118277 to 168277
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-11-25 02:43:27,047 WARN  L188               SmtUtils]: Spent 774.00 ms on a formula simplification that was a NOOP. DAG size: 456
[2020-11-25 02:43:28,348 WARN  L188               SmtUtils]: Spent 1.27 s on a formula simplification that was a NOOP. DAG size: 581
Garbage collection #1: 197 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 197 to 389
Garbage collection #2: 389 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 389 to 773
Garbage collection #3: 773 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 773 to 1543
Garbage collection #4: 1543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1543 to 3083
Garbage collection #5: 3083 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3083 to 6163
Garbage collection #6: 6163 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 6163 to 12323
Garbage collection #7: 12323 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 12323 to 24631
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 8543 to 17077
[2020-11-25 02:43:29,097 WARN  L188               SmtUtils]: Spent 736.00 ms on a formula simplification that was a NOOP. DAG size: 456
[2020-11-25 02:43:31,394 WARN  L188               SmtUtils]: Spent 2.30 s on a formula simplification. DAG size of input: 583 DAG size of output: 582
Garbage collection #1: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #2: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #3: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #4: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #5: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #6: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #7: 12541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12541 to 25073
Garbage collection #1: 197 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 197 to 389
Garbage collection #2: 389 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 389 to 773
Garbage collection #3: 773 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 773 to 1543
Garbage collection #4: 1543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1543 to 3083
Garbage collection #5: 3083 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3083 to 6163
Garbage collection #6: 6163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6163 to 12323
Garbage collection #7: 12323 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 12323 to 24631
[2020-11-25 02:43:32,542 WARN  L188               SmtUtils]: Spent 1.14 s on a formula simplification that was a NOOP. DAG size: 578
[2020-11-25 02:43:32,607 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:43:32,655 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:43:32,669 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:43:32 BasicIcfg
[2020-11-25 02:43:32,669 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 02:43:32,669 INFO  L168              Benchmark]: Toolchain (without parser) took 397337.25 ms. Allocated memory was 1.0 GB in the beginning and 6.6 GB in the end (delta: 5.6 GB). Free memory was 919.1 MB in the beginning and 4.1 GB in the end (delta: -3.2 GB). Peak memory consumption was 5.8 GB. Max. memory is 15.3 GB.
[2020-11-25 02:43:32,670 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 02:43:32,670 INFO  L168              Benchmark]: Boogie Preprocessor took 183.48 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.0 MB in the end (delta: 27.1 MB). Peak memory consumption was 27.1 MB. Max. memory is 15.3 GB.
[2020-11-25 02:43:32,670 INFO  L168              Benchmark]: UtopiaSpecLang took 85.40 ms. Allocated memory is still 1.0 GB. Free memory was 892.0 MB in the beginning and 881.3 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:43:32,670 INFO  L168              Benchmark]: Boogie Printer took 28.89 ms. Allocated memory is still 1.0 GB. Free memory was 881.3 MB in the beginning and 875.9 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 02:43:32,670 INFO  L168              Benchmark]: RCFGBuilder took 1273.55 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 72.9 MB). Free memory was 875.9 MB in the beginning and 774.5 MB in the end (delta: 101.4 MB). Peak memory consumption was 174.3 MB. Max. memory is 15.3 GB.
[2020-11-25 02:43:32,670 INFO  L168              Benchmark]: UtopiaLTL2Aut took 42.28 ms. Allocated memory is still 1.1 GB. Free memory was 774.5 MB in the beginning and 771.0 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
[2020-11-25 02:43:32,670 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3298.58 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 446.7 MB). Free memory was 771.0 MB in the beginning and 929.0 MB in the end (delta: -158.0 MB). Peak memory consumption was 363.3 MB. Max. memory is 15.3 GB.
[2020-11-25 02:43:32,671 INFO  L168              Benchmark]: BlockEncodingV2 took 297.61 ms. Allocated memory is still 1.5 GB. Free memory was 929.0 MB in the beginning and 770.0 MB in the end (delta: 159.0 MB). Peak memory consumption was 159.0 MB. Max. memory is 15.3 GB.
[2020-11-25 02:43:32,671 INFO  L168              Benchmark]: BuchiAutomizer took 392124.41 ms. Allocated memory was 1.5 GB in the beginning and 6.6 GB in the end (delta: 5.0 GB). Free memory was 770.0 MB in the beginning and 4.1 GB in the end (delta: -3.3 GB). Peak memory consumption was 5.1 GB. Max. memory is 15.3 GB.
[2020-11-25 02:43:32,673 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    11592 locations, 20999 edges
  - StatisticsResult: Encoded RCFG
    11446 locations, 20596 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 183.48 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.0 MB in the end (delta: 27.1 MB). Peak memory consumption was 27.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 85.40 ms. Allocated memory is still 1.0 GB. Free memory was 892.0 MB in the beginning and 881.3 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 28.89 ms. Allocated memory is still 1.0 GB. Free memory was 881.3 MB in the beginning and 875.9 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1273.55 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 72.9 MB). Free memory was 875.9 MB in the beginning and 774.5 MB in the end (delta: 101.4 MB). Peak memory consumption was 174.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 42.28 ms. Allocated memory is still 1.1 GB. Free memory was 774.5 MB in the beginning and 771.0 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3298.58 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 446.7 MB). Free memory was 771.0 MB in the beginning and 929.0 MB in the end (delta: -158.0 MB). Peak memory consumption was 363.3 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 297.61 ms. Allocated memory is still 1.5 GB. Free memory was 929.0 MB in the beginning and 770.0 MB in the end (delta: 159.0 MB). Peak memory consumption was 159.0 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 392124.41 ms. Allocated memory was 1.5 GB in the beginning and 6.6 GB in the end (delta: 5.0 GB). Free memory was 770.0 MB in the beginning and 4.1 GB in the end (delta: -3.3 GB). Peak memory consumption was 5.1 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    4668 locations, 6455 edges
  - StatisticsResult: BuchiProgram size
    11592 locations, 20999 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 55 terminating modules (55 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.55 modules have a trivial ranking function, the largest among these consists of 62 locations. The remainder module has 10822 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 392.0s and 56 iterations.  TraceHistogramMax:9. Analysis of lassos took 51.2s. Construction of modules took 273.0s. BÃ¼chi inclusion checks took 59.6s. Highest rank in rank-based complementation 0. Minimization of det autom 55. Minimization of nondet autom 0. Automata minimization 4.0s AutomataMinimizationTime, 55 MinimizatonAttempts, 15645 StatesRemovedByMinimization, 40 NontrivialMinimizations. Non-live state removal took 2.6s Buchi closure took 0.0s. Biggest automaton had 11334 states and ocurred in iteration 15.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 371637 SDtfs, 492597 SDslu, 1228399 SDs, 0 SdLazy, 2014775 SolverSat, 106211 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 273.0s Time	LassoAnalysisResults: nont1 unkn0 SFLI1 SFLT0 conc1 concLT0 SILN0 SILU53 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(789885600000000000000000025) = (new ONIT)({from : 789885600000000000000000027});
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
ONIT(789885600000000000000000025).timelockList~address~uint256.gas(3979002)({from : 789885600000000000000000010, arg1693 : 789885600000000000000000027, arg1694 : 0});
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
ONIT(789885600000000000000000025).transferWithLock~address~uint256~uint256.gas(3979003)({from : 789885600000000000000000027, holder : 789885600000000000000000027, value : 7, releaseTime : 0});
[L3608]               havoc __exception;
[L3609]               revert := false;
[L3610]   COND FALSE  !(__exception)
[L3646]   CALL        call __ret_0_ := transferWithLock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L7887]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND TRUE   DType[this] == ONIT
[L10861]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10861]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10862]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7887]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7888]   COND FALSE  !(revert)
[L7891]   COND TRUE   DType[this] == ONIT
[L7892]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, holder_s1439, value_s1439);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7892]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, holder_s1439, value_s1439);
[L7893]   COND FALSE  !(revert)
[L7899]   CALL        call __var_50 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L8052]   CALL        call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8052]   RET         call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L8053]   COND FALSE  !(revert)
[L8056]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1527];
[L8057]               _balances_ERC20[this][holder_s1527] := __var_53;
[L8058]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1527];
[L8059]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] == false)
[L8070]   CALL        call __var_56 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8070]   RET         call __var_56 := FreshRefGenerator__success();
[L8071]   COND FALSE  !(revert)
[L8074]               assume DType[__var_56] == ONIT.LockInfo;
[L8075]   CALL        call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5620]               _releaseTime_ONIT.LockInfo[this] := _releaseTime;
[L5621]               _amount_ONIT.LockInfo[this] := _amount;
[L8075]   RET         call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L8076]   COND FALSE  !(revert)
[L8079]               __var_55 := __var_56;
[L8080]               __var_58 := Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]];
[L8081]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]][__var_58] := __var_55;
[L8082]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] := __var_58 + 1;
[L8083]               assert { :EventEmitted "Lock_ONIT" } true;
[L8084]               __ret_0_ := true;
[L7899]   RET         call __var_50 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L7900]   COND FALSE  !(revert)
[L7903]               __ret_0_ := true;
[L3646]   RET         call __ret_0_ := transferWithLock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
[L3647]               assume !revert && gas >= 0;
[L12318]  RET         call __ret_0_transferWithLock := transferWithLock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1439, value_s1439, releaseTime_s1439);
ONIT(789885600000000000000000025).balanceOf~address.gas(3979004)({from : 789885600000000000000000016, owner : 789885600000000000000000027});
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][owner_s1254] >= 0 && _balances_ERC20[this][owner_s1254] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ONIT0 := true;
[L2]                  call_balanceOf_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7564]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0
[L7565]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7576]               i_s1254 := 0;
[L7577]   COND TRUE   i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]]
[L7579]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false)
[L7590]   CALL        call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L7590]   RET         call totalBalance_s1254 := add~uint256~uint256_SafeMath__success(this, this, 0, totalBalance_s1254, _amount_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]][i_s1254]]);
[L7591]   COND FALSE  !(revert)
[L7594]               totalBalance_s1254 := totalBalance_s1254;
[L7595]               i_s1254 := (i_s1254 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7596]   COND FALSE  !(gas < 0)
[L7577]   COND FALSE  !(i_s1254 < Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]])
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _balances_ERC20[this][owner_s1254] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);

Loop:
Ownable(789885600000000000000000025).owner.gas(3979001)({from : 789885600000000000000000033});
[L614]                havoc __exception;
[L615]                revert := false;
[L616]    COND FALSE  !(__exception)
[L652]    CALL        call __ret_0_ := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6047]               __ret_0_ := owner_Ownable[this];
[L652]    RET         call __ret_0_ := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L653]                assume !revert && gas >= 0;
[L12134]  RET         call __ret_0_owner := owner_Ownable(this, msgsender_MSG, msgvalue_MSG);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
