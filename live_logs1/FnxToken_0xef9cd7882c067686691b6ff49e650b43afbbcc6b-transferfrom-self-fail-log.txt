This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 16:51:16,027 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 16:51:16,029 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 16:51:16,040 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 16:51:16,041 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 16:51:16,041 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 16:51:16,042 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 16:51:16,044 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 16:51:16,045 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 16:51:16,046 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 16:51:16,047 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 16:51:16,047 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 16:51:16,048 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 16:51:16,048 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 16:51:16,049 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 16:51:16,050 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 16:51:16,051 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 16:51:16,053 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 16:51:16,056 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 16:51:16,058 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 16:51:16,060 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 16:51:16,062 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 16:51:16,065 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 16:51:16,065 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 16:51:16,065 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 16:51:16,066 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 16:51:16,066 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 16:51:16,067 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 16:51:16,067 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 16:51:16,067 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 16:51:16,068 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 16:51:16,068 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 16:51:16,069 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 16:51:16,070 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 16:51:16,071 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 16:51:16,071 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 16:51:16,071 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 16:51:16,072 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 16:51:16,072 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 16:51:16,072 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 16:51:16,073 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 16:51:16,073 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 16:51:16,081 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 16:51:16,081 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 16:51:16,082 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 16:51:16,082 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 16:51:16,082 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 16:51:16,082 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 16:51:16,082 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 16:51:16,082 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 16:51:16,083 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 16:51:16,083 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 16:51:16,083 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 16:51:16,083 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 16:51:16,083 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 16:51:16,083 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 16:51:16,084 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 16:51:16,084 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 16:51:16,084 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 16:51:16,084 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 16:51:16,084 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 16:51:16,084 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 16:51:16,084 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 16:51:16,085 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 16:51:16,085 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 16:51:16,085 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 16:51:16,085 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 16:51:16,085 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 16:51:16,111 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 16:51:16,127 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 16:51:16,129 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 16:51:16,130 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 16:51:16,131 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 16:51:16,131 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transferfrom-self-fail.bpl
[2020-11-25 16:51:16,132 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transferfrom-self-fail.bpl'
[2020-11-25 16:51:16,213 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 16:51:16,214 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 16:51:16,215 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 16:51:16,215 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 16:51:16,215 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 16:51:16,231 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:51:16" (1/1) ...
[2020-11-25 16:51:16,233 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:51:16" (1/1) ...
[2020-11-25 16:51:16,267 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:51:16" (1/1) ...
[2020-11-25 16:51:16,269 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:51:16" (1/1) ...
[2020-11-25 16:51:16,298 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:51:16" (1/1) ...
[2020-11-25 16:51:16,309 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:51:16" (1/1) ...
[2020-11-25 16:51:16,316 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:51:16" (1/1) ...
[2020-11-25 16:51:16,325 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 16:51:16,326 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 16:51:16,326 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 16:51:16,328 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 16:51:16,331 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:51:16" (1/1) ...
[2020-11-25 16:51:16,351 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 16:51:16,357 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 16:51:16,364 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 16:51:16,372 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( from_s410==to_s410 && ( value_s410>_balances_ERC20[this][from_s410] || value_s410>_allowed_ERC20[this][from_s410][msg.sender] ) ) && value_s410>=0 ) && value_s410<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s410]>=0 ) && _balances_ERC20[this][to_s410]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][from_s410]>=0 ) && _balances_ERC20[this][from_s410]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowed_ERC20[this][from_s410][msg.sender]>=0 ) && _allowed_ERC20[this][from_s410][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[from_s410,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IdentifierExpression[to_s410,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[value_s410,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[from_s410,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]],BinaryExpression[COMPGT,IdentifierExpression[value_s410,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[from_s410,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s410,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s410,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[to_s410,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[to_s410,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[from_s410,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[from_s410,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[from_s410,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[from_s410,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 16:51:16,378 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 16:51:16,378 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ERC200) ==> ( <>AP(fail_transferFrom_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 16:51:16,388 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:51:16 PropertyContainer
[2020-11-25 16:51:16,388 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 16:51:16,388 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 16:51:16,388 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 16:51:16,388 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 16:51:16,389 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:51:16" (1/2) ...
[2020-11-25 16:51:16,389 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 16:51:16,390 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 16:51:16,404 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:51:16" (2/2) ...
[2020-11-25 16:51:16,404 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 16:51:16,404 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 16:51:16,404 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 16:51:16,404 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 16:51:16,406 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:51:16" (1/2) ...
[2020-11-25 16:51:16,459 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 16:51:16,459 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 16:51:16,459 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 16:51:16,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 16:51:16,459 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 16:51:16,459 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 16:51:16,459 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 16:51:16,459 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 16:51:16,459 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 16:51:16,460 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 16:51:16,460 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:51:16,460 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 16:51:16,460 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 16:51:16,460 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:51:16,460 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:51:16,460 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 16:51:16,460 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:51:16,461 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:51:16,461 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 16:51:16,461 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 16:51:16,461 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 16:51:16,462 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 16:51:16,462 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 16:51:16,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 16:51:16,462 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 16:51:16,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 16:51:16,462 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 16:51:16,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 16:51:16,462 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 16:51:16,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 16:51:16,462 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 16:51:16,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 16:51:16,462 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 16:51:16,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 16:51:16,463 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 16:51:16,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 16:51:16,463 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 16:51:16,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 16:51:16,463 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 16:51:16,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 16:51:16,463 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 16:51:16,463 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 16:51:16,463 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 16:51:16,463 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 16:51:16,463 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 16:51:16,463 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 16:51:16,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 16:51:16,464 INFO  L130     BoogieDeclarations]: Found specification of procedure changeOwner~address_Owned
[2020-11-25 16:51:16,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure changeOwner~address_Owned
[2020-11-25 16:51:16,464 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 16:51:16,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 16:51:16,464 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 16:51:16,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 16:51:16,464 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 16:51:16,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 16:51:16,464 INFO  L130     BoogieDeclarations]: Found specification of procedure FnxToken_FnxToken_NoBaseCtor__success
[2020-11-25 16:51:16,464 INFO  L130     BoogieDeclarations]: Found specification of procedure FnxToken_FnxToken
[2020-11-25 16:51:16,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure FnxToken_FnxToken
[2020-11-25 16:51:16,465 INFO  L130     BoogieDeclarations]: Found specification of procedure name_FnxToken
[2020-11-25 16:51:16,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_FnxToken
[2020-11-25 16:51:16,465 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_FnxToken
[2020-11-25 16:51:16,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_FnxToken
[2020-11-25 16:51:16,465 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_FnxToken
[2020-11-25 16:51:16,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_FnxToken
[2020-11-25 16:51:16,465 INFO  L130     BoogieDeclarations]: Found specification of procedure changeTokenName~string~string_FnxToken
[2020-11-25 16:51:16,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure changeTokenName~string~string_FnxToken
[2020-11-25 16:51:16,465 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_FnxToken
[2020-11-25 16:51:16,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_FnxToken
[2020-11-25 16:51:16,466 INFO  L130     BoogieDeclarations]: Found specification of procedure MAX_TOTAL_TOKEN_AMOUNT_FnxToken
[2020-11-25 16:51:16,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure MAX_TOTAL_TOKEN_AMOUNT_FnxToken
[2020-11-25 16:51:16,466 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 16:51:16,466 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 16:51:16,466 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 16:51:16,466 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 16:51:16,466 INFO  L130     BoogieDeclarations]: Found specification of procedure maxWanTokenAmountNotReached_pre__success
[2020-11-25 16:51:16,466 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 16:51:16,467 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 16:51:16,467 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 16:51:16,467 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 16:51:16,467 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 16:51:16,467 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 16:51:16,467 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 16:51:16,467 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 16:51:16,467 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FnxToken
[2020-11-25 16:51:16,467 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 16:51:16,468 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 16:51:16,468 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 16:51:16,468 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 16:51:16,468 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 16:51:16,468 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:51:16,468 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 16:51:16,468 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 16:51:16,468 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:51:16,468 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:51:16,468 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 16:51:16,469 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:51:16,469 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:51:16,469 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 16:51:16,469 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 16:51:16,469 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 16:51:16,469 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 16:51:16,469 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 16:51:16,469 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 16:51:16,469 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 16:51:16,469 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 16:51:16,470 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 16:51:16,470 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 16:51:16,470 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 16:51:16,470 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 16:51:16,470 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 16:51:16,470 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 16:51:16,470 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 16:51:16,470 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 16:51:16,470 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 16:51:16,471 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 16:51:16,471 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 16:51:16,471 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 16:51:16,471 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 16:51:16,471 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 16:51:16,471 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 16:51:16,471 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 16:51:16,471 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 16:51:16,471 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 16:51:16,472 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 16:51:16,472 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 16:51:16,472 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 16:51:16,472 INFO  L130     BoogieDeclarations]: Found specification of procedure changeOwner~address_Owned__success
[2020-11-25 16:51:16,472 INFO  L130     BoogieDeclarations]: Found specification of procedure changeOwner~address_Owned__fail
[2020-11-25 16:51:16,472 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 16:51:16,472 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 16:51:16,472 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 16:51:16,472 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 16:51:16,472 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 16:51:16,473 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 16:51:16,473 INFO  L130     BoogieDeclarations]: Found specification of procedure FnxToken_FnxToken_NoBaseCtor__fail
[2020-11-25 16:51:16,473 INFO  L130     BoogieDeclarations]: Found specification of procedure FnxToken_FnxToken__success
[2020-11-25 16:51:16,473 INFO  L130     BoogieDeclarations]: Found specification of procedure FnxToken_FnxToken__fail
[2020-11-25 16:51:16,473 INFO  L130     BoogieDeclarations]: Found specification of procedure name_FnxToken__success
[2020-11-25 16:51:16,473 INFO  L130     BoogieDeclarations]: Found specification of procedure name_FnxToken__fail
[2020-11-25 16:51:16,473 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_FnxToken__success
[2020-11-25 16:51:16,473 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_FnxToken__fail
[2020-11-25 16:51:16,474 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_FnxToken__success
[2020-11-25 16:51:16,474 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_FnxToken__fail
[2020-11-25 16:51:16,474 INFO  L130     BoogieDeclarations]: Found specification of procedure changeTokenName~string~string_FnxToken__success
[2020-11-25 16:51:16,474 INFO  L130     BoogieDeclarations]: Found specification of procedure changeTokenName~string~string_FnxToken__fail
[2020-11-25 16:51:16,474 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_FnxToken__success
[2020-11-25 16:51:16,474 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_FnxToken__fail
[2020-11-25 16:51:16,474 INFO  L130     BoogieDeclarations]: Found specification of procedure MAX_TOTAL_TOKEN_AMOUNT_FnxToken__success
[2020-11-25 16:51:16,474 INFO  L130     BoogieDeclarations]: Found specification of procedure MAX_TOTAL_TOKEN_AMOUNT_FnxToken__fail
[2020-11-25 16:51:16,474 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 16:51:16,474 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 16:51:16,475 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 16:51:16,475 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 16:51:16,475 INFO  L130     BoogieDeclarations]: Found specification of procedure maxWanTokenAmountNotReached_pre__fail
[2020-11-25 16:51:16,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 16:51:16,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 16:51:16,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 16:51:16,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 16:51:16,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 16:51:16,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 16:51:16,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:51:16,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:51:16,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 16:51:16,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 16:51:16,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:51:16,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:51:16,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:51:16,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:51:16,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 16:51:16,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 16:51:16,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:51:16,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:51:16,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:51:16,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:51:16,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 16:51:16,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 16:51:16,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 16:51:16,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 16:51:16,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 16:51:16,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 16:51:16,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 16:51:16,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 16:51:16,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 16:51:16,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 16:51:16,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 16:51:16,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 16:51:16,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 16:51:16,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 16:51:16,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 16:51:16,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 16:51:16,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 16:51:16,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 16:51:16,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 16:51:16,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 16:51:16,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 16:51:16,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 16:51:16,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 16:51:16,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 16:51:16,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 16:51:16,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 16:51:16,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 16:51:16,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 16:51:16,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 16:51:16,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 16:51:16,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 16:51:16,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 16:51:16,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 16:51:16,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 16:51:16,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 16:51:16,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 16:51:16,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 16:51:16,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 16:51:16,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure changeOwner~address_Owned__fail
[2020-11-25 16:51:16,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure changeOwner~address_Owned__success
[2020-11-25 16:51:16,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 16:51:16,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 16:51:16,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 16:51:16,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 16:51:16,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 16:51:16,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 16:51:16,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure FnxToken_FnxToken_NoBaseCtor__fail
[2020-11-25 16:51:16,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure FnxToken_FnxToken_NoBaseCtor__success
[2020-11-25 16:51:16,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure FnxToken_FnxToken__fail
[2020-11-25 16:51:16,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure FnxToken_FnxToken__success
[2020-11-25 16:51:16,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_FnxToken__fail
[2020-11-25 16:51:16,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_FnxToken__success
[2020-11-25 16:51:16,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_FnxToken__fail
[2020-11-25 16:51:16,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_FnxToken__success
[2020-11-25 16:51:16,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_FnxToken__fail
[2020-11-25 16:51:16,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_FnxToken__success
[2020-11-25 16:51:16,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure changeTokenName~string~string_FnxToken__fail
[2020-11-25 16:51:16,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure changeTokenName~string~string_FnxToken__success
[2020-11-25 16:51:16,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_FnxToken__fail
[2020-11-25 16:51:16,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_FnxToken__success
[2020-11-25 16:51:16,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure MAX_TOTAL_TOKEN_AMOUNT_FnxToken__fail
[2020-11-25 16:51:16,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure MAX_TOTAL_TOKEN_AMOUNT_FnxToken__success
[2020-11-25 16:51:16,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 16:51:16,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 16:51:16,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 16:51:16,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 16:51:16,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 16:51:16,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 16:51:16,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 16:51:16,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 16:51:16,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure maxWanTokenAmountNotReached_pre__fail
[2020-11-25 16:51:16,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure maxWanTokenAmountNotReached_pre__success
[2020-11-25 16:51:16,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 16:51:16,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 16:51:16,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 16:51:16,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 16:51:16,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 16:51:16,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 16:51:16,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 16:51:16,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 16:51:16,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FnxToken
[2020-11-25 16:51:16,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 16:51:16,484 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 16:51:16,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 16:51:16,893 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:51:16,893 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:51:17,190 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 16:51:17,190 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 16:51:17,192 INFO  L202        PluginConnector]: Adding new model FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:51:17 BoogieIcfgContainer
[2020-11-25 16:51:17,192 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:51:16" (2/2) ...
[2020-11-25 16:51:17,192 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 16:51:17,193 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@b5f63ba and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:51:17, skipping insertion in model container
[2020-11-25 16:51:17,193 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 16:51:17,193 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 16:51:17,193 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 16:51:17,195 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 16:51:17,195 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:51:16" (1/3) ...
[2020-11-25 16:51:17,196 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@600f8365 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:51:17, skipping insertion in model container
[2020-11-25 16:51:17,196 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:51:16" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 16:51:17,237 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:51:17 NWAContainer
[2020-11-25 16:51:17,237 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 16:51:17,238 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 16:51:17,238 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 16:51:17,238 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 16:51:17,239 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:51:17" (3/4) ...
[2020-11-25 16:51:17,240 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@1fe35893 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:51:17, skipping insertion in model container
[2020-11-25 16:51:17,240 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:51:17" (4/4) ...
[2020-11-25 16:51:17,243 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 16:51:17,247 INFO  L110   BuchiProductObserver]: Initial RCFG 1559 locations, 2058 edges
[2020-11-25 16:51:17,247 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 16:51:17,259 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 16:51:18,464 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 16:51:18,469 INFO  L110   BuchiProductObserver]: BuchiProgram size 3836 locations, 6747 edges
[2020-11-25 16:51:18,470 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:51:18 BoogieIcfgContainer
[2020-11-25 16:51:18,470 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 16:51:18,470 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 16:51:18,470 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 16:51:18,471 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 16:51:18,472 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:51:18" (1/1) ...
[2020-11-25 16:51:18,541 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_2 := div~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s186, b_s186, -1820858731);
[2020-11-25 16:51:18,541 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][account_s680][msgsender_MSG], value_s680);
[2020-11-25 16:51:18,542 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_3 := mod~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s229, b_s229, -1950754390);
[2020-11-25 16:51:18,542 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_3 := mod~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s229, b_s229, -1950754390);
[2020-11-25 16:51:18,543 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_2 := div~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s186, b_s186, -1820858731);
[2020-11-25 16:51:18,544 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_19 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][account_s680][msgsender_MSG], value_s680);
[2020-11-25 16:51:18,554 INFO  L313           BlockEncoder]: Initial Icfg 3836 locations, 6747 edges
[2020-11-25 16:51:18,554 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 16:51:18,554 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 16:51:18,554 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 16:51:18,555 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 16:51:18,566 INFO  L70    emoveInfeasibleEdges]: Removed 90 edges and 13 locations because of local infeasibility
[2020-11-25 16:51:18,577 INFO  L70        RemoveSinkStates]: Removed 76 edges and 43 locations by removing sink states
[2020-11-25 16:51:18,587 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 16:51:18,590 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 16:51:18,593 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 16:51:18,594 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 16:51:18,598 INFO  L313           BlockEncoder]: Encoded RCFG 3754 locations, 6543 edges
[2020-11-25 16:51:18,599 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:51:18 BasicIcfg
[2020-11-25 16:51:18,599 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 16:51:18,599 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 16:51:18,599 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 16:51:18,601 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 16:51:18,601 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:51:18,601 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:51:16" (1/6) ...
[2020-11-25 16:51:18,603 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2d4e0621 and model type FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:51:18, skipping insertion in model container
[2020-11-25 16:51:18,603 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:51:18,603 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:51:16" (2/6) ...
[2020-11-25 16:51:18,603 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2d4e0621 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:51:18, skipping insertion in model container
[2020-11-25 16:51:18,603 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:51:18,603 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:51:17" (3/6) ...
[2020-11-25 16:51:18,603 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2d4e0621 and model type FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:51:18, skipping insertion in model container
[2020-11-25 16:51:18,604 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:51:18,604 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:51:17" (4/6) ...
[2020-11-25 16:51:18,604 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2d4e0621 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:51:18, skipping insertion in model container
[2020-11-25 16:51:18,604 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:51:18,604 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:51:18" (5/6) ...
[2020-11-25 16:51:18,604 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2d4e0621 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 04:51:18, skipping insertion in model container
[2020-11-25 16:51:18,604 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:51:18,604 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:51:18" (6/6) ...
[2020-11-25 16:51:18,605 INFO  L404   chiAutomizerObserver]: Analyzing ICFG FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transferfrom-self-fail.bpl_BEv2
[2020-11-25 16:51:18,636 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 16:51:18,637 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 16:51:18,637 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 16:51:18,637 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 16:51:18,637 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 16:51:18,637 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 16:51:18,637 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 16:51:18,637 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 16:51:18,637 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 16:51:18,669 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3754 states.
[2020-11-25 16:51:18,720 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:51:18,721 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:51:18,721 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:51:18,732 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:51:18,732 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:51:18,733 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 16:51:18,733 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3754 states.
[2020-11-25 16:51:18,754 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:51:18,754 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:51:18,754 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:51:18,755 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:51:18,755 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4426]              assume null == 0;
[L4427]  CALL        call this := FreshRefGenerator__success();
[L2000]              havoc newRef;
[L2001]              assume Alloc[newRef] == false;
[L2002]              Alloc[newRef] := true;
[L2003]              assume newRef != null;
[L4427]  RET         call this := FreshRefGenerator__success();
[L4428]              assume now >= 0;
[L4429]              assume DType[this] == FnxToken;
[L4430]              assume msgvalue_MSG == 0;
[L4431]              gas := gas - 53000;
[L4432]  CALL        call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2894]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2768]              assume msgsender_MSG != null;
[L2769]              Balance[this] := 0;
[L2770]              owner_Owned[this] := null;
[L2771]              newOwner_Owned[this] := null;
[L2773]              owner_Owned[this] := msgsender_MSG;
[L2786]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2787]  COND FALSE  !(revert)
[L2894]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2895]  COND TRUE   revert
[L4432]  RET         call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]              assume !revert && gas >= 0;

Loop:
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND FALSE  !(gas >= 0)
[L4436]  RET         call CorralChoice_FnxToken(this);

[2020-11-25 16:51:18,768 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:51:18,768 INFO  L82        PathProgramCache]: Analyzing trace with hash -1691332674, now seen corresponding path program 1 times
[2020-11-25 16:51:18,772 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:51:18,789 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:51:18,841 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:51:18,843 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:51:18,843 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 16:51:19,014 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:51:19,026 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 16:51:19,026 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 16:51:19,028 INFO  L87              Difference]: Start difference. First operand 3754 states. Second operand 3 states.
[2020-11-25 16:51:19,220 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:51:19,220 INFO  L93              Difference]: Finished difference Result 2434 states and 2718 transitions.
[2020-11-25 16:51:19,221 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 16:51:19,222 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2434 states and 2718 transitions.
[2020-11-25 16:51:19,237 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:51:19,258 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2434 states to 2432 states and 2714 transitions.
[2020-11-25 16:51:19,259 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 16:51:19,261 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 660
[2020-11-25 16:51:19,261 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2432 states and 2714 transitions.
[2020-11-25 16:51:19,268 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:51:19,269 INFO  L728         BuchiCegarLoop]: Abstraction has 2432 states and 2714 transitions.
[2020-11-25 16:51:19,286 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2432 states and 2714 transitions.
[2020-11-25 16:51:19,331 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2432 to 2432.
[2020-11-25 16:51:19,332 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2432 states.
[2020-11-25 16:51:19,337 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2432 states to 2432 states and 2714 transitions.
[2020-11-25 16:51:19,338 INFO  L751         BuchiCegarLoop]: Abstraction has 2432 states and 2714 transitions.
[2020-11-25 16:51:19,338 INFO  L631         BuchiCegarLoop]: Abstraction has 2432 states and 2714 transitions.
[2020-11-25 16:51:19,339 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 16:51:19,339 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2432 states and 2714 transitions.
[2020-11-25 16:51:19,347 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:51:19,347 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:51:19,347 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:51:19,349 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:51:19,349 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4426]              assume null == 0;
[L4427]  CALL        call this := FreshRefGenerator__success();
[L2000]              havoc newRef;
[L2001]              assume Alloc[newRef] == false;
[L2002]              Alloc[newRef] := true;
[L2003]              assume newRef != null;
[L4427]  RET         call this := FreshRefGenerator__success();
[L4428]              assume now >= 0;
[L4429]              assume DType[this] == FnxToken;
[L4430]              assume msgvalue_MSG == 0;
[L4431]              gas := gas - 53000;
[L4432]  CALL        call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2894]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2768]              assume msgsender_MSG != null;
[L2769]              Balance[this] := 0;
[L2770]              owner_Owned[this] := null;
[L2771]              newOwner_Owned[this] := null;
[L2773]              owner_Owned[this] := msgsender_MSG;
[L2786]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2787]  COND FALSE  !(revert)
[L2894]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2895]  COND TRUE   revert
[L4432]  RET         call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]              assume !revert && gas >= 0;
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND FALSE  !(choice == 18)
[L4311]  COND FALSE  !(choice == 17)
[L4318]  COND TRUE   choice == 16
[L4319]              gas := gas - 21000;
[L4320]  COND TRUE   gas >= 0
[L4321]              assume value_s410 >= 0 && value_s410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4322]              assume msgvalue_MSG == 0;
[L4323]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s410 == to_s410 && (value_s410 > _balances_ERC20[this][from_s410] || value_s410 > _allowed_ERC20[this][from_s410][msgsender_MSG])) && value_s410 >= 0) && value_s410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s410] >= 0) && _balances_ERC20[this][to_s410] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s410] >= 0) && _balances_ERC20[this][from_s410] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s410][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s410][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2445]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s410][msgsender_MSG], value_s410);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND TRUE   !(b_s136 <= a_s136)
[L2132]              revert := true;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND TRUE   revert
[L2445]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s410][msgsender_MSG], value_s410);
[L2446]  COND TRUE   revert
[L592]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L593]               assume !revert && gas >= 0;
[L4323]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L4436]  RET         call CorralChoice_FnxToken(this);

Loop:
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND FALSE  !(choice == 18)
[L4311]  COND FALSE  !(choice == 17)
[L4318]  COND TRUE   choice == 16
[L4319]              gas := gas - 21000;
[L4320]  COND TRUE   gas >= 0
[L4321]              assume value_s410 >= 0 && value_s410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4322]              assume msgvalue_MSG == 0;
[L4323]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s410 == to_s410 && (value_s410 > _balances_ERC20[this][from_s410] || value_s410 > _allowed_ERC20[this][from_s410][msgsender_MSG])) && value_s410 >= 0) && value_s410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s410] >= 0) && _balances_ERC20[this][to_s410] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s410] >= 0) && _balances_ERC20[this][from_s410] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s410][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s410][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2445]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s410][msgsender_MSG], value_s410);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND TRUE   !(b_s136 <= a_s136)
[L2132]              revert := true;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND TRUE   revert
[L2445]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s410][msgsender_MSG], value_s410);
[L2446]  COND TRUE   revert
[L592]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L593]               assume !revert && gas >= 0;
[L4323]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L4436]  RET         call CorralChoice_FnxToken(this);

[2020-11-25 16:51:19,354 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:51:19,354 INFO  L82        PathProgramCache]: Analyzing trace with hash 316760484, now seen corresponding path program 1 times
[2020-11-25 16:51:19,355 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:51:19,368 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:51:19,390 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:51:19,391 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:51:19,391 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 16:51:19,392 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:51:19,392 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 16:51:19,393 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 16:51:19,393 INFO  L87              Difference]: Start difference. First operand 2432 states and 2714 transitions. cyclomatic complexity: 284 Second operand 3 states.
[2020-11-25 16:51:19,479 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:51:19,479 INFO  L93              Difference]: Finished difference Result 3217 states and 3661 transitions.
[2020-11-25 16:51:19,479 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 16:51:19,479 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3217 states and 3661 transitions.
[2020-11-25 16:51:19,497 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:51:19,513 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3217 states to 3217 states and 3661 transitions.
[2020-11-25 16:51:19,513 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 872
[2020-11-25 16:51:19,514 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 872
[2020-11-25 16:51:19,515 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3217 states and 3661 transitions.
[2020-11-25 16:51:19,520 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:51:19,520 INFO  L728         BuchiCegarLoop]: Abstraction has 3217 states and 3661 transitions.
[2020-11-25 16:51:19,523 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3217 states and 3661 transitions.
[2020-11-25 16:51:19,555 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3217 to 2792.
[2020-11-25 16:51:19,555 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2792 states.
[2020-11-25 16:51:19,559 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2792 states to 2792 states and 3145 transitions.
[2020-11-25 16:51:19,559 INFO  L751         BuchiCegarLoop]: Abstraction has 2792 states and 3145 transitions.
[2020-11-25 16:51:19,559 INFO  L631         BuchiCegarLoop]: Abstraction has 2792 states and 3145 transitions.
[2020-11-25 16:51:19,559 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 16:51:19,559 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2792 states and 3145 transitions.
[2020-11-25 16:51:19,565 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:51:19,566 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:51:19,566 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:51:19,567 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:51:19,567 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4426]              assume null == 0;
[L4427]  CALL        call this := FreshRefGenerator__success();
[L2000]              havoc newRef;
[L2001]              assume Alloc[newRef] == false;
[L2002]              Alloc[newRef] := true;
[L2003]              assume newRef != null;
[L4427]  RET         call this := FreshRefGenerator__success();
[L4428]              assume now >= 0;
[L4429]              assume DType[this] == FnxToken;
[L4430]              assume msgvalue_MSG == 0;
[L4431]              gas := gas - 53000;
[L4432]  CALL        call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2894]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2768]              assume msgsender_MSG != null;
[L2769]              Balance[this] := 0;
[L2770]              owner_Owned[this] := null;
[L2771]              newOwner_Owned[this] := null;
[L2773]              owner_Owned[this] := msgsender_MSG;
[L2786]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2787]  COND TRUE   revert
[L2894]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2895]  COND TRUE   revert
[L4432]  RET         call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]              assume !revert && gas >= 0;
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND FALSE  !(choice == 18)
[L4311]  COND FALSE  !(choice == 17)
[L4318]  COND TRUE   choice == 16
[L4319]              gas := gas - 21000;
[L4320]  COND TRUE   gas >= 0
[L4321]              assume value_s410 >= 0 && value_s410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4322]              assume msgvalue_MSG == 0;
[L4323]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s410 == to_s410 && (value_s410 > _balances_ERC20[this][from_s410] || value_s410 > _allowed_ERC20[this][from_s410][msgsender_MSG])) && value_s410 >= 0) && value_s410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s410] >= 0) && _balances_ERC20[this][to_s410] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s410] >= 0) && _balances_ERC20[this][from_s410] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s410][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s410][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2445]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s410][msgsender_MSG], value_s410);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND TRUE   !(b_s136 <= a_s136)
[L2132]              revert := true;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND TRUE   revert
[L2445]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s410][msgsender_MSG], value_s410);
[L2446]  COND TRUE   revert
[L592]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L593]               assume !revert && gas >= 0;
[L4323]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L4436]  RET         call CorralChoice_FnxToken(this);

Loop:
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND FALSE  !(choice == 18)
[L4311]  COND FALSE  !(choice == 17)
[L4318]  COND TRUE   choice == 16
[L4319]              gas := gas - 21000;
[L4320]  COND TRUE   gas >= 0
[L4321]              assume value_s410 >= 0 && value_s410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4322]              assume msgvalue_MSG == 0;
[L4323]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s410 == to_s410 && (value_s410 > _balances_ERC20[this][from_s410] || value_s410 > _allowed_ERC20[this][from_s410][msgsender_MSG])) && value_s410 >= 0) && value_s410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s410] >= 0) && _balances_ERC20[this][to_s410] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s410] >= 0) && _balances_ERC20[this][from_s410] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s410][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s410][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2445]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s410][msgsender_MSG], value_s410);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND TRUE   !(b_s136 <= a_s136)
[L2132]              revert := true;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND TRUE   revert
[L2445]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s410][msgsender_MSG], value_s410);
[L2446]  COND TRUE   revert
[L592]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L593]               assume !revert && gas >= 0;
[L4323]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L4436]  RET         call CorralChoice_FnxToken(this);

[2020-11-25 16:51:19,570 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:51:19,570 INFO  L82        PathProgramCache]: Analyzing trace with hash -1944812766, now seen corresponding path program 1 times
[2020-11-25 16:51:19,571 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:51:19,576 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:51:19,591 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:51:19,591 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:51:19,592 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 16:51:19,592 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:51:19,592 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 16:51:19,592 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 16:51:19,592 INFO  L87              Difference]: Start difference. First operand 2792 states and 3145 transitions. cyclomatic complexity: 355 Second operand 3 states.
[2020-11-25 16:51:19,639 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:51:19,639 INFO  L93              Difference]: Finished difference Result 3220 states and 3578 transitions.
[2020-11-25 16:51:19,639 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 16:51:19,639 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3220 states and 3578 transitions.
[2020-11-25 16:51:19,649 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:51:19,660 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3220 states to 3032 states and 3368 transitions.
[2020-11-25 16:51:19,660 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 809
[2020-11-25 16:51:19,661 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 834
[2020-11-25 16:51:19,661 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3032 states and 3368 transitions.
[2020-11-25 16:51:19,664 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:51:19,664 INFO  L728         BuchiCegarLoop]: Abstraction has 3032 states and 3368 transitions.
[2020-11-25 16:51:19,666 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3032 states and 3368 transitions.
[2020-11-25 16:51:19,688 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3032 to 2676.
[2020-11-25 16:51:19,688 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2676 states.
[2020-11-25 16:51:19,691 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2676 states to 2676 states and 2921 transitions.
[2020-11-25 16:51:19,691 INFO  L751         BuchiCegarLoop]: Abstraction has 2676 states and 2921 transitions.
[2020-11-25 16:51:19,691 INFO  L631         BuchiCegarLoop]: Abstraction has 2676 states and 2921 transitions.
[2020-11-25 16:51:19,691 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 16:51:19,691 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2676 states and 2921 transitions.
[2020-11-25 16:51:19,697 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:51:19,697 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:51:19,697 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:51:19,699 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:51:19,700 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4426]              assume null == 0;
[L4427]  CALL        call this := FreshRefGenerator__success();
[L2000]              havoc newRef;
[L2001]              assume Alloc[newRef] == false;
[L2002]              Alloc[newRef] := true;
[L2003]              assume newRef != null;
[L4427]  RET         call this := FreshRefGenerator__success();
[L4428]              assume now >= 0;
[L4429]              assume DType[this] == FnxToken;
[L4430]              assume msgvalue_MSG == 0;
[L4431]              gas := gas - 53000;
[L4432]  CALL        call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2894]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2768]              assume msgsender_MSG != null;
[L2769]              Balance[this] := 0;
[L2770]              owner_Owned[this] := null;
[L2771]              newOwner_Owned[this] := null;
[L2773]              owner_Owned[this] := msgsender_MSG;
[L2786]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2787]  COND FALSE  !(revert)
[L2894]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2895]  COND FALSE  !(revert)
[L2898]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2898]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  COND FALSE  !(revert)
[L2902]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2300]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2300]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]  COND FALSE  !(revert)
[L2304]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]              assume msgsender_MSG != null;
[L2277]              Balance[this] := 0;
[L2278]              _balances_ERC20[this] := zeroRefintArr();
[L2279]              sum__balances0[this] := 0;
[L2280]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2281]              sum__allowed1[this] := 0;
[L2282]              _totalSupply_ERC20[this] := 0;
[L2304]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2305]  COND FALSE  !(revert)
[L2902]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2903]  COND FALSE  !(revert)
[L2906]  CALL        call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2863]              assume msgsender_MSG != null;
[L2864]              Balance[this] := 0;
[L2865]              _name_FnxToken[this] := 699458114;
[L2866]              _symbol_FnxToken[this] := -216537299;
[L2867]              _decimals_FnxToken[this] := 18;
[L2868]              MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] := 500000000;
[L2906]  RET         call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]  COND FALSE  !(revert)
[L4432]  RET         call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]              assume !revert && gas >= 0;
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND FALSE  !(choice == 18)
[L4311]  COND FALSE  !(choice == 17)
[L4318]  COND TRUE   choice == 16
[L4319]              gas := gas - 21000;
[L4320]  COND TRUE   gas >= 0
[L4321]              assume value_s410 >= 0 && value_s410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4322]              assume msgvalue_MSG == 0;
[L4323]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s410 == to_s410 && (value_s410 > _balances_ERC20[this][from_s410] || value_s410 > _allowed_ERC20[this][from_s410][msgsender_MSG])) && value_s410 >= 0) && value_s410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s410] >= 0) && _balances_ERC20[this][to_s410] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s410] >= 0) && _balances_ERC20[this][from_s410] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s410][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s410][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2445]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s410][msgsender_MSG], value_s410);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2445]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s410][msgsender_MSG], value_s410);
[L2446]  COND FALSE  !(revert)
[L2449]              sum__allowed1[from_s410] := sum__allowed1[from_s410] - _allowed_ERC20[this][from_s410][msgsender_MSG];
[L2450]              _allowed_ERC20[this][from_s410][msgsender_MSG] := __var_5;
[L2451]              sum__allowed1[from_s410] := sum__allowed1[from_s410] + _allowed_ERC20[this][from_s410][msgsender_MSG];
[L2452]  COND TRUE   DType[this] == FnxToken
[L2453]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2583]              __var_10 := null;
[L2584]  COND FALSE  !(!(to_s554 != null))
[L2588]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2588]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2589]  COND FALSE  !(revert)
[L2592]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s554];
[L2593]              _balances_ERC20[this][from_s554] := __var_11;
[L2594]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s554];
[L2595]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2085]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2086]  COND FALSE  !(!(c_s93 >= a_s93))
[L2090]              __ret_0_ := c_s93;
[L2595]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2596]  COND FALSE  !(revert)
[L2599]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s554];
[L2600]              _balances_ERC20[this][to_s554] := __var_12;
[L2601]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s554];
[L2602]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2453]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2454]  COND FALSE  !(revert)
[L2465]              assert { :EventEmitted "Approval_ERC20" } true;
[L2466]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L593]               assume !revert && gas >= 0;
[L4323]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L4436]  RET         call CorralChoice_FnxToken(this);

Loop:
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND FALSE  !(choice == 18)
[L4311]  COND FALSE  !(choice == 17)
[L4318]  COND TRUE   choice == 16
[L4319]              gas := gas - 21000;
[L4320]  COND TRUE   gas >= 0
[L4321]              assume value_s410 >= 0 && value_s410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4322]              assume msgvalue_MSG == 0;
[L4323]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s410 == to_s410 && (value_s410 > _balances_ERC20[this][from_s410] || value_s410 > _allowed_ERC20[this][from_s410][msgsender_MSG])) && value_s410 >= 0) && value_s410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s410] >= 0) && _balances_ERC20[this][to_s410] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s410] >= 0) && _balances_ERC20[this][from_s410] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s410][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s410][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2445]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s410][msgsender_MSG], value_s410);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2445]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s410][msgsender_MSG], value_s410);
[L2446]  COND FALSE  !(revert)
[L2449]              sum__allowed1[from_s410] := sum__allowed1[from_s410] - _allowed_ERC20[this][from_s410][msgsender_MSG];
[L2450]              _allowed_ERC20[this][from_s410][msgsender_MSG] := __var_5;
[L2451]              sum__allowed1[from_s410] := sum__allowed1[from_s410] + _allowed_ERC20[this][from_s410][msgsender_MSG];
[L2452]  COND TRUE   DType[this] == FnxToken
[L2453]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2583]              __var_10 := null;
[L2584]  COND FALSE  !(!(to_s554 != null))
[L2588]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2588]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2589]  COND FALSE  !(revert)
[L2592]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s554];
[L2593]              _balances_ERC20[this][from_s554] := __var_11;
[L2594]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s554];
[L2595]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2085]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2086]  COND FALSE  !(!(c_s93 >= a_s93))
[L2090]              __ret_0_ := c_s93;
[L2595]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2596]  COND FALSE  !(revert)
[L2599]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s554];
[L2600]              _balances_ERC20[this][to_s554] := __var_12;
[L2601]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s554];
[L2602]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2453]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2454]  COND FALSE  !(revert)
[L2465]              assert { :EventEmitted "Approval_ERC20" } true;
[L2466]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L593]               assume !revert && gas >= 0;
[L4323]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L4436]  RET         call CorralChoice_FnxToken(this);

[2020-11-25 16:51:19,704 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:51:19,704 INFO  L82        PathProgramCache]: Analyzing trace with hash -1454271116, now seen corresponding path program 1 times
[2020-11-25 16:51:19,705 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:51:19,721 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:51:19,850 INFO  L134       CoverageAnalysis]: Checked inductivity of 22 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 13 trivial. 0 not checked.
[2020-11-25 16:51:19,850 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 16:51:19,850 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-11-25 16:51:19,851 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:51:19,851 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 16:51:19,851 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=156, Unknown=0, NotChecked=0, Total=182
[2020-11-25 16:51:19,851 INFO  L87              Difference]: Start difference. First operand 2676 states and 2921 transitions. cyclomatic complexity: 247 Second operand 14 states.
[2020-11-25 16:51:21,412 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:51:21,412 INFO  L93              Difference]: Finished difference Result 2757 states and 3010 transitions.
[2020-11-25 16:51:21,412 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 16:51:21,412 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2757 states and 3010 transitions.
[2020-11-25 16:51:21,418 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:51:21,426 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2757 states to 2757 states and 3010 transitions.
[2020-11-25 16:51:21,426 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 796
[2020-11-25 16:51:21,426 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 796
[2020-11-25 16:51:21,426 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2757 states and 3010 transitions.
[2020-11-25 16:51:21,428 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:51:21,428 INFO  L728         BuchiCegarLoop]: Abstraction has 2757 states and 3010 transitions.
[2020-11-25 16:51:21,431 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2757 states and 3010 transitions.
[2020-11-25 16:51:21,448 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2757 to 2559.
[2020-11-25 16:51:21,448 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2559 states.
[2020-11-25 16:51:21,451 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2559 states to 2559 states and 2771 transitions.
[2020-11-25 16:51:21,451 INFO  L751         BuchiCegarLoop]: Abstraction has 2559 states and 2771 transitions.
[2020-11-25 16:51:21,451 INFO  L631         BuchiCegarLoop]: Abstraction has 2559 states and 2771 transitions.
[2020-11-25 16:51:21,451 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 16:51:21,451 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2559 states and 2771 transitions.
[2020-11-25 16:51:21,454 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:51:21,454 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:51:21,454 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:51:21,456 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:51:21,456 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4426]              assume null == 0;
[L4427]  CALL        call this := FreshRefGenerator__success();
[L2000]              havoc newRef;
[L2001]              assume Alloc[newRef] == false;
[L2002]              Alloc[newRef] := true;
[L2003]              assume newRef != null;
[L4427]  RET         call this := FreshRefGenerator__success();
[L4428]              assume now >= 0;
[L4429]              assume DType[this] == FnxToken;
[L4430]              assume msgvalue_MSG == 0;
[L4431]              gas := gas - 53000;
[L4432]  CALL        call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2894]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2768]              assume msgsender_MSG != null;
[L2769]              Balance[this] := 0;
[L2770]              owner_Owned[this] := null;
[L2771]              newOwner_Owned[this] := null;
[L2773]              owner_Owned[this] := msgsender_MSG;
[L2786]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2787]  COND FALSE  !(revert)
[L2894]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2895]  COND FALSE  !(revert)
[L2898]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2898]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  COND FALSE  !(revert)
[L2902]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2300]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2300]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]  COND FALSE  !(revert)
[L2304]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]              assume msgsender_MSG != null;
[L2277]              Balance[this] := 0;
[L2278]              _balances_ERC20[this] := zeroRefintArr();
[L2279]              sum__balances0[this] := 0;
[L2280]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2281]              sum__allowed1[this] := 0;
[L2282]              _totalSupply_ERC20[this] := 0;
[L2304]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2305]  COND FALSE  !(revert)
[L2902]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2903]  COND FALSE  !(revert)
[L2906]  CALL        call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2863]              assume msgsender_MSG != null;
[L2864]              Balance[this] := 0;
[L2865]              _name_FnxToken[this] := 699458114;
[L2866]              _symbol_FnxToken[this] := -216537299;
[L2867]              _decimals_FnxToken[this] := 18;
[L2868]              MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] := 500000000;
[L2906]  RET         call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]  COND FALSE  !(revert)
[L4432]  RET         call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]              assume !revert && gas >= 0;
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND FALSE  !(choice == 18)
[L4311]  COND TRUE   choice == 17
[L4312]              gas := gas - 21000;
[L4313]  COND TRUE   gas >= 0
[L4314]              assume value_s361 >= 0 && value_s361 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4315]              assume msgvalue_MSG == 0;
[L4316]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s361, value_s361);
[L506]               havoc __exception;
[L507]               revert := false;
[L508]   COND FALSE  !(__exception)
[L532]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s361, value_s361);
[L2402]              __var_4 := null;
[L2403]  COND FALSE  !(!(spender_s361 != null))
[L2407]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s361];
[L2408]              _allowed_ERC20[this][msgsender_MSG][spender_s361] := value_s361;
[L2409]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s361];
[L2410]              assert { :EventEmitted "Approval_ERC20" } true;
[L2411]              __ret_0_ := true;
[L532]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s361, value_s361);
[L533]               assume !revert && gas >= 0;
[L4316]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s361, value_s361);
[L4436]  RET         call CorralChoice_FnxToken(this);
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND FALSE  !(choice == 18)
[L4311]  COND FALSE  !(choice == 17)
[L4318]  COND TRUE   choice == 16
[L4319]              gas := gas - 21000;
[L4320]  COND TRUE   gas >= 0
[L4321]              assume value_s410 >= 0 && value_s410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4322]              assume msgvalue_MSG == 0;
[L4323]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s410 == to_s410 && (value_s410 > _balances_ERC20[this][from_s410] || value_s410 > _allowed_ERC20[this][from_s410][msgsender_MSG])) && value_s410 >= 0) && value_s410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s410] >= 0) && _balances_ERC20[this][to_s410] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s410] >= 0) && _balances_ERC20[this][from_s410] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s410][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s410][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2445]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s410][msgsender_MSG], value_s410);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2445]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s410][msgsender_MSG], value_s410);
[L2446]  COND FALSE  !(revert)
[L2449]              sum__allowed1[from_s410] := sum__allowed1[from_s410] - _allowed_ERC20[this][from_s410][msgsender_MSG];
[L2450]              _allowed_ERC20[this][from_s410][msgsender_MSG] := __var_5;
[L2451]              sum__allowed1[from_s410] := sum__allowed1[from_s410] + _allowed_ERC20[this][from_s410][msgsender_MSG];
[L2452]  COND FALSE  !(DType[this] == FnxToken)
[L2457]  COND TRUE   DType[this] == ERC20
[L2458]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2583]              __var_10 := null;
[L2584]  COND FALSE  !(!(to_s554 != null))
[L2588]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2588]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2589]  COND FALSE  !(revert)
[L2592]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s554];
[L2593]              _balances_ERC20[this][from_s554] := __var_11;
[L2594]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s554];
[L2595]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2085]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2086]  COND FALSE  !(!(c_s93 >= a_s93))
[L2090]              __ret_0_ := c_s93;
[L2595]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2596]  COND FALSE  !(revert)
[L2599]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s554];
[L2600]              _balances_ERC20[this][to_s554] := __var_12;
[L2601]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s554];
[L2602]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2458]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2459]  COND FALSE  !(revert)
[L2465]              assert { :EventEmitted "Approval_ERC20" } true;
[L2466]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L593]               assume !revert && gas >= 0;
[L4323]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L4436]  RET         call CorralChoice_FnxToken(this);

Loop:
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND FALSE  !(gas >= 0)
[L4436]  RET         call CorralChoice_FnxToken(this);

[2020-11-25 16:51:21,459 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:51:21,459 INFO  L82        PathProgramCache]: Analyzing trace with hash 728390472, now seen corresponding path program 1 times
[2020-11-25 16:51:21,460 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:51:21,470 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:51:21,513 INFO  L134       CoverageAnalysis]: Checked inductivity of 75 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 75 trivial. 0 not checked.
[2020-11-25 16:51:21,513 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:51:21,513 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 16:51:21,514 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:51:21,514 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 16:51:21,514 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 16:51:21,514 INFO  L87              Difference]: Start difference. First operand 2559 states and 2771 transitions. cyclomatic complexity: 215 Second operand 6 states.
[2020-11-25 16:51:21,550 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:51:21,550 INFO  L93              Difference]: Finished difference Result 2595 states and 2806 transitions.
[2020-11-25 16:51:21,551 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 16:51:21,551 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2595 states and 2806 transitions.
[2020-11-25 16:51:21,555 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:51:21,560 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2595 states to 2549 states and 2757 transitions.
[2020-11-25 16:51:21,560 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 708
[2020-11-25 16:51:21,561 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 708
[2020-11-25 16:51:21,561 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2549 states and 2757 transitions.
[2020-11-25 16:51:21,562 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:51:21,562 INFO  L728         BuchiCegarLoop]: Abstraction has 2549 states and 2757 transitions.
[2020-11-25 16:51:21,564 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2549 states and 2757 transitions.
[2020-11-25 16:51:21,578 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2549 to 2549.
[2020-11-25 16:51:21,578 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2549 states.
[2020-11-25 16:51:21,580 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2549 states to 2549 states and 2757 transitions.
[2020-11-25 16:51:21,580 INFO  L751         BuchiCegarLoop]: Abstraction has 2549 states and 2757 transitions.
[2020-11-25 16:51:21,580 INFO  L631         BuchiCegarLoop]: Abstraction has 2549 states and 2757 transitions.
[2020-11-25 16:51:21,580 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 16:51:21,580 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2549 states and 2757 transitions.
[2020-11-25 16:51:21,583 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:51:21,583 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:51:21,583 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:51:21,584 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:51:21,584 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4426]              assume null == 0;
[L4427]  CALL        call this := FreshRefGenerator__success();
[L2000]              havoc newRef;
[L2001]              assume Alloc[newRef] == false;
[L2002]              Alloc[newRef] := true;
[L2003]              assume newRef != null;
[L4427]  RET         call this := FreshRefGenerator__success();
[L4428]              assume now >= 0;
[L4429]              assume DType[this] == FnxToken;
[L4430]              assume msgvalue_MSG == 0;
[L4431]              gas := gas - 53000;
[L4432]  CALL        call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2894]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2768]              assume msgsender_MSG != null;
[L2769]              Balance[this] := 0;
[L2770]              owner_Owned[this] := null;
[L2771]              newOwner_Owned[this] := null;
[L2773]              owner_Owned[this] := msgsender_MSG;
[L2786]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2787]  COND FALSE  !(revert)
[L2894]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2895]  COND FALSE  !(revert)
[L2898]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2898]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  COND FALSE  !(revert)
[L2902]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2300]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2300]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]  COND FALSE  !(revert)
[L2304]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]              assume msgsender_MSG != null;
[L2277]              Balance[this] := 0;
[L2278]              _balances_ERC20[this] := zeroRefintArr();
[L2279]              sum__balances0[this] := 0;
[L2280]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2281]              sum__allowed1[this] := 0;
[L2282]              _totalSupply_ERC20[this] := 0;
[L2304]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2305]  COND FALSE  !(revert)
[L2902]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2903]  COND FALSE  !(revert)
[L2906]  CALL        call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2863]              assume msgsender_MSG != null;
[L2864]              Balance[this] := 0;
[L2865]              _name_FnxToken[this] := 699458114;
[L2866]              _symbol_FnxToken[this] := -216537299;
[L2867]              _decimals_FnxToken[this] := 18;
[L2868]              MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] := 500000000;
[L2906]  RET         call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]  COND FALSE  !(revert)
[L4432]  RET         call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]              assume !revert && gas >= 0;
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND FALSE  !(choice == 18)
[L4311]  COND TRUE   choice == 17
[L4312]              gas := gas - 21000;
[L4313]  COND TRUE   gas >= 0
[L4314]              assume value_s361 >= 0 && value_s361 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4315]              assume msgvalue_MSG == 0;
[L4316]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s361, value_s361);
[L506]               havoc __exception;
[L507]               revert := false;
[L508]   COND FALSE  !(__exception)
[L532]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s361, value_s361);
[L2402]              __var_4 := null;
[L2403]  COND FALSE  !(!(spender_s361 != null))
[L2407]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s361];
[L2408]              _allowed_ERC20[this][msgsender_MSG][spender_s361] := value_s361;
[L2409]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s361];
[L2410]              assert { :EventEmitted "Approval_ERC20" } true;
[L2411]              __ret_0_ := true;
[L532]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s361, value_s361);
[L533]               assume !revert && gas >= 0;
[L4316]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s361, value_s361);
[L4436]  RET         call CorralChoice_FnxToken(this);
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND FALSE  !(choice == 18)
[L4311]  COND FALSE  !(choice == 17)
[L4318]  COND TRUE   choice == 16
[L4319]              gas := gas - 21000;
[L4320]  COND TRUE   gas >= 0
[L4321]              assume value_s410 >= 0 && value_s410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4322]              assume msgvalue_MSG == 0;
[L4323]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s410 == to_s410 && (value_s410 > _balances_ERC20[this][from_s410] || value_s410 > _allowed_ERC20[this][from_s410][msgsender_MSG])) && value_s410 >= 0) && value_s410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s410] >= 0) && _balances_ERC20[this][to_s410] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s410] >= 0) && _balances_ERC20[this][from_s410] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s410][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s410][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2445]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s410][msgsender_MSG], value_s410);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2445]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s410][msgsender_MSG], value_s410);
[L2446]  COND FALSE  !(revert)
[L2449]              sum__allowed1[from_s410] := sum__allowed1[from_s410] - _allowed_ERC20[this][from_s410][msgsender_MSG];
[L2450]              _allowed_ERC20[this][from_s410][msgsender_MSG] := __var_5;
[L2451]              sum__allowed1[from_s410] := sum__allowed1[from_s410] + _allowed_ERC20[this][from_s410][msgsender_MSG];
[L2452]  COND TRUE   DType[this] == FnxToken
[L2453]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2583]              __var_10 := null;
[L2584]  COND FALSE  !(!(to_s554 != null))
[L2588]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2588]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2589]  COND FALSE  !(revert)
[L2592]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s554];
[L2593]              _balances_ERC20[this][from_s554] := __var_11;
[L2594]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s554];
[L2595]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2085]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2086]  COND FALSE  !(!(c_s93 >= a_s93))
[L2090]              __ret_0_ := c_s93;
[L2595]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2596]  COND FALSE  !(revert)
[L2599]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s554];
[L2600]              _balances_ERC20[this][to_s554] := __var_12;
[L2601]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s554];
[L2602]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2453]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2454]  COND FALSE  !(revert)
[L2465]              assert { :EventEmitted "Approval_ERC20" } true;
[L2466]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L593]               assume !revert && gas >= 0;
[L4323]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L4436]  RET         call CorralChoice_FnxToken(this);

Loop:
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND FALSE  !(gas >= 0)
[L4436]  RET         call CorralChoice_FnxToken(this);

[2020-11-25 16:51:21,587 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:51:21,587 INFO  L82        PathProgramCache]: Analyzing trace with hash 1792657850, now seen corresponding path program 1 times
[2020-11-25 16:51:21,588 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:51:21,599 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:51:21,710 INFO  L134       CoverageAnalysis]: Checked inductivity of 75 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 75 trivial. 0 not checked.
[2020-11-25 16:51:21,710 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:51:21,710 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-25 16:51:21,711 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:51:21,711 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-25 16:51:21,711 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=39, Invalid=267, Unknown=0, NotChecked=0, Total=306
[2020-11-25 16:51:21,711 INFO  L87              Difference]: Start difference. First operand 2549 states and 2757 transitions. cyclomatic complexity: 211 Second operand 18 states.
[2020-11-25 16:51:23,406 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:51:23,407 INFO  L93              Difference]: Finished difference Result 2612 states and 2831 transitions.
[2020-11-25 16:51:23,407 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 16:51:23,407 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2612 states and 2831 transitions.
[2020-11-25 16:51:23,411 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:51:23,416 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2612 states to 2612 states and 2831 transitions.
[2020-11-25 16:51:23,417 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 727
[2020-11-25 16:51:23,417 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 727
[2020-11-25 16:51:23,417 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2612 states and 2831 transitions.
[2020-11-25 16:51:23,419 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:51:23,419 INFO  L728         BuchiCegarLoop]: Abstraction has 2612 states and 2831 transitions.
[2020-11-25 16:51:23,421 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2612 states and 2831 transitions.
[2020-11-25 16:51:23,435 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2612 to 2563.
[2020-11-25 16:51:23,435 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2563 states.
[2020-11-25 16:51:23,437 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2563 states to 2563 states and 2781 transitions.
[2020-11-25 16:51:23,437 INFO  L751         BuchiCegarLoop]: Abstraction has 2563 states and 2781 transitions.
[2020-11-25 16:51:23,437 INFO  L631         BuchiCegarLoop]: Abstraction has 2563 states and 2781 transitions.
[2020-11-25 16:51:23,437 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 16:51:23,437 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2563 states and 2781 transitions.
[2020-11-25 16:51:23,440 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:51:23,440 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:51:23,440 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:51:23,444 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:51:23,444 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4426]              assume null == 0;
[L4427]  CALL        call this := FreshRefGenerator__success();
[L2000]              havoc newRef;
[L2001]              assume Alloc[newRef] == false;
[L2002]              Alloc[newRef] := true;
[L2003]              assume newRef != null;
[L4427]  RET         call this := FreshRefGenerator__success();
[L4428]              assume now >= 0;
[L4429]              assume DType[this] == FnxToken;
[L4430]              assume msgvalue_MSG == 0;
[L4431]              gas := gas - 53000;
[L4432]  CALL        call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2894]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2768]              assume msgsender_MSG != null;
[L2769]              Balance[this] := 0;
[L2770]              owner_Owned[this] := null;
[L2771]              newOwner_Owned[this] := null;
[L2773]              owner_Owned[this] := msgsender_MSG;
[L2786]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2787]  COND FALSE  !(revert)
[L2894]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2895]  COND FALSE  !(revert)
[L2898]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2898]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  COND FALSE  !(revert)
[L2902]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2300]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2300]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]  COND FALSE  !(revert)
[L2304]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]              assume msgsender_MSG != null;
[L2277]              Balance[this] := 0;
[L2278]              _balances_ERC20[this] := zeroRefintArr();
[L2279]              sum__balances0[this] := 0;
[L2280]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2281]              sum__allowed1[this] := 0;
[L2282]              _totalSupply_ERC20[this] := 0;
[L2304]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2305]  COND FALSE  !(revert)
[L2902]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2903]  COND FALSE  !(revert)
[L2906]  CALL        call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2863]              assume msgsender_MSG != null;
[L2864]              Balance[this] := 0;
[L2865]              _name_FnxToken[this] := 699458114;
[L2866]              _symbol_FnxToken[this] := -216537299;
[L2867]              _decimals_FnxToken[this] := 18;
[L2868]              MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] := 500000000;
[L2906]  RET         call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]  COND FALSE  !(revert)
[L4432]  RET         call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]              assume !revert && gas >= 0;
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND FALSE  !(choice == 18)
[L4311]  COND FALSE  !(choice == 17)
[L4318]  COND TRUE   choice == 16
[L4319]              gas := gas - 21000;
[L4320]  COND TRUE   gas >= 0
[L4321]              assume value_s410 >= 0 && value_s410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4322]              assume msgvalue_MSG == 0;
[L4323]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s410 == to_s410 && (value_s410 > _balances_ERC20[this][from_s410] || value_s410 > _allowed_ERC20[this][from_s410][msgsender_MSG])) && value_s410 >= 0) && value_s410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s410] >= 0) && _balances_ERC20[this][to_s410] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s410] >= 0) && _balances_ERC20[this][from_s410] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s410][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s410][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2445]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s410][msgsender_MSG], value_s410);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2445]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s410][msgsender_MSG], value_s410);
[L2446]  COND FALSE  !(revert)
[L2449]              sum__allowed1[from_s410] := sum__allowed1[from_s410] - _allowed_ERC20[this][from_s410][msgsender_MSG];
[L2450]              _allowed_ERC20[this][from_s410][msgsender_MSG] := __var_5;
[L2451]              sum__allowed1[from_s410] := sum__allowed1[from_s410] + _allowed_ERC20[this][from_s410][msgsender_MSG];
[L2452]  COND TRUE   DType[this] == FnxToken
[L2453]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2583]              __var_10 := null;
[L2584]  COND FALSE  !(!(to_s554 != null))
[L2588]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2588]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2589]  COND FALSE  !(revert)
[L2592]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s554];
[L2593]              _balances_ERC20[this][from_s554] := __var_11;
[L2594]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s554];
[L2595]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2085]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2086]  COND FALSE  !(!(c_s93 >= a_s93))
[L2090]              __ret_0_ := c_s93;
[L2595]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2596]  COND FALSE  !(revert)
[L2599]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s554];
[L2600]              _balances_ERC20[this][to_s554] := __var_12;
[L2601]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s554];
[L2602]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2453]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2454]  COND FALSE  !(revert)
[L2465]              assert { :EventEmitted "Approval_ERC20" } true;
[L2466]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L593]               assume !revert && gas >= 0;
[L4323]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L4436]  RET         call CorralChoice_FnxToken(this);
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND FALSE  !(choice == 18)
[L4311]  COND FALSE  !(choice == 17)
[L4318]  COND TRUE   choice == 16
[L4319]              gas := gas - 21000;
[L4320]  COND TRUE   gas >= 0
[L4321]              assume value_s410 >= 0 && value_s410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4322]              assume msgvalue_MSG == 0;
[L4323]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s410 == to_s410 && (value_s410 > _balances_ERC20[this][from_s410] || value_s410 > _allowed_ERC20[this][from_s410][msgsender_MSG])) && value_s410 >= 0) && value_s410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s410] >= 0) && _balances_ERC20[this][to_s410] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s410] >= 0) && _balances_ERC20[this][from_s410] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s410][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s410][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2445]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s410][msgsender_MSG], value_s410);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2445]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s410][msgsender_MSG], value_s410);
[L2446]  COND FALSE  !(revert)
[L2449]              sum__allowed1[from_s410] := sum__allowed1[from_s410] - _allowed_ERC20[this][from_s410][msgsender_MSG];
[L2450]              _allowed_ERC20[this][from_s410][msgsender_MSG] := __var_5;
[L2451]              sum__allowed1[from_s410] := sum__allowed1[from_s410] + _allowed_ERC20[this][from_s410][msgsender_MSG];
[L2452]  COND TRUE   DType[this] == FnxToken
[L2453]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2583]              __var_10 := null;
[L2584]  COND FALSE  !(!(to_s554 != null))
[L2588]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2588]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2589]  COND FALSE  !(revert)
[L2592]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s554];
[L2593]              _balances_ERC20[this][from_s554] := __var_11;
[L2594]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s554];
[L2595]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2085]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2086]  COND FALSE  !(!(c_s93 >= a_s93))
[L2090]              __ret_0_ := c_s93;
[L2595]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2596]  COND FALSE  !(revert)
[L2599]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s554];
[L2600]              _balances_ERC20[this][to_s554] := __var_12;
[L2601]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s554];
[L2602]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2453]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2454]  COND FALSE  !(revert)
[L2465]              assert { :EventEmitted "Approval_ERC20" } true;
[L2466]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L593]               assume !revert && gas >= 0;
[L4323]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L4436]  RET         call CorralChoice_FnxToken(this);

Loop:
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND FALSE  !(choice == 18)
[L4311]  COND FALSE  !(choice == 17)
[L4318]  COND TRUE   choice == 16
[L4319]              gas := gas - 21000;
[L4320]  COND TRUE   gas >= 0
[L4321]              assume value_s410 >= 0 && value_s410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4322]              assume msgvalue_MSG == 0;
[L4323]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s410 == to_s410 && (value_s410 > _balances_ERC20[this][from_s410] || value_s410 > _allowed_ERC20[this][from_s410][msgsender_MSG])) && value_s410 >= 0) && value_s410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s410] >= 0) && _balances_ERC20[this][to_s410] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s410] >= 0) && _balances_ERC20[this][from_s410] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s410][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s410][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2445]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s410][msgsender_MSG], value_s410);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2445]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s410][msgsender_MSG], value_s410);
[L2446]  COND FALSE  !(revert)
[L2449]              sum__allowed1[from_s410] := sum__allowed1[from_s410] - _allowed_ERC20[this][from_s410][msgsender_MSG];
[L2450]              _allowed_ERC20[this][from_s410][msgsender_MSG] := __var_5;
[L2451]              sum__allowed1[from_s410] := sum__allowed1[from_s410] + _allowed_ERC20[this][from_s410][msgsender_MSG];
[L2452]  COND TRUE   DType[this] == FnxToken
[L2453]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2583]              __var_10 := null;
[L2584]  COND FALSE  !(!(to_s554 != null))
[L2588]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2588]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2589]  COND FALSE  !(revert)
[L2592]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s554];
[L2593]              _balances_ERC20[this][from_s554] := __var_11;
[L2594]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s554];
[L2595]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2085]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2086]  COND FALSE  !(!(c_s93 >= a_s93))
[L2090]              __ret_0_ := c_s93;
[L2595]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2596]  COND FALSE  !(revert)
[L2599]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s554];
[L2600]              _balances_ERC20[this][to_s554] := __var_12;
[L2601]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s554];
[L2602]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2453]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2454]  COND FALSE  !(revert)
[L2465]              assert { :EventEmitted "Approval_ERC20" } true;
[L2466]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L593]               assume !revert && gas >= 0;
[L4323]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L4436]  RET         call CorralChoice_FnxToken(this);

[2020-11-25 16:51:23,450 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:51:23,450 INFO  L82        PathProgramCache]: Analyzing trace with hash -304595455, now seen corresponding path program 1 times
[2020-11-25 16:51:23,451 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:51:23,465 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:51:23,548 INFO  L134       CoverageAnalysis]: Checked inductivity of 97 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 97 trivial. 0 not checked.
[2020-11-25 16:51:23,548 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:51:23,548 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 16:51:23,548 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:51:23,549 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 16:51:23,549 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=104, Unknown=0, NotChecked=0, Total=132
[2020-11-25 16:51:23,549 INFO  L87              Difference]: Start difference. First operand 2563 states and 2781 transitions. cyclomatic complexity: 223 Second operand 12 states.
[2020-11-25 16:51:24,269 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:51:24,269 INFO  L93              Difference]: Finished difference Result 1455 states and 1576 transitions.
[2020-11-25 16:51:24,269 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 16:51:24,269 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1455 states and 1576 transitions.
[2020-11-25 16:51:24,271 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 16:51:24,271 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1455 states to 0 states and 0 transitions.
[2020-11-25 16:51:24,271 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 16:51:24,272 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 16:51:24,272 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 16:51:24,272 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:51:24,272 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 16:51:24,272 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 16:51:24,272 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 16:51:24,272 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 16:51:24,272 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 16:51:24,272 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 16:51:24,272 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 16:51:24,275 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:51:24 BasicIcfg
[2020-11-25 16:51:24,275 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 16:51:24,275 INFO  L168              Benchmark]: Toolchain (without parser) took 8062.16 ms. Allocated memory was 1.0 GB in the beginning and 1.8 GB in the end (delta: 748.2 MB). Free memory was 935.2 MB in the beginning and 1.6 GB in the end (delta: -634.6 MB). Peak memory consumption was 113.6 MB. Max. memory is 15.3 GB.
[2020-11-25 16:51:24,276 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.19 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 16:51:24,276 INFO  L168              Benchmark]: Boogie Preprocessor took 110.86 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 16:51:24,276 INFO  L168              Benchmark]: UtopiaSpecLang took 62.18 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:51:24,277 INFO  L168              Benchmark]: Boogie Printer took 16.02 ms. Allocated memory is still 1.0 GB. Free memory is still 919.1 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 16:51:24,277 INFO  L168              Benchmark]: RCFGBuilder took 788.65 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 795.6 MB in the end (delta: 123.5 MB). Peak memory consumption was 123.5 MB. Max. memory is 15.3 GB.
[2020-11-25 16:51:24,277 INFO  L168              Benchmark]: UtopiaLTL2Aut took 44.30 ms. Allocated memory is still 1.0 GB. Free memory was 795.6 MB in the beginning and 786.7 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 16:51:24,278 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1232.13 ms. Allocated memory was 1.0 GB in the beginning and 1.3 GB in the end (delta: 227.5 MB). Free memory was 786.7 MB in the beginning and 1.1 GB in the end (delta: -273.0 MB). Peak memory consumption was 175.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:51:24,278 INFO  L168              Benchmark]: BlockEncodingV2 took 128.70 ms. Allocated memory is still 1.3 GB. Free memory was 1.1 GB in the beginning and 993.2 MB in the end (delta: 66.5 MB). Peak memory consumption was 66.5 MB. Max. memory is 15.3 GB.
[2020-11-25 16:51:24,278 INFO  L168              Benchmark]: BuchiAutomizer took 5675.99 ms. Allocated memory was 1.3 GB in the beginning and 1.8 GB in the end (delta: 520.6 MB). Free memory was 993.2 MB in the beginning and 1.6 GB in the end (delta: -576.6 MB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 16:51:24,281 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3836 locations, 6747 edges
  - StatisticsResult: Encoded RCFG
    3754 locations, 6543 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.19 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 110.86 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 62.18 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 16.02 ms. Allocated memory is still 1.0 GB. Free memory is still 919.1 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 788.65 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 795.6 MB in the end (delta: 123.5 MB). Peak memory consumption was 123.5 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 44.30 ms. Allocated memory is still 1.0 GB. Free memory was 795.6 MB in the beginning and 786.7 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1232.13 ms. Allocated memory was 1.0 GB in the beginning and 1.3 GB in the end (delta: 227.5 MB). Free memory was 786.7 MB in the beginning and 1.1 GB in the end (delta: -273.0 MB). Peak memory consumption was 175.4 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 128.70 ms. Allocated memory is still 1.3 GB. Free memory was 1.1 GB in the beginning and 993.2 MB in the end (delta: 66.5 MB). Peak memory consumption was 66.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 5675.99 ms. Allocated memory was 1.3 GB in the beginning and 1.8 GB in the end (delta: 520.6 MB). Free memory was 993.2 MB in the beginning and 1.6 GB in the end (delta: -576.6 MB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1559 locations, 2058 edges
  - StatisticsResult: BuchiProgram size
    3836 locations, 6747 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic). 7 modules have a trivial ranking function, the largest among these consists of 18 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 5.6s and 8 iterations.  TraceHistogramMax:2. Analysis of lassos took 0.7s. Construction of modules took 3.1s. BÃ¼chi inclusion checks took 1.2s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 6 MinimizatonAttempts, 1028 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 2792 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 17573 SDtfs, 12809 SDslu, 32778 SDs, 0 SdLazy, 61299 SolverSat, 2246 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 3.1s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_ERC200) ==> ( <>(fail_transferFrom_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
