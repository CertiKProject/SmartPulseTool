This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 16:59:36,975 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 16:59:36,976 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 16:59:36,989 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 16:59:36,990 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 16:59:36,990 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 16:59:36,991 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 16:59:36,993 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 16:59:36,995 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 16:59:36,996 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 16:59:36,996 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 16:59:36,997 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 16:59:36,997 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 16:59:36,998 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 16:59:37,000 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 16:59:37,000 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 16:59:37,001 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 16:59:37,002 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 16:59:37,004 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 16:59:37,006 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 16:59:37,007 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 16:59:37,008 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 16:59:37,010 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 16:59:37,010 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 16:59:37,010 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 16:59:37,011 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 16:59:37,012 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 16:59:37,013 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 16:59:37,013 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 16:59:37,014 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 16:59:37,014 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 16:59:37,015 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 16:59:37,016 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 16:59:37,017 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 16:59:37,018 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 16:59:37,018 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 16:59:37,019 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 16:59:37,019 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 16:59:37,020 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 16:59:37,020 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 16:59:37,021 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 16:59:37,021 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 16:59:37,029 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 16:59:37,029 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 16:59:37,030 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 16:59:37,030 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 16:59:37,030 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 16:59:37,030 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 16:59:37,030 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 16:59:37,030 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 16:59:37,031 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 16:59:37,031 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 16:59:37,031 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 16:59:37,031 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 16:59:37,031 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 16:59:37,031 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 16:59:37,031 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 16:59:37,031 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 16:59:37,031 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 16:59:37,031 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 16:59:37,032 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 16:59:37,032 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 16:59:37,032 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 16:59:37,032 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 16:59:37,032 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 16:59:37,032 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 16:59:37,032 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 16:59:37,032 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 16:59:37,059 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 16:59:37,072 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 16:59:37,074 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 16:59:37,076 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 16:59:37,076 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 16:59:37,077 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/GMC_0x8Be12dD9Cd9f104BF996C0166ac1Ed6f54A62523_transfer-fail.bpl
[2020-11-25 16:59:37,077 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/GMC_0x8Be12dD9Cd9f104BF996C0166ac1Ed6f54A62523_transfer-fail.bpl'
[2020-11-25 16:59:37,168 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 16:59:37,169 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 16:59:37,170 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 16:59:37,170 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 16:59:37,170 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 16:59:37,186 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "GMC_0x8Be12dD9Cd9f104BF996C0166ac1Ed6f54A62523_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:59:37" (1/1) ...
[2020-11-25 16:59:37,188 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "GMC_0x8Be12dD9Cd9f104BF996C0166ac1Ed6f54A62523_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:59:37" (1/1) ...
[2020-11-25 16:59:37,224 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "GMC_0x8Be12dD9Cd9f104BF996C0166ac1Ed6f54A62523_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:59:37" (1/1) ...
[2020-11-25 16:59:37,225 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "GMC_0x8Be12dD9Cd9f104BF996C0166ac1Ed6f54A62523_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:59:37" (1/1) ...
[2020-11-25 16:59:37,248 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "GMC_0x8Be12dD9Cd9f104BF996C0166ac1Ed6f54A62523_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:59:37" (1/1) ...
[2020-11-25 16:59:37,260 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "GMC_0x8Be12dD9Cd9f104BF996C0166ac1Ed6f54A62523_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:59:37" (1/1) ...
[2020-11-25 16:59:37,269 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "GMC_0x8Be12dD9Cd9f104BF996C0166ac1Ed6f54A62523_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:59:37" (1/1) ...
[2020-11-25 16:59:37,279 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 16:59:37,280 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 16:59:37,280 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 16:59:37,282 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 16:59:37,286 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "GMC_0x8Be12dD9Cd9f104BF996C0166ac1Ed6f54A62523_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:59:37" (1/1) ...
[2020-11-25 16:59:37,310 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(TokenERC20.transfer(to, value), msg.sender != to && (value > balanceOf_TokenERC20[this][msg.sender] || balanceOf_TokenERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][msg.sender] >= 0 &&  balanceOf_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(TokenERC20.transfer)))
[2020-11-25 16:59:37,316 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(TokenERC20.transfer(to, value), msg.sender != to && (value > balanceOf_TokenERC20[this][msg.sender] || balanceOf_TokenERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][msg.sender] >= 0 &&  balanceOf_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(TokenERC20.transfer)))
[2020-11-25 16:59:37,323 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(TokenERC20.transfer(to, value), msg.sender != to && (value > balanceOf_TokenERC20[this][msg.sender] || balanceOf_TokenERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][msg.sender] >= 0 &&  balanceOf_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(TokenERC20.transfer)))
[2020-11-25 16:59:37,330 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender!=_to_s478 && ( _value_s478>balanceOf_TokenERC20[this][msg.sender] || ( balanceOf_TokenERC20[this][_to_s478] + _value_s478 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && _value_s478>=0 ) && _value_s478<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_TokenERC20[this][_to_s478]>=0 ) && balanceOf_TokenERC20[this][_to_s478]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_TokenERC20[this][msg.sender]>=0 ) && balanceOf_TokenERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IdentifierExpression[_to_s478,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[_value_s478,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s478,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IdentifierExpression[_value_s478,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s478,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s478,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s478,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s478,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 16:59:37,336 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(TokenERC20.transfer(to, value), msg.sender != to && (value > balanceOf_TokenERC20[this][msg.sender] || balanceOf_TokenERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][msg.sender] >= 0 &&  balanceOf_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(TokenERC20.transfer)))
[2020-11-25 16:59:37,336 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_TokenERC200) ==> ( <>AP(fail_transfer_TokenERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 16:59:37,346 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:59:37 PropertyContainer
[2020-11-25 16:59:37,347 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 16:59:37,347 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 16:59:37,347 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 16:59:37,347 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 16:59:37,348 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "GMC_0x8Be12dD9Cd9f104BF996C0166ac1Ed6f54A62523_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:59:37" (1/2) ...
[2020-11-25 16:59:37,348 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 16:59:37,348 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 16:59:37,365 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:59:37" (2/2) ...
[2020-11-25 16:59:37,365 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 16:59:37,365 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 16:59:37,365 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 16:59:37,365 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 16:59:37,366 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "GMC_0x8Be12dD9Cd9f104BF996C0166ac1Ed6f54A62523_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:59:37" (1/2) ...
[2020-11-25 16:59:37,428 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 16:59:37,428 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:59:37,428 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 16:59:37,428 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 16:59:37,429 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:59:37,429 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:59:37,429 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:59:37,429 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:59:37,429 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 16:59:37,429 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__success
[2020-11-25 16:59:37,429 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned
[2020-11-25 16:59:37,429 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned
[2020-11-25 16:59:37,429 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned
[2020-11-25 16:59:37,429 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned
[2020-11-25 16:59:37,430 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned
[2020-11-25 16:59:37,430 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned
[2020-11-25 16:59:37,430 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 16:59:37,430 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient
[2020-11-25 16:59:37,430 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient
[2020-11-25 16:59:37,430 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_tokenRecipient
[2020-11-25 16:59:37,430 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 16:59:37,430 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20
[2020-11-25 16:59:37,430 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20
[2020-11-25 16:59:37,431 INFO  L130     BoogieDeclarations]: Found specification of procedure release_TokenERC20
[2020-11-25 16:59:37,431 INFO  L138     BoogieDeclarations]: Found implementation of procedure release_TokenERC20
[2020-11-25 16:59:37,431 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20
[2020-11-25 16:59:37,431 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20
[2020-11-25 16:59:37,431 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 16:59:37,431 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 16:59:37,431 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_TokenERC20__success
[2020-11-25 16:59:37,431 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20
[2020-11-25 16:59:37,431 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20
[2020-11-25 16:59:37,432 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 16:59:37,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 16:59:37,432 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20
[2020-11-25 16:59:37,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20
[2020-11-25 16:59:37,432 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20
[2020-11-25 16:59:37,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20
[2020-11-25 16:59:37,432 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20
[2020-11-25 16:59:37,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20
[2020-11-25 16:59:37,432 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20
[2020-11-25 16:59:37,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20
[2020-11-25 16:59:37,432 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20
[2020-11-25 16:59:37,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20
[2020-11-25 16:59:37,433 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20
[2020-11-25 16:59:37,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20
[2020-11-25 16:59:37,433 INFO  L130     BoogieDeclarations]: Found specification of procedure released_TokenERC20
[2020-11-25 16:59:37,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure released_TokenERC20
[2020-11-25 16:59:37,433 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20
[2020-11-25 16:59:37,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20
[2020-11-25 16:59:37,433 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20
[2020-11-25 16:59:37,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20
[2020-11-25 16:59:37,433 INFO  L130     BoogieDeclarations]: Found specification of procedure GMC_GMC_NoBaseCtor__success
[2020-11-25 16:59:37,434 INFO  L130     BoogieDeclarations]: Found specification of procedure GMC_GMC
[2020-11-25 16:59:37,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure GMC_GMC
[2020-11-25 16:59:37,434 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_GMC__success
[2020-11-25 16:59:37,434 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_GMC
[2020-11-25 16:59:37,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_GMC
[2020-11-25 16:59:37,434 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_GMC
[2020-11-25 16:59:37,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_GMC
[2020-11-25 16:59:37,434 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_GMC
[2020-11-25 16:59:37,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_GMC
[2020-11-25 16:59:37,434 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 16:59:37,435 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 16:59:37,435 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 16:59:37,435 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 16:59:37,435 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyReleased_pre__success
[2020-11-25 16:59:37,435 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 16:59:37,435 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 16:59:37,435 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_owned
[2020-11-25 16:59:37,435 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_owned
[2020-11-25 16:59:37,435 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_tokenRecipient
[2020-11-25 16:59:37,435 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_tokenRecipient
[2020-11-25 16:59:37,436 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_TokenERC20
[2020-11-25 16:59:37,436 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_TokenERC20
[2020-11-25 16:59:37,436 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_GMC
[2020-11-25 16:59:37,436 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 16:59:37,436 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 16:59:37,436 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:59:37,436 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 16:59:37,436 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 16:59:37,436 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:59:37,437 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:59:37,437 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:59:37,437 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:59:37,437 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 16:59:37,437 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__fail
[2020-11-25 16:59:37,437 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__success
[2020-11-25 16:59:37,437 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__fail
[2020-11-25 16:59:37,437 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned__success
[2020-11-25 16:59:37,437 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned__fail
[2020-11-25 16:59:37,437 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned__success
[2020-11-25 16:59:37,437 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned__fail
[2020-11-25 16:59:37,438 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 16:59:37,438 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 16:59:37,438 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 16:59:37,438 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 16:59:37,438 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__success
[2020-11-25 16:59:37,438 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__fail
[2020-11-25 16:59:37,438 INFO  L130     BoogieDeclarations]: Found specification of procedure release_TokenERC20__success
[2020-11-25 16:59:37,438 INFO  L130     BoogieDeclarations]: Found specification of procedure release_TokenERC20__fail
[2020-11-25 16:59:37,438 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 16:59:37,438 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 16:59:37,439 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 16:59:37,439 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 16:59:37,439 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_TokenERC20__fail
[2020-11-25 16:59:37,439 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 16:59:37,439 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 16:59:37,439 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 16:59:37,439 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 16:59:37,439 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20__success
[2020-11-25 16:59:37,439 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20__fail
[2020-11-25 16:59:37,439 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20__success
[2020-11-25 16:59:37,439 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20__fail
[2020-11-25 16:59:37,439 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__success
[2020-11-25 16:59:37,440 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__fail
[2020-11-25 16:59:37,440 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__success
[2020-11-25 16:59:37,440 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__fail
[2020-11-25 16:59:37,440 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__success
[2020-11-25 16:59:37,440 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__fail
[2020-11-25 16:59:37,440 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__success
[2020-11-25 16:59:37,440 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__fail
[2020-11-25 16:59:37,440 INFO  L130     BoogieDeclarations]: Found specification of procedure released_TokenERC20__success
[2020-11-25 16:59:37,440 INFO  L130     BoogieDeclarations]: Found specification of procedure released_TokenERC20__fail
[2020-11-25 16:59:37,440 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__success
[2020-11-25 16:59:37,440 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 16:59:37,440 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__success
[2020-11-25 16:59:37,441 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 16:59:37,441 INFO  L130     BoogieDeclarations]: Found specification of procedure GMC_GMC_NoBaseCtor__fail
[2020-11-25 16:59:37,441 INFO  L130     BoogieDeclarations]: Found specification of procedure GMC_GMC__success
[2020-11-25 16:59:37,441 INFO  L130     BoogieDeclarations]: Found specification of procedure GMC_GMC__fail
[2020-11-25 16:59:37,441 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_GMC__fail
[2020-11-25 16:59:37,441 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_GMC__success
[2020-11-25 16:59:37,441 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_GMC__fail
[2020-11-25 16:59:37,441 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_GMC__success
[2020-11-25 16:59:37,441 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_GMC__fail
[2020-11-25 16:59:37,441 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_GMC__success
[2020-11-25 16:59:37,441 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_GMC__fail
[2020-11-25 16:59:37,441 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 16:59:37,441 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 16:59:37,442 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 16:59:37,442 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 16:59:37,442 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyReleased_pre__fail
[2020-11-25 16:59:37,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 16:59:37,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 16:59:37,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:59:37,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:59:37,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 16:59:37,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 16:59:37,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:59:37,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:59:37,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:59:37,443 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:59:37,443 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:59:37,443 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:59:37,443 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:59:37,443 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:59:37,443 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 16:59:37,443 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 16:59:37,443 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__fail
[2020-11-25 16:59:37,443 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__success
[2020-11-25 16:59:37,443 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__fail
[2020-11-25 16:59:37,443 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__success
[2020-11-25 16:59:37,443 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned__fail
[2020-11-25 16:59:37,443 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned__success
[2020-11-25 16:59:37,444 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned__fail
[2020-11-25 16:59:37,444 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned__success
[2020-11-25 16:59:37,444 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 16:59:37,444 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 16:59:37,444 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 16:59:37,444 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 16:59:37,444 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 16:59:37,444 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 16:59:37,444 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__fail
[2020-11-25 16:59:37,444 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__success
[2020-11-25 16:59:37,444 INFO  L138     BoogieDeclarations]: Found implementation of procedure release_TokenERC20__fail
[2020-11-25 16:59:37,445 INFO  L138     BoogieDeclarations]: Found implementation of procedure release_TokenERC20__success
[2020-11-25 16:59:37,445 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 16:59:37,445 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 16:59:37,445 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 16:59:37,445 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 16:59:37,445 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_TokenERC20__fail
[2020-11-25 16:59:37,445 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_TokenERC20__success
[2020-11-25 16:59:37,445 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 16:59:37,445 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 16:59:37,445 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 16:59:37,445 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 16:59:37,446 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20__fail
[2020-11-25 16:59:37,446 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20__success
[2020-11-25 16:59:37,446 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20__fail
[2020-11-25 16:59:37,446 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20__success
[2020-11-25 16:59:37,446 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__fail
[2020-11-25 16:59:37,446 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__success
[2020-11-25 16:59:37,446 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__fail
[2020-11-25 16:59:37,446 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__success
[2020-11-25 16:59:37,446 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__fail
[2020-11-25 16:59:37,446 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__success
[2020-11-25 16:59:37,446 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__fail
[2020-11-25 16:59:37,447 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__success
[2020-11-25 16:59:37,447 INFO  L138     BoogieDeclarations]: Found implementation of procedure released_TokenERC20__fail
[2020-11-25 16:59:37,447 INFO  L138     BoogieDeclarations]: Found implementation of procedure released_TokenERC20__success
[2020-11-25 16:59:37,447 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 16:59:37,447 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__success
[2020-11-25 16:59:37,447 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 16:59:37,447 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__success
[2020-11-25 16:59:37,447 INFO  L138     BoogieDeclarations]: Found implementation of procedure GMC_GMC_NoBaseCtor__fail
[2020-11-25 16:59:37,447 INFO  L138     BoogieDeclarations]: Found implementation of procedure GMC_GMC_NoBaseCtor__success
[2020-11-25 16:59:37,447 INFO  L138     BoogieDeclarations]: Found implementation of procedure GMC_GMC__fail
[2020-11-25 16:59:37,447 INFO  L138     BoogieDeclarations]: Found implementation of procedure GMC_GMC__success
[2020-11-25 16:59:37,447 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_GMC__fail
[2020-11-25 16:59:37,448 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_GMC__success
[2020-11-25 16:59:37,448 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_GMC__fail
[2020-11-25 16:59:37,448 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_GMC__success
[2020-11-25 16:59:37,448 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_GMC__fail
[2020-11-25 16:59:37,448 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_GMC__success
[2020-11-25 16:59:37,448 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_GMC__fail
[2020-11-25 16:59:37,448 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_GMC__success
[2020-11-25 16:59:37,448 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 16:59:37,448 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 16:59:37,448 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 16:59:37,448 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 16:59:37,449 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 16:59:37,449 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 16:59:37,449 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 16:59:37,449 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 16:59:37,449 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyReleased_pre__fail
[2020-11-25 16:59:37,449 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyReleased_pre__success
[2020-11-25 16:59:37,449 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 16:59:37,449 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 16:59:37,449 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_owned
[2020-11-25 16:59:37,449 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_owned
[2020-11-25 16:59:37,449 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_tokenRecipient
[2020-11-25 16:59:37,449 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_tokenRecipient
[2020-11-25 16:59:37,450 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_TokenERC20
[2020-11-25 16:59:37,450 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_TokenERC20
[2020-11-25 16:59:37,450 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_GMC
[2020-11-25 16:59:37,450 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 16:59:37,450 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 16:59:37,450 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 16:59:38,108 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:59:38,108 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:59:38,165 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 16:59:38,166 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 16:59:38,168 INFO  L202        PluginConnector]: Adding new model GMC_0x8Be12dD9Cd9f104BF996C0166ac1Ed6f54A62523_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:59:38 BoogieIcfgContainer
[2020-11-25 16:59:38,168 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:59:37" (2/2) ...
[2020-11-25 16:59:38,169 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 16:59:38,169 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@1b644022 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:59:38, skipping insertion in model container
[2020-11-25 16:59:38,169 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 16:59:38,169 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 16:59:38,169 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 16:59:38,171 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 16:59:38,171 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "GMC_0x8Be12dD9Cd9f104BF996C0166ac1Ed6f54A62523_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:59:37" (1/3) ...
[2020-11-25 16:59:38,171 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@7188712 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:59:38, skipping insertion in model container
[2020-11-25 16:59:38,171 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:59:37" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 16:59:38,207 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:59:38 NWAContainer
[2020-11-25 16:59:38,208 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 16:59:38,208 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 16:59:38,208 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 16:59:38,209 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 16:59:38,210 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "GMC_0x8Be12dD9Cd9f104BF996C0166ac1Ed6f54A62523_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:59:38" (3/4) ...
[2020-11-25 16:59:38,211 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@38efa28e and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:59:38, skipping insertion in model container
[2020-11-25 16:59:38,211 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:59:38" (4/4) ...
[2020-11-25 16:59:38,214 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 16:59:38,218 INFO  L110   BuchiProductObserver]: Initial RCFG 1831 locations, 2459 edges
[2020-11-25 16:59:38,218 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 16:59:38,229 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 16:59:39,547 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 16:59:39,553 INFO  L110   BuchiProductObserver]: BuchiProgram size 4508 locations, 8014 edges
[2020-11-25 16:59:39,553 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:59:39 BoogieIcfgContainer
[2020-11-25 16:59:39,553 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 16:59:39,554 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 16:59:39,554 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 16:59:39,555 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 16:59:39,556 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:59:39" (1/1) ...
[2020-11-25 16:59:39,647 INFO  L313           BlockEncoder]: Initial Icfg 4508 locations, 8014 edges
[2020-11-25 16:59:39,647 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 16:59:39,648 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 16:59:39,648 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 16:59:39,649 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 16:59:39,663 INFO  L70    emoveInfeasibleEdges]: Removed 81 edges and 14 locations because of local infeasibility
[2020-11-25 16:59:39,677 INFO  L70        RemoveSinkStates]: Removed 118 edges and 62 locations by removing sink states
[2020-11-25 16:59:39,690 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 16:59:39,695 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 16:59:39,699 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 16:59:39,700 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 16:59:39,706 INFO  L313           BlockEncoder]: Encoded RCFG 4406 locations, 7777 edges
[2020-11-25 16:59:39,706 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:59:39 BasicIcfg
[2020-11-25 16:59:39,706 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 16:59:39,707 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 16:59:39,707 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 16:59:39,709 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 16:59:39,710 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:59:39,710 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "GMC_0x8Be12dD9Cd9f104BF996C0166ac1Ed6f54A62523_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:59:37" (1/6) ...
[2020-11-25 16:59:39,711 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@20aef5a1 and model type GMC_0x8Be12dD9Cd9f104BF996C0166ac1Ed6f54A62523_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:59:39, skipping insertion in model container
[2020-11-25 16:59:39,712 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:59:39,712 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:59:37" (2/6) ...
[2020-11-25 16:59:39,712 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@20aef5a1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:59:39, skipping insertion in model container
[2020-11-25 16:59:39,712 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:59:39,712 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "GMC_0x8Be12dD9Cd9f104BF996C0166ac1Ed6f54A62523_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:59:38" (3/6) ...
[2020-11-25 16:59:39,712 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@20aef5a1 and model type GMC_0x8Be12dD9Cd9f104BF996C0166ac1Ed6f54A62523_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:59:39, skipping insertion in model container
[2020-11-25 16:59:39,712 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:59:39,712 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:59:38" (4/6) ...
[2020-11-25 16:59:39,713 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@20aef5a1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:59:39, skipping insertion in model container
[2020-11-25 16:59:39,713 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:59:39,713 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:59:39" (5/6) ...
[2020-11-25 16:59:39,713 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@20aef5a1 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 04:59:39, skipping insertion in model container
[2020-11-25 16:59:39,713 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:59:39,714 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:59:39" (6/6) ...
[2020-11-25 16:59:39,715 INFO  L404   chiAutomizerObserver]: Analyzing ICFG GMC_0x8Be12dD9Cd9f104BF996C0166ac1Ed6f54A62523_transfer-fail.bpl_BEv2
[2020-11-25 16:59:39,754 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 16:59:39,755 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 16:59:39,755 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 16:59:39,755 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 16:59:39,755 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 16:59:39,755 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 16:59:39,755 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 16:59:39,755 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 16:59:39,755 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 16:59:39,801 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4406 states.
[2020-11-25 16:59:39,862 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:59:39,862 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:59:39,862 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:59:39,870 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:59:39,870 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:59:39,870 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 16:59:39,870 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4406 states.
[2020-11-25 16:59:39,892 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:59:39,892 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:59:39,892 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:59:39,894 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:59:39,894 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == GMC;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call GMC_GMC(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call GMC_GMC__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND TRUE   revert
[L1391]  RET         call GMC_GMC__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call GMC_GMC(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;

Loop:
[L4941]  CALL        call CorralChoice_GMC(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s325;
[L4759]              havoc _value_s325;
[L4760]              havoc success_s325;
[L4761]              havoc _spender_s365;
[L4762]              havoc _value_s365;
[L4763]              havoc _extraData_s365;
[L4764]              havoc success_s365;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s781;
[L4783]              havoc freeze_s781;
[L4784]              havoc target_s833;
[L4785]              havoc mintedAmount_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != GMC;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND TRUE   choice == 19
[L4800]              gas := gas - 21000;
[L4801]  COND FALSE  !(gas >= 0)
[L4941]  RET         call CorralChoice_GMC(this);

[2020-11-25 16:59:39,908 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:59:39,908 INFO  L82        PathProgramCache]: Analyzing trace with hash -529274325, now seen corresponding path program 1 times
[2020-11-25 16:59:39,912 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:59:39,929 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:59:39,958 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:59:39,960 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:59:39,961 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:59:40,230 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:59:40,239 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:59:40,239 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:59:40,240 INFO  L87              Difference]: Start difference. First operand 4406 states. Second operand 4 states.
[2020-11-25 16:59:40,629 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:59:40,629 INFO  L93              Difference]: Finished difference Result 2940 states and 3359 transitions.
[2020-11-25 16:59:40,629 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:59:40,630 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2940 states and 3359 transitions.
[2020-11-25 16:59:40,645 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:59:40,667 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2940 states to 2938 states and 3355 transitions.
[2020-11-25 16:59:40,667 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 16:59:40,669 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 669
[2020-11-25 16:59:40,670 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2938 states and 3355 transitions.
[2020-11-25 16:59:40,677 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:59:40,677 INFO  L728         BuchiCegarLoop]: Abstraction has 2938 states and 3355 transitions.
[2020-11-25 16:59:40,692 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2938 states and 3355 transitions.
[2020-11-25 16:59:40,747 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2938 to 2938.
[2020-11-25 16:59:40,747 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2938 states.
[2020-11-25 16:59:40,753 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2938 states to 2938 states and 3355 transitions.
[2020-11-25 16:59:40,754 INFO  L751         BuchiCegarLoop]: Abstraction has 2938 states and 3355 transitions.
[2020-11-25 16:59:40,755 INFO  L631         BuchiCegarLoop]: Abstraction has 2938 states and 3355 transitions.
[2020-11-25 16:59:40,755 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 16:59:40,755 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2938 states and 3355 transitions.
[2020-11-25 16:59:40,763 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:59:40,764 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:59:40,764 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:59:40,766 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:59:40,766 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == GMC;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call GMC_GMC(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call GMC_GMC__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND TRUE   revert
[L1391]  RET         call GMC_GMC__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call GMC_GMC(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;
[L4941]  CALL        call CorralChoice_GMC(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s325;
[L4759]              havoc _value_s325;
[L4760]              havoc success_s325;
[L4761]              havoc _spender_s365;
[L4762]              havoc _value_s365;
[L4763]              havoc _extraData_s365;
[L4764]              havoc success_s365;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s781;
[L4783]              havoc freeze_s781;
[L4784]              havoc target_s833;
[L4785]              havoc mintedAmount_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != GMC;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s478 && (_value_s478 > balanceOf_TokenERC20[this][msgsender_MSG] || balanceOf_TokenERC20[this][_to_s478] + _value_s478 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND FALSE  !(__exception)
[L703]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2755]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2755]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2756]  COND TRUE   revert
[L703]   RET         call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L704]               assume !revert && gas >= 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_GMC(this);

Loop:
[L4941]  CALL        call CorralChoice_GMC(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s325;
[L4759]              havoc _value_s325;
[L4760]              havoc success_s325;
[L4761]              havoc _spender_s365;
[L4762]              havoc _value_s365;
[L4763]              havoc _extraData_s365;
[L4764]              havoc success_s365;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s781;
[L4783]              havoc freeze_s781;
[L4784]              havoc target_s833;
[L4785]              havoc mintedAmount_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != GMC;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s478 && (_value_s478 > balanceOf_TokenERC20[this][msgsender_MSG] || balanceOf_TokenERC20[this][_to_s478] + _value_s478 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND FALSE  !(__exception)
[L703]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2755]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2755]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2756]  COND TRUE   revert
[L703]   RET         call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L704]               assume !revert && gas >= 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_GMC(this);

[2020-11-25 16:59:40,771 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:59:40,771 INFO  L82        PathProgramCache]: Analyzing trace with hash 1299697444, now seen corresponding path program 1 times
[2020-11-25 16:59:40,772 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:59:40,782 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:59:40,810 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:59:40,810 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:59:40,810 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:59:40,811 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:59:40,812 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:59:40,812 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:59:40,812 INFO  L87              Difference]: Start difference. First operand 2938 states and 3355 transitions. cyclomatic complexity: 419 Second operand 4 states.
[2020-11-25 16:59:41,443 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:59:41,444 INFO  L93              Difference]: Finished difference Result 3864 states and 4367 transitions.
[2020-11-25 16:59:41,444 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:59:41,444 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3864 states and 4367 transitions.
[2020-11-25 16:59:41,458 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:59:41,476 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3864 states to 3594 states and 4027 transitions.
[2020-11-25 16:59:41,476 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 803
[2020-11-25 16:59:41,478 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 831
[2020-11-25 16:59:41,478 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3594 states and 4027 transitions.
[2020-11-25 16:59:41,485 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:59:41,485 INFO  L728         BuchiCegarLoop]: Abstraction has 3594 states and 4027 transitions.
[2020-11-25 16:59:41,489 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3594 states and 4027 transitions.
[2020-11-25 16:59:41,523 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3594 to 3200.
[2020-11-25 16:59:41,523 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3200 states.
[2020-11-25 16:59:41,527 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3200 states to 3200 states and 3535 transitions.
[2020-11-25 16:59:41,527 INFO  L751         BuchiCegarLoop]: Abstraction has 3200 states and 3535 transitions.
[2020-11-25 16:59:41,527 INFO  L631         BuchiCegarLoop]: Abstraction has 3200 states and 3535 transitions.
[2020-11-25 16:59:41,528 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 16:59:41,528 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3200 states and 3535 transitions.
[2020-11-25 16:59:41,535 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:59:41,535 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:59:41,535 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:59:41,537 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:59:41,537 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == GMC;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call GMC_GMC(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call GMC_GMC__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND FALSE  !(revert)
[L3108]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L2489]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L2489]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2490]  COND FALSE  !(revert)
[L2493]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2452]              assume msgsender_MSG != null;
[L2453]              Balance[this] := 0;
[L2454]              name_TokenERC20[this] := -756920386;
[L2455]              symbol_TokenERC20[this] := -324062207;
[L2456]              decimals_TokenERC20[this] := 18;
[L2457]              totalSupply_TokenERC20[this] := 900000000000000000000000000;
[L2458]              released_TokenERC20[this] := true;
[L2459]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2460]              sum_balanceOf0[this] := 0;
[L2461]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2462]              sum_allowance1[this] := 0;
[L2464]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2465]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s261, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2466]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2467]              balanceOf_TokenERC20[this][msgsender_MSG] := 0;
[L2468]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2469]              name_TokenERC20[this] := -756920386;
[L2470]              symbol_TokenERC20[this] := -324062207;
[L2493]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2494]  COND FALSE  !(revert)
[L3108]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3109]  COND FALSE  !(revert)
[L3112]  CALL        call GMC_GMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3080]              assume msgsender_MSG != null;
[L3081]              Balance[this] := 0;
[L3082]              frozenAccount_GMC[this] := zeroRefboolArr();
[L3112]  RET         call GMC_GMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3113]  COND FALSE  !(revert)
[L1391]  RET         call GMC_GMC__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call GMC_GMC(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;
[L4941]  CALL        call CorralChoice_GMC(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s325;
[L4759]              havoc _value_s325;
[L4760]              havoc success_s325;
[L4761]              havoc _spender_s365;
[L4762]              havoc _value_s365;
[L4763]              havoc _extraData_s365;
[L4764]              havoc success_s365;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s781;
[L4783]              havoc freeze_s781;
[L4784]              havoc target_s833;
[L4785]              havoc mintedAmount_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != GMC;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s478 && (_value_s478 > balanceOf_TokenERC20[this][msgsender_MSG] || balanceOf_TokenERC20[this][_to_s478] + _value_s478 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND FALSE  !(__exception)
[L703]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2755]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2755]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2756]  COND FALSE  !(revert)
[L2759]  COND TRUE   DType[this] == GMC
[L2760]  CALL        call _transfer~address~address~uint256_GMC__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L3169]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L3169]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3170]  COND FALSE  !(revert)
[L3173]              __var_16 := null;
[L3174]  COND FALSE  !(!(_to_s760 != null))
[L3178]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3182]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s760]))
[L3186]  COND FALSE  !(!!frozenAccount_GMC[this][_from_s760])
[L3190]  COND FALSE  !(!!frozenAccount_GMC[this][_to_s760])
[L3194]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L3194]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L3195]  COND FALSE  !(revert)
[L3198]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s760];
[L3199]              balanceOf_TokenERC20[this][_from_s760] := __var_17;
[L3200]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s760];
[L3201]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L3201]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L3202]  COND FALSE  !(revert)
[L3205]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s760];
[L3206]              balanceOf_TokenERC20[this][_to_s760] := __var_18;
[L3207]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s760];
[L3208]              assert { :EventEmitted "Transfer_GMC" } true;
[L2760]  RET         call _transfer~address~address~uint256_GMC__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2761]  COND FALSE  !(revert)
[L2772]              success_s478 := true;
[L703]   RET         call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L704]               assume !revert && gas >= 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_GMC(this);

Loop:
[L4941]  CALL        call CorralChoice_GMC(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s325;
[L4759]              havoc _value_s325;
[L4760]              havoc success_s325;
[L4761]              havoc _spender_s365;
[L4762]              havoc _value_s365;
[L4763]              havoc _extraData_s365;
[L4764]              havoc success_s365;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s781;
[L4783]              havoc freeze_s781;
[L4784]              havoc target_s833;
[L4785]              havoc mintedAmount_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != GMC;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s478 && (_value_s478 > balanceOf_TokenERC20[this][msgsender_MSG] || balanceOf_TokenERC20[this][_to_s478] + _value_s478 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND FALSE  !(__exception)
[L703]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2755]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2755]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2756]  COND FALSE  !(revert)
[L2759]  COND TRUE   DType[this] == GMC
[L2760]  CALL        call _transfer~address~address~uint256_GMC__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L3169]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L3169]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3170]  COND FALSE  !(revert)
[L3173]              __var_16 := null;
[L3174]  COND FALSE  !(!(_to_s760 != null))
[L3178]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3182]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s760]))
[L3186]  COND FALSE  !(!!frozenAccount_GMC[this][_from_s760])
[L3190]  COND FALSE  !(!!frozenAccount_GMC[this][_to_s760])
[L3194]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L3194]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L3195]  COND FALSE  !(revert)
[L3198]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s760];
[L3199]              balanceOf_TokenERC20[this][_from_s760] := __var_17;
[L3200]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s760];
[L3201]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L3201]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L3202]  COND FALSE  !(revert)
[L3205]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s760];
[L3206]              balanceOf_TokenERC20[this][_to_s760] := __var_18;
[L3207]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s760];
[L3208]              assert { :EventEmitted "Transfer_GMC" } true;
[L2760]  RET         call _transfer~address~address~uint256_GMC__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2761]  COND FALSE  !(revert)
[L2772]              success_s478 := true;
[L703]   RET         call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L704]               assume !revert && gas >= 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_GMC(this);

[2020-11-25 16:59:41,542 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:59:41,542 INFO  L82        PathProgramCache]: Analyzing trace with hash 1859017816, now seen corresponding path program 1 times
[2020-11-25 16:59:41,542 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:59:41,565 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:59:41,768 INFO  L134       CoverageAnalysis]: Checked inductivity of 15 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 15 trivial. 0 not checked.
[2020-11-25 16:59:41,768 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:59:41,768 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 16:59:41,769 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:59:41,769 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 16:59:41,769 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=155, Unknown=0, NotChecked=0, Total=182
[2020-11-25 16:59:41,770 INFO  L87              Difference]: Start difference. First operand 3200 states and 3535 transitions. cyclomatic complexity: 337 Second operand 14 states.
[2020-11-25 16:59:43,534 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:59:43,534 INFO  L93              Difference]: Finished difference Result 3298 states and 3651 transitions.
[2020-11-25 16:59:43,534 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 16:59:43,534 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3298 states and 3651 transitions.
[2020-11-25 16:59:43,542 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:59:43,552 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3298 states to 3298 states and 3651 transitions.
[2020-11-25 16:59:43,552 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 802
[2020-11-25 16:59:43,552 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 802
[2020-11-25 16:59:43,553 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3298 states and 3651 transitions.
[2020-11-25 16:59:43,555 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:59:43,555 INFO  L728         BuchiCegarLoop]: Abstraction has 3298 states and 3651 transitions.
[2020-11-25 16:59:43,558 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3298 states and 3651 transitions.
[2020-11-25 16:59:43,580 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3298 to 3089.
[2020-11-25 16:59:43,580 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3089 states.
[2020-11-25 16:59:43,583 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3089 states to 3089 states and 3394 transitions.
[2020-11-25 16:59:43,583 INFO  L751         BuchiCegarLoop]: Abstraction has 3089 states and 3394 transitions.
[2020-11-25 16:59:43,583 INFO  L631         BuchiCegarLoop]: Abstraction has 3089 states and 3394 transitions.
[2020-11-25 16:59:43,583 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 16:59:43,583 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3089 states and 3394 transitions.
[2020-11-25 16:59:43,587 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:59:43,587 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:59:43,587 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:59:43,590 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:59:43,590 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == GMC;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call GMC_GMC(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call GMC_GMC__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND FALSE  !(revert)
[L3108]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L2489]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L2489]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2490]  COND FALSE  !(revert)
[L2493]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2452]              assume msgsender_MSG != null;
[L2453]              Balance[this] := 0;
[L2454]              name_TokenERC20[this] := -756920386;
[L2455]              symbol_TokenERC20[this] := -324062207;
[L2456]              decimals_TokenERC20[this] := 18;
[L2457]              totalSupply_TokenERC20[this] := 900000000000000000000000000;
[L2458]              released_TokenERC20[this] := true;
[L2459]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2460]              sum_balanceOf0[this] := 0;
[L2461]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2462]              sum_allowance1[this] := 0;
[L2464]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2465]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s261, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2466]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2467]              balanceOf_TokenERC20[this][msgsender_MSG] := 0;
[L2468]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2469]              name_TokenERC20[this] := -756920386;
[L2470]              symbol_TokenERC20[this] := -324062207;
[L2493]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2494]  COND FALSE  !(revert)
[L3108]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3109]  COND FALSE  !(revert)
[L3112]  CALL        call GMC_GMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3080]              assume msgsender_MSG != null;
[L3081]              Balance[this] := 0;
[L3082]              frozenAccount_GMC[this] := zeroRefboolArr();
[L3112]  RET         call GMC_GMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3113]  COND FALSE  !(revert)
[L1391]  RET         call GMC_GMC__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call GMC_GMC(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;
[L4941]  CALL        call CorralChoice_GMC(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s325;
[L4759]              havoc _value_s325;
[L4760]              havoc success_s325;
[L4761]              havoc _spender_s365;
[L4762]              havoc _value_s365;
[L4763]              havoc _extraData_s365;
[L4764]              havoc success_s365;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s781;
[L4783]              havoc freeze_s781;
[L4784]              havoc target_s833;
[L4785]              havoc mintedAmount_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != GMC;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s478 && (_value_s478 > balanceOf_TokenERC20[this][msgsender_MSG] || balanceOf_TokenERC20[this][_to_s478] + _value_s478 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND FALSE  !(__exception)
[L703]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2755]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2755]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2756]  COND FALSE  !(revert)
[L2759]  COND FALSE  !(DType[this] == GMC)
[L2764]  COND TRUE   DType[this] == TokenERC20
[L2765]  CALL        call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2686]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2686]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2687]  COND FALSE  !(revert)
[L2690]              __var_6 := null;
[L2691]  COND FALSE  !(!(_to_s457 != null))
[L2695]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s457] >= _value_s457))
[L2699]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s457] + _value_s457) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_TokenERC20[this][_to_s457]))
[L2703]  CALL        call previousBalances_s457 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s457], balanceOf_TokenERC20[this][_to_s457]);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L2703]  RET         call previousBalances_s457 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s457], balanceOf_TokenERC20[this][_to_s457]);
[L2704]  COND FALSE  !(revert)
[L2707]              previousBalances_s457 := previousBalances_s457;
[L2708]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s457], _value_s457);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L2708]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s457], _value_s457);
[L2709]  COND FALSE  !(revert)
[L2712]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s457];
[L2713]              balanceOf_TokenERC20[this][_from_s457] := __var_7;
[L2714]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s457];
[L2715]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s457], _value_s457);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L2715]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s457], _value_s457);
[L2716]  COND FALSE  !(revert)
[L2719]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s457];
[L2720]              balanceOf_TokenERC20[this][_to_s457] := __var_8;
[L2721]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s457];
[L2722]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L2723]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s457], balanceOf_TokenERC20[this][_to_s457]);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L2723]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s457], balanceOf_TokenERC20[this][_to_s457]);
[L2724]  COND FALSE  !(revert)
[L2727]              assert __var_9 == previousBalances_s457;
[L2765]  RET         call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2766]  COND FALSE  !(revert)
[L2772]              success_s478 := true;
[L703]   RET         call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L704]               assume !revert && gas >= 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_GMC(this);

Loop:
[L4941]  CALL        call CorralChoice_GMC(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s325;
[L4759]              havoc _value_s325;
[L4760]              havoc success_s325;
[L4761]              havoc _spender_s365;
[L4762]              havoc _value_s365;
[L4763]              havoc _extraData_s365;
[L4764]              havoc success_s365;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s781;
[L4783]              havoc freeze_s781;
[L4784]              havoc target_s833;
[L4785]              havoc mintedAmount_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != GMC;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s478 && (_value_s478 > balanceOf_TokenERC20[this][msgsender_MSG] || balanceOf_TokenERC20[this][_to_s478] + _value_s478 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND FALSE  !(__exception)
[L703]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2755]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2755]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2756]  COND FALSE  !(revert)
[L2759]  COND FALSE  !(DType[this] == GMC)
[L2764]  COND TRUE   DType[this] == TokenERC20
[L2765]  CALL        call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2686]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2686]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2687]  COND FALSE  !(revert)
[L2690]              __var_6 := null;
[L2691]  COND FALSE  !(!(_to_s457 != null))
[L2695]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s457] >= _value_s457))
[L2699]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s457] + _value_s457) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_TokenERC20[this][_to_s457]))
[L2703]  CALL        call previousBalances_s457 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s457], balanceOf_TokenERC20[this][_to_s457]);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L2703]  RET         call previousBalances_s457 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s457], balanceOf_TokenERC20[this][_to_s457]);
[L2704]  COND FALSE  !(revert)
[L2707]              previousBalances_s457 := previousBalances_s457;
[L2708]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s457], _value_s457);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L2708]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s457], _value_s457);
[L2709]  COND FALSE  !(revert)
[L2712]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s457];
[L2713]              balanceOf_TokenERC20[this][_from_s457] := __var_7;
[L2714]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s457];
[L2715]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s457], _value_s457);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L2715]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s457], _value_s457);
[L2716]  COND FALSE  !(revert)
[L2719]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s457];
[L2720]              balanceOf_TokenERC20[this][_to_s457] := __var_8;
[L2721]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s457];
[L2722]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L2723]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s457], balanceOf_TokenERC20[this][_to_s457]);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L2723]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s457], balanceOf_TokenERC20[this][_to_s457]);
[L2724]  COND FALSE  !(revert)
[L2727]              assert __var_9 == previousBalances_s457;
[L2765]  RET         call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2766]  COND FALSE  !(revert)
[L2772]              success_s478 := true;
[L703]   RET         call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L704]               assume !revert && gas >= 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_GMC(this);

[2020-11-25 16:59:43,593 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:59:43,593 INFO  L82        PathProgramCache]: Analyzing trace with hash 21339681, now seen corresponding path program 1 times
[2020-11-25 16:59:43,594 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:59:43,602 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:59:43,645 INFO  L134       CoverageAnalysis]: Checked inductivity of 30 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 30 trivial. 0 not checked.
[2020-11-25 16:59:43,645 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:59:43,645 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 16:59:43,646 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:59:43,646 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 16:59:43,646 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 16:59:43,646 INFO  L87              Difference]: Start difference. First operand 3089 states and 3394 transitions. cyclomatic complexity: 308 Second operand 6 states.
[2020-11-25 16:59:43,701 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:59:43,701 INFO  L93              Difference]: Finished difference Result 3103 states and 3404 transitions.
[2020-11-25 16:59:43,701 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 16:59:43,701 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3103 states and 3404 transitions.
[2020-11-25 16:59:43,726 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:59:43,738 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3103 states to 3073 states and 3369 transitions.
[2020-11-25 16:59:43,738 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 719
[2020-11-25 16:59:43,738 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 719
[2020-11-25 16:59:43,739 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3073 states and 3369 transitions.
[2020-11-25 16:59:43,741 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:59:43,741 INFO  L728         BuchiCegarLoop]: Abstraction has 3073 states and 3369 transitions.
[2020-11-25 16:59:43,743 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3073 states and 3369 transitions.
[2020-11-25 16:59:43,758 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3073 to 3062.
[2020-11-25 16:59:43,758 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3062 states.
[2020-11-25 16:59:43,760 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3062 states to 3062 states and 3358 transitions.
[2020-11-25 16:59:43,761 INFO  L751         BuchiCegarLoop]: Abstraction has 3062 states and 3358 transitions.
[2020-11-25 16:59:43,761 INFO  L631         BuchiCegarLoop]: Abstraction has 3062 states and 3358 transitions.
[2020-11-25 16:59:43,761 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 16:59:43,761 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3062 states and 3358 transitions.
[2020-11-25 16:59:43,764 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:59:43,764 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:59:43,764 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:59:43,766 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:59:43,766 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == GMC;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call GMC_GMC(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND TRUE   __exception
[L1366]              __tmp__Balance := Balance;
[L1367]              __tmp__DType := DType;
[L1368]              __tmp__Alloc := Alloc;
[L1369]              __tmp__balance_ADDR := balance_ADDR;
[L1370]              __tmp__M_Ref_int := M_Ref_int;
[L1371]              __tmp__sum_balanceOf0 := sum_balanceOf0;
[L1372]              __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L1373]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1374]              __tmp__sum_allowance1 := sum_allowance1;
[L1375]              __tmp__M_Ref_bool := M_Ref_bool;
[L1376]              __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L1377]              __tmp__Length := Length;
[L1378]              __tmp__now := now;
[L1379]              __tmp__owner_owned := owner_owned;
[L1380]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1381]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1382]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1383]              __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L1384]              __tmp__released_TokenERC20 := released_TokenERC20;
[L1385]              __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L1386]              __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L1387]              __tmp__frozenAccount_GMC := frozenAccount_GMC;
[L1388]  CALL        call GMC_GMC__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3088]  CALL        call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L2347]  CALL        call owned_owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2328]              assume msgsender_MSG != null;
[L2329]              __tmp__Balance[this] := 0;
[L2330]              __tmp__owner_owned[this] := null;
[L2332]              __tmp__owner_owned[this] := msgsender_MSG;
[L2347]  RET         call owned_owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2348]  COND FALSE  !(revert)
[L3088]  RET         call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L3089]  COND FALSE  !(revert)
[L3092]  CALL        call TokenERC20_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L2476]  CALL        call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L2347]  CALL        call owned_owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2328]              assume msgsender_MSG != null;
[L2329]              __tmp__Balance[this] := 0;
[L2330]              __tmp__owner_owned[this] := null;
[L2332]              __tmp__owner_owned[this] := msgsender_MSG;
[L2347]  RET         call owned_owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2348]  COND FALSE  !(revert)
[L2476]  RET         call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L2477]  COND FALSE  !(revert)
[L2480]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2427]              assume msgsender_MSG != null;
[L2428]              __tmp__Balance[this] := 0;
[L2429]              __tmp__name_TokenERC20[this] := -756920386;
[L2430]              __tmp__symbol_TokenERC20[this] := -324062207;
[L2431]              __tmp__decimals_TokenERC20[this] := 18;
[L2432]              __tmp__totalSupply_TokenERC20[this] := 900000000000000000000000000;
[L2433]              __tmp__released_TokenERC20[this] := true;
[L2434]              __tmp__balanceOf_TokenERC20[this] := zeroRefintArr();
[L2435]              __tmp__sum_balanceOf0[this] := 0;
[L2436]              __tmp__allowance_TokenERC20[this] := zeroRefRefintArr();
[L2437]              __tmp__sum_allowance1[this] := 0;
[L2439]              __var_1 := __tmp__decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2440]              __tmp__totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s261, nonlinearPow(10, __tmp__decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2441]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_TokenERC20[this][msgsender_MSG];
[L2442]              __tmp__balanceOf_TokenERC20[this][msgsender_MSG] := 0;
[L2443]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_TokenERC20[this][msgsender_MSG];
[L2444]              __tmp__name_TokenERC20[this] := -756920386;
[L2445]              __tmp__symbol_TokenERC20[this] := -324062207;
[L2480]  RET         call TokenERC20_TokenERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2481]  COND FALSE  !(revert)
[L3092]  RET         call TokenERC20_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3093]  COND FALSE  !(revert)
[L3096]  CALL        call GMC_GMC_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3071]              assume msgsender_MSG != null;
[L3072]              __tmp__Balance[this] := 0;
[L3073]              __tmp__frozenAccount_GMC[this] := zeroRefboolArr();
[L3096]  RET         call GMC_GMC_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3097]  COND FALSE  !(revert)
[L1388]  RET         call GMC_GMC__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1389]              assume revert || gas < 0;
[L4937]  RET         call GMC_GMC(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;
[L4941]  CALL        call CorralChoice_GMC(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s325;
[L4759]              havoc _value_s325;
[L4760]              havoc success_s325;
[L4761]              havoc _spender_s365;
[L4762]              havoc _value_s365;
[L4763]              havoc _extraData_s365;
[L4764]              havoc success_s365;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s781;
[L4783]              havoc freeze_s781;
[L4784]              havoc target_s833;
[L4785]              havoc mintedAmount_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != GMC;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s478 && (_value_s478 > balanceOf_TokenERC20[this][msgsender_MSG] || balanceOf_TokenERC20[this][_to_s478] + _value_s478 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND FALSE  !(__exception)
[L703]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2755]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2755]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2756]  COND FALSE  !(revert)
[L2759]  COND TRUE   DType[this] == GMC
[L2760]  CALL        call _transfer~address~address~uint256_GMC__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L3169]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L3169]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3170]  COND FALSE  !(revert)
[L3173]              __var_16 := null;
[L3174]  COND FALSE  !(!(_to_s760 != null))
[L3178]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3182]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s760]))
[L3186]  COND FALSE  !(!!frozenAccount_GMC[this][_from_s760])
[L3190]  COND FALSE  !(!!frozenAccount_GMC[this][_to_s760])
[L3194]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L3194]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L3195]  COND FALSE  !(revert)
[L3198]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s760];
[L3199]              balanceOf_TokenERC20[this][_from_s760] := __var_17;
[L3200]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s760];
[L3201]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L3201]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L3202]  COND FALSE  !(revert)
[L3205]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s760];
[L3206]              balanceOf_TokenERC20[this][_to_s760] := __var_18;
[L3207]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s760];
[L3208]              assert { :EventEmitted "Transfer_GMC" } true;
[L2760]  RET         call _transfer~address~address~uint256_GMC__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2761]  COND FALSE  !(revert)
[L2772]              success_s478 := true;
[L703]   RET         call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L704]               assume !revert && gas >= 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_GMC(this);

Loop:
[L4941]  CALL        call CorralChoice_GMC(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s325;
[L4759]              havoc _value_s325;
[L4760]              havoc success_s325;
[L4761]              havoc _spender_s365;
[L4762]              havoc _value_s365;
[L4763]              havoc _extraData_s365;
[L4764]              havoc success_s365;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s781;
[L4783]              havoc freeze_s781;
[L4784]              havoc target_s833;
[L4785]              havoc mintedAmount_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != GMC;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s478 && (_value_s478 > balanceOf_TokenERC20[this][msgsender_MSG] || balanceOf_TokenERC20[this][_to_s478] + _value_s478 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND FALSE  !(__exception)
[L703]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2755]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2755]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2756]  COND FALSE  !(revert)
[L2759]  COND TRUE   DType[this] == GMC
[L2760]  CALL        call _transfer~address~address~uint256_GMC__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L3169]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L3169]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3170]  COND FALSE  !(revert)
[L3173]              __var_16 := null;
[L3174]  COND FALSE  !(!(_to_s760 != null))
[L3178]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3182]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s760]))
[L3186]  COND FALSE  !(!!frozenAccount_GMC[this][_from_s760])
[L3190]  COND FALSE  !(!!frozenAccount_GMC[this][_to_s760])
[L3194]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L3194]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L3195]  COND FALSE  !(revert)
[L3198]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s760];
[L3199]              balanceOf_TokenERC20[this][_from_s760] := __var_17;
[L3200]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s760];
[L3201]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L3201]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L3202]  COND FALSE  !(revert)
[L3205]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s760];
[L3206]              balanceOf_TokenERC20[this][_to_s760] := __var_18;
[L3207]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s760];
[L3208]              assert { :EventEmitted "Transfer_GMC" } true;
[L2760]  RET         call _transfer~address~address~uint256_GMC__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2761]  COND FALSE  !(revert)
[L2772]              success_s478 := true;
[L703]   RET         call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L704]               assume !revert && gas >= 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_GMC(this);

[2020-11-25 16:59:43,772 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:59:43,772 INFO  L82        PathProgramCache]: Analyzing trace with hash -1950113654, now seen corresponding path program 1 times
[2020-11-25 16:59:43,772 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:59:43,780 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:59:43,810 INFO  L134       CoverageAnalysis]: Checked inductivity of 15 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 15 trivial. 0 not checked.
[2020-11-25 16:59:43,810 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:59:43,811 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:59:43,811 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:59:43,811 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:59:43,811 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:59:43,811 INFO  L87              Difference]: Start difference. First operand 3062 states and 3358 transitions. cyclomatic complexity: 299 Second operand 4 states.
[2020-11-25 16:59:44,015 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:59:44,015 INFO  L93              Difference]: Finished difference Result 3834 states and 4330 transitions.
[2020-11-25 16:59:44,015 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:59:44,015 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3834 states and 4330 transitions.
[2020-11-25 16:59:44,023 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 16:59:44,032 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3834 states to 3743 states and 4238 transitions.
[2020-11-25 16:59:44,032 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 892
[2020-11-25 16:59:44,033 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 892
[2020-11-25 16:59:44,033 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3743 states and 4238 transitions.
[2020-11-25 16:59:44,035 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:59:44,035 INFO  L728         BuchiCegarLoop]: Abstraction has 3743 states and 4238 transitions.
[2020-11-25 16:59:44,038 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3743 states and 4238 transitions.
[2020-11-25 16:59:44,053 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3743 to 2971.
[2020-11-25 16:59:44,054 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2971 states.
[2020-11-25 16:59:44,056 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2971 states to 2971 states and 3265 transitions.
[2020-11-25 16:59:44,056 INFO  L751         BuchiCegarLoop]: Abstraction has 2971 states and 3265 transitions.
[2020-11-25 16:59:44,056 INFO  L631         BuchiCegarLoop]: Abstraction has 2971 states and 3265 transitions.
[2020-11-25 16:59:44,056 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 16:59:44,056 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2971 states and 3265 transitions.
[2020-11-25 16:59:44,059 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:59:44,059 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:59:44,059 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:59:44,061 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:59:44,061 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == GMC;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call GMC_GMC(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call GMC_GMC__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND FALSE  !(revert)
[L3108]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L2489]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L2489]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2490]  COND FALSE  !(revert)
[L2493]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2452]              assume msgsender_MSG != null;
[L2453]              Balance[this] := 0;
[L2454]              name_TokenERC20[this] := -756920386;
[L2455]              symbol_TokenERC20[this] := -324062207;
[L2456]              decimals_TokenERC20[this] := 18;
[L2457]              totalSupply_TokenERC20[this] := 900000000000000000000000000;
[L2458]              released_TokenERC20[this] := true;
[L2459]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2460]              sum_balanceOf0[this] := 0;
[L2461]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2462]              sum_allowance1[this] := 0;
[L2464]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2465]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s261, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2466]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2467]              balanceOf_TokenERC20[this][msgsender_MSG] := 0;
[L2468]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2469]              name_TokenERC20[this] := -756920386;
[L2470]              symbol_TokenERC20[this] := -324062207;
[L2493]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2494]  COND FALSE  !(revert)
[L3108]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3109]  COND FALSE  !(revert)
[L3112]  CALL        call GMC_GMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3080]              assume msgsender_MSG != null;
[L3081]              Balance[this] := 0;
[L3082]              frozenAccount_GMC[this] := zeroRefboolArr();
[L3112]  RET         call GMC_GMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3113]  COND FALSE  !(revert)
[L1391]  RET         call GMC_GMC__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call GMC_GMC(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;
[L4941]  CALL        call CorralChoice_GMC(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s325;
[L4759]              havoc _value_s325;
[L4760]              havoc success_s325;
[L4761]              havoc _spender_s365;
[L4762]              havoc _value_s365;
[L4763]              havoc _extraData_s365;
[L4764]              havoc success_s365;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s781;
[L4783]              havoc freeze_s781;
[L4784]              havoc target_s833;
[L4785]              havoc mintedAmount_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != GMC;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND FALSE  !(choice == 7)
[L4880]  COND FALSE  !(choice == 6)
[L4887]  COND FALSE  !(choice == 5)
[L4894]  COND FALSE  !(choice == 4)
[L4901]  COND FALSE  !(choice == 3)
[L4907]  COND FALSE  !(choice == 2)
[L4913]  COND TRUE   choice == 1
[L4914]              gas := gas - 21000;
[L4915]  COND TRUE   gas >= 0
[L4916]              assume mintedAmount_s833 >= 0 && mintedAmount_s833 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4917]              assume msgvalue_MSG == 0;
[L4918]  CALL        call mintToken~address~uint256_GMC(this, msgsender_MSG, msgvalue_MSG, target_s833, mintedAmount_s833);
[L1491]              havoc __exception;
[L1492]              revert := false;
[L1493]  COND FALSE  !(__exception)
[L1519]  CALL        call mintToken~address~uint256_GMC__success(this, msgsender_MSG, msgvalue_MSG, target_s833, mintedAmount_s833);
[L3260]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4306]  COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L3260]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3261]  COND FALSE  !(revert)
[L3264]  COND FALSE  !(!(mintedAmount_s833 > 0))
[L3268]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply_TokenERC20[this], mintedAmount_s833);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L3268]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply_TokenERC20[this], mintedAmount_s833);
[L3269]  COND FALSE  !(revert)
[L3272]              totalSupply_TokenERC20[this] := __var_19;
[L3273]  CALL        call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][target_s833], mintedAmount_s833);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L3273]  RET         call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][target_s833], mintedAmount_s833);
[L3274]  COND FALSE  !(revert)
[L3277]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][target_s833];
[L3278]              balanceOf_TokenERC20[this][target_s833] := __var_20;
[L3279]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][target_s833];
[L3280]              assert { :EventEmitted "Transfer_GMC" } true;
[L3281]              assert { :EventEmitted "Transfer_GMC" } true;
[L1519]  RET         call mintToken~address~uint256_GMC__success(this, msgsender_MSG, msgvalue_MSG, target_s833, mintedAmount_s833);
[L1520]              assume !revert && gas >= 0;
[L4918]  RET         call mintToken~address~uint256_GMC(this, msgsender_MSG, msgvalue_MSG, target_s833, mintedAmount_s833);
[L4941]  RET         call CorralChoice_GMC(this);
[L4941]  CALL        call CorralChoice_GMC(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s325;
[L4759]              havoc _value_s325;
[L4760]              havoc success_s325;
[L4761]              havoc _spender_s365;
[L4762]              havoc _value_s365;
[L4763]              havoc _extraData_s365;
[L4764]              havoc success_s365;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s781;
[L4783]              havoc freeze_s781;
[L4784]              havoc target_s833;
[L4785]              havoc mintedAmount_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != GMC;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s478 && (_value_s478 > balanceOf_TokenERC20[this][msgsender_MSG] || balanceOf_TokenERC20[this][_to_s478] + _value_s478 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND FALSE  !(__exception)
[L703]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2755]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2755]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2756]  COND FALSE  !(revert)
[L2759]  COND TRUE   DType[this] == GMC
[L2760]  CALL        call _transfer~address~address~uint256_GMC__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L3169]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L3169]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3170]  COND FALSE  !(revert)
[L3173]              __var_16 := null;
[L3174]  COND FALSE  !(!(_to_s760 != null))
[L3178]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3182]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s760]))
[L3186]  COND FALSE  !(!!frozenAccount_GMC[this][_from_s760])
[L3190]  COND FALSE  !(!!frozenAccount_GMC[this][_to_s760])
[L3194]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L3194]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L3195]  COND FALSE  !(revert)
[L3198]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s760];
[L3199]              balanceOf_TokenERC20[this][_from_s760] := __var_17;
[L3200]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s760];
[L3201]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L3201]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L3202]  COND FALSE  !(revert)
[L3205]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s760];
[L3206]              balanceOf_TokenERC20[this][_to_s760] := __var_18;
[L3207]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s760];
[L3208]              assert { :EventEmitted "Transfer_GMC" } true;
[L2760]  RET         call _transfer~address~address~uint256_GMC__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2761]  COND FALSE  !(revert)
[L2772]              success_s478 := true;
[L703]   RET         call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L704]               assume !revert && gas >= 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_GMC(this);

Loop:
[L4941]  CALL        call CorralChoice_GMC(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s325;
[L4759]              havoc _value_s325;
[L4760]              havoc success_s325;
[L4761]              havoc _spender_s365;
[L4762]              havoc _value_s365;
[L4763]              havoc _extraData_s365;
[L4764]              havoc success_s365;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s781;
[L4783]              havoc freeze_s781;
[L4784]              havoc target_s833;
[L4785]              havoc mintedAmount_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != GMC;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND TRUE   choice == 19
[L4800]              gas := gas - 21000;
[L4801]  COND FALSE  !(gas >= 0)
[L4941]  RET         call CorralChoice_GMC(this);

[2020-11-25 16:59:44,064 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:59:44,064 INFO  L82        PathProgramCache]: Analyzing trace with hash 986203887, now seen corresponding path program 1 times
[2020-11-25 16:59:44,065 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:59:44,079 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:59:44,359 INFO  L134       CoverageAnalysis]: Checked inductivity of 94 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 93 trivial. 0 not checked.
[2020-11-25 16:59:44,359 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 16:59:44,359 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [19] total 19
[2020-11-25 16:59:44,360 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:59:44,360 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-11-25 16:59:44,361 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=51, Invalid=329, Unknown=0, NotChecked=0, Total=380
[2020-11-25 16:59:44,361 INFO  L87              Difference]: Start difference. First operand 2971 states and 3265 transitions. cyclomatic complexity: 297 Second operand 20 states.
[2020-11-25 16:59:46,359 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:59:46,359 INFO  L93              Difference]: Finished difference Result 3022 states and 3321 transitions.
[2020-11-25 16:59:46,359 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 16:59:46,359 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3022 states and 3321 transitions.
[2020-11-25 16:59:46,364 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:59:46,369 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3022 states to 3022 states and 3321 transitions.
[2020-11-25 16:59:46,370 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 721
[2020-11-25 16:59:46,370 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 721
[2020-11-25 16:59:46,370 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3022 states and 3321 transitions.
[2020-11-25 16:59:46,372 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:59:46,372 INFO  L728         BuchiCegarLoop]: Abstraction has 3022 states and 3321 transitions.
[2020-11-25 16:59:46,374 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3022 states and 3321 transitions.
[2020-11-25 16:59:46,387 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3022 to 2975.
[2020-11-25 16:59:46,387 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2975 states.
[2020-11-25 16:59:46,390 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2975 states to 2975 states and 3273 transitions.
[2020-11-25 16:59:46,390 INFO  L751         BuchiCegarLoop]: Abstraction has 2975 states and 3273 transitions.
[2020-11-25 16:59:46,390 INFO  L631         BuchiCegarLoop]: Abstraction has 2975 states and 3273 transitions.
[2020-11-25 16:59:46,390 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 16:59:46,390 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2975 states and 3273 transitions.
[2020-11-25 16:59:46,393 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:59:46,393 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:59:46,393 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:59:46,394 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:59:46,394 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == GMC;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call GMC_GMC(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call GMC_GMC__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND FALSE  !(revert)
[L3108]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L2489]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L2489]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2490]  COND FALSE  !(revert)
[L2493]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2452]              assume msgsender_MSG != null;
[L2453]              Balance[this] := 0;
[L2454]              name_TokenERC20[this] := -756920386;
[L2455]              symbol_TokenERC20[this] := -324062207;
[L2456]              decimals_TokenERC20[this] := 18;
[L2457]              totalSupply_TokenERC20[this] := 900000000000000000000000000;
[L2458]              released_TokenERC20[this] := true;
[L2459]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2460]              sum_balanceOf0[this] := 0;
[L2461]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2462]              sum_allowance1[this] := 0;
[L2464]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2465]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s261, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2466]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2467]              balanceOf_TokenERC20[this][msgsender_MSG] := 0;
[L2468]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2469]              name_TokenERC20[this] := -756920386;
[L2470]              symbol_TokenERC20[this] := -324062207;
[L2493]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2494]  COND FALSE  !(revert)
[L3108]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3109]  COND FALSE  !(revert)
[L3112]  CALL        call GMC_GMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3080]              assume msgsender_MSG != null;
[L3081]              Balance[this] := 0;
[L3082]              frozenAccount_GMC[this] := zeroRefboolArr();
[L3112]  RET         call GMC_GMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3113]  COND FALSE  !(revert)
[L1391]  RET         call GMC_GMC__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call GMC_GMC(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;
[L4941]  CALL        call CorralChoice_GMC(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s325;
[L4759]              havoc _value_s325;
[L4760]              havoc success_s325;
[L4761]              havoc _spender_s365;
[L4762]              havoc _value_s365;
[L4763]              havoc _extraData_s365;
[L4764]              havoc success_s365;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s781;
[L4783]              havoc freeze_s781;
[L4784]              havoc target_s833;
[L4785]              havoc mintedAmount_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != GMC;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND FALSE  !(choice == 7)
[L4880]  COND FALSE  !(choice == 6)
[L4887]  COND TRUE   choice == 5
[L4888]              gas := gas - 21000;
[L4889]  COND TRUE   gas >= 0
[L4890]              assume _value_s575 >= 0 && _value_s575 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4891]              assume msgvalue_MSG == 0;
[L4892]  CALL        call success_s575 := burn~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _value_s575);
[L802]               havoc __exception;
[L803]               revert := false;
[L804]   COND FALSE  !(__exception)
[L830]   CALL        call success_s575 := burn~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _value_s575);
[L2878]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2878]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L2882]  COND FALSE  !(!(balanceOf_TokenERC20[this][msgsender_MSG] >= _value_s575))
[L2886]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][msgsender_MSG], _value_s575);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L2886]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][msgsender_MSG], _value_s575);
[L2887]  COND FALSE  !(revert)
[L2890]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2891]              balanceOf_TokenERC20[this][msgsender_MSG] := __var_11;
[L2892]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2893]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, totalSupply_TokenERC20[this], _value_s575);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L2893]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, totalSupply_TokenERC20[this], _value_s575);
[L2894]  COND FALSE  !(revert)
[L2897]              totalSupply_TokenERC20[this] := __var_12;
[L2898]              assert { :EventEmitted "Burn_TokenERC20" } true;
[L2899]              success_s575 := true;
[L830]   RET         call success_s575 := burn~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _value_s575);
[L831]               assume !revert && gas >= 0;
[L4892]  RET         call success_s575 := burn~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _value_s575);
[L4941]  RET         call CorralChoice_GMC(this);
[L4941]  CALL        call CorralChoice_GMC(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s325;
[L4759]              havoc _value_s325;
[L4760]              havoc success_s325;
[L4761]              havoc _spender_s365;
[L4762]              havoc _value_s365;
[L4763]              havoc _extraData_s365;
[L4764]              havoc success_s365;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s781;
[L4783]              havoc freeze_s781;
[L4784]              havoc target_s833;
[L4785]              havoc mintedAmount_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != GMC;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s478 && (_value_s478 > balanceOf_TokenERC20[this][msgsender_MSG] || balanceOf_TokenERC20[this][_to_s478] + _value_s478 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND FALSE  !(__exception)
[L703]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2755]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2755]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2756]  COND FALSE  !(revert)
[L2759]  COND TRUE   DType[this] == GMC
[L2760]  CALL        call _transfer~address~address~uint256_GMC__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L3169]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L3169]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3170]  COND FALSE  !(revert)
[L3173]              __var_16 := null;
[L3174]  COND FALSE  !(!(_to_s760 != null))
[L3178]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3182]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s760]))
[L3186]  COND FALSE  !(!!frozenAccount_GMC[this][_from_s760])
[L3190]  COND FALSE  !(!!frozenAccount_GMC[this][_to_s760])
[L3194]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L3194]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L3195]  COND FALSE  !(revert)
[L3198]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s760];
[L3199]              balanceOf_TokenERC20[this][_from_s760] := __var_17;
[L3200]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s760];
[L3201]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L3201]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L3202]  COND FALSE  !(revert)
[L3205]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s760];
[L3206]              balanceOf_TokenERC20[this][_to_s760] := __var_18;
[L3207]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s760];
[L3208]              assert { :EventEmitted "Transfer_GMC" } true;
[L2760]  RET         call _transfer~address~address~uint256_GMC__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2761]  COND FALSE  !(revert)
[L2772]              success_s478 := true;
[L703]   RET         call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L704]               assume !revert && gas >= 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_GMC(this);

Loop:
[L4941]  CALL        call CorralChoice_GMC(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s325;
[L4759]              havoc _value_s325;
[L4760]              havoc success_s325;
[L4761]              havoc _spender_s365;
[L4762]              havoc _value_s365;
[L4763]              havoc _extraData_s365;
[L4764]              havoc success_s365;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s781;
[L4783]              havoc freeze_s781;
[L4784]              havoc target_s833;
[L4785]              havoc mintedAmount_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != GMC;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND TRUE   choice == 19
[L4800]              gas := gas - 21000;
[L4801]  COND FALSE  !(gas >= 0)
[L4941]  RET         call CorralChoice_GMC(this);

[2020-11-25 16:59:46,397 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:59:46,397 INFO  L82        PathProgramCache]: Analyzing trace with hash 1490351120, now seen corresponding path program 1 times
[2020-11-25 16:59:46,398 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:59:46,410 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:59:46,699 INFO  L134       CoverageAnalysis]: Checked inductivity of 94 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 93 trivial. 0 not checked.
[2020-11-25 16:59:46,699 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 16:59:46,700 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [20] total 20
[2020-11-25 16:59:46,702 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:59:46,702 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 21 interpolants.
[2020-11-25 16:59:46,702 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=47, Invalid=373, Unknown=0, NotChecked=0, Total=420
[2020-11-25 16:59:46,702 INFO  L87              Difference]: Start difference. First operand 2975 states and 3273 transitions. cyclomatic complexity: 302 Second operand 21 states.
[2020-11-25 16:59:48,778 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:59:48,778 INFO  L93              Difference]: Finished difference Result 3024 states and 3329 transitions.
[2020-11-25 16:59:48,779 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 16:59:48,779 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3024 states and 3329 transitions.
[2020-11-25 16:59:48,783 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:59:48,789 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3024 states to 3024 states and 3329 transitions.
[2020-11-25 16:59:48,789 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 721
[2020-11-25 16:59:48,789 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 721
[2020-11-25 16:59:48,789 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3024 states and 3329 transitions.
[2020-11-25 16:59:48,791 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:59:48,791 INFO  L728         BuchiCegarLoop]: Abstraction has 3024 states and 3329 transitions.
[2020-11-25 16:59:48,793 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3024 states and 3329 transitions.
[2020-11-25 16:59:48,806 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3024 to 2975.
[2020-11-25 16:59:48,806 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2975 states.
[2020-11-25 16:59:48,808 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2975 states to 2975 states and 3273 transitions.
[2020-11-25 16:59:48,808 INFO  L751         BuchiCegarLoop]: Abstraction has 2975 states and 3273 transitions.
[2020-11-25 16:59:48,808 INFO  L631         BuchiCegarLoop]: Abstraction has 2975 states and 3273 transitions.
[2020-11-25 16:59:48,808 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 16:59:48,809 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2975 states and 3273 transitions.
[2020-11-25 16:59:48,811 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:59:48,811 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:59:48,811 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:59:48,813 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:59:48,813 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == GMC;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call GMC_GMC(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call GMC_GMC__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND FALSE  !(revert)
[L3108]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L2489]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L2489]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2490]  COND FALSE  !(revert)
[L2493]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2452]              assume msgsender_MSG != null;
[L2453]              Balance[this] := 0;
[L2454]              name_TokenERC20[this] := -756920386;
[L2455]              symbol_TokenERC20[this] := -324062207;
[L2456]              decimals_TokenERC20[this] := 18;
[L2457]              totalSupply_TokenERC20[this] := 900000000000000000000000000;
[L2458]              released_TokenERC20[this] := true;
[L2459]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2460]              sum_balanceOf0[this] := 0;
[L2461]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2462]              sum_allowance1[this] := 0;
[L2464]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2465]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s261, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2466]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2467]              balanceOf_TokenERC20[this][msgsender_MSG] := 0;
[L2468]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2469]              name_TokenERC20[this] := -756920386;
[L2470]              symbol_TokenERC20[this] := -324062207;
[L2493]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2494]  COND FALSE  !(revert)
[L3108]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3109]  COND FALSE  !(revert)
[L3112]  CALL        call GMC_GMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3080]              assume msgsender_MSG != null;
[L3081]              Balance[this] := 0;
[L3082]              frozenAccount_GMC[this] := zeroRefboolArr();
[L3112]  RET         call GMC_GMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3113]  COND FALSE  !(revert)
[L1391]  RET         call GMC_GMC__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call GMC_GMC(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;
[L4941]  CALL        call CorralChoice_GMC(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s325;
[L4759]              havoc _value_s325;
[L4760]              havoc success_s325;
[L4761]              havoc _spender_s365;
[L4762]              havoc _value_s365;
[L4763]              havoc _extraData_s365;
[L4764]              havoc success_s365;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s781;
[L4783]              havoc freeze_s781;
[L4784]              havoc target_s833;
[L4785]              havoc mintedAmount_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != GMC;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND FALSE  !(choice == 7)
[L4880]  COND FALSE  !(choice == 6)
[L4887]  COND FALSE  !(choice == 5)
[L4894]  COND TRUE   choice == 4
[L4895]              gas := gas - 21000;
[L4896]  COND TRUE   gas >= 0
[L4897]              assume _value_s648 >= 0 && _value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4898]              assume msgvalue_MSG == 0;
[L4899]  CALL        call success_s648 := burnFrom~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s648, _value_s648);
[L867]               havoc __exception;
[L868]               revert := false;
[L869]   COND FALSE  !(__exception)
[L895]   CALL        call success_s648 := burnFrom~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s648, _value_s648);
[L2948]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2948]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2949]  COND FALSE  !(revert)
[L2952]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s648] >= _value_s648))
[L2956]  COND FALSE  !(!(_value_s648 <= allowance_TokenERC20[this][_from_s648][msgsender_MSG]))
[L2960]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s648], _value_s648);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L2960]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s648], _value_s648);
[L2961]  COND FALSE  !(revert)
[L2964]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s648];
[L2965]              balanceOf_TokenERC20[this][_from_s648] := __var_13;
[L2966]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s648];
[L2967]  CALL        call __var_14 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s648][msgsender_MSG], _value_s648);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L2967]  RET         call __var_14 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowance_TokenERC20[this][_from_s648][msgsender_MSG], _value_s648);
[L2968]  COND FALSE  !(revert)
[L2971]              sum_allowance1[_from_s648] := sum_allowance1[_from_s648] - allowance_TokenERC20[this][_from_s648][msgsender_MSG];
[L2972]              allowance_TokenERC20[this][_from_s648][msgsender_MSG] := __var_14;
[L2973]              sum_allowance1[_from_s648] := sum_allowance1[_from_s648] + allowance_TokenERC20[this][_from_s648][msgsender_MSG];
[L2974]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, totalSupply_TokenERC20[this], _value_s648);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L2974]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, totalSupply_TokenERC20[this], _value_s648);
[L2975]  COND FALSE  !(revert)
[L2978]              totalSupply_TokenERC20[this] := __var_15;
[L2979]              assert { :EventEmitted "Burn_TokenERC20" } true;
[L2980]              success_s648 := true;
[L895]   RET         call success_s648 := burnFrom~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s648, _value_s648);
[L896]               assume !revert && gas >= 0;
[L4899]  RET         call success_s648 := burnFrom~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s648, _value_s648);
[L4941]  RET         call CorralChoice_GMC(this);
[L4941]  CALL        call CorralChoice_GMC(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s325;
[L4759]              havoc _value_s325;
[L4760]              havoc success_s325;
[L4761]              havoc _spender_s365;
[L4762]              havoc _value_s365;
[L4763]              havoc _extraData_s365;
[L4764]              havoc success_s365;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s781;
[L4783]              havoc freeze_s781;
[L4784]              havoc target_s833;
[L4785]              havoc mintedAmount_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != GMC;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s478 && (_value_s478 > balanceOf_TokenERC20[this][msgsender_MSG] || balanceOf_TokenERC20[this][_to_s478] + _value_s478 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND FALSE  !(__exception)
[L703]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2755]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2755]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2756]  COND FALSE  !(revert)
[L2759]  COND TRUE   DType[this] == GMC
[L2760]  CALL        call _transfer~address~address~uint256_GMC__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L3169]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L3169]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3170]  COND FALSE  !(revert)
[L3173]              __var_16 := null;
[L3174]  COND FALSE  !(!(_to_s760 != null))
[L3178]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3182]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s760]))
[L3186]  COND FALSE  !(!!frozenAccount_GMC[this][_from_s760])
[L3190]  COND FALSE  !(!!frozenAccount_GMC[this][_to_s760])
[L3194]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L3194]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L3195]  COND FALSE  !(revert)
[L3198]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s760];
[L3199]              balanceOf_TokenERC20[this][_from_s760] := __var_17;
[L3200]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s760];
[L3201]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L3201]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L3202]  COND FALSE  !(revert)
[L3205]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s760];
[L3206]              balanceOf_TokenERC20[this][_to_s760] := __var_18;
[L3207]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s760];
[L3208]              assert { :EventEmitted "Transfer_GMC" } true;
[L2760]  RET         call _transfer~address~address~uint256_GMC__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2761]  COND FALSE  !(revert)
[L2772]              success_s478 := true;
[L703]   RET         call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L704]               assume !revert && gas >= 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_GMC(this);

Loop:
[L4941]  CALL        call CorralChoice_GMC(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s325;
[L4759]              havoc _value_s325;
[L4760]              havoc success_s325;
[L4761]              havoc _spender_s365;
[L4762]              havoc _value_s365;
[L4763]              havoc _extraData_s365;
[L4764]              havoc success_s365;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s781;
[L4783]              havoc freeze_s781;
[L4784]              havoc target_s833;
[L4785]              havoc mintedAmount_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != GMC;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s478 && (_value_s478 > balanceOf_TokenERC20[this][msgsender_MSG] || balanceOf_TokenERC20[this][_to_s478] + _value_s478 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND FALSE  !(__exception)
[L703]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2755]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2755]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2756]  COND FALSE  !(revert)
[L2759]  COND TRUE   DType[this] == GMC
[L2760]  CALL        call _transfer~address~address~uint256_GMC__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L3169]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L3169]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3170]  COND FALSE  !(revert)
[L3173]              __var_16 := null;
[L3174]  COND FALSE  !(!(_to_s760 != null))
[L3178]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3182]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s760]))
[L3186]  COND FALSE  !(!!frozenAccount_GMC[this][_from_s760])
[L3190]  COND FALSE  !(!!frozenAccount_GMC[this][_to_s760])
[L3194]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L3194]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L3195]  COND FALSE  !(revert)
[L3198]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s760];
[L3199]              balanceOf_TokenERC20[this][_from_s760] := __var_17;
[L3200]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s760];
[L3201]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L3201]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L3202]  COND FALSE  !(revert)
[L3205]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s760];
[L3206]              balanceOf_TokenERC20[this][_to_s760] := __var_18;
[L3207]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s760];
[L3208]              assert { :EventEmitted "Transfer_GMC" } true;
[L2760]  RET         call _transfer~address~address~uint256_GMC__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2761]  COND FALSE  !(revert)
[L2772]              success_s478 := true;
[L703]   RET         call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L704]               assume !revert && gas >= 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_GMC(this);

[2020-11-25 16:59:48,817 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:59:48,817 INFO  L82        PathProgramCache]: Analyzing trace with hash 1816219889, now seen corresponding path program 1 times
[2020-11-25 16:59:48,817 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:59:48,836 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:59:49,086 INFO  L134       CoverageAnalysis]: Checked inductivity of 104 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 103 trivial. 0 not checked.
[2020-11-25 16:59:49,086 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 16:59:49,086 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [19] total 19
[2020-11-25 16:59:49,086 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:59:49,086 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-11-25 16:59:49,086 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=43, Invalid=337, Unknown=0, NotChecked=0, Total=380
[2020-11-25 16:59:49,087 INFO  L87              Difference]: Start difference. First operand 2975 states and 3273 transitions. cyclomatic complexity: 302 Second operand 20 states.
[2020-11-25 16:59:50,956 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:59:50,956 INFO  L93              Difference]: Finished difference Result 3026 states and 3331 transitions.
[2020-11-25 16:59:50,956 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 16:59:50,956 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3026 states and 3331 transitions.
[2020-11-25 16:59:50,961 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:59:50,967 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3026 states to 3026 states and 3331 transitions.
[2020-11-25 16:59:50,967 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 721
[2020-11-25 16:59:50,967 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 721
[2020-11-25 16:59:50,967 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3026 states and 3331 transitions.
[2020-11-25 16:59:50,969 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:59:50,969 INFO  L728         BuchiCegarLoop]: Abstraction has 3026 states and 3331 transitions.
[2020-11-25 16:59:50,972 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3026 states and 3331 transitions.
[2020-11-25 16:59:50,983 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3026 to 2975.
[2020-11-25 16:59:50,984 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2975 states.
[2020-11-25 16:59:50,986 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2975 states to 2975 states and 3273 transitions.
[2020-11-25 16:59:50,986 INFO  L751         BuchiCegarLoop]: Abstraction has 2975 states and 3273 transitions.
[2020-11-25 16:59:50,986 INFO  L631         BuchiCegarLoop]: Abstraction has 2975 states and 3273 transitions.
[2020-11-25 16:59:50,986 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 16:59:50,986 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2975 states and 3273 transitions.
[2020-11-25 16:59:50,989 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:59:50,989 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:59:50,989 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:59:50,990 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:59:50,990 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == GMC;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call GMC_GMC(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call GMC_GMC__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND FALSE  !(revert)
[L3108]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L2489]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L2489]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2490]  COND FALSE  !(revert)
[L2493]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2452]              assume msgsender_MSG != null;
[L2453]              Balance[this] := 0;
[L2454]              name_TokenERC20[this] := -756920386;
[L2455]              symbol_TokenERC20[this] := -324062207;
[L2456]              decimals_TokenERC20[this] := 18;
[L2457]              totalSupply_TokenERC20[this] := 900000000000000000000000000;
[L2458]              released_TokenERC20[this] := true;
[L2459]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2460]              sum_balanceOf0[this] := 0;
[L2461]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2462]              sum_allowance1[this] := 0;
[L2464]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2465]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s261, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2466]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2467]              balanceOf_TokenERC20[this][msgsender_MSG] := 0;
[L2468]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2469]              name_TokenERC20[this] := -756920386;
[L2470]              symbol_TokenERC20[this] := -324062207;
[L2493]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2494]  COND FALSE  !(revert)
[L3108]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3109]  COND FALSE  !(revert)
[L3112]  CALL        call GMC_GMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3080]              assume msgsender_MSG != null;
[L3081]              Balance[this] := 0;
[L3082]              frozenAccount_GMC[this] := zeroRefboolArr();
[L3112]  RET         call GMC_GMC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3113]  COND FALSE  !(revert)
[L1391]  RET         call GMC_GMC__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call GMC_GMC(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;
[L4941]  CALL        call CorralChoice_GMC(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s325;
[L4759]              havoc _value_s325;
[L4760]              havoc success_s325;
[L4761]              havoc _spender_s365;
[L4762]              havoc _value_s365;
[L4763]              havoc _extraData_s365;
[L4764]              havoc success_s365;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s781;
[L4783]              havoc freeze_s781;
[L4784]              havoc target_s833;
[L4785]              havoc mintedAmount_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != GMC;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s478 && (_value_s478 > balanceOf_TokenERC20[this][msgsender_MSG] || balanceOf_TokenERC20[this][_to_s478] + _value_s478 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND FALSE  !(__exception)
[L703]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2755]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2755]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2756]  COND FALSE  !(revert)
[L2759]  COND TRUE   DType[this] == GMC
[L2760]  CALL        call _transfer~address~address~uint256_GMC__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L3169]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L3169]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3170]  COND FALSE  !(revert)
[L3173]              __var_16 := null;
[L3174]  COND FALSE  !(!(_to_s760 != null))
[L3178]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3182]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s760]))
[L3186]  COND FALSE  !(!!frozenAccount_GMC[this][_from_s760])
[L3190]  COND FALSE  !(!!frozenAccount_GMC[this][_to_s760])
[L3194]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L3194]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L3195]  COND FALSE  !(revert)
[L3198]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s760];
[L3199]              balanceOf_TokenERC20[this][_from_s760] := __var_17;
[L3200]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s760];
[L3201]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L3201]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L3202]  COND FALSE  !(revert)
[L3205]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s760];
[L3206]              balanceOf_TokenERC20[this][_to_s760] := __var_18;
[L3207]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s760];
[L3208]              assert { :EventEmitted "Transfer_GMC" } true;
[L2760]  RET         call _transfer~address~address~uint256_GMC__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2761]  COND FALSE  !(revert)
[L2772]              success_s478 := true;
[L703]   RET         call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L704]               assume !revert && gas >= 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_GMC(this);
[L4941]  CALL        call CorralChoice_GMC(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s325;
[L4759]              havoc _value_s325;
[L4760]              havoc success_s325;
[L4761]              havoc _spender_s365;
[L4762]              havoc _value_s365;
[L4763]              havoc _extraData_s365;
[L4764]              havoc success_s365;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s781;
[L4783]              havoc freeze_s781;
[L4784]              havoc target_s833;
[L4785]              havoc mintedAmount_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != GMC;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s478 && (_value_s478 > balanceOf_TokenERC20[this][msgsender_MSG] || balanceOf_TokenERC20[this][_to_s478] + _value_s478 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND FALSE  !(__exception)
[L703]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2755]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2755]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2756]  COND FALSE  !(revert)
[L2759]  COND TRUE   DType[this] == GMC
[L2760]  CALL        call _transfer~address~address~uint256_GMC__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L3169]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L3169]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3170]  COND FALSE  !(revert)
[L3173]              __var_16 := null;
[L3174]  COND FALSE  !(!(_to_s760 != null))
[L3178]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3182]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s760]))
[L3186]  COND FALSE  !(!!frozenAccount_GMC[this][_from_s760])
[L3190]  COND FALSE  !(!!frozenAccount_GMC[this][_to_s760])
[L3194]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L3194]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L3195]  COND FALSE  !(revert)
[L3198]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s760];
[L3199]              balanceOf_TokenERC20[this][_from_s760] := __var_17;
[L3200]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s760];
[L3201]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L3201]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L3202]  COND FALSE  !(revert)
[L3205]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s760];
[L3206]              balanceOf_TokenERC20[this][_to_s760] := __var_18;
[L3207]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s760];
[L3208]              assert { :EventEmitted "Transfer_GMC" } true;
[L2760]  RET         call _transfer~address~address~uint256_GMC__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2761]  COND FALSE  !(revert)
[L2772]              success_s478 := true;
[L703]   RET         call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L704]               assume !revert && gas >= 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_GMC(this);

Loop:
[L4941]  CALL        call CorralChoice_GMC(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s325;
[L4759]              havoc _value_s325;
[L4760]              havoc success_s325;
[L4761]              havoc _spender_s365;
[L4762]              havoc _value_s365;
[L4763]              havoc _extraData_s365;
[L4764]              havoc success_s365;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s781;
[L4783]              havoc freeze_s781;
[L4784]              havoc target_s833;
[L4785]              havoc mintedAmount_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != GMC;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s478 && (_value_s478 > balanceOf_TokenERC20[this][msgsender_MSG] || balanceOf_TokenERC20[this][_to_s478] + _value_s478 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND FALSE  !(__exception)
[L703]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2755]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2755]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2756]  COND FALSE  !(revert)
[L2759]  COND TRUE   DType[this] == GMC
[L2760]  CALL        call _transfer~address~address~uint256_GMC__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L3169]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L3169]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3170]  COND FALSE  !(revert)
[L3173]              __var_16 := null;
[L3174]  COND FALSE  !(!(_to_s760 != null))
[L3178]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3182]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s760]))
[L3186]  COND FALSE  !(!!frozenAccount_GMC[this][_from_s760])
[L3190]  COND FALSE  !(!!frozenAccount_GMC[this][_to_s760])
[L3194]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L3194]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L3195]  COND FALSE  !(revert)
[L3198]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s760];
[L3199]              balanceOf_TokenERC20[this][_from_s760] := __var_17;
[L3200]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s760];
[L3201]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L3201]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L3202]  COND FALSE  !(revert)
[L3205]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s760];
[L3206]              balanceOf_TokenERC20[this][_to_s760] := __var_18;
[L3207]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s760];
[L3208]              assert { :EventEmitted "Transfer_GMC" } true;
[L2760]  RET         call _transfer~address~address~uint256_GMC__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2761]  COND FALSE  !(revert)
[L2772]              success_s478 := true;
[L703]   RET         call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L704]               assume !revert && gas >= 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_GMC(this);

[2020-11-25 16:59:50,993 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:59:50,994 INFO  L82        PathProgramCache]: Analyzing trace with hash -527738758, now seen corresponding path program 1 times
[2020-11-25 16:59:50,994 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:59:51,014 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:59:51,106 INFO  L134       CoverageAnalysis]: Checked inductivity of 101 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 101 trivial. 0 not checked.
[2020-11-25 16:59:51,106 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:59:51,106 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-25 16:59:51,107 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:59:51,107 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 16:59:51,107 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-11-25 16:59:51,107 INFO  L87              Difference]: Start difference. First operand 2975 states and 3273 transitions. cyclomatic complexity: 302 Second operand 11 states.
[2020-11-25 16:59:52,058 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:59:52,058 INFO  L93              Difference]: Finished difference Result 1734 states and 1907 transitions.
[2020-11-25 16:59:52,059 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 16:59:52,059 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1734 states and 1907 transitions.
[2020-11-25 16:59:52,062 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 16:59:52,062 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1734 states to 0 states and 0 transitions.
[2020-11-25 16:59:52,062 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 16:59:52,062 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 16:59:52,062 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 16:59:52,062 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:59:52,062 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 16:59:52,062 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 16:59:52,062 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 16:59:52,062 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 16:59:52,062 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 16:59:52,062 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 16:59:52,062 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 16:59:52,065 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:59:52 BasicIcfg
[2020-11-25 16:59:52,065 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 16:59:52,065 INFO  L168              Benchmark]: Toolchain (without parser) took 14897.09 ms. Allocated memory was 1.0 GB in the beginning and 2.2 GB in the end (delta: 1.2 GB). Free memory was 935.2 MB in the beginning and 1.7 GB in the end (delta: -789.8 MB). Peak memory consumption was 374.1 MB. Max. memory is 15.3 GB.
[2020-11-25 16:59:52,066 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.18 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 16:59:52,067 INFO  L168              Benchmark]: Boogie Preprocessor took 110.21 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 919.1 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 16:59:52,067 INFO  L168              Benchmark]: UtopiaSpecLang took 66.74 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:59:52,068 INFO  L168              Benchmark]: Boogie Printer took 17.89 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:59:52,068 INFO  L168              Benchmark]: RCFGBuilder took 803.92 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 784.7 MB in the end (delta: 123.7 MB). Peak memory consumption was 123.7 MB. Max. memory is 15.3 GB.
[2020-11-25 16:59:52,068 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.48 ms. Allocated memory is still 1.0 GB. Free memory was 784.7 MB in the beginning and 775.7 MB in the end (delta: 9.0 MB). Peak memory consumption was 9.0 MB. Max. memory is 15.3 GB.
[2020-11-25 16:59:52,068 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1345.37 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 204.5 MB). Free memory was 775.7 MB in the beginning and 923.9 MB in the end (delta: -148.2 MB). Peak memory consumption was 169.2 MB. Max. memory is 15.3 GB.
[2020-11-25 16:59:52,069 INFO  L168              Benchmark]: BlockEncodingV2 took 152.73 ms. Allocated memory is still 1.2 GB. Free memory was 923.9 MB in the beginning and 841.1 MB in the end (delta: 82.8 MB). Peak memory consumption was 82.8 MB. Max. memory is 15.3 GB.
[2020-11-25 16:59:52,069 INFO  L168              Benchmark]: BuchiAutomizer took 12358.74 ms. Allocated memory was 1.2 GB in the beginning and 2.2 GB in the end (delta: 959.4 MB). Free memory was 841.1 MB in the beginning and 1.7 GB in the end (delta: -883.9 MB). Peak memory consumption was 75.5 MB. Max. memory is 15.3 GB.
[2020-11-25 16:59:52,071 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4508 locations, 8014 edges
  - StatisticsResult: Encoded RCFG
    4406 locations, 7777 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.18 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 110.21 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 919.1 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 66.74 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 17.89 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 803.92 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 784.7 MB in the end (delta: 123.7 MB). Peak memory consumption was 123.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.48 ms. Allocated memory is still 1.0 GB. Free memory was 784.7 MB in the beginning and 775.7 MB in the end (delta: 9.0 MB). Peak memory consumption was 9.0 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1345.37 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 204.5 MB). Free memory was 775.7 MB in the beginning and 923.9 MB in the end (delta: -148.2 MB). Peak memory consumption was 169.2 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 152.73 ms. Allocated memory is still 1.2 GB. Free memory was 923.9 MB in the beginning and 841.1 MB in the end (delta: 82.8 MB). Peak memory consumption was 82.8 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 12358.74 ms. Allocated memory was 1.2 GB in the beginning and 2.2 GB in the end (delta: 959.4 MB). Free memory was 841.1 MB in the beginning and 1.7 GB in the end (delta: -883.9 MB). Peak memory consumption was 75.5 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1831 locations, 2459 edges
  - StatisticsResult: BuchiProgram size
    4508 locations, 8014 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 9 terminating modules (9 trivial, 0 deterministic, 0 nondeterministic). 9 modules have a trivial ranking function, the largest among these consists of 21 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 12.3s and 10 iterations.  TraceHistogramMax:3. Analysis of lassos took 1.7s. Construction of modules took 7.5s. BÃ¼chi inclusion checks took 2.3s. Highest rank in rank-based complementation 0. Minimization of det autom 9. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 8 MinimizatonAttempts, 1533 StatesRemovedByMinimization, 7 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 3200 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 26952 SDtfs, 23570 SDslu, 76606 SDs, 0 SdLazy, 124477 SolverSat, 3456 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 7.5s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU9 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_TokenERC200) ==> ( <>(fail_transfer_TokenERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
