This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 09:24:41,070 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 09:24:41,072 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 09:24:41,084 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 09:24:41,085 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 09:24:41,086 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 09:24:41,087 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 09:24:41,089 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 09:24:41,091 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 09:24:41,092 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 09:24:41,093 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 09:24:41,093 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 09:24:41,094 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 09:24:41,095 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 09:24:41,096 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 09:24:41,096 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 09:24:41,097 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 09:24:41,098 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 09:24:41,100 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 09:24:41,101 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 09:24:41,102 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 09:24:41,103 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 09:24:41,104 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 09:24:41,104 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 09:24:41,105 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 09:24:41,105 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 09:24:41,106 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 09:24:41,106 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 09:24:41,106 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 09:24:41,107 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 09:24:41,107 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 09:24:41,108 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 09:24:41,108 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 09:24:41,109 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 09:24:41,110 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 09:24:41,110 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 09:24:41,110 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 09:24:41,110 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 09:24:41,110 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 09:24:41,111 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 09:24:41,112 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 09:24:41,112 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 09:24:41,120 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 09:24:41,121 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 09:24:41,121 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 09:24:41,122 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 09:24:41,122 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 09:24:41,122 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 09:24:41,122 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 09:24:41,122 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 09:24:41,122 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 09:24:41,122 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 09:24:41,123 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 09:24:41,123 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 09:24:41,123 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 09:24:41,123 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 09:24:41,123 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 09:24:41,123 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 09:24:41,124 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 09:24:41,124 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 09:24:41,124 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 09:24:41,124 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 09:24:41,124 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 09:24:41,124 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 09:24:41,124 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 09:24:41,124 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 09:24:41,124 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 09:24:41,124 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 09:24:41,150 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 09:24:41,165 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 09:24:41,168 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 09:24:41,169 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 09:24:41,169 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 09:24:41,170 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_totalsupply.bpl
[2020-11-25 09:24:41,170 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_totalsupply.bpl'
[2020-11-25 09:24:41,269 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 09:24:41,270 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 09:24:41,270 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 09:24:41,270 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 09:24:41,271 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 09:24:41,287 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:24:41" (1/1) ...
[2020-11-25 09:24:41,289 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:24:41" (1/1) ...
[2020-11-25 09:24:41,325 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:24:41" (1/1) ...
[2020-11-25 09:24:41,326 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:24:41" (1/1) ...
[2020-11-25 09:24:41,355 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:24:41" (1/1) ...
[2020-11-25 09:24:41,370 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:24:41" (1/1) ...
[2020-11-25 09:24:41,380 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:24:41" (1/1) ...
[2020-11-25 09:24:41,392 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 09:24:41,392 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 09:24:41,393 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 09:24:41,395 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 09:24:41,399 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:24:41" (1/1) ...
[2020-11-25 09:24:41,417 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(BasicToken.totalSupply, totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.totalSupply, return == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && name_XNC[this] == old(name_XNC[this]) && symbol_XNC[this] == old(symbol_XNC[this]) && decimals_XNC[this] == old(decimals_XNC[this]) && cap_CappedToken[this] == old(cap_CappedToken[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 09:24:41,422 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(BasicToken.totalSupply, totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.totalSupply, return == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && name_XNC[this] == old(name_XNC[this]) && symbol_XNC[this] == old(symbol_XNC[this]) && decimals_XNC[this] == old(decimals_XNC[this]) && cap_CappedToken[this] == old(cap_CappedToken[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 09:24:41,431 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(BasicToken.totalSupply, totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.totalSupply, return == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && name_XNC[this] == old(name_XNC[this]) && symbol_XNC[this] == old(symbol_XNC[this]) && decimals_XNC[this] == old(decimals_XNC[this]) && cap_CappedToken[this] == old(cap_CappedToken[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 09:24:41,439 INFO  L636   opiaSpecLangObserver]: Parsed ( totalSupply__BasicToken[this]>=0 && totalSupply__BasicToken[this]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPGEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],IntegerLiteral[0]],BinaryExpression[COMPLT,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 09:24:41,441 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( __ret_0_==totalSupply__BasicToken[this] && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && balances_BasicToken[this]==( old(balances_BasicToken[this]) ) ) && allowed_StandardToken[this]==( old(allowed_StandardToken[this]) ) ) && name_XNC[this]==( old(name_XNC[this]) ) ) && symbol_XNC[this]==( old(symbol_XNC[this]) ) ) && decimals_XNC[this]==( old(decimals_XNC[this]) ) ) && cap_CappedToken[this]==( old(cap_CappedToken[this]) ) ) && mintingFinished_MintableToken[this]==( old(mintingFinished_MintableToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,totalSupply_BasicToken>],ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_XNC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_XNC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_XNC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_XNC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_XNC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_XNC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[cap_CappedToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[cap_CappedToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]]
[2020-11-25 09:24:41,447 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(BasicToken.totalSupply, totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.totalSupply, return == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && name_XNC[this] == old(name_XNC[this]) && symbol_XNC[this] == old(symbol_XNC[this]) && decimals_XNC[this] == old(decimals_XNC[this]) && cap_CappedToken[this] == old(cap_CappedToken[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 09:24:41,448 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_totalSupply_BasicToken0) ==> ( <>AP(success_totalSupply_BasicToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 09:24:41,460 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:24:41 PropertyContainer
[2020-11-25 09:24:41,460 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 09:24:41,461 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 09:24:41,461 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 09:24:41,461 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 09:24:41,462 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:24:41" (1/2) ...
[2020-11-25 09:24:41,462 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 09:24:41,462 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 09:24:41,486 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:24:41" (2/2) ...
[2020-11-25 09:24:41,486 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 09:24:41,486 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 09:24:41,487 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 09:24:41,487 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 09:24:41,488 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:24:41" (1/2) ...
[2020-11-25 09:24:41,543 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 09:24:41,543 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:24:41,544 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 09:24:41,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 09:24:41,544 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 09:24:41,544 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 09:24:41,544 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 09:24:41,544 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 09:24:41,544 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 09:24:41,544 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 09:24:41,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 09:24:41,545 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-25 09:24:41,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-25 09:24:41,545 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 09:24:41,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 09:24:41,545 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 09:24:41,545 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 09:24:41,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 09:24:41,546 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 09:24:41,546 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-25 09:24:41,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-25 09:24:41,546 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-25 09:24:41,546 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-25 09:24:41,546 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-25 09:24:41,546 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 09:24:41,546 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 09:24:41,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 09:24:41,547 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 09:24:41,547 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 09:24:41,547 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 09:24:41,547 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 09:24:41,547 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-25 09:24:41,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-25 09:24:41,547 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-25 09:24:41,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-25 09:24:41,547 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-25 09:24:41,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-25 09:24:41,548 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-25 09:24:41,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-25 09:24:41,548 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 09:24:41,548 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-25 09:24:41,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-25 09:24:41,548 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 09:24:41,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 09:24:41,548 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-25 09:24:41,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-25 09:24:41,548 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-25 09:24:41,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-25 09:24:41,548 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 09:24:41,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 09:24:41,548 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 09:24:41,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 09:24:41,549 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 09:24:41,549 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-25 09:24:41,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-25 09:24:41,549 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-25 09:24:41,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-25 09:24:41,549 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-25 09:24:41,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-25 09:24:41,549 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-25 09:24:41,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-25 09:24:41,549 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken_NoBaseCtor__success
[2020-11-25 09:24:41,549 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken
[2020-11-25 09:24:41,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken
[2020-11-25 09:24:41,550 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_CappedToken
[2020-11-25 09:24:41,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_CappedToken
[2020-11-25 09:24:41,550 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_CappedToken
[2020-11-25 09:24:41,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_CappedToken
[2020-11-25 09:24:41,550 INFO  L130     BoogieDeclarations]: Found specification of procedure XNC_XNC_NoBaseCtor__success
[2020-11-25 09:24:41,550 INFO  L130     BoogieDeclarations]: Found specification of procedure XNC_XNC
[2020-11-25 09:24:41,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure XNC_XNC
[2020-11-25 09:24:41,550 INFO  L130     BoogieDeclarations]: Found specification of procedure name_XNC
[2020-11-25 09:24:41,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_XNC
[2020-11-25 09:24:41,550 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_XNC
[2020-11-25 09:24:41,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_XNC
[2020-11-25 09:24:41,550 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_XNC
[2020-11-25 09:24:41,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_XNC
[2020-11-25 09:24:41,551 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 09:24:41,551 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 09:24:41,551 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 09:24:41,551 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 09:24:41,551 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-25 09:24:41,551 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-25 09:24:41,551 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 09:24:41,551 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 09:24:41,551 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 09:24:41,551 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 09:24:41,551 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-25 09:24:41,551 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-25 09:24:41,552 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 09:24:41,552 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 09:24:41,552 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-25 09:24:41,552 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-25 09:24:41,552 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-25 09:24:41,552 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-25 09:24:41,552 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-25 09:24:41,552 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-25 09:24:41,552 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_CappedToken
[2020-11-25 09:24:41,552 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_CappedToken
[2020-11-25 09:24:41,552 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_XNC
[2020-11-25 09:24:41,552 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 09:24:41,552 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 09:24:41,553 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:24:41,553 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 09:24:41,553 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 09:24:41,553 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 09:24:41,553 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 09:24:41,553 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 09:24:41,553 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 09:24:41,553 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 09:24:41,553 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 09:24:41,553 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 09:24:41,554 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-25 09:24:41,554 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-25 09:24:41,554 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 09:24:41,554 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 09:24:41,554 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 09:24:41,554 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 09:24:41,554 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 09:24:41,554 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 09:24:41,554 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 09:24:41,554 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 09:24:41,555 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 09:24:41,555 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 09:24:41,555 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 09:24:41,555 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 09:24:41,555 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-25 09:24:41,555 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-25 09:24:41,555 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-25 09:24:41,555 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-25 09:24:41,555 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 09:24:41,556 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 09:24:41,556 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-25 09:24:41,556 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-25 09:24:41,556 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 09:24:41,556 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-25 09:24:41,556 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-25 09:24:41,556 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 09:24:41,556 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 09:24:41,556 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-25 09:24:41,556 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 09:24:41,557 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-25 09:24:41,557 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-25 09:24:41,557 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 09:24:41,557 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 09:24:41,557 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 09:24:41,557 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 09:24:41,557 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 09:24:41,557 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-25 09:24:41,557 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-25 09:24:41,558 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-25 09:24:41,558 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 09:24:41,558 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-25 09:24:41,558 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-25 09:24:41,558 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-25 09:24:41,558 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-25 09:24:41,558 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken_NoBaseCtor__fail
[2020-11-25 09:24:41,558 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken__success
[2020-11-25 09:24:41,558 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken__fail
[2020-11-25 09:24:41,558 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_CappedToken__success
[2020-11-25 09:24:41,558 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_CappedToken__fail
[2020-11-25 09:24:41,559 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_CappedToken__success
[2020-11-25 09:24:41,559 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_CappedToken__fail
[2020-11-25 09:24:41,559 INFO  L130     BoogieDeclarations]: Found specification of procedure XNC_XNC_NoBaseCtor__fail
[2020-11-25 09:24:41,559 INFO  L130     BoogieDeclarations]: Found specification of procedure XNC_XNC__success
[2020-11-25 09:24:41,559 INFO  L130     BoogieDeclarations]: Found specification of procedure XNC_XNC__fail
[2020-11-25 09:24:41,559 INFO  L130     BoogieDeclarations]: Found specification of procedure name_XNC__success
[2020-11-25 09:24:41,559 INFO  L130     BoogieDeclarations]: Found specification of procedure name_XNC__fail
[2020-11-25 09:24:41,559 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_XNC__success
[2020-11-25 09:24:41,559 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_XNC__fail
[2020-11-25 09:24:41,559 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_XNC__success
[2020-11-25 09:24:41,559 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_XNC__fail
[2020-11-25 09:24:41,560 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 09:24:41,560 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 09:24:41,560 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 09:24:41,560 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 09:24:41,560 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-25 09:24:41,560 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-25 09:24:41,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 09:24:41,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 09:24:41,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:24:41,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:24:41,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 09:24:41,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 09:24:41,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 09:24:41,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 09:24:41,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 09:24:41,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 09:24:41,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 09:24:41,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 09:24:41,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 09:24:41,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 09:24:41,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 09:24:41,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 09:24:41,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 09:24:41,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 09:24:41,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-25 09:24:41,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-25 09:24:41,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 09:24:41,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 09:24:41,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 09:24:41,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 09:24:41,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 09:24:41,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 09:24:41,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 09:24:41,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 09:24:41,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 09:24:41,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 09:24:41,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 09:24:41,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 09:24:41,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 09:24:41,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 09:24:41,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 09:24:41,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 09:24:41,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-25 09:24:41,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-25 09:24:41,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-25 09:24:41,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-25 09:24:41,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 09:24:41,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 09:24:41,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-25 09:24:41,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-25 09:24:41,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 09:24:41,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 09:24:41,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-25 09:24:41,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-25 09:24:41,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 09:24:41,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 09:24:41,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 09:24:41,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-25 09:24:41,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-25 09:24:41,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-25 09:24:41,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 09:24:41,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 09:24:41,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 09:24:41,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 09:24:41,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 09:24:41,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 09:24:41,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-25 09:24:41,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-25 09:24:41,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 09:24:41,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-25 09:24:41,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-25 09:24:41,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-25 09:24:41,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-25 09:24:41,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-25 09:24:41,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken_NoBaseCtor__fail
[2020-11-25 09:24:41,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken_NoBaseCtor__success
[2020-11-25 09:24:41,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken__fail
[2020-11-25 09:24:41,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken__success
[2020-11-25 09:24:41,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_CappedToken__fail
[2020-11-25 09:24:41,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_CappedToken__success
[2020-11-25 09:24:41,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_CappedToken__fail
[2020-11-25 09:24:41,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_CappedToken__success
[2020-11-25 09:24:41,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure XNC_XNC_NoBaseCtor__fail
[2020-11-25 09:24:41,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure XNC_XNC_NoBaseCtor__success
[2020-11-25 09:24:41,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure XNC_XNC__fail
[2020-11-25 09:24:41,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure XNC_XNC__success
[2020-11-25 09:24:41,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_XNC__fail
[2020-11-25 09:24:41,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_XNC__success
[2020-11-25 09:24:41,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_XNC__fail
[2020-11-25 09:24:41,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_XNC__success
[2020-11-25 09:24:41,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_XNC__fail
[2020-11-25 09:24:41,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_XNC__success
[2020-11-25 09:24:41,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 09:24:41,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 09:24:41,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 09:24:41,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 09:24:41,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 09:24:41,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 09:24:41,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 09:24:41,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 09:24:41,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-25 09:24:41,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-25 09:24:41,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-25 09:24:41,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-25 09:24:41,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 09:24:41,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 09:24:41,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 09:24:41,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 09:24:41,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-25 09:24:41,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-25 09:24:41,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 09:24:41,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 09:24:41,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-25 09:24:41,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-25 09:24:41,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-25 09:24:41,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-25 09:24:41,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-25 09:24:41,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-25 09:24:41,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_CappedToken
[2020-11-25 09:24:41,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_CappedToken
[2020-11-25 09:24:41,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_XNC
[2020-11-25 09:24:41,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 09:24:41,570 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 09:24:41,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 09:24:42,087 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:24:42,087 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:24:42,088 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:24:42,516 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 09:24:42,516 INFO  L286             CfgBuilder]: Removed 9 assue(true) statements.
[2020-11-25 09:24:42,519 INFO  L202        PluginConnector]: Adding new model XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:24:42 BoogieIcfgContainer
[2020-11-25 09:24:42,519 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:24:41" (2/2) ...
[2020-11-25 09:24:42,519 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 09:24:42,519 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@5400b3be and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:24:42, skipping insertion in model container
[2020-11-25 09:24:42,519 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 09:24:42,519 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 09:24:42,519 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 09:24:42,521 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 09:24:42,521 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:24:41" (1/3) ...
[2020-11-25 09:24:42,521 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@327af4e4 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:24:42, skipping insertion in model container
[2020-11-25 09:24:42,521 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:24:41" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 09:24:42,557 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:24:42 NWAContainer
[2020-11-25 09:24:42,557 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 09:24:42,557 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 09:24:42,557 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 09:24:42,558 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 09:24:42,559 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:24:42" (3/4) ...
[2020-11-25 09:24:42,559 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@ddc263e and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:24:42, skipping insertion in model container
[2020-11-25 09:24:42,559 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:24:42" (4/4) ...
[2020-11-25 09:24:42,562 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 09:24:42,567 INFO  L110   BuchiProductObserver]: Initial RCFG 2302 locations, 3215 edges
[2020-11-25 09:24:42,567 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 09:24:42,578 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 09:24:44,282 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 09:24:44,289 INFO  L110   BuchiProductObserver]: BuchiProgram size 5816 locations, 10620 edges
[2020-11-25 09:24:44,289 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:24:44 BoogieIcfgContainer
[2020-11-25 09:24:44,289 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 09:24:44,289 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 09:24:44,289 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 09:24:44,291 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 09:24:44,291 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:24:44" (1/1) ...
[2020-11-25 09:24:44,411 INFO  L313           BlockEncoder]: Initial Icfg 5816 locations, 10620 edges
[2020-11-25 09:24:44,411 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 09:24:44,412 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 09:24:44,412 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 09:24:44,412 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 09:24:44,426 INFO  L70    emoveInfeasibleEdges]: Removed 102 edges and 21 locations because of local infeasibility
[2020-11-25 09:24:44,439 INFO  L70        RemoveSinkStates]: Removed 14 edges and 9 locations by removing sink states
[2020-11-25 09:24:44,454 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 09:24:44,458 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 09:24:44,463 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 09:24:44,463 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 09:24:44,466 INFO  L313           BlockEncoder]: Encoded RCFG 5748 locations, 10448 edges
[2020-11-25 09:24:44,467 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:24:44 BasicIcfg
[2020-11-25 09:24:44,467 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 09:24:44,467 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 09:24:44,467 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 09:24:44,469 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 09:24:44,469 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:24:44,469 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:24:41" (1/6) ...
[2020-11-25 09:24:44,470 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@284cd57 and model type XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:24:44, skipping insertion in model container
[2020-11-25 09:24:44,471 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:24:44,471 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:24:41" (2/6) ...
[2020-11-25 09:24:44,471 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@284cd57 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:24:44, skipping insertion in model container
[2020-11-25 09:24:44,471 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:24:44,471 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:24:42" (3/6) ...
[2020-11-25 09:24:44,471 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@284cd57 and model type XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:24:44, skipping insertion in model container
[2020-11-25 09:24:44,471 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:24:44,471 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:24:42" (4/6) ...
[2020-11-25 09:24:44,471 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@284cd57 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:24:44, skipping insertion in model container
[2020-11-25 09:24:44,471 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:24:44,472 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:24:44" (5/6) ...
[2020-11-25 09:24:44,472 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@284cd57 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 09:24:44, skipping insertion in model container
[2020-11-25 09:24:44,472 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:24:44,472 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:24:44" (6/6) ...
[2020-11-25 09:24:44,473 INFO  L404   chiAutomizerObserver]: Analyzing ICFG XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_totalsupply.bpl_BEv2
[2020-11-25 09:24:44,507 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 09:24:44,508 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 09:24:44,508 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 09:24:44,508 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 09:24:44,508 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 09:24:44,508 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 09:24:44,508 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 09:24:44,508 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 09:24:44,508 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 09:24:44,549 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5748 states.
[2020-11-25 09:24:44,613 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:24:44,613 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:24:44,613 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:24:44,622 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:24:44,623 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:24:44,623 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 09:24:44,623 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5748 states.
[2020-11-25 09:24:44,647 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:24:44,647 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:24:44,647 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:24:44,649 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:24:44,649 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_BasicToken0 := false;
[L2]                 call_totalSupply_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == XNC;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND TRUE   revert
[L1557]  RET         call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;

Loop:
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND TRUE   choice == 18
[L6389]              gas := gas - 21000;
[L6390]  COND FALSE  !(gas >= 0)
[L6521]  RET         call CorralChoice_XNC(this);

[2020-11-25 09:24:44,666 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:24:44,666 INFO  L82        PathProgramCache]: Analyzing trace with hash -1454839814, now seen corresponding path program 1 times
[2020-11-25 09:24:44,672 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:24:44,694 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:24:44,733 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:24:44,735 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:24:44,735 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 09:24:45,123 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:24:45,135 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 09:24:45,136 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 09:24:45,137 INFO  L87              Difference]: Start difference. First operand 5748 states. Second operand 4 states.
[2020-11-25 09:24:45,586 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:24:45,586 INFO  L93              Difference]: Finished difference Result 2946 states and 3369 transitions.
[2020-11-25 09:24:45,587 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 09:24:45,590 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2946 states and 3369 transitions.
[2020-11-25 09:24:45,614 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:24:45,641 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2946 states to 2942 states and 3361 transitions.
[2020-11-25 09:24:45,642 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 09:24:45,645 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 737
[2020-11-25 09:24:45,646 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2942 states and 3361 transitions.
[2020-11-25 09:24:45,655 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:24:45,655 INFO  L728         BuchiCegarLoop]: Abstraction has 2942 states and 3361 transitions.
[2020-11-25 09:24:45,675 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2942 states and 3361 transitions.
[2020-11-25 09:24:45,729 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2942 to 2942.
[2020-11-25 09:24:45,730 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2942 states.
[2020-11-25 09:24:45,736 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2942 states to 2942 states and 3361 transitions.
[2020-11-25 09:24:45,737 INFO  L751         BuchiCegarLoop]: Abstraction has 2942 states and 3361 transitions.
[2020-11-25 09:24:45,737 INFO  L631         BuchiCegarLoop]: Abstraction has 2942 states and 3361 transitions.
[2020-11-25 09:24:45,737 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 09:24:45,738 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2942 states and 3361 transitions.
[2020-11-25 09:24:45,746 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:24:45,746 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:24:45,746 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:24:45,749 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:24:45,749 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_BasicToken0 := false;
[L2]                 call_totalSupply_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == XNC;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND TRUE   revert
[L1557]  RET         call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND TRUE   choice == 15
[L6407]              gas := gas - 21000;
[L6408]  COND TRUE   gas >= 0
[L6409]              assume msgvalue_MSG == 0;
[L6410]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_BasicToken0 := true;
[L2]                 call_totalSupply_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L559]               havoc __exception;
[L560]               revert := false;
[L561]   COND FALSE  !(__exception)
[L585]   CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2892]              __ret_0_ := totalSupply__BasicToken[this];
[L585]   RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L586]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_XNC[this] == old(name_XNC[this])) && symbol_XNC[this] == old(symbol_XNC[this])) && decimals_XNC[this] == old(decimals_XNC[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6410]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L6521]  RET         call CorralChoice_XNC(this);

Loop:
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND TRUE   choice == 15
[L6407]              gas := gas - 21000;
[L6408]  COND TRUE   gas >= 0
[L6409]              assume msgvalue_MSG == 0;
[L6410]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_BasicToken0 := true;
[L2]                 call_totalSupply_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L559]               havoc __exception;
[L560]               revert := false;
[L561]   COND FALSE  !(__exception)
[L585]   CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2892]              __ret_0_ := totalSupply__BasicToken[this];
[L585]   RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L586]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_XNC[this] == old(name_XNC[this])) && symbol_XNC[this] == old(symbol_XNC[this])) && decimals_XNC[this] == old(decimals_XNC[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6410]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L6521]  RET         call CorralChoice_XNC(this);

[2020-11-25 09:24:45,754 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:24:45,754 INFO  L82        PathProgramCache]: Analyzing trace with hash -1722919933, now seen corresponding path program 1 times
[2020-11-25 09:24:45,755 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:24:45,769 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:24:45,790 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:24:45,791 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:24:45,791 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 09:24:45,792 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:24:45,792 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 09:24:45,792 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 09:24:45,792 INFO  L87              Difference]: Start difference. First operand 2942 states and 3361 transitions. cyclomatic complexity: 421 Second operand 3 states.
[2020-11-25 09:24:45,864 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:24:45,864 INFO  L93              Difference]: Finished difference Result 3664 states and 4145 transitions.
[2020-11-25 09:24:45,864 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 09:24:45,864 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3664 states and 4145 transitions.
[2020-11-25 09:24:45,878 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 09:24:45,890 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3664 states to 3664 states and 4145 transitions.
[2020-11-25 09:24:45,890 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 929
[2020-11-25 09:24:45,891 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 929
[2020-11-25 09:24:45,891 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3664 states and 4145 transitions.
[2020-11-25 09:24:45,896 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:24:45,896 INFO  L728         BuchiCegarLoop]: Abstraction has 3664 states and 4145 transitions.
[2020-11-25 09:24:45,899 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3664 states and 4145 transitions.
[2020-11-25 09:24:45,927 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3664 to 3094.
[2020-11-25 09:24:45,928 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3094 states.
[2020-11-25 09:24:45,931 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3094 states to 3094 states and 3443 transitions.
[2020-11-25 09:24:45,931 INFO  L751         BuchiCegarLoop]: Abstraction has 3094 states and 3443 transitions.
[2020-11-25 09:24:45,931 INFO  L631         BuchiCegarLoop]: Abstraction has 3094 states and 3443 transitions.
[2020-11-25 09:24:45,931 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 09:24:45,931 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3094 states and 3443 transitions.
[2020-11-25 09:24:45,937 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:24:45,937 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:24:45,937 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:24:45,942 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:24:45,942 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_BasicToken0 := false;
[L2]                 call_totalSupply_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == XNC;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND TRUE   !(_cap_s704 > 0)
[L3424]              revert := true;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND TRUE   revert
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND TRUE   revert
[L1557]  RET         call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND TRUE   choice == 15
[L6407]              gas := gas - 21000;
[L6408]  COND TRUE   gas >= 0
[L6409]              assume msgvalue_MSG == 0;
[L6410]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_BasicToken0 := true;
[L2]                 call_totalSupply_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L559]               havoc __exception;
[L560]               revert := false;
[L561]   COND FALSE  !(__exception)
[L585]   CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2892]              __ret_0_ := totalSupply__BasicToken[this];
[L585]   RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L586]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_XNC[this] == old(name_XNC[this])) && symbol_XNC[this] == old(symbol_XNC[this])) && decimals_XNC[this] == old(decimals_XNC[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6410]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L6521]  RET         call CorralChoice_XNC(this);

Loop:
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND TRUE   choice == 15
[L6407]              gas := gas - 21000;
[L6408]  COND TRUE   gas >= 0
[L6409]              assume msgvalue_MSG == 0;
[L6410]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_BasicToken0 := true;
[L2]                 call_totalSupply_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L559]               havoc __exception;
[L560]               revert := false;
[L561]   COND FALSE  !(__exception)
[L585]   CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2892]              __ret_0_ := totalSupply__BasicToken[this];
[L585]   RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L586]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_XNC[this] == old(name_XNC[this])) && symbol_XNC[this] == old(symbol_XNC[this])) && decimals_XNC[this] == old(decimals_XNC[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6410]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L6521]  RET         call CorralChoice_XNC(this);

[2020-11-25 09:24:45,952 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:24:45,953 INFO  L82        PathProgramCache]: Analyzing trace with hash -553356090, now seen corresponding path program 1 times
[2020-11-25 09:24:45,954 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:24:45,978 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:24:46,241 INFO  L134       CoverageAnalysis]: Checked inductivity of 3875 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3875 trivial. 0 not checked.
[2020-11-25 09:24:46,241 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:24:46,241 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 09:24:46,242 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:24:46,242 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 09:24:46,243 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 09:24:46,243 INFO  L87              Difference]: Start difference. First operand 3094 states and 3443 transitions. cyclomatic complexity: 351 Second operand 3 states.
[2020-11-25 09:24:46,293 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:24:46,293 INFO  L93              Difference]: Finished difference Result 3658 states and 4067 transitions.
[2020-11-25 09:24:46,293 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 09:24:46,293 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3658 states and 4067 transitions.
[2020-11-25 09:24:46,303 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 09:24:46,316 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3658 states to 3492 states and 3879 transitions.
[2020-11-25 09:24:46,316 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 873
[2020-11-25 09:24:46,316 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 888
[2020-11-25 09:24:46,317 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3492 states and 3879 transitions.
[2020-11-25 09:24:46,321 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:24:46,321 INFO  L728         BuchiCegarLoop]: Abstraction has 3492 states and 3879 transitions.
[2020-11-25 09:24:46,324 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3492 states and 3879 transitions.
[2020-11-25 09:24:46,350 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3492 to 3144.
[2020-11-25 09:24:46,350 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3144 states.
[2020-11-25 09:24:46,353 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3144 states to 3144 states and 3443 transitions.
[2020-11-25 09:24:46,353 INFO  L751         BuchiCegarLoop]: Abstraction has 3144 states and 3443 transitions.
[2020-11-25 09:24:46,353 INFO  L631         BuchiCegarLoop]: Abstraction has 3144 states and 3443 transitions.
[2020-11-25 09:24:46,353 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 09:24:46,353 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3144 states and 3443 transitions.
[2020-11-25 09:24:46,357 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 09:24:46,357 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:24:46,357 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:24:46,359 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:24:46,359 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_BasicToken0 := false;
[L2]                 call_totalSupply_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == XNC;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND FALSE  !(!(_cap_s704 > 0))
[L3427]              cap_CappedToken[this] := _cap_s704;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND FALSE  !(revert)
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND FALSE  !(revert)
[L3654]  CALL        call XNC_XNC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3580]              assume msgsender_MSG != null;
[L3581]              Balance[this] := 0;
[L3582]              name_XNC[this] := 410647391;
[L3583]              symbol_XNC[this] := 1087999494;
[L3584]              decimals_XNC[this] := 18;
[L3654]  RET         call XNC_XNC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3655]  COND FALSE  !(revert)
[L1557]  RET         call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND TRUE   choice == 15
[L6407]              gas := gas - 21000;
[L6408]  COND TRUE   gas >= 0
[L6409]              assume msgvalue_MSG == 0;
[L6410]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_BasicToken0 := true;
[L2]                 call_totalSupply_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L559]               havoc __exception;
[L560]               revert := false;
[L561]   COND FALSE  !(__exception)
[L585]   CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2892]              __ret_0_ := totalSupply__BasicToken[this];
[L585]   RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L586]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_XNC[this] == old(name_XNC[this])) && symbol_XNC[this] == old(symbol_XNC[this])) && decimals_XNC[this] == old(decimals_XNC[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6410]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L6521]  RET         call CorralChoice_XNC(this);

Loop:
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND TRUE   choice == 15
[L6407]              gas := gas - 21000;
[L6408]  COND TRUE   gas >= 0
[L6409]              assume msgvalue_MSG == 0;
[L6410]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_BasicToken0 := true;
[L2]                 call_totalSupply_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L559]               havoc __exception;
[L560]               revert := false;
[L561]   COND FALSE  !(__exception)
[L585]   CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2892]              __ret_0_ := totalSupply__BasicToken[this];
[L585]   RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L586]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_XNC[this] == old(name_XNC[this])) && symbol_XNC[this] == old(symbol_XNC[this])) && decimals_XNC[this] == old(decimals_XNC[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6410]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L6521]  RET         call CorralChoice_XNC(this);

[2020-11-25 09:24:46,366 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:24:46,366 INFO  L82        PathProgramCache]: Analyzing trace with hash 1270270825, now seen corresponding path program 1 times
[2020-11-25 09:24:46,367 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:24:46,389 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:24:46,607 INFO  L134       CoverageAnalysis]: Checked inductivity of 3875 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3875 trivial. 0 not checked.
[2020-11-25 09:24:46,607 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:24:46,607 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 09:24:46,608 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:24:46,608 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 09:24:46,608 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 09:24:46,608 INFO  L87              Difference]: Start difference. First operand 3144 states and 3443 transitions. cyclomatic complexity: 301 Second operand 4 states.
[2020-11-25 09:24:46,653 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:24:46,653 INFO  L93              Difference]: Finished difference Result 3145 states and 3442 transitions.
[2020-11-25 09:24:46,653 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 09:24:46,653 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3145 states and 3442 transitions.
[2020-11-25 09:24:46,658 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 09:24:46,665 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3145 states to 3135 states and 3432 transitions.
[2020-11-25 09:24:46,666 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 826
[2020-11-25 09:24:46,666 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 826
[2020-11-25 09:24:46,666 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3135 states and 3432 transitions.
[2020-11-25 09:24:46,668 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:24:46,668 INFO  L728         BuchiCegarLoop]: Abstraction has 3135 states and 3432 transitions.
[2020-11-25 09:24:46,671 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3135 states and 3432 transitions.
[2020-11-25 09:24:46,690 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3135 to 3133.
[2020-11-25 09:24:46,690 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3133 states.
[2020-11-25 09:24:46,693 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3133 states to 3133 states and 3430 transitions.
[2020-11-25 09:24:46,693 INFO  L751         BuchiCegarLoop]: Abstraction has 3133 states and 3430 transitions.
[2020-11-25 09:24:46,693 INFO  L631         BuchiCegarLoop]: Abstraction has 3133 states and 3430 transitions.
[2020-11-25 09:24:46,693 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 09:24:46,694 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3133 states and 3430 transitions.
[2020-11-25 09:24:46,697 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 09:24:46,697 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:24:46,697 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:24:46,699 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:24:46,699 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_BasicToken0 := false;
[L2]                 call_totalSupply_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == XNC;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND FALSE  !(!(_cap_s704 > 0))
[L3427]              cap_CappedToken[this] := _cap_s704;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND FALSE  !(revert)
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND FALSE  !(revert)
[L3654]  CALL        call XNC_XNC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3580]              assume msgsender_MSG != null;
[L3581]              Balance[this] := 0;
[L3582]              name_XNC[this] := 410647391;
[L3583]              symbol_XNC[this] := 1087999494;
[L3584]              decimals_XNC[this] := 18;
[L3654]  RET         call XNC_XNC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3655]  COND FALSE  !(revert)
[L1557]  RET         call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND TRUE   choice == 15
[L6407]              gas := gas - 21000;
[L6408]  COND TRUE   gas >= 0
[L6409]              assume msgvalue_MSG == 0;
[L6410]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_BasicToken0 := true;
[L2]                 call_totalSupply_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L559]               havoc __exception;
[L560]               revert := false;
[L561]   COND TRUE   __exception
[L562]               __tmp__Balance := Balance;
[L563]               __tmp__DType := DType;
[L564]               __tmp__Alloc := Alloc;
[L565]               __tmp__balance_ADDR := balance_ADDR;
[L566]               __tmp__M_Ref_int := M_Ref_int;
[L567]               __tmp__sum_balances0 := sum_balances0;
[L568]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L569]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L570]               __tmp__sum_allowed1 := sum_allowed1;
[L571]               __tmp__Length := Length;
[L572]               __tmp__now := now;
[L573]               __tmp__owner_Ownable := owner_Ownable;
[L574]               __tmp__balances_BasicToken := balances_BasicToken;
[L575]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L576]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L577]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L578]               __tmp__cap_CappedToken := cap_CappedToken;
[L579]               __tmp__name_XNC := name_XNC;
[L580]               __tmp__symbol_XNC := symbol_XNC;
[L581]               __tmp__decimals_XNC := decimals_XNC;
[L582]   CALL        call __ret_0_ := totalSupply_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2886]              __ret_0_ := __tmp__totalSupply__BasicToken[this];
[L582]   RET         call __ret_0_ := totalSupply_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L583]               assume revert || gas < 0;
[L6410]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L6521]  RET         call CorralChoice_XNC(this);

Loop:
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND TRUE   choice == 15
[L6407]              gas := gas - 21000;
[L6408]  COND TRUE   gas >= 0
[L6409]              assume msgvalue_MSG == 0;
[L6410]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_BasicToken0 := true;
[L2]                 call_totalSupply_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L559]               havoc __exception;
[L560]               revert := false;
[L561]   COND TRUE   __exception
[L562]               __tmp__Balance := Balance;
[L563]               __tmp__DType := DType;
[L564]               __tmp__Alloc := Alloc;
[L565]               __tmp__balance_ADDR := balance_ADDR;
[L566]               __tmp__M_Ref_int := M_Ref_int;
[L567]               __tmp__sum_balances0 := sum_balances0;
[L568]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L569]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L570]               __tmp__sum_allowed1 := sum_allowed1;
[L571]               __tmp__Length := Length;
[L572]               __tmp__now := now;
[L573]               __tmp__owner_Ownable := owner_Ownable;
[L574]               __tmp__balances_BasicToken := balances_BasicToken;
[L575]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L576]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L577]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L578]               __tmp__cap_CappedToken := cap_CappedToken;
[L579]               __tmp__name_XNC := name_XNC;
[L580]               __tmp__symbol_XNC := symbol_XNC;
[L581]               __tmp__decimals_XNC := decimals_XNC;
[L582]   CALL        call __ret_0_ := totalSupply_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2886]              __ret_0_ := __tmp__totalSupply__BasicToken[this];
[L582]   RET         call __ret_0_ := totalSupply_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L583]               assume revert || gas < 0;
[L6410]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L6521]  RET         call CorralChoice_XNC(this);

[2020-11-25 09:24:46,705 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:24:46,705 INFO  L82        PathProgramCache]: Analyzing trace with hash -1923617589, now seen corresponding path program 1 times
[2020-11-25 09:24:46,706 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:24:46,726 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:24:46,983 INFO  L134       CoverageAnalysis]: Checked inductivity of 3875 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3875 trivial. 0 not checked.
[2020-11-25 09:24:46,983 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:24:46,983 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 09:24:46,984 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:24:46,984 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 09:24:46,984 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 09:24:46,984 INFO  L87              Difference]: Start difference. First operand 3133 states and 3430 transitions. cyclomatic complexity: 299 Second operand 5 states.
[2020-11-25 09:24:47,144 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:24:47,144 INFO  L93              Difference]: Finished difference Result 2086 states and 2280 transitions.
[2020-11-25 09:24:47,145 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 09:24:47,145 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2086 states and 2280 transitions.
[2020-11-25 09:24:47,149 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:24:47,149 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2086 states to 0 states and 0 transitions.
[2020-11-25 09:24:47,149 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 09:24:47,149 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 09:24:47,149 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 09:24:47,149 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:24:47,149 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:24:47,149 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:24:47,149 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:24:47,149 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 09:24:47,149 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 09:24:47,149 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:24:47,149 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 09:24:47,152 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:24:47 BasicIcfg
[2020-11-25 09:24:47,152 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 09:24:47,153 INFO  L168              Benchmark]: Toolchain (without parser) took 5883.85 ms. Allocated memory was 1.0 GB in the beginning and 1.9 GB in the end (delta: 842.5 MB). Free memory was 929.8 MB in the beginning and 1.1 GB in the end (delta: -143.3 MB). Peak memory consumption was 699.3 MB. Max. memory is 15.3 GB.
[2020-11-25 09:24:47,154 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 09:24:47,154 INFO  L168              Benchmark]: Boogie Preprocessor took 121.73 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 09:24:47,154 INFO  L168              Benchmark]: UtopiaSpecLang took 67.90 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 09:24:47,155 INFO  L168              Benchmark]: Boogie Printer took 25.64 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:24:47,155 INFO  L168              Benchmark]: RCFGBuilder took 1032.69 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 71.3 MB). Free memory was 903.0 MB in the beginning and 1.0 GB in the end (delta: -114.0 MB). Peak memory consumption was 190.6 MB. Max. memory is 15.3 GB.
[2020-11-25 09:24:47,155 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.59 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 13.9 MB). Peak memory consumption was 13.9 MB. Max. memory is 15.3 GB.
[2020-11-25 09:24:47,156 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1731.99 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 153.1 MB). Free memory was 1.0 GB in the beginning and 911.0 MB in the end (delta: 92.1 MB). Peak memory consumption was 520.0 MB. Max. memory is 15.3 GB.
[2020-11-25 09:24:47,156 INFO  L168              Benchmark]: BlockEncodingV2 took 177.35 ms. Allocated memory is still 1.3 GB. Free memory was 911.0 MB in the beginning and 803.3 MB in the end (delta: 107.7 MB). Peak memory consumption was 107.7 MB. Max. memory is 15.3 GB.
[2020-11-25 09:24:47,156 INFO  L168              Benchmark]: BuchiAutomizer took 2685.63 ms. Allocated memory was 1.3 GB in the beginning and 1.9 GB in the end (delta: 618.1 MB). Free memory was 803.3 MB in the beginning and 1.1 GB in the end (delta: -269.8 MB). Peak memory consumption was 348.3 MB. Max. memory is 15.3 GB.
[2020-11-25 09:24:47,159 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5816 locations, 10620 edges
  - StatisticsResult: Encoded RCFG
    5748 locations, 10448 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 121.73 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 67.90 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 25.64 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1032.69 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 71.3 MB). Free memory was 903.0 MB in the beginning and 1.0 GB in the end (delta: -114.0 MB). Peak memory consumption was 190.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.59 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 13.9 MB). Peak memory consumption was 13.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1731.99 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 153.1 MB). Free memory was 1.0 GB in the beginning and 911.0 MB in the end (delta: 92.1 MB). Peak memory consumption was 520.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 177.35 ms. Allocated memory is still 1.3 GB. Free memory was 911.0 MB in the beginning and 803.3 MB in the end (delta: 107.7 MB). Peak memory consumption was 107.7 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 2685.63 ms. Allocated memory was 1.3 GB in the beginning and 1.9 GB in the end (delta: 618.1 MB). Free memory was 803.3 MB in the beginning and 1.1 GB in the end (delta: -269.8 MB). Peak memory consumption was 348.3 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2302 locations, 3215 edges
  - StatisticsResult: BuchiProgram size
    5816 locations, 10620 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 5 terminating modules (5 trivial, 0 deterministic, 0 nondeterministic). 5 modules have a trivial ranking function, the largest among these consists of 5 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 2.6s and 6 iterations.  TraceHistogramMax:24. Analysis of lassos took 1.3s. Construction of modules took 0.4s. BÃ¼chi inclusion checks took 0.3s. Highest rank in rank-based complementation 0. Minimization of det autom 5. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 4 MinimizatonAttempts, 920 StatesRemovedByMinimization, 3 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 3144 states and ocurred in iteration 3.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 15693 SDtfs, 10268 SDslu, 15015 SDs, 0 SdLazy, 2123 SolverSat, 2398 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 0.4s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU5 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_totalSupply_(success_totalSupply_BasicToken0)asicToken0) ==> ( <>(success_totalSupply_BasicToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
