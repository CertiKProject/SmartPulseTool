This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 02:44:24,644 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 02:44:24,645 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 02:44:24,657 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 02:44:24,657 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 02:44:24,659 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 02:44:24,660 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 02:44:24,662 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 02:44:24,664 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 02:44:24,664 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 02:44:24,665 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 02:44:24,665 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 02:44:24,666 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 02:44:24,667 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 02:44:24,668 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 02:44:24,669 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 02:44:24,669 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 02:44:24,671 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 02:44:24,672 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 02:44:24,673 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 02:44:24,674 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 02:44:24,675 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 02:44:24,676 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 02:44:24,677 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 02:44:24,677 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 02:44:24,677 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 02:44:24,678 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 02:44:24,678 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 02:44:24,678 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 02:44:24,679 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 02:44:24,679 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 02:44:24,680 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 02:44:24,680 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 02:44:24,681 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 02:44:24,682 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 02:44:24,682 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 02:44:24,682 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 02:44:24,682 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 02:44:24,683 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 02:44:24,683 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 02:44:24,684 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 02:44:24,684 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 02:44:24,692 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 02:44:24,692 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 02:44:24,693 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 02:44:24,693 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 02:44:24,693 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 02:44:24,693 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 02:44:24,694 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 02:44:24,694 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 02:44:24,694 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 02:44:24,694 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 02:44:24,694 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 02:44:24,694 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 02:44:24,694 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 02:44:24,694 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 02:44:24,694 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 02:44:24,694 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 02:44:24,695 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 02:44:24,695 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 02:44:24,695 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 02:44:24,695 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 02:44:24,695 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 02:44:24,695 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 02:44:24,695 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 02:44:24,695 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 02:44:24,695 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 02:44:24,696 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 02:44:24,721 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 02:44:24,731 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 02:44:24,736 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 02:44:24,738 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 02:44:24,739 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 02:44:24,740 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-normal.bpl
[2020-11-25 02:44:24,741 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-normal.bpl'
[2020-11-25 02:44:24,881 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 02:44:24,883 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 02:44:24,883 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 02:44:24,883 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 02:44:24,883 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 02:44:24,900 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:44:24" (1/1) ...
[2020-11-25 02:44:24,902 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:44:24" (1/1) ...
[2020-11-25 02:44:24,956 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:44:24" (1/1) ...
[2020-11-25 02:44:24,957 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:44:24" (1/1) ...
[2020-11-25 02:44:24,997 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:44:24" (1/1) ...
[2020-11-25 02:44:25,022 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:44:24" (1/1) ...
[2020-11-25 02:44:25,040 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:44:24" (1/1) ...
[2020-11-25 02:44:25,065 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 02:44:25,066 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 02:44:25,066 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 02:44:25,069 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 02:44:25,075 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:44:24" (1/1) ...
[2020-11-25 02:44:25,104 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ONIT.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= _balances_ERC20[this][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ONIT.transfer(to, value), return == true && _balances_ERC20[this][msg.sender] == old(_balances_ERC20[this][msg.sender]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && implementation_ONIT[this] == old(implementation_ONIT[this]) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]]) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && newOwner_Ownable[this] == old(newOwner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 02:44:25,110 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ONIT.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= _balances_ERC20[this][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ONIT.transfer(to, value), return == true && _balances_ERC20[this][msg.sender] == old(_balances_ERC20[this][msg.sender]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && implementation_ONIT[this] == old(implementation_ONIT[this]) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]]) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && newOwner_Ownable[this] == old(newOwner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 02:44:25,119 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ONIT.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= _balances_ERC20[this][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ONIT.transfer(to, value), return == true && _balances_ERC20[this][msg.sender] == old(_balances_ERC20[this][msg.sender]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && implementation_ONIT[this] == old(implementation_ONIT[this]) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]]) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && newOwner_Ownable[this] == old(newOwner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 02:44:25,133 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( p1!=msg.sender && p1!=to_s1288 ) && msg.sender!=to_s1288 ) && value_s1288<=_balances_ERC20[this][msg.sender] ) && ( _balances_ERC20[this][to_s1288] + value_s1288 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && value_s1288>=0 ) && value_s1288<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s1288]>=0 ) && _balances_ERC20[this][to_s1288]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>],IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],[IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],IdentifierExpression[value_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],[IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],[IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 02:44:25,138 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( __ret_0_==true && _balances_ERC20[this][msg.sender]==( ( old(_balances_ERC20[this][msg.sender]) ) - value_s1288 ) ) && _balances_ERC20[this][to_s1288]==( ( old(_balances_ERC20[this][to_s1288]) ) + value_s1288 ) ) && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _allowed_ERC20[this]==( old(_allowed_ERC20[this]) ) ) && _balances_ERC20[this][p1]==( old(_balances_ERC20[this][p1]) ) ) && implementation_ONIT[this]==( old(implementation_ONIT[this]) ) ) && M_Ref_Ref[timelockList_ONIT[this]]==( old(M_Ref_Ref[timelockList_ONIT[this]]) ) ) && frozenAccount_ONIT[this]==( old(frozenAccount_ONIT[this]) ) ) && _paused_Pausable[this]==( old(_paused_Pausable[this]) ) ) && _pausers_PauserRole[this]==( old(_pausers_PauserRole[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) && newOwner_Ownable[this]==( old(newOwner_Ownable[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ONIT>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]],IdentifierExpression[value_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],[IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],[IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]],IdentifierExpression[value_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[implementation_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[implementation_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[M_Ref_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[timelockList_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[M_Ref_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[timelockList_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[frozenAccount_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[frozenAccount_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]]]]
[2020-11-25 02:44:25,147 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ONIT.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= _balances_ERC20[this][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ONIT.transfer(to, value), return == true && _balances_ERC20[this][msg.sender] == old(_balances_ERC20[this][msg.sender]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && implementation_ONIT[this] == old(implementation_ONIT[this]) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]]) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && newOwner_Ownable[this] == old(newOwner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 02:44:25,148 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ONIT0) ==> ( <>AP(success_transfer_ONIT0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 02:44:25,171 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:44:25 PropertyContainer
[2020-11-25 02:44:25,171 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 02:44:25,172 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 02:44:25,172 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 02:44:25,172 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 02:44:25,173 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:44:24" (1/2) ...
[2020-11-25 02:44:25,173 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 02:44:25,173 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 02:44:25,206 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:44:25" (2/2) ...
[2020-11-25 02:44:25,206 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 02:44:25,206 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 02:44:25,206 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 02:44:25,207 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 02:44:25,210 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:44:24" (1/2) ...
[2020-11-25 02:44:25,267 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 02:44:25,267 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 02:44:25,267 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT.LockInfo_ctor__success
[2020-11-25 02:44:25,267 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:44:25,267 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 02:44:25,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 02:44:25,268 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:44:25,268 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:44:25,268 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:44:25,268 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:44:25,268 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:44:25,268 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:44:25,268 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 02:44:25,268 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 02:44:25,268 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 02:44:25,269 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 02:44:25,269 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 02:44:25,269 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 02:44:25,269 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 02:44:25,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 02:44:25,269 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_Ownable
[2020-11-25 02:44:25,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_Ownable
[2020-11-25 02:44:25,269 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 02:44:25,270 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 02:44:25,270 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Ownable
[2020-11-25 02:44:25,270 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Ownable
[2020-11-25 02:44:25,270 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 02:44:25,270 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 02:44:25,270 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Ownable
[2020-11-25 02:44:25,270 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Ownable
[2020-11-25 02:44:25,270 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:44:25,270 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 02:44:25,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 02:44:25,271 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 02:44:25,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 02:44:25,271 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 02:44:25,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 02:44:25,271 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole
[2020-11-25 02:44:25,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole
[2020-11-25 02:44:25,271 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 02:44:25,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 02:44:25,271 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:44:25,272 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:44:25,272 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:44:25,272 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 02:44:25,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 02:44:25,272 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 02:44:25,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 02:44:25,272 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 02:44:25,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 02:44:25,272 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 02:44:25,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 02:44:25,273 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:44:25,273 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 02:44:25,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 02:44:25,273 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 02:44:25,273 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 02:44:25,273 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 02:44:25,273 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 02:44:25,273 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 02:44:25,273 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 02:44:25,273 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:44:25,274 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 02:44:25,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 02:44:25,274 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 02:44:25,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 02:44:25,274 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 02:44:25,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 02:44:25,274 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 02:44:25,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 02:44:25,274 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 02:44:25,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 02:44:25,274 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 02:44:25,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 02:44:25,275 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:44:25,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:44:25,275 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:44:25,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:44:25,275 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:44:25,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:44:25,275 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:44:25,275 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:44:25,275 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:44:25,276 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:44:25,276 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:44:25,276 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:44:25,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:44:25,276 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:44:25,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:44:25,276 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:44:25,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:44:25,276 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:44:25,276 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:44:25,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:44:25,277 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 02:44:25,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 02:44:25,277 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 02:44:25,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 02:44:25,277 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 02:44:25,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 02:44:25,277 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT_NoBaseCtor__success
[2020-11-25 02:44:25,277 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT
[2020-11-25 02:44:25,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT
[2020-11-25 02:44:25,277 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ONIT
[2020-11-25 02:44:25,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ONIT
[2020-11-25 02:44:25,278 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ONIT
[2020-11-25 02:44:25,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ONIT
[2020-11-25 02:44:25,278 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ONIT
[2020-11-25 02:44:25,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ONIT
[2020-11-25 02:44:25,278 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_ONIT
[2020-11-25 02:44:25,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_ONIT
[2020-11-25 02:44:25,278 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_ONIT
[2020-11-25 02:44:25,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_ONIT
[2020-11-25 02:44:25,278 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ONIT
[2020-11-25 02:44:25,279 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ONIT
[2020-11-25 02:44:25,279 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_ONIT
[2020-11-25 02:44:25,279 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_ONIT
[2020-11-25 02:44:25,279 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_ONIT
[2020-11-25 02:44:25,279 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_ONIT
[2020-11-25 02:44:25,279 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_ONIT
[2020-11-25 02:44:25,279 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_ONIT
[2020-11-25 02:44:25,279 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_ONIT__success
[2020-11-25 02:44:25,279 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_ONIT__success
[2020-11-25 02:44:25,279 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_ONIT__success
[2020-11-25 02:44:25,280 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~uint256_ONIT
[2020-11-25 02:44:25,280 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~uint256_ONIT
[2020-11-25 02:44:25,280 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_ONIT__success
[2020-11-25 02:44:25,280 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ONIT__success
[2020-11-25 02:44:25,280 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_ONIT
[2020-11-25 02:44:25,280 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_ONIT
[2020-11-25 02:44:25,280 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_ONIT
[2020-11-25 02:44:25,280 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_ONIT
[2020-11-25 02:44:25,280 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ONIT
[2020-11-25 02:44:25,281 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ONIT
[2020-11-25 02:44:25,281 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 02:44:25,281 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 02:44:25,281 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 02:44:25,281 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 02:44:25,281 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__success
[2020-11-25 02:44:25,281 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 02:44:25,281 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 02:44:25,281 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 02:44:25,282 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__success
[2020-11-25 02:44:25,282 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 02:44:25,282 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 02:44:25,282 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 02:44:25,282 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 02:44:25,282 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 02:44:25,282 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 02:44:25,282 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 02:44:25,283 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 02:44:25,283 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 02:44:25,283 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 02:44:25,283 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 02:44:25,283 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 02:44:25,283 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 02:44:25,283 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 02:44:25,283 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:44:25,283 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:44:25,283 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:44:25,283 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:44:25,283 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ONIT
[2020-11-25 02:44:25,284 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 02:44:25,284 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 02:44:25,284 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 02:44:25,284 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT.LockInfo_ctor__fail
[2020-11-25 02:44:25,284 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:44:25,284 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 02:44:25,284 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 02:44:25,284 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:44:25,285 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:44:25,285 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:44:25,285 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:44:25,285 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:44:25,285 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:44:25,285 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 02:44:25,285 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 02:44:25,285 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 02:44:25,285 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 02:44:25,285 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 02:44:25,285 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 02:44:25,286 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 02:44:25,286 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 02:44:25,286 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_Ownable__success
[2020-11-25 02:44:25,286 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_Ownable__fail
[2020-11-25 02:44:25,286 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 02:44:25,286 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 02:44:25,286 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Ownable__success
[2020-11-25 02:44:25,286 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Ownable__fail
[2020-11-25 02:44:25,286 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 02:44:25,286 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 02:44:25,286 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Ownable__success
[2020-11-25 02:44:25,286 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Ownable__fail
[2020-11-25 02:44:25,287 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:44:25,287 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 02:44:25,287 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 02:44:25,287 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 02:44:25,287 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:44:25,287 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 02:44:25,287 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:44:25,287 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__success
[2020-11-25 02:44:25,287 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__fail
[2020-11-25 02:44:25,287 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 02:44:25,287 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:44:25,288 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:44:25,288 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:44:25,288 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:44:25,288 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 02:44:25,288 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 02:44:25,288 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 02:44:25,288 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 02:44:25,288 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 02:44:25,288 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 02:44:25,288 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 02:44:25,288 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 02:44:25,288 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:44:25,289 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 02:44:25,289 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 02:44:25,289 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:44:25,289 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 02:44:25,289 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 02:44:25,289 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 02:44:25,289 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 02:44:25,289 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 02:44:25,289 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:44:25,289 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 02:44:25,289 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:44:25,290 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:44:25,290 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:44:25,290 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:44:25,290 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:44:25,290 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:44:25,290 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:44:25,290 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:44:25,290 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:44:25,290 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:44:25,290 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:44:25,290 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:44:25,290 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:44:25,291 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:44:25,291 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:44:25,291 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:44:25,291 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:44:25,291 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:44:25,291 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:44:25,291 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:44:25,291 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:44:25,291 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:44:25,291 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:44:25,291 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:44:25,292 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:44:25,292 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 02:44:25,292 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 02:44:25,292 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 02:44:25,292 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:44:25,292 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 02:44:25,292 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:44:25,292 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT_NoBaseCtor__fail
[2020-11-25 02:44:25,292 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT__success
[2020-11-25 02:44:25,292 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT__fail
[2020-11-25 02:44:25,292 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ONIT__success
[2020-11-25 02:44:25,292 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ONIT__fail
[2020-11-25 02:44:25,292 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ONIT__success
[2020-11-25 02:44:25,293 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ONIT__fail
[2020-11-25 02:44:25,293 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ONIT__success
[2020-11-25 02:44:25,293 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ONIT__fail
[2020-11-25 02:44:25,293 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_ONIT__success
[2020-11-25 02:44:25,293 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_ONIT__fail
[2020-11-25 02:44:25,293 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_ONIT__success
[2020-11-25 02:44:25,293 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_ONIT__fail
[2020-11-25 02:44:25,293 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ONIT__success
[2020-11-25 02:44:25,293 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:44:25,293 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_ONIT__success
[2020-11-25 02:44:25,293 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:44:25,294 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_ONIT__success
[2020-11-25 02:44:25,294 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_ONIT__fail
[2020-11-25 02:44:25,294 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_ONIT__success
[2020-11-25 02:44:25,294 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_ONIT__fail
[2020-11-25 02:44:25,294 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:44:25,294 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_ONIT__fail
[2020-11-25 02:44:25,294 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_ONIT__fail
[2020-11-25 02:44:25,294 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~uint256_ONIT__success
[2020-11-25 02:44:25,294 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~uint256_ONIT__fail
[2020-11-25 02:44:25,294 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_ONIT__fail
[2020-11-25 02:44:25,294 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ONIT__fail
[2020-11-25 02:44:25,295 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_ONIT__success
[2020-11-25 02:44:25,295 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_ONIT__fail
[2020-11-25 02:44:25,295 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_ONIT__success
[2020-11-25 02:44:25,295 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_ONIT__fail
[2020-11-25 02:44:25,295 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ONIT__success
[2020-11-25 02:44:25,295 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ONIT__fail
[2020-11-25 02:44:25,295 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 02:44:25,295 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 02:44:25,295 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 02:44:25,295 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 02:44:25,295 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__fail
[2020-11-25 02:44:25,296 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 02:44:25,296 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 02:44:25,296 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 02:44:25,296 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__fail
[2020-11-25 02:44:25,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 02:44:25,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 02:44:25,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 02:44:25,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 02:44:25,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT.LockInfo_ctor__fail
[2020-11-25 02:44:25,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT.LockInfo_ctor__success
[2020-11-25 02:44:25,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:44:25,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:44:25,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 02:44:25,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 02:44:25,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:44:25,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:44:25,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:44:25,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:44:25,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:44:25,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:44:25,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:44:25,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:44:25,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:44:25,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:44:25,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:44:25,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:44:25,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 02:44:25,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 02:44:25,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 02:44:25,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 02:44:25,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 02:44:25,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 02:44:25,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 02:44:25,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 02:44:25,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 02:44:25,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 02:44:25,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 02:44:25,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 02:44:25,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_Ownable__fail
[2020-11-25 02:44:25,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_Ownable__success
[2020-11-25 02:44:25,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 02:44:25,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 02:44:25,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Ownable__fail
[2020-11-25 02:44:25,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Ownable__success
[2020-11-25 02:44:25,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 02:44:25,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 02:44:25,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Ownable__fail
[2020-11-25 02:44:25,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Ownable__success
[2020-11-25 02:44:25,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:44:25,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:44:25,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 02:44:25,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 02:44:25,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:44:25,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 02:44:25,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:44:25,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 02:44:25,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__fail
[2020-11-25 02:44:25,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__success
[2020-11-25 02:44:25,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:44:25,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 02:44:25,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:44:25,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:44:25,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:44:25,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:44:25,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:44:25,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:44:25,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 02:44:25,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 02:44:25,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 02:44:25,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 02:44:25,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 02:44:25,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 02:44:25,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 02:44:25,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 02:44:25,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:44:25,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:44:25,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 02:44:25,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 02:44:25,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:44:25,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:44:25,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 02:44:25,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 02:44:25,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 02:44:25,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 02:44:25,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:44:25,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 02:44:25,303 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:44:25,303 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 02:44:25,303 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:44:25,303 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:44:25,303 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:44:25,303 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:44:25,303 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:44:25,303 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:44:25,303 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:44:25,303 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:44:25,303 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:44:25,303 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:44:25,304 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:44:25,304 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:44:25,304 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:44:25,304 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:44:25,304 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:44:25,304 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:44:25,304 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:44:25,304 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:44:25,304 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:44:25,304 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:44:25,304 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:44:25,304 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:44:25,304 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:44:25,305 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:44:25,305 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:44:25,305 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:44:25,305 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:44:25,305 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:44:25,305 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:44:25,305 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:44:25,305 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 02:44:25,305 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 02:44:25,305 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:44:25,305 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 02:44:25,305 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:44:25,306 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 02:44:25,306 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT_NoBaseCtor__fail
[2020-11-25 02:44:25,306 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT_NoBaseCtor__success
[2020-11-25 02:44:25,306 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT__fail
[2020-11-25 02:44:25,306 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT__success
[2020-11-25 02:44:25,306 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ONIT__fail
[2020-11-25 02:44:25,306 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ONIT__success
[2020-11-25 02:44:25,306 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ONIT__fail
[2020-11-25 02:44:25,306 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ONIT__success
[2020-11-25 02:44:25,306 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ONIT__fail
[2020-11-25 02:44:25,306 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ONIT__success
[2020-11-25 02:44:25,306 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_ONIT__fail
[2020-11-25 02:44:25,306 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_ONIT__success
[2020-11-25 02:44:25,307 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_ONIT__fail
[2020-11-25 02:44:25,307 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_ONIT__success
[2020-11-25 02:44:25,307 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:44:25,307 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ONIT__success
[2020-11-25 02:44:25,307 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:44:25,307 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_ONIT__success
[2020-11-25 02:44:25,307 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_ONIT__fail
[2020-11-25 02:44:25,307 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_ONIT__success
[2020-11-25 02:44:25,307 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_ONIT__fail
[2020-11-25 02:44:25,307 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_ONIT__success
[2020-11-25 02:44:25,307 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:44:25,307 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_ONIT__success
[2020-11-25 02:44:25,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_ONIT__fail
[2020-11-25 02:44:25,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_ONIT__success
[2020-11-25 02:44:25,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_ONIT__fail
[2020-11-25 02:44:25,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_ONIT__success
[2020-11-25 02:44:25,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~uint256_ONIT__fail
[2020-11-25 02:44:25,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~uint256_ONIT__success
[2020-11-25 02:44:25,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_ONIT__fail
[2020-11-25 02:44:25,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_ONIT__success
[2020-11-25 02:44:25,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ONIT__fail
[2020-11-25 02:44:25,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ONIT__success
[2020-11-25 02:44:25,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_ONIT__fail
[2020-11-25 02:44:25,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_ONIT__success
[2020-11-25 02:44:25,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_ONIT__fail
[2020-11-25 02:44:25,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_ONIT__success
[2020-11-25 02:44:25,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ONIT__fail
[2020-11-25 02:44:25,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ONIT__success
[2020-11-25 02:44:25,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 02:44:25,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 02:44:25,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 02:44:25,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 02:44:25,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 02:44:25,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 02:44:25,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 02:44:25,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 02:44:25,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__fail
[2020-11-25 02:44:25,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__success
[2020-11-25 02:44:25,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 02:44:25,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 02:44:25,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 02:44:25,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 02:44:25,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 02:44:25,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 02:44:25,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__fail
[2020-11-25 02:44:25,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__success
[2020-11-25 02:44:25,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 02:44:25,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 02:44:25,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 02:44:25,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 02:44:25,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 02:44:25,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 02:44:25,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 02:44:25,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 02:44:25,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 02:44:25,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 02:44:25,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 02:44:25,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 02:44:25,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 02:44:25,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 02:44:25,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:44:25,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:44:25,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:44:25,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:44:25,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ONIT
[2020-11-25 02:44:25,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 02:44:25,312 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 02:44:25,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 02:44:25,638 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:44:25,638 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:44:25,638 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:44:26,477 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:44:26,704 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 02:44:26,705 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 02:44:26,707 INFO  L202        PluginConnector]: Adding new model ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:44:26 BoogieIcfgContainer
[2020-11-25 02:44:26,707 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:44:25" (2/2) ...
[2020-11-25 02:44:26,707 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 02:44:26,707 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@34dc6e57 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:44:26, skipping insertion in model container
[2020-11-25 02:44:26,708 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 02:44:26,708 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 02:44:26,708 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 02:44:26,709 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 02:44:26,709 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:44:24" (1/3) ...
[2020-11-25 02:44:26,709 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@450be4b9 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:44:26, skipping insertion in model container
[2020-11-25 02:44:26,709 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:44:25" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 02:44:26,743 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:44:26 NWAContainer
[2020-11-25 02:44:26,743 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 02:44:26,744 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 02:44:26,744 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 02:44:26,744 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 02:44:26,745 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:44:26" (3/4) ...
[2020-11-25 02:44:26,745 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@6ff21b7e and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:44:26, skipping insertion in model container
[2020-11-25 02:44:26,746 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:44:26" (4/4) ...
[2020-11-25 02:44:26,748 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 02:44:26,754 INFO  L110   BuchiProductObserver]: Initial RCFG 4669 locations, 6456 edges
[2020-11-25 02:44:26,754 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 02:44:26,766 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 02:44:30,091 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 02:44:30,105 INFO  L110   BuchiProductObserver]: BuchiProgram size 11594 locations, 21002 edges
[2020-11-25 02:44:30,105 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:44:30 BoogieIcfgContainer
[2020-11-25 02:44:30,105 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 02:44:30,105 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 02:44:30,106 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 02:44:30,107 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 02:44:30,107 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:44:30" (1/1) ...
[2020-11-25 02:44:30,274 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 02:44:30,275 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 02:44:30,296 INFO  L313           BlockEncoder]: Initial Icfg 11594 locations, 21002 edges
[2020-11-25 02:44:30,296 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 02:44:30,297 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 02:44:30,297 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 02:44:30,297 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 02:44:30,317 INFO  L70    emoveInfeasibleEdges]: Removed 219 edges and 23 locations because of local infeasibility
[2020-11-25 02:44:30,336 INFO  L70        RemoveSinkStates]: Removed 104 edges and 69 locations by removing sink states
[2020-11-25 02:44:30,357 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 02:44:30,365 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 02:44:30,372 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 02:44:30,372 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 02:44:30,378 INFO  L313           BlockEncoder]: Encoded RCFG 11448 locations, 20599 edges
[2020-11-25 02:44:30,378 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:44:30 BasicIcfg
[2020-11-25 02:44:30,378 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 02:44:30,378 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 02:44:30,378 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 02:44:30,380 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 02:44:30,380 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:44:30,380 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:44:24" (1/6) ...
[2020-11-25 02:44:30,382 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@461e323b and model type ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:44:30, skipping insertion in model container
[2020-11-25 02:44:30,382 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:44:30,382 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:44:25" (2/6) ...
[2020-11-25 02:44:30,382 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@461e323b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:44:30, skipping insertion in model container
[2020-11-25 02:44:30,382 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:44:30,382 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:44:26" (3/6) ...
[2020-11-25 02:44:30,383 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@461e323b and model type ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:44:30, skipping insertion in model container
[2020-11-25 02:44:30,383 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:44:30,383 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:44:26" (4/6) ...
[2020-11-25 02:44:30,383 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@461e323b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:44:30, skipping insertion in model container
[2020-11-25 02:44:30,383 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:44:30,383 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:44:30" (5/6) ...
[2020-11-25 02:44:30,383 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@461e323b and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:44:30, skipping insertion in model container
[2020-11-25 02:44:30,383 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:44:30,383 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:44:30" (6/6) ...
[2020-11-25 02:44:30,384 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-normal.bpl_BEv2
[2020-11-25 02:44:30,423 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 02:44:30,424 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 02:44:30,424 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 02:44:30,424 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 02:44:30,424 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 02:44:30,424 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 02:44:30,424 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 02:44:30,424 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 02:44:30,424 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 02:44:30,521 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11448 states.
[2020-11-25 02:44:30,604 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:44:30,604 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:44:30,604 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:44:30,612 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:44:30,612 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:44:30,612 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 02:44:30,612 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11448 states.
[2020-11-25 02:44:30,667 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:44:30,667 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:44:30,667 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:44:30,669 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:44:30,669 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ONIT0 := false;
[L3]                  call_transfer_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND TRUE   revert
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND TRUE   choice == 33
[L12132]              gas := gas - 21000;
[L12133]  COND FALSE  !(gas >= 0)
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:44:30,683 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:44:30,683 INFO  L82        PathProgramCache]: Analyzing trace with hash -160129352, now seen corresponding path program 1 times
[2020-11-25 02:44:30,687 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:44:30,712 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:44:30,752 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:44:31,229 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:44:31,229 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:44:31,232 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:44:31,240 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:44:31,241 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:44:31,242 INFO  L87              Difference]: Start difference. First operand 11448 states. Second operand 3 states.
[2020-11-25 02:44:31,697 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:44:31,697 INFO  L93              Difference]: Finished difference Result 9936 states and 16399 transitions.
[2020-11-25 02:44:31,697 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:44:31,699 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9936 states and 16399 transitions.
[2020-11-25 02:44:31,756 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:44:31,840 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9936 states to 9936 states and 16399 transitions.
[2020-11-25 02:44:31,840 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 14
[2020-11-25 02:44:31,846 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1929
[2020-11-25 02:44:31,847 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9936 states and 16399 transitions.
[2020-11-25 02:44:31,880 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:44:31,880 INFO  L728         BuchiCegarLoop]: Abstraction has 9936 states and 16399 transitions.
[2020-11-25 02:44:31,902 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9936 states and 16399 transitions.
[2020-11-25 02:44:32,052 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9936 to 8728.
[2020-11-25 02:44:32,053 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8728 states.
[2020-11-25 02:44:32,072 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8728 states to 8728 states and 14322 transitions.
[2020-11-25 02:44:32,073 INFO  L751         BuchiCegarLoop]: Abstraction has 8728 states and 14322 transitions.
[2020-11-25 02:44:32,073 INFO  L631         BuchiCegarLoop]: Abstraction has 8728 states and 14322 transitions.
[2020-11-25 02:44:32,073 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 02:44:32,073 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8728 states and 14322 transitions.
[2020-11-25 02:44:32,090 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:44:32,090 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:44:32,090 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:44:32,093 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:44:32,093 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ONIT0 := false;
[L3]                  call_transfer_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND TRUE   __exception
[L3018]               __tmp__Balance := Balance;
[L3019]               __tmp__DType := DType;
[L3020]               __tmp__Alloc := Alloc;
[L3021]               __tmp__balance_ADDR := balance_ADDR;
[L3022]               __tmp__M_Ref_bool := M_Ref_bool;
[L3023]               __tmp__sum := sum;
[L3024]               __tmp__M_Ref_int := M_Ref_int;
[L3025]               __tmp__sum__balances0 := sum__balances0;
[L3026]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3027]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3028]               __tmp__sum__allowed1 := sum__allowed1;
[L3029]               __tmp__M_int_Ref := M_int_Ref;
[L3030]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3031]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3032]               __tmp__Length := Length;
[L3033]               __tmp__now := now;
[L3034]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3035]               __tmp__owner_Ownable := owner_Ownable;
[L3036]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3037]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3038]               __tmp___paused_Pausable := _paused_Pausable;
[L3039]               __tmp___balances_ERC20 := _balances_ERC20;
[L3040]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3041]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3042]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3043]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3044]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3045]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3046]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3047]               __tmp__implementation_ONIT := implementation_ONIT;
[L3048]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3049]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3050]   CALL        call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L7396]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L7396]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7397]   COND FALSE  !(revert)
[L7400]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7276]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L7276]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7277]   COND FALSE  !(revert)
[L7280]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7249]               assume msgsender_MSG != null;
[L7250]               __tmp__Balance[this] := 0;
[L7251]               __tmp___name_ERC20Detailed[this] := -1540954157;
[L7252]               __tmp___symbol_ERC20Detailed[this] := -1540954157;
[L7253]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7255]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7256]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7257]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7280]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7281]   COND FALSE  !(revert)
[L7400]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7401]   COND FALSE  !(revert)
[L7404]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L6578]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6579]   COND FALSE  !(revert)
[L6582]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]               assume msgsender_MSG != null;
[L6554]               __tmp__Balance[this] := 0;
[L6555]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6556]               __tmp__sum__balances0[this] := 0;
[L6557]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6558]               __tmp__sum__allowed1[this] := 0;
[L6559]               __tmp___totalSupply_ERC20[this] := 0;
[L6582]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6583]   COND FALSE  !(revert)
[L7404]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7405]   COND FALSE  !(revert)
[L7408]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L7408]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7409]   COND FALSE  !(revert)
[L7412]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6143]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6144]   COND FALSE  !(revert)
[L6147]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6068]               assume msgsender_MSG != null;
[L6069]               __tmp__Balance[this] := 0;
[L6071]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L6071]   RET         call __var_10 := FreshRefGenerator__fail();
[L6072]   COND FALSE  !(revert)
[L6075]               __tmp___pausers_PauserRole[this] := __var_10;
[L6077]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6082]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L6087]   COND TRUE   __tmp__DType[this] == Pausable
[L6088]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6368]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5817]               __var_1 := null;
[L5818]   COND TRUE   !(account_s164 != null)
[L5819]               revert := true;
[L6368]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6369]   COND TRUE   revert
[L6088]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6089]   COND TRUE   revert
[L6147]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6148]   COND TRUE   revert
[L7412]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7413]   COND TRUE   revert
[L3050]   RET         call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L3051]               assume revert || gas < 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND TRUE   choice == 33
[L12132]              gas := gas - 21000;
[L12133]  COND FALSE  !(gas >= 0)
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:44:32,097 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:44:32,097 INFO  L82        PathProgramCache]: Analyzing trace with hash -2129552663, now seen corresponding path program 1 times
[2020-11-25 02:44:32,098 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:44:32,111 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:44:32,147 INFO  L134       CoverageAnalysis]: Checked inductivity of 45 backedges. 0 proven. 10 refuted. 0 times theorem prover too weak. 35 trivial. 0 not checked.
[2020-11-25 02:44:32,148 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:44:32,148 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-11-25 02:44:32,149 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:44:32,149 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:44:32,149 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:44:32,149 INFO  L87              Difference]: Start difference. First operand 8728 states and 14322 transitions. cyclomatic complexity: 5604 Second operand 4 states.
[2020-11-25 02:44:33,106 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:44:33,106 INFO  L93              Difference]: Finished difference Result 8183 states and 9514 transitions.
[2020-11-25 02:44:33,106 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:44:33,107 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8183 states and 9514 transitions.
[2020-11-25 02:44:33,137 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:44:33,199 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8183 states to 8183 states and 9514 transitions.
[2020-11-25 02:44:33,199 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1542
[2020-11-25 02:44:33,200 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1583
[2020-11-25 02:44:33,200 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8183 states and 9514 transitions.
[2020-11-25 02:44:33,209 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:44:33,209 INFO  L728         BuchiCegarLoop]: Abstraction has 8183 states and 9514 transitions.
[2020-11-25 02:44:33,217 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8183 states and 9514 transitions.
[2020-11-25 02:44:33,287 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8183 to 8183.
[2020-11-25 02:44:33,287 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8183 states.
[2020-11-25 02:44:33,298 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8183 states to 8183 states and 9514 transitions.
[2020-11-25 02:44:33,299 INFO  L751         BuchiCegarLoop]: Abstraction has 8183 states and 9514 transitions.
[2020-11-25 02:44:33,299 INFO  L631         BuchiCegarLoop]: Abstraction has 8183 states and 9514 transitions.
[2020-11-25 02:44:33,299 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 02:44:33,299 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8183 states and 9514 transitions.
[2020-11-25 02:44:33,311 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:44:33,311 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:44:33,311 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:44:33,314 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:44:33,314 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ONIT0 := false;
[L3]                  call_transfer_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6125]   COND FALSE  !(DType[this] == Pausable)
[L6130]   COND TRUE   DType[this] == PauserRole
[L6131]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND TRUE   !(account_s164 != null)
[L5839]               revert := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND TRUE   revert
[L6131]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6132]   COND TRUE   revert
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND TRUE   revert
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND TRUE   revert
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND TRUE   choice == 21
[L12204]              gas := gas - 21000;
[L12205]  COND TRUE   gas >= 0
[L12206]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12207]              assume msgvalue_MSG == 0;
[L12208]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND FALSE  !(__exception)
[L3221]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7651]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10932]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10933]              revert := true;
[L7651]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7652]   COND TRUE   revert
[L3221]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3222]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - value_s1288) && _balances_ERC20[this][to_s1288] == old(_balances_ERC20[this][to_s1288]) + value_s1288) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND TRUE   choice == 21
[L12204]              gas := gas - 21000;
[L12205]  COND TRUE   gas >= 0
[L12206]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12207]              assume msgvalue_MSG == 0;
[L12208]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND FALSE  !(__exception)
[L3221]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7651]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10932]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10933]              revert := true;
[L7651]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7652]   COND TRUE   revert
[L3221]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3222]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - value_s1288) && _balances_ERC20[this][to_s1288] == old(_balances_ERC20[this][to_s1288]) + value_s1288) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:44:33,333 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:44:33,333 INFO  L82        PathProgramCache]: Analyzing trace with hash 1518434549, now seen corresponding path program 1 times
[2020-11-25 02:44:33,334 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:44:33,351 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:44:33,420 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 02:44:33,420 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:44:33,420 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 02:44:33,420 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:44:33,421 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:44:33,421 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:44:33,421 INFO  L87              Difference]: Start difference. First operand 8183 states and 9514 transitions. cyclomatic complexity: 1341 Second operand 9 states.
[2020-11-25 02:44:33,547 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:44:33,547 INFO  L93              Difference]: Finished difference Result 8229 states and 9589 transitions.
[2020-11-25 02:44:33,547 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:44:33,547 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8229 states and 9589 transitions.
[2020-11-25 02:44:33,562 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:44:33,584 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8229 states to 8229 states and 9589 transitions.
[2020-11-25 02:44:33,584 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1592
[2020-11-25 02:44:33,585 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1592
[2020-11-25 02:44:33,585 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8229 states and 9589 transitions.
[2020-11-25 02:44:33,591 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:44:33,591 INFO  L728         BuchiCegarLoop]: Abstraction has 8229 states and 9589 transitions.
[2020-11-25 02:44:33,598 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8229 states and 9589 transitions.
[2020-11-25 02:44:33,643 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8229 to 8220.
[2020-11-25 02:44:33,643 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8220 states.
[2020-11-25 02:44:33,651 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8220 states to 8220 states and 9573 transitions.
[2020-11-25 02:44:33,651 INFO  L751         BuchiCegarLoop]: Abstraction has 8220 states and 9573 transitions.
[2020-11-25 02:44:33,651 INFO  L631         BuchiCegarLoop]: Abstraction has 8220 states and 9573 transitions.
[2020-11-25 02:44:33,651 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 02:44:33,651 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8220 states and 9573 transitions.
[2020-11-25 02:44:33,660 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:44:33,660 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:44:33,660 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:44:33,661 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:44:33,661 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ONIT0 := false;
[L3]                  call_transfer_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND TRUE   !(account_s218 != null)
[L5910]               revert := true;
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND TRUE   revert
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND TRUE   revert
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND TRUE   revert
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND TRUE   revert
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND TRUE   revert
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND TRUE   choice == 21
[L12204]              gas := gas - 21000;
[L12205]  COND TRUE   gas >= 0
[L12206]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12207]              assume msgvalue_MSG == 0;
[L12208]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND FALSE  !(__exception)
[L3221]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7651]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10932]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10933]              revert := true;
[L7651]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7652]   COND TRUE   revert
[L3221]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3222]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - value_s1288) && _balances_ERC20[this][to_s1288] == old(_balances_ERC20[this][to_s1288]) + value_s1288) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND TRUE   choice == 21
[L12204]              gas := gas - 21000;
[L12205]  COND TRUE   gas >= 0
[L12206]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12207]              assume msgvalue_MSG == 0;
[L12208]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND FALSE  !(__exception)
[L3221]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7651]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10932]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10933]              revert := true;
[L7651]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7652]   COND TRUE   revert
[L3221]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3222]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - value_s1288) && _balances_ERC20[this][to_s1288] == old(_balances_ERC20[this][to_s1288]) + value_s1288) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:44:33,665 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:44:33,665 INFO  L82        PathProgramCache]: Analyzing trace with hash 1493362328, now seen corresponding path program 1 times
[2020-11-25 02:44:33,666 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:44:33,675 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:44:33,725 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 02:44:33,725 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:44:33,725 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 02:44:33,725 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:44:33,725 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 02:44:33,725 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 02:44:33,726 INFO  L87              Difference]: Start difference. First operand 8220 states and 9573 transitions. cyclomatic complexity: 1363 Second operand 10 states.
[2020-11-25 02:44:33,829 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:44:33,829 INFO  L93              Difference]: Finished difference Result 8280 states and 9664 transitions.
[2020-11-25 02:44:33,830 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 02:44:33,830 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8280 states and 9664 transitions.
[2020-11-25 02:44:33,845 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:44:33,863 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8280 states to 8280 states and 9664 transitions.
[2020-11-25 02:44:33,863 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1599
[2020-11-25 02:44:33,864 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1599
[2020-11-25 02:44:33,864 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8280 states and 9664 transitions.
[2020-11-25 02:44:33,870 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:44:33,870 INFO  L728         BuchiCegarLoop]: Abstraction has 8280 states and 9664 transitions.
[2020-11-25 02:44:33,877 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8280 states and 9664 transitions.
[2020-11-25 02:44:33,919 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8280 to 8227.
[2020-11-25 02:44:33,920 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8227 states.
[2020-11-25 02:44:33,928 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8227 states to 8227 states and 9581 transitions.
[2020-11-25 02:44:33,928 INFO  L751         BuchiCegarLoop]: Abstraction has 8227 states and 9581 transitions.
[2020-11-25 02:44:33,928 INFO  L631         BuchiCegarLoop]: Abstraction has 8227 states and 9581 transitions.
[2020-11-25 02:44:33,928 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 02:44:33,928 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8227 states and 9581 transitions.
[2020-11-25 02:44:33,936 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:44:33,936 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:44:33,936 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:44:33,937 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:44:33,937 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ONIT0 := false;
[L3]                  call_transfer_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND TRUE   DType[this] == ERC20Pausable
[L6121]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND TRUE   !!__var_2
[L5847]               revert := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND TRUE   revert
[L6121]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6122]   COND TRUE   revert
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND TRUE   revert
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND TRUE   revert
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND TRUE   choice == 21
[L12204]              gas := gas - 21000;
[L12205]  COND TRUE   gas >= 0
[L12206]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12207]              assume msgvalue_MSG == 0;
[L12208]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND FALSE  !(__exception)
[L3221]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7651]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10932]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10933]              revert := true;
[L7651]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7652]   COND TRUE   revert
[L3221]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3222]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - value_s1288) && _balances_ERC20[this][to_s1288] == old(_balances_ERC20[this][to_s1288]) + value_s1288) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND TRUE   choice == 21
[L12204]              gas := gas - 21000;
[L12205]  COND TRUE   gas >= 0
[L12206]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12207]              assume msgvalue_MSG == 0;
[L12208]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND FALSE  !(__exception)
[L3221]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7651]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10932]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10933]              revert := true;
[L7651]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7652]   COND TRUE   revert
[L3221]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3222]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - value_s1288) && _balances_ERC20[this][to_s1288] == old(_balances_ERC20[this][to_s1288]) + value_s1288) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:44:33,941 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:44:33,941 INFO  L82        PathProgramCache]: Analyzing trace with hash -682557709, now seen corresponding path program 1 times
[2020-11-25 02:44:33,942 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:44:33,951 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:44:33,987 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 51 trivial. 0 not checked.
[2020-11-25 02:44:33,987 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:44:33,987 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:44:33,987 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:44:33,987 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:44:33,987 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:44:33,988 INFO  L87              Difference]: Start difference. First operand 8227 states and 9581 transitions. cyclomatic complexity: 1364 Second operand 3 states.
[2020-11-25 02:44:34,123 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:44:34,124 INFO  L93              Difference]: Finished difference Result 9399 states and 10634 transitions.
[2020-11-25 02:44:34,124 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:44:34,124 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9399 states and 10634 transitions.
[2020-11-25 02:44:34,148 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:44:34,176 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9399 states to 8705 states and 9812 transitions.
[2020-11-25 02:44:34,176 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1698
[2020-11-25 02:44:34,177 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1784
[2020-11-25 02:44:34,177 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8705 states and 9812 transitions.
[2020-11-25 02:44:34,185 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:44:34,185 INFO  L728         BuchiCegarLoop]: Abstraction has 8705 states and 9812 transitions.
[2020-11-25 02:44:34,193 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8705 states and 9812 transitions.
[2020-11-25 02:44:34,250 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8705 to 7685.
[2020-11-25 02:44:34,250 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7685 states.
[2020-11-25 02:44:34,258 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7685 states to 7685 states and 8542 transitions.
[2020-11-25 02:44:34,258 INFO  L751         BuchiCegarLoop]: Abstraction has 7685 states and 8542 transitions.
[2020-11-25 02:44:34,258 INFO  L631         BuchiCegarLoop]: Abstraction has 7685 states and 8542 transitions.
[2020-11-25 02:44:34,258 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 02:44:34,258 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7685 states and 8542 transitions.
[2020-11-25 02:44:34,265 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:44:34,265 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:44:34,266 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:44:34,268 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:44:34,268 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ONIT0 := false;
[L3]                  call_transfer_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND TRUE   choice == 21
[L12204]              gas := gas - 21000;
[L12205]  COND TRUE   gas >= 0
[L12206]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12207]              assume msgvalue_MSG == 0;
[L12208]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_Ownable := owner_Ownable;
[L3204]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_ERC20 := _balances_ERC20;
[L3208]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3209]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3214]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3215]               __tmp__implementation_ONIT := implementation_ONIT;
[L3216]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3217]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7612]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10924]  COND TRUE   !!__tmp__frozenAccount_ONIT[this][_holder_s1185]
[L10925]              revert := true;
[L7612]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7613]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND TRUE   choice == 21
[L12204]              gas := gas - 21000;
[L12205]  COND TRUE   gas >= 0
[L12206]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12207]              assume msgvalue_MSG == 0;
[L12208]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_Ownable := owner_Ownable;
[L3204]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_ERC20 := _balances_ERC20;
[L3208]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3209]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3214]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3215]               __tmp__implementation_ONIT := implementation_ONIT;
[L3216]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3217]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7612]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10924]  COND TRUE   !!__tmp__frozenAccount_ONIT[this][_holder_s1185]
[L10925]              revert := true;
[L7612]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7613]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:44:34,275 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:44:34,275 INFO  L82        PathProgramCache]: Analyzing trace with hash -1088383553, now seen corresponding path program 1 times
[2020-11-25 02:44:34,276 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:44:34,301 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:44:34,497 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 02:44:34,497 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:44:34,497 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-25 02:44:34,497 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:44:34,498 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 02:44:34,498 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-25 02:44:34,498 INFO  L87              Difference]: Start difference. First operand 7685 states and 8542 transitions. cyclomatic complexity: 867 Second operand 12 states.
[2020-11-25 02:44:40,484 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:44:40,484 INFO  L93              Difference]: Finished difference Result 12732 states and 14157 transitions.
[2020-11-25 02:44:40,485 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 02:44:40,485 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12732 states and 14157 transitions.
[2020-11-25 02:44:40,509 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 02:44:40,536 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12732 states to 12722 states and 14145 transitions.
[2020-11-25 02:44:40,536 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2534
[2020-11-25 02:44:40,537 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2534
[2020-11-25 02:44:40,537 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12722 states and 14145 transitions.
[2020-11-25 02:44:40,544 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:44:40,544 INFO  L728         BuchiCegarLoop]: Abstraction has 12722 states and 14145 transitions.
[2020-11-25 02:44:40,551 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12722 states and 14145 transitions.
[2020-11-25 02:44:40,634 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12722 to 10586.
[2020-11-25 02:44:40,634 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10586 states.
[2020-11-25 02:44:40,646 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10586 states to 10586 states and 11988 transitions.
[2020-11-25 02:44:40,647 INFO  L751         BuchiCegarLoop]: Abstraction has 10586 states and 11988 transitions.
[2020-11-25 02:44:40,647 INFO  L631         BuchiCegarLoop]: Abstraction has 10586 states and 11988 transitions.
[2020-11-25 02:44:40,647 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 02:44:40,647 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10586 states and 11988 transitions.
[2020-11-25 02:44:40,658 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 02:44:40,658 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:44:40,659 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:44:40,662 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:44:40,662 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ONIT0 := false;
[L3]                  call_transfer_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND TRUE   DType[this] == ERC20Pausable
[L6121]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6121]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6122]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND TRUE   DType[this] == ERC20Pausable
[L6121]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6121]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6122]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND TRUE   DType[this] == ERC20Pausable
[L6121]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6121]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6122]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND TRUE   DType[this] == ERC20Pausable
[L6121]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6121]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6122]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND TRUE   choice == 21
[L12204]              gas := gas - 21000;
[L12205]  COND TRUE   gas >= 0
[L12206]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12207]              assume msgvalue_MSG == 0;
[L12208]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_Ownable := owner_Ownable;
[L3204]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_ERC20 := _balances_ERC20;
[L3208]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3209]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3214]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3215]               __tmp__implementation_ONIT := implementation_ONIT;
[L3216]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3217]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7612]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7612]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7613]   COND FALSE  !(revert)
[L7616]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false)
[L7627]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7633]   COND TRUE   __tmp__DType[this] == ONIT
[L7634]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7150]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10893]              revert := true;
[L7150]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7151]   COND TRUE   revert
[L7634]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7635]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND TRUE   choice == 21
[L12204]              gas := gas - 21000;
[L12205]  COND TRUE   gas >= 0
[L12206]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12207]              assume msgvalue_MSG == 0;
[L12208]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_Ownable := owner_Ownable;
[L3204]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_ERC20 := _balances_ERC20;
[L3208]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3209]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3214]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3215]               __tmp__implementation_ONIT := implementation_ONIT;
[L3216]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3217]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7612]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7612]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7613]   COND FALSE  !(revert)
[L7616]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false)
[L7627]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7633]   COND TRUE   __tmp__DType[this] == ONIT
[L7634]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7150]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10893]              revert := true;
[L7150]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7151]   COND TRUE   revert
[L7634]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7635]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:44:40,668 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:44:40,668 INFO  L82        PathProgramCache]: Analyzing trace with hash 877120458, now seen corresponding path program 1 times
[2020-11-25 02:44:40,669 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:44:40,681 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:44:40,894 INFO  L134       CoverageAnalysis]: Checked inductivity of 936 backedges. 0 proven. 27 refuted. 0 times theorem prover too weak. 909 trivial. 0 not checked.
[2020-11-25 02:44:40,894 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:44:40,894 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 02:44:40,895 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:44:40,895 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:44:40,895 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:44:40,895 INFO  L87              Difference]: Start difference. First operand 10586 states and 11988 transitions. cyclomatic complexity: 1418 Second operand 7 states.
[2020-11-25 02:44:41,022 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:44:41,022 INFO  L93              Difference]: Finished difference Result 10609 states and 12015 transitions.
[2020-11-25 02:44:41,022 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:44:41,022 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10609 states and 12015 transitions.
[2020-11-25 02:44:41,040 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 02:44:41,079 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10609 states to 10592 states and 11995 transitions.
[2020-11-25 02:44:41,079 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2138
[2020-11-25 02:44:41,081 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2138
[2020-11-25 02:44:41,081 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10592 states and 11995 transitions.
[2020-11-25 02:44:41,089 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:44:41,089 INFO  L728         BuchiCegarLoop]: Abstraction has 10592 states and 11995 transitions.
[2020-11-25 02:44:41,097 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10592 states and 11995 transitions.
[2020-11-25 02:44:41,175 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10592 to 10592.
[2020-11-25 02:44:41,176 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10592 states.
[2020-11-25 02:44:41,193 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10592 states to 10592 states and 11995 transitions.
[2020-11-25 02:44:41,193 INFO  L751         BuchiCegarLoop]: Abstraction has 10592 states and 11995 transitions.
[2020-11-25 02:44:41,193 INFO  L631         BuchiCegarLoop]: Abstraction has 10592 states and 11995 transitions.
[2020-11-25 02:44:41,193 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 02:44:41,194 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10592 states and 11995 transitions.
[2020-11-25 02:44:41,210 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 02:44:41,210 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:44:41,210 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:44:41,213 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:44:41,213 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ONIT0 := false;
[L3]                  call_transfer_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND TRUE   choice == 21
[L12204]              gas := gas - 21000;
[L12205]  COND TRUE   gas >= 0
[L12206]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12207]              assume msgvalue_MSG == 0;
[L12208]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_Ownable := owner_Ownable;
[L3204]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_ERC20 := _balances_ERC20;
[L3208]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3209]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3214]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3215]               __tmp__implementation_ONIT := implementation_ONIT;
[L3216]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3217]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7612]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7612]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7613]   COND FALSE  !(revert)
[L7616]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false)
[L7627]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7633]   COND TRUE   __tmp__DType[this] == ONIT
[L7634]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7150]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10893]              revert := true;
[L7150]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7151]   COND TRUE   revert
[L7634]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7635]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND TRUE   choice == 21
[L12204]              gas := gas - 21000;
[L12205]  COND TRUE   gas >= 0
[L12206]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12207]              assume msgvalue_MSG == 0;
[L12208]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_Ownable := owner_Ownable;
[L3204]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_ERC20 := _balances_ERC20;
[L3208]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3209]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3214]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3215]               __tmp__implementation_ONIT := implementation_ONIT;
[L3216]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3217]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7612]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7612]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7613]   COND FALSE  !(revert)
[L7616]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false)
[L7627]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7633]   COND TRUE   __tmp__DType[this] == ONIT
[L7634]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7150]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10893]              revert := true;
[L7150]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7151]   COND TRUE   revert
[L7634]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7635]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:44:41,221 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:44:41,222 INFO  L82        PathProgramCache]: Analyzing trace with hash 1183766700, now seen corresponding path program 1 times
[2020-11-25 02:44:41,223 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:44:41,246 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:44:41,459 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 924 trivial. 0 not checked.
[2020-11-25 02:44:41,459 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:44:41,459 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 02:44:41,460 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:44:41,460 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 02:44:41,460 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=183, Unknown=0, NotChecked=0, Total=210
[2020-11-25 02:44:41,460 INFO  L87              Difference]: Start difference. First operand 10592 states and 11995 transitions. cyclomatic complexity: 1419 Second operand 15 states.
[2020-11-25 02:44:49,711 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:44:49,711 INFO  L93              Difference]: Finished difference Result 17866 states and 20613 transitions.
[2020-11-25 02:44:49,711 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 02:44:49,711 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 17866 states and 20613 transitions.
[2020-11-25 02:44:49,757 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 40
[2020-11-25 02:44:49,809 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 17866 states to 17853 states and 20598 transitions.
[2020-11-25 02:44:49,810 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3573
[2020-11-25 02:44:49,811 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3573
[2020-11-25 02:44:49,811 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 17853 states and 20598 transitions.
[2020-11-25 02:44:49,826 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:44:49,826 INFO  L728         BuchiCegarLoop]: Abstraction has 17853 states and 20598 transitions.
[2020-11-25 02:44:49,835 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 17853 states and 20598 transitions.
[2020-11-25 02:44:49,971 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 17853 to 16392.
[2020-11-25 02:44:49,971 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 16392 states.
[2020-11-25 02:44:49,993 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 16392 states to 16392 states and 19063 transitions.
[2020-11-25 02:44:49,993 INFO  L751         BuchiCegarLoop]: Abstraction has 16392 states and 19063 transitions.
[2020-11-25 02:44:49,993 INFO  L631         BuchiCegarLoop]: Abstraction has 16392 states and 19063 transitions.
[2020-11-25 02:44:49,993 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 02:44:49,993 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 16392 states and 19063 transitions.
[2020-11-25 02:44:50,010 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 32
[2020-11-25 02:44:50,010 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:44:50,010 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:44:50,012 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:44:50,012 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ONIT0 := false;
[L3]                  call_transfer_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND TRUE   __exception
[L3018]               __tmp__Balance := Balance;
[L3019]               __tmp__DType := DType;
[L3020]               __tmp__Alloc := Alloc;
[L3021]               __tmp__balance_ADDR := balance_ADDR;
[L3022]               __tmp__M_Ref_bool := M_Ref_bool;
[L3023]               __tmp__sum := sum;
[L3024]               __tmp__M_Ref_int := M_Ref_int;
[L3025]               __tmp__sum__balances0 := sum__balances0;
[L3026]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3027]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3028]               __tmp__sum__allowed1 := sum__allowed1;
[L3029]               __tmp__M_int_Ref := M_int_Ref;
[L3030]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3031]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3032]               __tmp__Length := Length;
[L3033]               __tmp__now := now;
[L3034]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3035]               __tmp__owner_Ownable := owner_Ownable;
[L3036]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3037]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3038]               __tmp___paused_Pausable := _paused_Pausable;
[L3039]               __tmp___balances_ERC20 := _balances_ERC20;
[L3040]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3041]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3042]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3043]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3044]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3045]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3046]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3047]               __tmp__implementation_ONIT := implementation_ONIT;
[L3048]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3049]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3050]   CALL        call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L7396]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L7396]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7397]   COND FALSE  !(revert)
[L7400]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7276]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L7276]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7277]   COND FALSE  !(revert)
[L7280]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7249]               assume msgsender_MSG != null;
[L7250]               __tmp__Balance[this] := 0;
[L7251]               __tmp___name_ERC20Detailed[this] := -1540954157;
[L7252]               __tmp___symbol_ERC20Detailed[this] := -1540954157;
[L7253]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7255]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7256]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7257]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7280]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7281]   COND FALSE  !(revert)
[L7400]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7401]   COND FALSE  !(revert)
[L7404]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L6578]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6579]   COND FALSE  !(revert)
[L6582]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]               assume msgsender_MSG != null;
[L6554]               __tmp__Balance[this] := 0;
[L6555]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6556]               __tmp__sum__balances0[this] := 0;
[L6557]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6558]               __tmp__sum__allowed1[this] := 0;
[L6559]               __tmp___totalSupply_ERC20[this] := 0;
[L6582]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6583]   COND FALSE  !(revert)
[L7404]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7405]   COND FALSE  !(revert)
[L7408]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L7408]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7409]   COND FALSE  !(revert)
[L7412]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6143]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6144]   COND FALSE  !(revert)
[L6147]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6068]               assume msgsender_MSG != null;
[L6069]               __tmp__Balance[this] := 0;
[L6071]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L6071]   RET         call __var_10 := FreshRefGenerator__fail();
[L6072]   COND FALSE  !(revert)
[L6075]               __tmp___pausers_PauserRole[this] := __var_10;
[L6077]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6082]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L6083]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6368]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5817]               __var_1 := null;
[L5818]   COND FALSE  !(!(account_s164 != null))
[L5822]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5896]               __var_5 := null;
[L5897]   COND FALSE  !(!(account_s218 != null))
[L5901]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5822]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5823]   COND FALSE  !(revert)
[L5826]   COND FALSE  !(!!__var_2)
[L5830]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6368]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6369]   COND FALSE  !(revert)
[L6083]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6084]   COND FALSE  !(revert)
[L6147]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6148]   COND FALSE  !(revert)
[L7412]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7413]   COND FALSE  !(revert)
[L7416]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6422]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6423]   COND FALSE  !(revert)
[L6426]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6143]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6144]   COND FALSE  !(revert)
[L6147]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6068]               assume msgsender_MSG != null;
[L6069]               __tmp__Balance[this] := 0;
[L6071]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L6071]   RET         call __var_10 := FreshRefGenerator__fail();
[L6072]   COND FALSE  !(revert)
[L6075]               __tmp___pausers_PauserRole[this] := __var_10;
[L6077]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6082]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L6083]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6368]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5817]               __var_1 := null;
[L5818]   COND FALSE  !(!(account_s164 != null))
[L5822]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5896]               __var_5 := null;
[L5897]   COND FALSE  !(!(account_s218 != null))
[L5901]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5822]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5823]   COND FALSE  !(revert)
[L5826]   COND FALSE  !(!!__var_2)
[L5830]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6368]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6369]   COND FALSE  !(revert)
[L6083]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6084]   COND FALSE  !(revert)
[L6147]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6148]   COND FALSE  !(revert)
[L6426]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6427]   COND FALSE  !(revert)
[L6430]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6403]               assume msgsender_MSG != null;
[L6404]               __tmp__Balance[this] := 0;
[L6405]               __tmp___paused_Pausable[this] := false;
[L6407]               __tmp___paused_Pausable[this] := false;
[L6430]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L7416]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7417]   COND FALSE  !(revert)
[L7420]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L7092]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7096]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L6578]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6579]   COND FALSE  !(revert)
[L6582]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]               assume msgsender_MSG != null;
[L6554]               __tmp__Balance[this] := 0;
[L6555]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6556]               __tmp__sum__balances0[this] := 0;
[L6557]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6558]               __tmp__sum__allowed1[this] := 0;
[L6559]               __tmp___totalSupply_ERC20[this] := 0;
[L6582]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6583]   COND FALSE  !(revert)
[L7096]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7097]   COND FALSE  !(revert)
[L7100]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L7100]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7101]   COND FALSE  !(revert)
[L7104]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6143]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6144]   COND FALSE  !(revert)
[L6147]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6068]               assume msgsender_MSG != null;
[L6069]               __tmp__Balance[this] := 0;
[L6071]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L6071]   RET         call __var_10 := FreshRefGenerator__fail();
[L6072]   COND FALSE  !(revert)
[L6075]               __tmp___pausers_PauserRole[this] := __var_10;
[L6077]   COND TRUE   __tmp__DType[this] == ONIT
[L6078]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6368]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5817]               __var_1 := null;
[L5818]   COND FALSE  !(!(account_s164 != null))
[L5822]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5896]               __var_5 := null;
[L5897]   COND FALSE  !(!(account_s218 != null))
[L5901]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5822]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5823]   COND FALSE  !(revert)
[L5826]   COND FALSE  !(!!__var_2)
[L5830]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6368]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6369]   COND FALSE  !(revert)
[L6078]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6079]   COND FALSE  !(revert)
[L6147]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6148]   COND FALSE  !(revert)
[L7104]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7105]   COND FALSE  !(revert)
[L7108]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6422]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6423]   COND FALSE  !(revert)
[L6426]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6143]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6144]   COND FALSE  !(revert)
[L6147]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6068]               assume msgsender_MSG != null;
[L6069]               __tmp__Balance[this] := 0;
[L6071]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L6071]   RET         call __var_10 := FreshRefGenerator__fail();
[L6072]   COND FALSE  !(revert)
[L6075]               __tmp___pausers_PauserRole[this] := __var_10;
[L6077]   COND TRUE   __tmp__DType[this] == ONIT
[L6078]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6368]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5817]               __var_1 := null;
[L5818]   COND FALSE  !(!(account_s164 != null))
[L5822]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5896]               __var_5 := null;
[L5897]   COND FALSE  !(!(account_s218 != null))
[L5901]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5822]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5823]   COND FALSE  !(revert)
[L5826]   COND FALSE  !(!!__var_2)
[L5830]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6368]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6369]   COND FALSE  !(revert)
[L6078]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6079]   COND FALSE  !(revert)
[L6147]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6148]   COND FALSE  !(revert)
[L6426]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6427]   COND FALSE  !(revert)
[L6430]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6403]               assume msgsender_MSG != null;
[L6404]               __tmp__Balance[this] := 0;
[L6405]               __tmp___paused_Pausable[this] := false;
[L6407]               __tmp___paused_Pausable[this] := false;
[L6430]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L7108]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7077]               assume msgsender_MSG != null;
[L7078]               __tmp__Balance[this] := 0;
[L7112]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7420]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7421]   COND FALSE  !(revert)
[L7424]   CALL        call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7339]               assume msgsender_MSG != null;
[L7340]               __tmp__Balance[this] := 0;
[L7341]               __tmp__implementation_ONIT[this] := null;
[L7343]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L7343]   RET         call __var_36 := FreshRefGenerator__fail();
[L7344]   COND FALSE  !(revert)
[L7347]               __tmp__timelockList_ONIT[this] := __var_36;
[L7349]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]] := zeroRefboolArr();
[L7350]               __tmp__frozenAccount_ONIT[this] := zeroRefboolArr();
[L7352]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7353]   COND TRUE   __tmp__DType[this] == ONIT
[L7354]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6920]               __var_23 := null;
[L6921]   COND FALSE  !(!(account_s946 != null))
[L6925]   CALL        call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L5740]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5741]   COND FALSE  !(!(c_s106 >= a_s106))
[L5745]               __ret_0_ := c_s106;
[L6925]   RET         call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L6926]   COND FALSE  !(revert)
[L6929]               __tmp___totalSupply_ERC20[this] := __var_24;
[L6930]   CALL        call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L5740]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5741]   COND FALSE  !(!(c_s106 >= a_s106))
[L5745]               __ret_0_ := c_s106;
[L6930]   RET         call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L6931]   COND FALSE  !(revert)
[L6934]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s946];
[L6935]               __tmp___balances_ERC20[this][account_s946] := __var_25;
[L6936]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s946];
[L7354]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7355]   COND FALSE  !(revert)
[L7424]   RET         call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7425]   COND FALSE  !(revert)
[L3050]   RET         call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L3051]               assume revert || gas < 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND TRUE   choice == 21
[L12204]              gas := gas - 21000;
[L12205]  COND TRUE   gas >= 0
[L12206]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12207]              assume msgvalue_MSG == 0;
[L12208]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_Ownable := owner_Ownable;
[L3204]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_ERC20 := _balances_ERC20;
[L3208]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3209]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3214]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3215]               __tmp__implementation_ONIT := implementation_ONIT;
[L3216]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3217]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7612]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10924]  COND TRUE   !!__tmp__frozenAccount_ONIT[this][_holder_s1185]
[L10925]              revert := true;
[L7612]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7613]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND TRUE   choice == 21
[L12204]              gas := gas - 21000;
[L12205]  COND TRUE   gas >= 0
[L12206]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12207]              assume msgvalue_MSG == 0;
[L12208]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_Ownable := owner_Ownable;
[L3204]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_ERC20 := _balances_ERC20;
[L3208]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3209]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3214]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3215]               __tmp__implementation_ONIT := implementation_ONIT;
[L3216]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3217]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7612]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7612]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7613]   COND FALSE  !(revert)
[L7616]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false)
[L7627]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7628]   CALL        call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8290]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8301]               idx_s1645 := 0;
[L8302]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]]
[L8304]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8315]   COND TRUE   __tmp___releaseTime_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8316]   CALL        call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8101]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8112]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8113]               releaseAmount_s1600 := __tmp___amount_ONIT.LockInfo[lockinfo_s1600];
[L8114]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8125]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8136]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8147]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L5716]   COND TRUE   !(b_s82 <= a_s82)
[L5717]               revert := true;
[L8147]   RET         call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L8148]   COND TRUE   revert
[L8316]   RET         call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8317]   COND TRUE   revert
[L7628]   RET         call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7629]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:44:50,041 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:44:50,041 INFO  L82        PathProgramCache]: Analyzing trace with hash 456264543, now seen corresponding path program 1 times
[2020-11-25 02:44:50,042 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:44:50,054 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:44:50,213 INFO  L134       CoverageAnalysis]: Checked inductivity of 879 backedges. 0 proven. 21 refuted. 0 times theorem prover too weak. 858 trivial. 0 not checked.
[2020-11-25 02:44:50,213 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:44:50,213 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:44:50,214 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:44:50,214 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:44:50,214 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:44:50,214 INFO  L87              Difference]: Start difference. First operand 16392 states and 19063 transitions. cyclomatic complexity: 2701 Second operand 8 states.
[2020-11-25 02:44:51,610 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:44:51,610 INFO  L93              Difference]: Finished difference Result 19427 states and 22666 transitions.
[2020-11-25 02:44:51,611 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:44:51,611 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19427 states and 22666 transitions.
[2020-11-25 02:44:51,654 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 38
[2020-11-25 02:44:51,703 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19427 states to 19410 states and 22646 transitions.
[2020-11-25 02:44:51,703 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3906
[2020-11-25 02:44:51,705 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3906
[2020-11-25 02:44:51,705 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19410 states and 22646 transitions.
[2020-11-25 02:44:51,720 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:44:51,720 INFO  L728         BuchiCegarLoop]: Abstraction has 19410 states and 22646 transitions.
[2020-11-25 02:44:51,728 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19410 states and 22646 transitions.
[2020-11-25 02:44:51,831 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19410 to 19272.
[2020-11-25 02:44:51,832 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19272 states.
[2020-11-25 02:44:51,858 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19272 states to 19272 states and 22507 transitions.
[2020-11-25 02:44:51,858 INFO  L751         BuchiCegarLoop]: Abstraction has 19272 states and 22507 transitions.
[2020-11-25 02:44:51,858 INFO  L631         BuchiCegarLoop]: Abstraction has 19272 states and 22507 transitions.
[2020-11-25 02:44:51,859 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 02:44:51,859 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19272 states and 22507 transitions.
[2020-11-25 02:44:51,878 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 38
[2020-11-25 02:44:51,879 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:44:51,879 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:44:51,880 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:44:51,880 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ONIT0 := false;
[L3]                  call_transfer_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND TRUE   __exception
[L3018]               __tmp__Balance := Balance;
[L3019]               __tmp__DType := DType;
[L3020]               __tmp__Alloc := Alloc;
[L3021]               __tmp__balance_ADDR := balance_ADDR;
[L3022]               __tmp__M_Ref_bool := M_Ref_bool;
[L3023]               __tmp__sum := sum;
[L3024]               __tmp__M_Ref_int := M_Ref_int;
[L3025]               __tmp__sum__balances0 := sum__balances0;
[L3026]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3027]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3028]               __tmp__sum__allowed1 := sum__allowed1;
[L3029]               __tmp__M_int_Ref := M_int_Ref;
[L3030]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3031]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3032]               __tmp__Length := Length;
[L3033]               __tmp__now := now;
[L3034]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3035]               __tmp__owner_Ownable := owner_Ownable;
[L3036]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3037]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3038]               __tmp___paused_Pausable := _paused_Pausable;
[L3039]               __tmp___balances_ERC20 := _balances_ERC20;
[L3040]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3041]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3042]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3043]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3044]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3045]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3046]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3047]               __tmp__implementation_ONIT := implementation_ONIT;
[L3048]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3049]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3050]   CALL        call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L7396]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L7396]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7397]   COND FALSE  !(revert)
[L7400]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7276]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L7276]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7277]   COND FALSE  !(revert)
[L7280]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7249]               assume msgsender_MSG != null;
[L7250]               __tmp__Balance[this] := 0;
[L7251]               __tmp___name_ERC20Detailed[this] := -1540954157;
[L7252]               __tmp___symbol_ERC20Detailed[this] := -1540954157;
[L7253]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7255]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7256]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7257]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7280]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7281]   COND FALSE  !(revert)
[L7400]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7401]   COND FALSE  !(revert)
[L7404]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L6578]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6579]   COND FALSE  !(revert)
[L6582]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]               assume msgsender_MSG != null;
[L6554]               __tmp__Balance[this] := 0;
[L6555]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6556]               __tmp__sum__balances0[this] := 0;
[L6557]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6558]               __tmp__sum__allowed1[this] := 0;
[L6559]               __tmp___totalSupply_ERC20[this] := 0;
[L6582]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6583]   COND FALSE  !(revert)
[L7404]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7405]   COND FALSE  !(revert)
[L7408]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L7408]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7409]   COND FALSE  !(revert)
[L7412]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6143]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6144]   COND FALSE  !(revert)
[L6147]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6068]               assume msgsender_MSG != null;
[L6069]               __tmp__Balance[this] := 0;
[L6071]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L6071]   RET         call __var_10 := FreshRefGenerator__fail();
[L6072]   COND FALSE  !(revert)
[L6075]               __tmp___pausers_PauserRole[this] := __var_10;
[L6077]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6082]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L6087]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L6092]   COND TRUE   __tmp__DType[this] == PauserRole
[L6093]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6368]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5817]               __var_1 := null;
[L5818]   COND FALSE  !(!(account_s164 != null))
[L5822]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5896]               __var_5 := null;
[L5897]   COND FALSE  !(!(account_s218 != null))
[L5901]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5822]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5823]   COND FALSE  !(revert)
[L5826]   COND FALSE  !(!!__var_2)
[L5830]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6368]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6369]   COND FALSE  !(revert)
[L6093]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6094]   COND FALSE  !(revert)
[L6147]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6148]   COND FALSE  !(revert)
[L7412]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7413]   COND FALSE  !(revert)
[L7416]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6422]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6423]   COND FALSE  !(revert)
[L6426]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6143]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6144]   COND FALSE  !(revert)
[L6147]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6068]               assume msgsender_MSG != null;
[L6069]               __tmp__Balance[this] := 0;
[L6071]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L6071]   RET         call __var_10 := FreshRefGenerator__fail();
[L6072]   COND FALSE  !(revert)
[L6075]               __tmp___pausers_PauserRole[this] := __var_10;
[L6077]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6082]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L6083]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6368]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5817]               __var_1 := null;
[L5818]   COND FALSE  !(!(account_s164 != null))
[L5822]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5896]               __var_5 := null;
[L5897]   COND FALSE  !(!(account_s218 != null))
[L5901]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5822]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5823]   COND FALSE  !(revert)
[L5826]   COND FALSE  !(!!__var_2)
[L5830]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6368]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6369]   COND FALSE  !(revert)
[L6083]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6084]   COND FALSE  !(revert)
[L6147]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6148]   COND FALSE  !(revert)
[L6426]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6427]   COND FALSE  !(revert)
[L6430]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6403]               assume msgsender_MSG != null;
[L6404]               __tmp__Balance[this] := 0;
[L6405]               __tmp___paused_Pausable[this] := false;
[L6407]               __tmp___paused_Pausable[this] := false;
[L6430]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L7416]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7417]   COND FALSE  !(revert)
[L7420]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L7092]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7096]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L6578]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6579]   COND FALSE  !(revert)
[L6582]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]               assume msgsender_MSG != null;
[L6554]               __tmp__Balance[this] := 0;
[L6555]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6556]               __tmp__sum__balances0[this] := 0;
[L6557]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6558]               __tmp__sum__allowed1[this] := 0;
[L6559]               __tmp___totalSupply_ERC20[this] := 0;
[L6582]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6583]   COND FALSE  !(revert)
[L7096]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7097]   COND FALSE  !(revert)
[L7100]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L7100]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7101]   COND FALSE  !(revert)
[L7104]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6143]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6144]   COND FALSE  !(revert)
[L6147]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6068]               assume msgsender_MSG != null;
[L6069]               __tmp__Balance[this] := 0;
[L6071]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L6071]   RET         call __var_10 := FreshRefGenerator__fail();
[L6072]   COND FALSE  !(revert)
[L6075]               __tmp___pausers_PauserRole[this] := __var_10;
[L6077]   COND TRUE   __tmp__DType[this] == ONIT
[L6078]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6368]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5817]               __var_1 := null;
[L5818]   COND FALSE  !(!(account_s164 != null))
[L5822]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5896]               __var_5 := null;
[L5897]   COND FALSE  !(!(account_s218 != null))
[L5901]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5822]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5823]   COND FALSE  !(revert)
[L5826]   COND FALSE  !(!!__var_2)
[L5830]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6368]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6369]   COND FALSE  !(revert)
[L6078]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6079]   COND FALSE  !(revert)
[L6147]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6148]   COND FALSE  !(revert)
[L7104]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7105]   COND FALSE  !(revert)
[L7108]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6422]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6423]   COND FALSE  !(revert)
[L6426]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6143]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6144]   COND FALSE  !(revert)
[L6147]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6068]               assume msgsender_MSG != null;
[L6069]               __tmp__Balance[this] := 0;
[L6071]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L6071]   RET         call __var_10 := FreshRefGenerator__fail();
[L6072]   COND FALSE  !(revert)
[L6075]               __tmp___pausers_PauserRole[this] := __var_10;
[L6077]   COND TRUE   __tmp__DType[this] == ONIT
[L6078]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6368]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5817]               __var_1 := null;
[L5818]   COND FALSE  !(!(account_s164 != null))
[L5822]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5896]               __var_5 := null;
[L5897]   COND FALSE  !(!(account_s218 != null))
[L5901]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5822]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5823]   COND FALSE  !(revert)
[L5826]   COND FALSE  !(!!__var_2)
[L5830]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6368]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6369]   COND FALSE  !(revert)
[L6078]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6079]   COND FALSE  !(revert)
[L6147]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6148]   COND FALSE  !(revert)
[L6426]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6427]   COND FALSE  !(revert)
[L6430]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6403]               assume msgsender_MSG != null;
[L6404]               __tmp__Balance[this] := 0;
[L6405]               __tmp___paused_Pausable[this] := false;
[L6407]               __tmp___paused_Pausable[this] := false;
[L6430]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L7108]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7077]               assume msgsender_MSG != null;
[L7078]               __tmp__Balance[this] := 0;
[L7112]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7420]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7421]   COND FALSE  !(revert)
[L7424]   CALL        call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7339]               assume msgsender_MSG != null;
[L7340]               __tmp__Balance[this] := 0;
[L7341]               __tmp__implementation_ONIT[this] := null;
[L7343]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L7343]   RET         call __var_36 := FreshRefGenerator__fail();
[L7344]   COND FALSE  !(revert)
[L7347]               __tmp__timelockList_ONIT[this] := __var_36;
[L7349]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]] := zeroRefboolArr();
[L7350]               __tmp__frozenAccount_ONIT[this] := zeroRefboolArr();
[L7352]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7353]   COND TRUE   __tmp__DType[this] == ONIT
[L7354]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6920]               __var_23 := null;
[L6921]   COND FALSE  !(!(account_s946 != null))
[L6925]   CALL        call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L5740]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5741]   COND FALSE  !(!(c_s106 >= a_s106))
[L5745]               __ret_0_ := c_s106;
[L6925]   RET         call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L6926]   COND FALSE  !(revert)
[L6929]               __tmp___totalSupply_ERC20[this] := __var_24;
[L6930]   CALL        call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L5740]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5741]   COND FALSE  !(!(c_s106 >= a_s106))
[L5745]               __ret_0_ := c_s106;
[L6930]   RET         call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L6931]   COND FALSE  !(revert)
[L6934]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s946];
[L6935]               __tmp___balances_ERC20[this][account_s946] := __var_25;
[L6936]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s946];
[L7354]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7355]   COND FALSE  !(revert)
[L7424]   RET         call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7425]   COND FALSE  !(revert)
[L3050]   RET         call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L3051]               assume revert || gas < 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND TRUE   choice == 21
[L12204]              gas := gas - 21000;
[L12205]  COND TRUE   gas >= 0
[L12206]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12207]              assume msgvalue_MSG == 0;
[L12208]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_Ownable := owner_Ownable;
[L3204]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_ERC20 := _balances_ERC20;
[L3208]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3209]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3214]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3215]               __tmp__implementation_ONIT := implementation_ONIT;
[L3216]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3217]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7612]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10924]  COND TRUE   !!__tmp__frozenAccount_ONIT[this][_holder_s1185]
[L10925]              revert := true;
[L7612]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7613]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND TRUE   choice == 21
[L12204]              gas := gas - 21000;
[L12205]  COND TRUE   gas >= 0
[L12206]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12207]              assume msgvalue_MSG == 0;
[L12208]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_Ownable := owner_Ownable;
[L3204]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_ERC20 := _balances_ERC20;
[L3208]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3209]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3214]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3215]               __tmp__implementation_ONIT := implementation_ONIT;
[L3216]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3217]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7612]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10924]  COND TRUE   !!__tmp__frozenAccount_ONIT[this][_holder_s1185]
[L10925]              revert := true;
[L7612]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7613]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:44:51,886 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:44:51,886 INFO  L82        PathProgramCache]: Analyzing trace with hash -954305134, now seen corresponding path program 1 times
[2020-11-25 02:44:51,887 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:44:51,899 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:44:52,093 INFO  L134       CoverageAnalysis]: Checked inductivity of 875 backedges. 0 proven. 19 refuted. 0 times theorem prover too weak. 856 trivial. 0 not checked.
[2020-11-25 02:44:52,093 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:44:52,093 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:44:52,094 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:44:52,094 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:44:52,094 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:44:52,094 INFO  L87              Difference]: Start difference. First operand 19272 states and 22507 transitions. cyclomatic complexity: 3275 Second operand 8 states.
[2020-11-25 02:44:53,525 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:44:53,525 INFO  L93              Difference]: Finished difference Result 19433 states and 22672 transitions.
[2020-11-25 02:44:53,525 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:44:53,525 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19433 states and 22672 transitions.
[2020-11-25 02:44:53,570 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 38
[2020-11-25 02:44:53,618 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19433 states to 19416 states and 22652 transitions.
[2020-11-25 02:44:53,618 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3906
[2020-11-25 02:44:53,620 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3906
[2020-11-25 02:44:53,620 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19416 states and 22652 transitions.
[2020-11-25 02:44:53,633 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:44:53,633 INFO  L728         BuchiCegarLoop]: Abstraction has 19416 states and 22652 transitions.
[2020-11-25 02:44:53,641 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19416 states and 22652 transitions.
[2020-11-25 02:44:53,741 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19416 to 19272.
[2020-11-25 02:44:53,742 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19272 states.
[2020-11-25 02:44:53,769 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19272 states to 19272 states and 22507 transitions.
[2020-11-25 02:44:53,769 INFO  L751         BuchiCegarLoop]: Abstraction has 19272 states and 22507 transitions.
[2020-11-25 02:44:53,769 INFO  L631         BuchiCegarLoop]: Abstraction has 19272 states and 22507 transitions.
[2020-11-25 02:44:53,769 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 02:44:53,769 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19272 states and 22507 transitions.
[2020-11-25 02:44:53,789 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 38
[2020-11-25 02:44:53,789 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:44:53,789 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:44:53,791 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:44:53,791 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ONIT0 := false;
[L3]                  call_transfer_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND TRUE   __exception
[L3018]               __tmp__Balance := Balance;
[L3019]               __tmp__DType := DType;
[L3020]               __tmp__Alloc := Alloc;
[L3021]               __tmp__balance_ADDR := balance_ADDR;
[L3022]               __tmp__M_Ref_bool := M_Ref_bool;
[L3023]               __tmp__sum := sum;
[L3024]               __tmp__M_Ref_int := M_Ref_int;
[L3025]               __tmp__sum__balances0 := sum__balances0;
[L3026]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3027]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3028]               __tmp__sum__allowed1 := sum__allowed1;
[L3029]               __tmp__M_int_Ref := M_int_Ref;
[L3030]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3031]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3032]               __tmp__Length := Length;
[L3033]               __tmp__now := now;
[L3034]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3035]               __tmp__owner_Ownable := owner_Ownable;
[L3036]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3037]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3038]               __tmp___paused_Pausable := _paused_Pausable;
[L3039]               __tmp___balances_ERC20 := _balances_ERC20;
[L3040]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3041]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3042]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3043]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3044]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3045]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3046]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3047]               __tmp__implementation_ONIT := implementation_ONIT;
[L3048]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3049]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3050]   CALL        call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L7396]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L7396]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7397]   COND FALSE  !(revert)
[L7400]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7276]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L7276]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7277]   COND FALSE  !(revert)
[L7280]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7249]               assume msgsender_MSG != null;
[L7250]               __tmp__Balance[this] := 0;
[L7251]               __tmp___name_ERC20Detailed[this] := -1540954157;
[L7252]               __tmp___symbol_ERC20Detailed[this] := -1540954157;
[L7253]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7255]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7256]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7257]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7280]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7281]   COND FALSE  !(revert)
[L7400]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7401]   COND FALSE  !(revert)
[L7404]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L6578]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6579]   COND FALSE  !(revert)
[L6582]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]               assume msgsender_MSG != null;
[L6554]               __tmp__Balance[this] := 0;
[L6555]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6556]               __tmp__sum__balances0[this] := 0;
[L6557]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6558]               __tmp__sum__allowed1[this] := 0;
[L6559]               __tmp___totalSupply_ERC20[this] := 0;
[L6582]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6583]   COND FALSE  !(revert)
[L7404]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7405]   COND FALSE  !(revert)
[L7408]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L7408]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7409]   COND FALSE  !(revert)
[L7412]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6143]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6144]   COND FALSE  !(revert)
[L6147]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6068]               assume msgsender_MSG != null;
[L6069]               __tmp__Balance[this] := 0;
[L6071]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L6071]   RET         call __var_10 := FreshRefGenerator__fail();
[L6072]   COND FALSE  !(revert)
[L6075]               __tmp___pausers_PauserRole[this] := __var_10;
[L6077]   COND TRUE   __tmp__DType[this] == ONIT
[L6078]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6368]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5817]               __var_1 := null;
[L5818]   COND FALSE  !(!(account_s164 != null))
[L5822]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5896]               __var_5 := null;
[L5897]   COND FALSE  !(!(account_s218 != null))
[L5901]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5822]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5823]   COND FALSE  !(revert)
[L5826]   COND FALSE  !(!!__var_2)
[L5830]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6368]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6369]   COND FALSE  !(revert)
[L6078]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6079]   COND FALSE  !(revert)
[L6147]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6148]   COND FALSE  !(revert)
[L7412]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7413]   COND FALSE  !(revert)
[L7416]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6422]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6423]   COND FALSE  !(revert)
[L6426]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6143]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6144]   COND FALSE  !(revert)
[L6147]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6068]               assume msgsender_MSG != null;
[L6069]               __tmp__Balance[this] := 0;
[L6071]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L6071]   RET         call __var_10 := FreshRefGenerator__fail();
[L6072]   COND FALSE  !(revert)
[L6075]               __tmp___pausers_PauserRole[this] := __var_10;
[L6077]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6082]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L6087]   COND TRUE   __tmp__DType[this] == Pausable
[L6088]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6368]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5817]               __var_1 := null;
[L5818]   COND FALSE  !(!(account_s164 != null))
[L5822]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5896]               __var_5 := null;
[L5897]   COND FALSE  !(!(account_s218 != null))
[L5901]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5822]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5823]   COND FALSE  !(revert)
[L5826]   COND FALSE  !(!!__var_2)
[L5830]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6368]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6369]   COND FALSE  !(revert)
[L6088]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6089]   COND FALSE  !(revert)
[L6147]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6148]   COND FALSE  !(revert)
[L6426]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6427]   COND FALSE  !(revert)
[L6430]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6403]               assume msgsender_MSG != null;
[L6404]               __tmp__Balance[this] := 0;
[L6405]               __tmp___paused_Pausable[this] := false;
[L6407]               __tmp___paused_Pausable[this] := false;
[L6430]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L7416]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7417]   COND FALSE  !(revert)
[L7420]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L7092]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7096]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L6578]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6579]   COND FALSE  !(revert)
[L6582]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]               assume msgsender_MSG != null;
[L6554]               __tmp__Balance[this] := 0;
[L6555]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6556]               __tmp__sum__balances0[this] := 0;
[L6557]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6558]               __tmp__sum__allowed1[this] := 0;
[L6559]               __tmp___totalSupply_ERC20[this] := 0;
[L6582]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6583]   COND FALSE  !(revert)
[L7096]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7097]   COND FALSE  !(revert)
[L7100]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L7100]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7101]   COND FALSE  !(revert)
[L7104]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6143]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6144]   COND FALSE  !(revert)
[L6147]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6068]               assume msgsender_MSG != null;
[L6069]               __tmp__Balance[this] := 0;
[L6071]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L6071]   RET         call __var_10 := FreshRefGenerator__fail();
[L6072]   COND FALSE  !(revert)
[L6075]               __tmp___pausers_PauserRole[this] := __var_10;
[L6077]   COND TRUE   __tmp__DType[this] == ONIT
[L6078]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6368]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5817]               __var_1 := null;
[L5818]   COND FALSE  !(!(account_s164 != null))
[L5822]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5896]               __var_5 := null;
[L5897]   COND FALSE  !(!(account_s218 != null))
[L5901]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5822]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5823]   COND FALSE  !(revert)
[L5826]   COND FALSE  !(!!__var_2)
[L5830]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6368]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6369]   COND FALSE  !(revert)
[L6078]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6079]   COND FALSE  !(revert)
[L6147]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6148]   COND FALSE  !(revert)
[L7104]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7105]   COND FALSE  !(revert)
[L7108]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6422]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6423]   COND FALSE  !(revert)
[L6426]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6143]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6144]   COND FALSE  !(revert)
[L6147]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6068]               assume msgsender_MSG != null;
[L6069]               __tmp__Balance[this] := 0;
[L6071]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L6071]   RET         call __var_10 := FreshRefGenerator__fail();
[L6072]   COND FALSE  !(revert)
[L6075]               __tmp___pausers_PauserRole[this] := __var_10;
[L6077]   COND TRUE   __tmp__DType[this] == ONIT
[L6078]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6368]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5817]               __var_1 := null;
[L5818]   COND FALSE  !(!(account_s164 != null))
[L5822]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5896]               __var_5 := null;
[L5897]   COND FALSE  !(!(account_s218 != null))
[L5901]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5822]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5823]   COND FALSE  !(revert)
[L5826]   COND FALSE  !(!!__var_2)
[L5830]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6368]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6369]   COND FALSE  !(revert)
[L6078]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6079]   COND FALSE  !(revert)
[L6147]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6148]   COND FALSE  !(revert)
[L6426]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6427]   COND FALSE  !(revert)
[L6430]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6403]               assume msgsender_MSG != null;
[L6404]               __tmp__Balance[this] := 0;
[L6405]               __tmp___paused_Pausable[this] := false;
[L6407]               __tmp___paused_Pausable[this] := false;
[L6430]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L7108]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7077]               assume msgsender_MSG != null;
[L7078]               __tmp__Balance[this] := 0;
[L7112]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7420]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7421]   COND FALSE  !(revert)
[L7424]   CALL        call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7339]               assume msgsender_MSG != null;
[L7340]               __tmp__Balance[this] := 0;
[L7341]               __tmp__implementation_ONIT[this] := null;
[L7343]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L7343]   RET         call __var_36 := FreshRefGenerator__fail();
[L7344]   COND FALSE  !(revert)
[L7347]               __tmp__timelockList_ONIT[this] := __var_36;
[L7349]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]] := zeroRefboolArr();
[L7350]               __tmp__frozenAccount_ONIT[this] := zeroRefboolArr();
[L7352]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7353]   COND TRUE   __tmp__DType[this] == ONIT
[L7354]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6920]               __var_23 := null;
[L6921]   COND FALSE  !(!(account_s946 != null))
[L6925]   CALL        call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L5740]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5741]   COND FALSE  !(!(c_s106 >= a_s106))
[L5745]               __ret_0_ := c_s106;
[L6925]   RET         call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L6926]   COND FALSE  !(revert)
[L6929]               __tmp___totalSupply_ERC20[this] := __var_24;
[L6930]   CALL        call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L5740]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5741]   COND FALSE  !(!(c_s106 >= a_s106))
[L5745]               __ret_0_ := c_s106;
[L6930]   RET         call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L6931]   COND FALSE  !(revert)
[L6934]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s946];
[L6935]               __tmp___balances_ERC20[this][account_s946] := __var_25;
[L6936]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s946];
[L7354]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7355]   COND FALSE  !(revert)
[L7424]   RET         call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7425]   COND FALSE  !(revert)
[L3050]   RET         call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L3051]               assume revert || gas < 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND TRUE   choice == 21
[L12204]              gas := gas - 21000;
[L12205]  COND TRUE   gas >= 0
[L12206]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12207]              assume msgvalue_MSG == 0;
[L12208]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_Ownable := owner_Ownable;
[L3204]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_ERC20 := _balances_ERC20;
[L3208]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3209]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3214]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3215]               __tmp__implementation_ONIT := implementation_ONIT;
[L3216]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3217]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7612]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10924]  COND TRUE   !!__tmp__frozenAccount_ONIT[this][_holder_s1185]
[L10925]              revert := true;
[L7612]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7613]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND TRUE   choice == 21
[L12204]              gas := gas - 21000;
[L12205]  COND TRUE   gas >= 0
[L12206]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12207]              assume msgvalue_MSG == 0;
[L12208]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_Ownable := owner_Ownable;
[L3204]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_ERC20 := _balances_ERC20;
[L3208]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3209]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3214]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3215]               __tmp__implementation_ONIT := implementation_ONIT;
[L3216]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3217]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7612]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7612]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7613]   COND FALSE  !(revert)
[L7616]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false)
[L7627]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7633]   COND TRUE   __tmp__DType[this] == ONIT
[L7634]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7150]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10893]              revert := true;
[L7150]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7151]   COND TRUE   revert
[L7634]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7635]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:44:53,796 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:44:53,797 INFO  L82        PathProgramCache]: Analyzing trace with hash -793435590, now seen corresponding path program 1 times
[2020-11-25 02:44:53,797 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:44:53,811 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:44:54,009 INFO  L134       CoverageAnalysis]: Checked inductivity of 882 backedges. 6 proven. 19 refuted. 0 times theorem prover too weak. 857 trivial. 0 not checked.
[2020-11-25 02:44:54,009 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:44:54,009 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 02:44:54,010 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:44:54,010 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:44:54,010 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:44:54,010 INFO  L87              Difference]: Start difference. First operand 19272 states and 22507 transitions. cyclomatic complexity: 3275 Second operand 9 states.
[2020-11-25 02:44:55,577 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:44:55,577 INFO  L93              Difference]: Finished difference Result 19431 states and 22670 transitions.
[2020-11-25 02:44:55,578 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 02:44:55,578 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19431 states and 22670 transitions.
[2020-11-25 02:44:55,621 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 38
[2020-11-25 02:44:55,668 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19431 states to 19396 states and 22627 transitions.
[2020-11-25 02:44:55,668 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3906
[2020-11-25 02:44:55,670 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3906
[2020-11-25 02:44:55,670 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19396 states and 22627 transitions.
[2020-11-25 02:44:55,683 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:44:55,683 INFO  L728         BuchiCegarLoop]: Abstraction has 19396 states and 22627 transitions.
[2020-11-25 02:44:55,691 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19396 states and 22627 transitions.
[2020-11-25 02:44:55,791 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19396 to 19264.
[2020-11-25 02:44:55,791 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19264 states.
[2020-11-25 02:44:55,818 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19264 states to 19264 states and 22495 transitions.
[2020-11-25 02:44:55,818 INFO  L751         BuchiCegarLoop]: Abstraction has 19264 states and 22495 transitions.
[2020-11-25 02:44:55,818 INFO  L631         BuchiCegarLoop]: Abstraction has 19264 states and 22495 transitions.
[2020-11-25 02:44:55,818 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 02:44:55,818 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19264 states and 22495 transitions.
[2020-11-25 02:44:55,838 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 38
[2020-11-25 02:44:55,838 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:44:55,838 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:44:55,840 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:44:55,840 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ONIT0 := false;
[L3]                  call_transfer_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND TRUE   __exception
[L3018]               __tmp__Balance := Balance;
[L3019]               __tmp__DType := DType;
[L3020]               __tmp__Alloc := Alloc;
[L3021]               __tmp__balance_ADDR := balance_ADDR;
[L3022]               __tmp__M_Ref_bool := M_Ref_bool;
[L3023]               __tmp__sum := sum;
[L3024]               __tmp__M_Ref_int := M_Ref_int;
[L3025]               __tmp__sum__balances0 := sum__balances0;
[L3026]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3027]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3028]               __tmp__sum__allowed1 := sum__allowed1;
[L3029]               __tmp__M_int_Ref := M_int_Ref;
[L3030]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3031]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3032]               __tmp__Length := Length;
[L3033]               __tmp__now := now;
[L3034]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3035]               __tmp__owner_Ownable := owner_Ownable;
[L3036]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3037]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3038]               __tmp___paused_Pausable := _paused_Pausable;
[L3039]               __tmp___balances_ERC20 := _balances_ERC20;
[L3040]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3041]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3042]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3043]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3044]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3045]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3046]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3047]               __tmp__implementation_ONIT := implementation_ONIT;
[L3048]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3049]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3050]   CALL        call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L7396]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L7396]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7397]   COND FALSE  !(revert)
[L7400]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7276]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L7276]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7277]   COND FALSE  !(revert)
[L7280]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7249]               assume msgsender_MSG != null;
[L7250]               __tmp__Balance[this] := 0;
[L7251]               __tmp___name_ERC20Detailed[this] := -1540954157;
[L7252]               __tmp___symbol_ERC20Detailed[this] := -1540954157;
[L7253]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7255]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7256]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7257]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7280]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7281]   COND FALSE  !(revert)
[L7400]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7401]   COND FALSE  !(revert)
[L7404]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L6578]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6579]   COND FALSE  !(revert)
[L6582]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]               assume msgsender_MSG != null;
[L6554]               __tmp__Balance[this] := 0;
[L6555]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6556]               __tmp__sum__balances0[this] := 0;
[L6557]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6558]               __tmp__sum__allowed1[this] := 0;
[L6559]               __tmp___totalSupply_ERC20[this] := 0;
[L6582]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6583]   COND FALSE  !(revert)
[L7404]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7405]   COND FALSE  !(revert)
[L7408]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L7408]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7409]   COND FALSE  !(revert)
[L7412]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6143]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6144]   COND FALSE  !(revert)
[L6147]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6068]               assume msgsender_MSG != null;
[L6069]               __tmp__Balance[this] := 0;
[L6071]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L6071]   RET         call __var_10 := FreshRefGenerator__fail();
[L6072]   COND FALSE  !(revert)
[L6075]               __tmp___pausers_PauserRole[this] := __var_10;
[L6077]   COND TRUE   __tmp__DType[this] == ONIT
[L6078]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6368]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5817]               __var_1 := null;
[L5818]   COND FALSE  !(!(account_s164 != null))
[L5822]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5896]               __var_5 := null;
[L5897]   COND FALSE  !(!(account_s218 != null))
[L5901]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5822]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5823]   COND FALSE  !(revert)
[L5826]   COND FALSE  !(!!__var_2)
[L5830]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6368]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6369]   COND FALSE  !(revert)
[L6078]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6079]   COND FALSE  !(revert)
[L6147]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6148]   COND FALSE  !(revert)
[L7412]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7413]   COND FALSE  !(revert)
[L7416]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6422]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6423]   COND FALSE  !(revert)
[L6426]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6143]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6144]   COND FALSE  !(revert)
[L6147]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6068]               assume msgsender_MSG != null;
[L6069]               __tmp__Balance[this] := 0;
[L6071]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L6071]   RET         call __var_10 := FreshRefGenerator__fail();
[L6072]   COND FALSE  !(revert)
[L6075]               __tmp___pausers_PauserRole[this] := __var_10;
[L6077]   COND TRUE   __tmp__DType[this] == ONIT
[L6078]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6368]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5817]               __var_1 := null;
[L5818]   COND FALSE  !(!(account_s164 != null))
[L5822]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5896]               __var_5 := null;
[L5897]   COND FALSE  !(!(account_s218 != null))
[L5901]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5822]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5823]   COND FALSE  !(revert)
[L5826]   COND FALSE  !(!!__var_2)
[L5830]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6368]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6369]   COND FALSE  !(revert)
[L6078]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6079]   COND FALSE  !(revert)
[L6147]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6148]   COND FALSE  !(revert)
[L6426]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6427]   COND FALSE  !(revert)
[L6430]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6403]               assume msgsender_MSG != null;
[L6404]               __tmp__Balance[this] := 0;
[L6405]               __tmp___paused_Pausable[this] := false;
[L6407]               __tmp___paused_Pausable[this] := false;
[L6430]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L7416]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7417]   COND FALSE  !(revert)
[L7420]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L7092]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7096]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L6578]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6579]   COND FALSE  !(revert)
[L6582]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]               assume msgsender_MSG != null;
[L6554]               __tmp__Balance[this] := 0;
[L6555]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6556]               __tmp__sum__balances0[this] := 0;
[L6557]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6558]               __tmp__sum__allowed1[this] := 0;
[L6559]               __tmp___totalSupply_ERC20[this] := 0;
[L6582]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6583]   COND FALSE  !(revert)
[L7096]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7097]   COND FALSE  !(revert)
[L7100]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L7100]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7101]   COND FALSE  !(revert)
[L7104]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6143]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6144]   COND FALSE  !(revert)
[L6147]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6068]               assume msgsender_MSG != null;
[L6069]               __tmp__Balance[this] := 0;
[L6071]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L6071]   RET         call __var_10 := FreshRefGenerator__fail();
[L6072]   COND FALSE  !(revert)
[L6075]               __tmp___pausers_PauserRole[this] := __var_10;
[L6077]   COND TRUE   __tmp__DType[this] == ONIT
[L6078]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6368]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5817]               __var_1 := null;
[L5818]   COND FALSE  !(!(account_s164 != null))
[L5822]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5896]               __var_5 := null;
[L5897]   COND FALSE  !(!(account_s218 != null))
[L5901]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5822]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5823]   COND FALSE  !(revert)
[L5826]   COND FALSE  !(!!__var_2)
[L5830]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6368]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6369]   COND FALSE  !(revert)
[L6078]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6079]   COND FALSE  !(revert)
[L6147]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6148]   COND FALSE  !(revert)
[L7104]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7105]   COND FALSE  !(revert)
[L7108]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6422]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6423]   COND FALSE  !(revert)
[L6426]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6143]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6144]   COND FALSE  !(revert)
[L6147]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6068]               assume msgsender_MSG != null;
[L6069]               __tmp__Balance[this] := 0;
[L6071]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L6071]   RET         call __var_10 := FreshRefGenerator__fail();
[L6072]   COND FALSE  !(revert)
[L6075]               __tmp___pausers_PauserRole[this] := __var_10;
[L6077]   COND TRUE   __tmp__DType[this] == ONIT
[L6078]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6368]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5817]               __var_1 := null;
[L5818]   COND FALSE  !(!(account_s164 != null))
[L5822]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5896]               __var_5 := null;
[L5897]   COND FALSE  !(!(account_s218 != null))
[L5901]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5822]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5823]   COND FALSE  !(revert)
[L5826]   COND FALSE  !(!!__var_2)
[L5830]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6368]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6369]   COND FALSE  !(revert)
[L6078]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6079]   COND FALSE  !(revert)
[L6147]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6148]   COND FALSE  !(revert)
[L6426]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6427]   COND FALSE  !(revert)
[L6430]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6403]               assume msgsender_MSG != null;
[L6404]               __tmp__Balance[this] := 0;
[L6405]               __tmp___paused_Pausable[this] := false;
[L6407]               __tmp___paused_Pausable[this] := false;
[L6430]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L7108]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7077]               assume msgsender_MSG != null;
[L7078]               __tmp__Balance[this] := 0;
[L7112]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7420]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7421]   COND FALSE  !(revert)
[L7424]   CALL        call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7339]               assume msgsender_MSG != null;
[L7340]               __tmp__Balance[this] := 0;
[L7341]               __tmp__implementation_ONIT[this] := null;
[L7343]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L7343]   RET         call __var_36 := FreshRefGenerator__fail();
[L7344]   COND FALSE  !(revert)
[L7347]               __tmp__timelockList_ONIT[this] := __var_36;
[L7349]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]] := zeroRefboolArr();
[L7350]               __tmp__frozenAccount_ONIT[this] := zeroRefboolArr();
[L7352]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7353]   COND TRUE   __tmp__DType[this] == ONIT
[L7354]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6920]               __var_23 := null;
[L6921]   COND FALSE  !(!(account_s946 != null))
[L6925]   CALL        call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L5740]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5741]   COND FALSE  !(!(c_s106 >= a_s106))
[L5745]               __ret_0_ := c_s106;
[L6925]   RET         call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L6926]   COND FALSE  !(revert)
[L6929]               __tmp___totalSupply_ERC20[this] := __var_24;
[L6930]   CALL        call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L5740]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5741]   COND FALSE  !(!(c_s106 >= a_s106))
[L5745]               __ret_0_ := c_s106;
[L6930]   RET         call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L6931]   COND FALSE  !(revert)
[L6934]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s946];
[L6935]               __tmp___balances_ERC20[this][account_s946] := __var_25;
[L6936]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s946];
[L7354]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7355]   COND FALSE  !(revert)
[L7424]   RET         call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7425]   COND FALSE  !(revert)
[L3050]   RET         call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L3051]               assume revert || gas < 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND TRUE   choice == 21
[L12204]              gas := gas - 21000;
[L12205]  COND TRUE   gas >= 0
[L12206]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12207]              assume msgvalue_MSG == 0;
[L12208]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_Ownable := owner_Ownable;
[L3204]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_ERC20 := _balances_ERC20;
[L3208]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3209]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3214]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3215]               __tmp__implementation_ONIT := implementation_ONIT;
[L3216]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3217]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7612]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10924]  COND TRUE   !!__tmp__frozenAccount_ONIT[this][_holder_s1185]
[L10925]              revert := true;
[L7612]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7613]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND TRUE   choice == 21
[L12204]              gas := gas - 21000;
[L12205]  COND TRUE   gas >= 0
[L12206]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12207]              assume msgvalue_MSG == 0;
[L12208]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_Ownable := owner_Ownable;
[L3204]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_ERC20 := _balances_ERC20;
[L3208]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3209]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3214]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3215]               __tmp__implementation_ONIT := implementation_ONIT;
[L3216]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3217]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7612]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10924]  COND TRUE   !!__tmp__frozenAccount_ONIT[this][_holder_s1185]
[L10925]              revert := true;
[L7612]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7613]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:44:55,845 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:44:55,845 INFO  L82        PathProgramCache]: Analyzing trace with hash 1574614757, now seen corresponding path program 1 times
[2020-11-25 02:44:55,846 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:44:55,863 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:44:56,037 INFO  L134       CoverageAnalysis]: Checked inductivity of 894 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 894 trivial. 0 not checked.
[2020-11-25 02:44:56,037 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:44:56,037 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:44:56,038 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:44:56,038 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:44:56,038 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:44:56,038 INFO  L87              Difference]: Start difference. First operand 19264 states and 22495 transitions. cyclomatic complexity: 3271 Second operand 4 states.
[2020-11-25 02:44:56,496 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:44:56,496 INFO  L93              Difference]: Finished difference Result 26782 states and 33729 transitions.
[2020-11-25 02:44:56,496 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 02:44:56,496 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 26782 states and 33729 transitions.
[2020-11-25 02:44:56,585 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 152
[2020-11-25 02:44:56,695 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 26782 states to 25002 states and 31777 transitions.
[2020-11-25 02:44:56,696 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4823
[2020-11-25 02:44:56,699 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4842
[2020-11-25 02:44:56,699 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 25002 states and 31777 transitions.
[2020-11-25 02:44:56,726 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:44:56,726 INFO  L728         BuchiCegarLoop]: Abstraction has 25002 states and 31777 transitions.
[2020-11-25 02:44:56,736 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 25002 states and 31777 transitions.
[2020-11-25 02:44:56,919 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 25002 to 21208.
[2020-11-25 02:44:56,920 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21208 states.
[2020-11-25 02:44:56,955 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21208 states to 21208 states and 25551 transitions.
[2020-11-25 02:44:56,955 INFO  L751         BuchiCegarLoop]: Abstraction has 21208 states and 25551 transitions.
[2020-11-25 02:44:56,955 INFO  L631         BuchiCegarLoop]: Abstraction has 21208 states and 25551 transitions.
[2020-11-25 02:44:56,955 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 02:44:56,955 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21208 states and 25551 transitions.
[2020-11-25 02:44:56,981 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 76
[2020-11-25 02:44:56,981 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:44:56,981 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:44:56,982 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:44:56,983 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ONIT0 := false;
[L3]                  call_transfer_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6125]   COND FALSE  !(DType[this] == Pausable)
[L6130]   COND TRUE   DType[this] == PauserRole
[L6131]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6131]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6132]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6125]   COND FALSE  !(DType[this] == Pausable)
[L6130]   COND TRUE   DType[this] == PauserRole
[L6131]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6131]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6132]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6125]   COND FALSE  !(DType[this] == Pausable)
[L6130]   COND TRUE   DType[this] == PauserRole
[L6131]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6131]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6132]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6125]   COND FALSE  !(DType[this] == Pausable)
[L6130]   COND TRUE   DType[this] == PauserRole
[L6131]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6131]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6132]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND TRUE   choice == 21
[L12204]              gas := gas - 21000;
[L12205]  COND TRUE   gas >= 0
[L12206]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12207]              assume msgvalue_MSG == 0;
[L12208]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_Ownable := owner_Ownable;
[L3204]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_ERC20 := _balances_ERC20;
[L3208]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3209]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3214]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3215]               __tmp__implementation_ONIT := implementation_ONIT;
[L3216]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3217]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7612]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7612]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7613]   COND FALSE  !(revert)
[L7616]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false)
[L7627]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7628]   CALL        call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8290]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8301]               idx_s1645 := 0;
[L8302]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]]
[L8304]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8315]   COND TRUE   __tmp___releaseTime_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8316]   CALL        call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8101]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8112]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8113]               releaseAmount_s1600 := __tmp___amount_ONIT.LockInfo[lockinfo_s1600];
[L8114]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8125]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8136]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8147]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L5716]   COND TRUE   !(b_s82 <= a_s82)
[L5717]               revert := true;
[L8147]   RET         call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L8148]   COND TRUE   revert
[L8316]   RET         call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8317]   COND TRUE   revert
[L7628]   RET         call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7629]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND TRUE   choice == 21
[L12204]              gas := gas - 21000;
[L12205]  COND TRUE   gas >= 0
[L12206]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12207]              assume msgvalue_MSG == 0;
[L12208]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_Ownable := owner_Ownable;
[L3204]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_ERC20 := _balances_ERC20;
[L3208]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3209]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3214]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3215]               __tmp__implementation_ONIT := implementation_ONIT;
[L3216]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3217]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7612]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7612]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7613]   COND FALSE  !(revert)
[L7616]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false)
[L7627]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7628]   CALL        call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8290]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8301]               idx_s1645 := 0;
[L8302]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]]
[L8304]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8315]   COND TRUE   __tmp___releaseTime_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8316]   CALL        call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8101]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8112]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8113]               releaseAmount_s1600 := __tmp___amount_ONIT.LockInfo[lockinfo_s1600];
[L8114]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8125]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8136]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8147]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L5716]   COND TRUE   !(b_s82 <= a_s82)
[L5717]               revert := true;
[L8147]   RET         call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L8148]   COND TRUE   revert
[L8316]   RET         call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8317]   COND TRUE   revert
[L7628]   RET         call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7629]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:44:56,987 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:44:56,988 INFO  L82        PathProgramCache]: Analyzing trace with hash -1340871758, now seen corresponding path program 1 times
[2020-11-25 02:44:56,988 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:44:57,000 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:44:57,153 INFO  L134       CoverageAnalysis]: Checked inductivity of 948 backedges. 0 proven. 36 refuted. 0 times theorem prover too weak. 912 trivial. 0 not checked.
[2020-11-25 02:44:57,153 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:44:57,153 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 02:44:57,154 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:44:57,154 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:44:57,154 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:44:57,154 INFO  L87              Difference]: Start difference. First operand 21208 states and 25551 transitions. cyclomatic complexity: 4383 Second operand 7 states.
[2020-11-25 02:44:57,314 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:44:57,314 INFO  L93              Difference]: Finished difference Result 21231 states and 25579 transitions.
[2020-11-25 02:44:57,314 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:44:57,314 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21231 states and 25579 transitions.
[2020-11-25 02:44:57,363 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 76
[2020-11-25 02:44:57,422 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21231 states to 21214 states and 25559 transitions.
[2020-11-25 02:44:57,422 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4382
[2020-11-25 02:44:57,424 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4382
[2020-11-25 02:44:57,425 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21214 states and 25559 transitions.
[2020-11-25 02:44:57,440 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:44:57,440 INFO  L728         BuchiCegarLoop]: Abstraction has 21214 states and 25559 transitions.
[2020-11-25 02:44:57,448 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21214 states and 25559 transitions.
[2020-11-25 02:44:57,565 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21214 to 21208.
[2020-11-25 02:44:57,565 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21208 states.
[2020-11-25 02:44:57,599 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21208 states to 21208 states and 25551 transitions.
[2020-11-25 02:44:57,600 INFO  L751         BuchiCegarLoop]: Abstraction has 21208 states and 25551 transitions.
[2020-11-25 02:44:57,600 INFO  L631         BuchiCegarLoop]: Abstraction has 21208 states and 25551 transitions.
[2020-11-25 02:44:57,600 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 02:44:57,600 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21208 states and 25551 transitions.
[2020-11-25 02:44:57,624 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 76
[2020-11-25 02:44:57,624 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:44:57,624 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:44:57,626 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:44:57,626 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ONIT0 := false;
[L3]                  call_transfer_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND TRUE   choice == 21
[L12204]              gas := gas - 21000;
[L12205]  COND TRUE   gas >= 0
[L12206]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12207]              assume msgvalue_MSG == 0;
[L12208]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_Ownable := owner_Ownable;
[L3204]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_ERC20 := _balances_ERC20;
[L3208]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3209]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3214]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3215]               __tmp__implementation_ONIT := implementation_ONIT;
[L3216]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3217]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7612]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7612]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7613]   COND FALSE  !(revert)
[L7616]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false)
[L7627]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7628]   CALL        call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8290]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8301]               idx_s1645 := 0;
[L8302]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]]
[L8304]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8315]   COND TRUE   __tmp___releaseTime_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8316]   CALL        call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8101]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8112]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8113]               releaseAmount_s1600 := __tmp___amount_ONIT.LockInfo[lockinfo_s1600];
[L8114]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8125]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8136]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8147]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L5716]   COND TRUE   !(b_s82 <= a_s82)
[L5717]               revert := true;
[L8147]   RET         call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L8148]   COND TRUE   revert
[L8316]   RET         call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8317]   COND TRUE   revert
[L7628]   RET         call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7629]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND TRUE   choice == 21
[L12204]              gas := gas - 21000;
[L12205]  COND TRUE   gas >= 0
[L12206]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12207]              assume msgvalue_MSG == 0;
[L12208]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_Ownable := owner_Ownable;
[L3204]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_ERC20 := _balances_ERC20;
[L3208]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3209]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3214]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3215]               __tmp__implementation_ONIT := implementation_ONIT;
[L3216]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3217]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7612]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7612]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7613]   COND FALSE  !(revert)
[L7616]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false)
[L7627]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7628]   CALL        call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8290]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8301]               idx_s1645 := 0;
[L8302]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]]
[L8304]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8315]   COND TRUE   __tmp___releaseTime_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8316]   CALL        call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8101]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8112]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8113]               releaseAmount_s1600 := __tmp___amount_ONIT.LockInfo[lockinfo_s1600];
[L8114]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8125]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8136]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8147]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L5716]   COND TRUE   !(b_s82 <= a_s82)
[L5717]               revert := true;
[L8147]   RET         call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L8148]   COND TRUE   revert
[L8316]   RET         call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8317]   COND TRUE   revert
[L7628]   RET         call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7629]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:44:57,631 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:44:57,631 INFO  L82        PathProgramCache]: Analyzing trace with hash -1902273324, now seen corresponding path program 1 times
[2020-11-25 02:44:57,632 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:44:57,653 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:44:57,930 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 02:44:57,930 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:44:57,930 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-25 02:44:57,930 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:44:57,931 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-25 02:44:57,931 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=42, Invalid=300, Unknown=0, NotChecked=0, Total=342
[2020-11-25 02:44:57,931 INFO  L87              Difference]: Start difference. First operand 21208 states and 25551 transitions. cyclomatic complexity: 4383 Second operand 19 states.
[2020-11-25 02:45:05,042 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:45:05,043 INFO  L93              Difference]: Finished difference Result 24694 states and 31206 transitions.
[2020-11-25 02:45:05,043 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 02:45:05,043 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 24694 states and 31206 transitions.
[2020-11-25 02:45:05,115 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 02:45:05,206 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 24694 states to 24694 states and 31206 transitions.
[2020-11-25 02:45:05,206 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 5256
[2020-11-25 02:45:05,211 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 5263
[2020-11-25 02:45:05,211 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 24694 states and 31206 transitions.
[2020-11-25 02:45:05,234 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:45:05,235 INFO  L728         BuchiCegarLoop]: Abstraction has 24694 states and 31206 transitions.
[2020-11-25 02:45:05,244 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 24694 states and 31206 transitions.
[2020-11-25 02:45:05,422 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 24694 to 23236.
[2020-11-25 02:45:05,422 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 23236 states.
[2020-11-25 02:45:05,465 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 23236 states to 23236 states and 28532 transitions.
[2020-11-25 02:45:05,465 INFO  L751         BuchiCegarLoop]: Abstraction has 23236 states and 28532 transitions.
[2020-11-25 02:45:05,465 INFO  L631         BuchiCegarLoop]: Abstraction has 23236 states and 28532 transitions.
[2020-11-25 02:45:05,465 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 02:45:05,465 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 23236 states and 28532 transitions.
[2020-11-25 02:45:05,493 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 02:45:05,493 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:45:05,493 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:45:05,494 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:45:05,495 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ONIT0 := false;
[L3]                  call_transfer_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND TRUE   choice == 21
[L12204]              gas := gas - 21000;
[L12205]  COND TRUE   gas >= 0
[L12206]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12207]              assume msgvalue_MSG == 0;
[L12208]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_Ownable := owner_Ownable;
[L3204]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_ERC20 := _balances_ERC20;
[L3208]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3209]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3214]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3215]               __tmp__implementation_ONIT := implementation_ONIT;
[L3216]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3217]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7612]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7612]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7613]   COND FALSE  !(revert)
[L7616]   COND TRUE   __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false
[L7617]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L7617]   RET         call __var_41 := FreshRefGenerator__fail();
[L7618]   COND FALSE  !(revert)
[L7621]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7622]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] := true;
[L7623]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7624]               assume __tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7625]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7627]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7628]   CALL        call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8290]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8301]               idx_s1645 := 0;
[L8302]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]]
[L8304]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1645] == false)
[L8315]   COND TRUE   __tmp___releaseTime_ONIT.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8316]   CALL        call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8101]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8112]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8113]               releaseAmount_s1600 := __tmp___amount_ONIT.LockInfo[lockinfo_s1600];
[L8114]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8125]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8136]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][holder_s1600] == false)
[L8147]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L5716]   COND TRUE   !(b_s82 <= a_s82)
[L5717]               revert := true;
[L8147]   RET         call __var_62 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][holder_s1600]], 1);
[L8148]   COND TRUE   revert
[L8316]   RET         call __var_69 := _unlock~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8317]   COND TRUE   revert
[L7628]   RET         call __var_42 := _autoUnlock~address_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7629]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND TRUE   choice == 33
[L12132]              gas := gas - 21000;
[L12133]  COND FALSE  !(gas >= 0)
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:45:05,499 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:45:05,499 INFO  L82        PathProgramCache]: Analyzing trace with hash 2143121215, now seen corresponding path program 1 times
[2020-11-25 02:45:05,500 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:45:05,519 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:45:05,675 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 02:45:05,675 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:45:05,676 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:45:05,676 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:45:05,676 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:45:05,676 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:45:05,676 INFO  L87              Difference]: Start difference. First operand 23236 states and 28532 transitions. cyclomatic complexity: 5370 Second operand 3 states.
[2020-11-25 02:45:05,805 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:45:05,805 INFO  L93              Difference]: Finished difference Result 23216 states and 28492 transitions.
[2020-11-25 02:45:05,805 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:45:05,805 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23216 states and 28492 transitions.
[2020-11-25 02:45:05,866 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 02:45:05,941 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23216 states to 23216 states and 28492 transitions.
[2020-11-25 02:45:05,941 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 5225
[2020-11-25 02:45:05,944 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 5225
[2020-11-25 02:45:05,944 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23216 states and 28492 transitions.
[2020-11-25 02:45:05,963 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:45:05,963 INFO  L728         BuchiCegarLoop]: Abstraction has 23216 states and 28492 transitions.
[2020-11-25 02:45:05,972 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23216 states and 28492 transitions.
[2020-11-25 02:45:06,152 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23216 to 23046.
[2020-11-25 02:45:06,153 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 23046 states.
[2020-11-25 02:45:06,194 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 23046 states to 23046 states and 28294 transitions.
[2020-11-25 02:45:06,195 INFO  L751         BuchiCegarLoop]: Abstraction has 23046 states and 28294 transitions.
[2020-11-25 02:45:06,195 INFO  L631         BuchiCegarLoop]: Abstraction has 23046 states and 28294 transitions.
[2020-11-25 02:45:06,195 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 02:45:06,195 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 23046 states and 28294 transitions.
[2020-11-25 02:45:06,222 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 02:45:06,223 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:45:06,223 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:45:06,224 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:45:06,224 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ONIT0 := false;
[L3]                  call_transfer_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND TRUE   choice == 21
[L12204]              gas := gas - 21000;
[L12205]  COND TRUE   gas >= 0
[L12206]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12207]              assume msgvalue_MSG == 0;
[L12208]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_Ownable := owner_Ownable;
[L3204]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_ERC20 := _balances_ERC20;
[L3208]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3209]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3214]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3215]               __tmp__implementation_ONIT := implementation_ONIT;
[L3216]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3217]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7612]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7612]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7613]   COND FALSE  !(revert)
[L7616]   COND TRUE   __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false
[L7617]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L7617]   RET         call __var_41 := FreshRefGenerator__fail();
[L7618]   COND FALSE  !(revert)
[L7621]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7622]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] := true;
[L7623]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7624]               assume __tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7625]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7627]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7633]   COND TRUE   __tmp__DType[this] == ONIT
[L7634]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7150]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7150]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7151]   COND FALSE  !(revert)
[L7154]   COND TRUE   __tmp__DType[this] == ONIT
[L7155]   CALL        call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6638]   COND TRUE   __tmp__DType[this] == ONIT
[L6639]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6867]               __var_20 := null;
[L6868]   COND TRUE   !(to_s904 != null)
[L6869]               revert := true;
[L6639]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6640]   COND TRUE   revert
[L7155]   RET         call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7156]   COND TRUE   revert
[L7634]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7635]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND TRUE   choice == 33
[L12132]              gas := gas - 21000;
[L12133]  COND FALSE  !(gas >= 0)
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:45:06,229 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:45:06,229 INFO  L82        PathProgramCache]: Analyzing trace with hash -393162995, now seen corresponding path program 1 times
[2020-11-25 02:45:06,230 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:45:06,259 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:45:06,294 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:45:06,464 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:45:06,464 INFO  L82        PathProgramCache]: Analyzing trace with hash -850210932, now seen corresponding path program 1 times
[2020-11-25 02:45:06,465 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:45:06,468 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:45:06,475 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:45:06,476 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:45:06,476 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:45:06,476 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 02:45:06,476 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:45:06,476 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:45:06,476 INFO  L87              Difference]: Start difference. First operand 23046 states and 28294 transitions. cyclomatic complexity: 5322 Second operand 4 states.
[2020-11-25 02:45:07,315 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:45:07,315 INFO  L93              Difference]: Finished difference Result 23859 states and 29887 transitions.
[2020-11-25 02:45:07,315 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:45:07,315 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23859 states and 29887 transitions.
[2020-11-25 02:45:07,417 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 224
[2020-11-25 02:45:07,533 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23859 states to 23859 states and 29887 transitions.
[2020-11-25 02:45:07,534 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 5133
[2020-11-25 02:45:07,537 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 5133
[2020-11-25 02:45:07,537 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23859 states and 29887 transitions.
[2020-11-25 02:45:07,562 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:45:07,562 INFO  L728         BuchiCegarLoop]: Abstraction has 23859 states and 29887 transitions.
[2020-11-25 02:45:07,573 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23859 states and 29887 transitions.
[2020-11-25 02:45:07,919 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23859 to 21429.
[2020-11-25 02:45:07,920 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21429 states.
[2020-11-25 02:45:07,957 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21429 states to 21429 states and 25252 transitions.
[2020-11-25 02:45:07,957 INFO  L751         BuchiCegarLoop]: Abstraction has 21429 states and 25252 transitions.
[2020-11-25 02:45:07,957 INFO  L631         BuchiCegarLoop]: Abstraction has 21429 states and 25252 transitions.
[2020-11-25 02:45:07,957 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 02:45:07,958 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21429 states and 25252 transitions.
[2020-11-25 02:45:07,982 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 56
[2020-11-25 02:45:07,982 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:45:07,982 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:45:07,984 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:45:07,984 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ONIT0 := false;
[L3]                  call_transfer_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND TRUE   DType[this] == ERC20Pausable
[L6121]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6121]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6122]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND TRUE   DType[this] == ERC20Pausable
[L6121]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6121]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6122]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND TRUE   DType[this] == ERC20Pausable
[L6121]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6121]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6122]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND TRUE   choice == 21
[L12204]              gas := gas - 21000;
[L12205]  COND TRUE   gas >= 0
[L12206]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12207]              assume msgvalue_MSG == 0;
[L12208]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_Ownable := owner_Ownable;
[L3204]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_ERC20 := _balances_ERC20;
[L3208]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3209]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3214]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3215]               __tmp__implementation_ONIT := implementation_ONIT;
[L3216]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3217]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7612]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7612]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7613]   COND FALSE  !(revert)
[L7616]   COND TRUE   __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false
[L7617]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L7617]   RET         call __var_41 := FreshRefGenerator__fail();
[L7618]   COND FALSE  !(revert)
[L7621]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7622]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] := true;
[L7623]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7624]               assume __tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7625]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7627]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7633]   COND TRUE   __tmp__DType[this] == ONIT
[L7634]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7150]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7150]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7151]   COND FALSE  !(revert)
[L7154]   COND TRUE   __tmp__DType[this] == ONIT
[L7155]   CALL        call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6638]   COND TRUE   __tmp__DType[this] == ONIT
[L6639]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6867]               __var_20 := null;
[L6868]   COND TRUE   !(to_s904 != null)
[L6869]               revert := true;
[L6639]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6640]   COND TRUE   revert
[L7155]   RET         call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7156]   COND TRUE   revert
[L7634]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7635]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL       call CorralChoice_ONIT(this);
[L12047]             havoc msgsender_MSG;
[L12048]             havoc msgvalue_MSG;
[L12049]             havoc choice;
[L12050]             havoc __ret_0_owner;
[L12051]             havoc __ret_0_newOwner;
[L12052]             havoc account_s293;
[L12053]             havoc __ret_0_isOwner;
[L12054]             havoc _newOwner_s313;
[L12055]             havoc __ret_0_acceptOwnership;
[L12056]             havoc account_s390;
[L12057]             havoc __ret_0_isPauser;
[L12058]             havoc account_s402;
[L12059]             havoc account_s414;
[L12060]             havoc __ret_0_paused;
[L12061]             havoc to_s1288;
[L12062]             havoc value_s1288;
[L12063]             havoc __ret_0_transfer;
[L12064]             havoc spender_s711;
[L12065]             havoc value_s711;
[L12066]             havoc __ret_0_approve;
[L12067]             havoc from_s1322;
[L12068]             havoc to_s1322;
[L12069]             havoc value_s1322;
[L12070]             havoc __ret_0_transferFrom;
[L12071]             havoc __ret_0_totalSupply;
[L12072]             havoc owner_s1254;
[L12073]             havoc __ret_0_balanceOf;
[L12074]             havoc owner_s656;
[L12075]             havoc spender_s656;
[L12076]             havoc __ret_0_allowance;
[L12077]             havoc spender_s809;
[L12078]             havoc addedValue_s809;
[L12079]             havoc __ret_0_increaseAllowance;
[L12080]             havoc spender_s858;
[L12081]             havoc subtractedValue_s858;
[L12082]             havoc __ret_0_decreaseAllowance;
[L12083]             havoc name_s1105;
[L12084]             havoc symbol_s1105;
[L12085]             havoc decimals_s1105;
[L12086]             havoc __ret_0_name;
[L12087]             havoc __ret_0_symbol;
[L12088]             havoc __ret_0_decimals;
[L12089]             havoc __ret_0_implementation;
[L12090]             havoc arg1693_s0;
[L12091]             havoc arg1694_s0;
[L12092]             havoc __ret_0_timelockList;
[L12093]             havoc arg1695_s0;
[L12094]             havoc __ret_0_frozenAccount;
[L12095]             havoc holder_s1351;
[L12096]             havoc __ret_0_freezeAccount;
[L12097]             havoc holder_s1379;
[L12098]             havoc __ret_0_unfreezeAccount;
[L12099]             havoc holder_s1410;
[L12100]             havoc value_s1410;
[L12101]             havoc releaseTime_s1410;
[L12102]             havoc __ret_0_lock;
[L12103]             havoc holder_s1439;
[L12104]             havoc value_s1439;
[L12105]             havoc releaseTime_s1439;
[L12106]             havoc __ret_0_transferWithLock;
[L12107]             havoc holder_s1468;
[L12108]             havoc idx_s1468;
[L12109]             havoc __ret_0_unlock;
[L12110]             havoc _newImplementation_s1486;
[L12111]             havoc value_s1663;
[L12112]             havoc __ret_0_mint;
[L12113]             havoc tmpNow;
[L12114]             havoc gas;
[L12115]             assume gas > 4000000 && gas <= 8000000;
[L12116]             tmpNow := now;
[L12117]             havoc now;
[L12118]             assume now > tmpNow;
[L12119]             assume msgsender_MSG != null;
[L12120]             assume DType[msgsender_MSG] != SafeMath;
[L12121]             assume DType[msgsender_MSG] != Roles;
[L12122]             assume DType[msgsender_MSG] != Ownable;
[L12123]             assume DType[msgsender_MSG] != PauserRole;
[L12124]             assume DType[msgsender_MSG] != Pausable;
[L12125]             assume DType[msgsender_MSG] != IERC20;
[L12126]             assume DType[msgsender_MSG] != ERC20;
[L12127]             assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]             assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]             assume DType[msgsender_MSG] != ONIT;
[L12130]             Alloc[msgsender_MSG] := true;
[L12131]  COND TRUE  choice == 33
[L12132]             gas := gas - 21000;
[L12133]  COND TRUE  gas >= 0
[L12134]             assume msgvalue_MSG == 0;
[L12135]  CALL       call __ret_0_owner := owner_Ownable(this, msgsender_MSG, msgvalue_MSG);
[L615]               havoc __exception;
[L616]               revert := false;
[L617]    COND TRUE  __exception
[L618]               __tmp__Balance := Balance;
[L619]               __tmp__DType := DType;
[L620]               __tmp__Alloc := Alloc;
[L621]               __tmp__balance_ADDR := balance_ADDR;
[L622]               __tmp__M_Ref_bool := M_Ref_bool;
[L623]               __tmp__sum := sum;
[L624]               __tmp__M_Ref_int := M_Ref_int;
[L625]               __tmp__sum__balances0 := sum__balances0;
[L626]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L627]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L628]               __tmp__sum__allowed1 := sum__allowed1;
[L629]               __tmp__M_int_Ref := M_int_Ref;
[L630]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L631]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L632]               __tmp__Length := Length;
[L633]               __tmp__now := now;
[L634]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L635]               __tmp__owner_Ownable := owner_Ownable;
[L636]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L637]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L638]               __tmp___paused_Pausable := _paused_Pausable;
[L639]               __tmp___balances_ERC20 := _balances_ERC20;
[L640]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L641]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L642]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L643]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L644]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L645]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L646]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L647]               __tmp__implementation_ONIT := implementation_ONIT;
[L648]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L649]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L650]    CALL       call __ret_0_ := owner_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6042]              __ret_0_ := __tmp__owner_Ownable[this];
[L650]    RET        call __ret_0_ := owner_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L651]               assume revert || gas < 0;
[L12135]  RET        call __ret_0_owner := owner_Ownable(this, msgsender_MSG, msgvalue_MSG);
[L12359]  RET        call CorralChoice_ONIT(this);

[2020-11-25 02:45:07,989 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:45:07,989 INFO  L82        PathProgramCache]: Analyzing trace with hash -1012633372, now seen corresponding path program 1 times
[2020-11-25 02:45:07,989 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:45:08,003 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:45:08,167 INFO  L134       CoverageAnalysis]: Checked inductivity of 921 backedges. 6 proven. 25 refuted. 0 times theorem prover too weak. 890 trivial. 0 not checked.
[2020-11-25 02:45:08,168 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:45:08,168 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:45:08,168 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:45:08,168 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:45:08,168 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:45:08,168 INFO  L87              Difference]: Start difference. First operand 21429 states and 25252 transitions. cyclomatic complexity: 3897 Second operand 8 states.
[2020-11-25 02:45:08,368 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:45:08,368 INFO  L93              Difference]: Finished difference Result 21463 states and 25291 transitions.
[2020-11-25 02:45:08,368 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:45:08,368 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21463 states and 25291 transitions.
[2020-11-25 02:45:08,423 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 56
[2020-11-25 02:45:08,500 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21463 states to 21442 states and 25267 transitions.
[2020-11-25 02:45:08,500 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4664
[2020-11-25 02:45:08,503 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4664
[2020-11-25 02:45:08,503 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21442 states and 25267 transitions.
[2020-11-25 02:45:08,521 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:45:08,521 INFO  L728         BuchiCegarLoop]: Abstraction has 21442 states and 25267 transitions.
[2020-11-25 02:45:08,530 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21442 states and 25267 transitions.
[2020-11-25 02:45:08,672 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21442 to 21435.
[2020-11-25 02:45:08,672 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21435 states.
[2020-11-25 02:45:08,762 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21435 states to 21435 states and 25259 transitions.
[2020-11-25 02:45:08,763 INFO  L751         BuchiCegarLoop]: Abstraction has 21435 states and 25259 transitions.
[2020-11-25 02:45:08,763 INFO  L631         BuchiCegarLoop]: Abstraction has 21435 states and 25259 transitions.
[2020-11-25 02:45:08,763 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 02:45:08,763 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21435 states and 25259 transitions.
[2020-11-25 02:45:08,786 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 56
[2020-11-25 02:45:08,786 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:45:08,786 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:45:08,788 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:45:08,788 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ONIT0 := false;
[L3]                  call_transfer_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND TRUE   choice == 21
[L12204]              gas := gas - 21000;
[L12205]  COND TRUE   gas >= 0
[L12206]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12207]              assume msgvalue_MSG == 0;
[L12208]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_Ownable := owner_Ownable;
[L3204]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_ERC20 := _balances_ERC20;
[L3208]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3209]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3214]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3215]               __tmp__implementation_ONIT := implementation_ONIT;
[L3216]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3217]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7612]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7612]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7613]   COND FALSE  !(revert)
[L7616]   COND TRUE   __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false
[L7617]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L7617]   RET         call __var_41 := FreshRefGenerator__fail();
[L7618]   COND FALSE  !(revert)
[L7621]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7622]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] := true;
[L7623]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7624]               assume __tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7625]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7627]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7633]   COND TRUE   __tmp__DType[this] == ONIT
[L7634]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7150]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7150]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7151]   COND FALSE  !(revert)
[L7154]   COND TRUE   __tmp__DType[this] == ONIT
[L7155]   CALL        call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6638]   COND TRUE   __tmp__DType[this] == ONIT
[L6639]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6867]               __var_20 := null;
[L6868]   COND TRUE   !(to_s904 != null)
[L6869]               revert := true;
[L6639]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6640]   COND TRUE   revert
[L7155]   RET         call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7156]   COND TRUE   revert
[L7634]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7635]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND TRUE   choice == 21
[L12204]              gas := gas - 21000;
[L12205]  COND TRUE   gas >= 0
[L12206]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12207]              assume msgvalue_MSG == 0;
[L12208]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_Ownable := owner_Ownable;
[L3204]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_ERC20 := _balances_ERC20;
[L3208]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3209]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3214]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3215]               __tmp__implementation_ONIT := implementation_ONIT;
[L3216]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3217]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7612]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7612]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7613]   COND FALSE  !(revert)
[L7616]   COND TRUE   __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false
[L7617]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L7617]   RET         call __var_41 := FreshRefGenerator__fail();
[L7618]   COND FALSE  !(revert)
[L7621]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7622]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] := true;
[L7623]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7624]               assume __tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7625]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7627]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7633]   COND TRUE   __tmp__DType[this] == ONIT
[L7634]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7150]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7150]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7151]   COND FALSE  !(revert)
[L7154]   COND TRUE   __tmp__DType[this] == ONIT
[L7155]   CALL        call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6638]   COND TRUE   __tmp__DType[this] == ONIT
[L6639]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6867]               __var_20 := null;
[L6868]   COND TRUE   !(to_s904 != null)
[L6869]               revert := true;
[L6639]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6640]   COND TRUE   revert
[L7155]   RET         call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7156]   COND TRUE   revert
[L7634]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7635]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:45:08,795 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:45:08,795 INFO  L82        PathProgramCache]: Analyzing trace with hash -393162995, now seen corresponding path program 2 times
[2020-11-25 02:45:08,796 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:45:08,817 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:45:08,841 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:45:08,928 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:45:08,928 INFO  L82        PathProgramCache]: Analyzing trace with hash 1966886371, now seen corresponding path program 1 times
[2020-11-25 02:45:08,929 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:45:08,934 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:45:08,939 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:45:08,954 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:45:08,955 INFO  L82        PathProgramCache]: Analyzing trace with hash 1453243991, now seen corresponding path program 1 times
[2020-11-25 02:45:08,955 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:45:08,982 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:45:09,014 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #4: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #5: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 619 to 1237
[2020-11-25 02:45:09,534 WARN  L188               SmtUtils]: Spent 203.00 ms on a formula simplification. DAG size of input: 226 DAG size of output: 219
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2503 to 5003
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 4027 to 8053
[2020-11-25 02:45:09,669 WARN  L188               SmtUtils]: Spent 116.00 ms on a formula simplification. DAG size of input: 166 DAG size of output: 162
[2020-11-25 02:45:09,816 WARN  L188               SmtUtils]: Spent 145.00 ms on a formula simplification that was a NOOP. DAG size: 383
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.002s / 0.005s total
Resizing node table from 9181 to 18353
[2020-11-25 02:45:10,101 WARN  L188               SmtUtils]: Spent 267.00 ms on a formula simplification that was a NOOP. DAG size: 311
[2020-11-25 02:45:10,902 WARN  L188               SmtUtils]: Spent 796.00 ms on a formula simplification. DAG size of input: 404 DAG size of output: 362
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 8543 to 17077
Garbage collection #8: 17077 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 17077 to 34147
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #8: 9973 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9973 to 19937
[2020-11-25 02:45:11,143 WARN  L188               SmtUtils]: Spent 216.00 ms on a formula simplification. DAG size of input: 224 DAG size of output: 220
[2020-11-25 02:45:11,487 WARN  L188               SmtUtils]: Spent 342.00 ms on a formula simplification that was a NOOP. DAG size: 478
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 12073 to 24137
[2020-11-25 02:45:11,791 WARN  L188               SmtUtils]: Spent 294.00 ms on a formula simplification that was a NOOP. DAG size: 389
[2020-11-25 02:45:12,091 WARN  L188               SmtUtils]: Spent 298.00 ms on a formula simplification that was a NOOP. DAG size: 389
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
[2020-11-25 02:45:12,216 WARN  L188               SmtUtils]: Spent 112.00 ms on a formula simplification that was a NOOP. DAG size: 231
[2020-11-25 02:45:12,230 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-11-25 02:45:13,017 WARN  L188               SmtUtils]: Spent 123.00 ms on a formula simplification. DAG size of input: 231 DAG size of output: 217
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
[2020-11-25 02:45:14,332 WARN  L188               SmtUtils]: Spent 1.02 s on a formula simplification. DAG size of input: 447 DAG size of output: 421
Garbage collection #1: 151 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 151 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
[2020-11-25 02:45:14,537 WARN  L188               SmtUtils]: Spent 157.00 ms on a formula simplification that was a NOOP. DAG size: 252
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
[2020-11-25 02:45:14,728 WARN  L188               SmtUtils]: Spent 128.00 ms on a formula simplification. DAG size of input: 217 DAG size of output: 216
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 02:45:14,971 WARN  L188               SmtUtils]: Spent 202.00 ms on a formula simplification that was a NOOP. DAG size: 415
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
[2020-11-25 02:45:15,131 WARN  L188               SmtUtils]: Spent 156.00 ms on a formula simplification that was a NOOP. DAG size: 375
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #4: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #5: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 02:45:15,387 WARN  L188               SmtUtils]: Spent 129.00 ms on a formula simplification. DAG size of input: 226 DAG size of output: 219
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
[2020-11-25 02:45:15,500 WARN  L188               SmtUtils]: Spent 106.00 ms on a formula simplification. DAG size of input: 166 DAG size of output: 162
[2020-11-25 02:45:15,691 WARN  L188               SmtUtils]: Spent 190.00 ms on a formula simplification that was a NOOP. DAG size: 383
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
[2020-11-25 02:45:15,969 WARN  L188               SmtUtils]: Spent 270.00 ms on a formula simplification that was a NOOP. DAG size: 311
[2020-11-25 02:45:16,736 WARN  L188               SmtUtils]: Spent 764.00 ms on a formula simplification. DAG size of input: 403 DAG size of output: 362
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 8543 to 17077
Garbage collection #8: 17077 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 17077 to 34147
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
[2020-11-25 02:45:16,995 WARN  L188               SmtUtils]: Spent 244.00 ms on a formula simplification. DAG size of input: 224 DAG size of output: 220
[2020-11-25 02:45:17,338 WARN  L188               SmtUtils]: Spent 341.00 ms on a formula simplification that was a NOOP. DAG size: 478
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
[2020-11-25 02:45:17,642 WARN  L188               SmtUtils]: Spent 296.00 ms on a formula simplification that was a NOOP. DAG size: 389
[2020-11-25 02:45:19,364 WARN  L188               SmtUtils]: Spent 1.72 s on a formula simplification. DAG size of input: 722 DAG size of output: 703
Garbage collection #1: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #2: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #3: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #4: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #5: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #6: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
Garbage collection #7: 17419 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 17419 to 34819
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-25 02:45:19,730 WARN  L188               SmtUtils]: Spent 346.00 ms on a formula simplification. DAG size of input: 329 DAG size of output: 326
[2020-11-25 02:45:20,041 WARN  L188               SmtUtils]: Spent 275.00 ms on a formula simplification that was a NOOP. DAG size: 486
Garbage collection #1: 167 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 167 to 331
Garbage collection #2: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #3: 661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 661 to 1321
Garbage collection #4: 1321 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1321 to 2633
Garbage collection #5: 2633 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2633 to 5261
Garbage collection #6: 5261 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5261 to 10513
Garbage collection #7: 10513 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10513 to 21023
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-25 02:45:20,188 WARN  L188               SmtUtils]: Spent 138.00 ms on a formula simplification that was a NOOP. DAG size: 326
[2020-11-25 02:45:20,727 WARN  L188               SmtUtils]: Spent 538.00 ms on a formula simplification. DAG size of input: 488 DAG size of output: 487
Garbage collection #1: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #2: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #3: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #4: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #5: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #6: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #7: 10559 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10559 to 21107
Garbage collection #1: 167 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 167 to 331
Garbage collection #2: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #3: 661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 661 to 1321
Garbage collection #4: 1321 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1321 to 2633
Garbage collection #5: 2633 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2633 to 5261
Garbage collection #6: 5261 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 5261 to 10513
Garbage collection #7: 10513 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 10513 to 21023
[2020-11-25 02:45:20,997 WARN  L188               SmtUtils]: Spent 264.00 ms on a formula simplification that was a NOOP. DAG size: 483
[2020-11-25 02:45:21,030 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:45:21,067 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:45:21,082 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:45:21 BasicIcfg
[2020-11-25 02:45:21,082 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 02:45:21,083 INFO  L168              Benchmark]: Toolchain (without parser) took 56200.74 ms. Allocated memory was 1.0 GB in the beginning and 4.0 GB in the end (delta: 3.0 GB). Free memory was 919.1 MB in the beginning and 2.0 GB in the end (delta: -1.1 GB). Peak memory consumption was 3.2 GB. Max. memory is 15.3 GB.
[2020-11-25 02:45:21,083 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.29 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 02:45:21,084 INFO  L168              Benchmark]: Boogie Preprocessor took 182.62 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.0 MB in the end (delta: 27.1 MB). Peak memory consumption was 27.1 MB. Max. memory is 15.3 GB.
[2020-11-25 02:45:21,084 INFO  L168              Benchmark]: UtopiaSpecLang took 105.52 ms. Allocated memory is still 1.0 GB. Free memory was 892.0 MB in the beginning and 881.3 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:45:21,084 INFO  L168              Benchmark]: Boogie Printer took 34.38 ms. Allocated memory is still 1.0 GB. Free memory was 881.3 MB in the beginning and 870.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:45:21,085 INFO  L168              Benchmark]: RCFGBuilder took 1501.18 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 71.8 MB). Free memory was 870.5 MB in the beginning and 773.8 MB in the end (delta: 96.7 MB). Peak memory consumption was 168.6 MB. Max. memory is 15.3 GB.
[2020-11-25 02:45:21,085 INFO  L168              Benchmark]: UtopiaLTL2Aut took 35.73 ms. Allocated memory is still 1.1 GB. Free memory was 773.8 MB in the beginning and 770.3 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
[2020-11-25 02:45:21,086 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3361.65 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 464.5 MB). Free memory was 770.3 MB in the beginning and 938.2 MB in the end (delta: -167.9 MB). Peak memory consumption was 362.9 MB. Max. memory is 15.3 GB.
[2020-11-25 02:45:21,086 INFO  L168              Benchmark]: BlockEncodingV2 took 272.63 ms. Allocated memory is still 1.6 GB. Free memory was 938.2 MB in the beginning and 774.2 MB in the end (delta: 163.9 MB). Peak memory consumption was 163.9 MB. Max. memory is 15.3 GB.
[2020-11-25 02:45:21,086 INFO  L168              Benchmark]: BuchiAutomizer took 50703.92 ms. Allocated memory was 1.6 GB in the beginning and 4.0 GB in the end (delta: 2.4 GB). Free memory was 774.2 MB in the beginning and 2.0 GB in the end (delta: -1.2 GB). Peak memory consumption was 2.5 GB. Max. memory is 15.3 GB.
[2020-11-25 02:45:21,090 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    11594 locations, 21002 edges
  - StatisticsResult: Encoded RCFG
    11448 locations, 20599 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.29 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 182.62 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.0 MB in the end (delta: 27.1 MB). Peak memory consumption was 27.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 105.52 ms. Allocated memory is still 1.0 GB. Free memory was 892.0 MB in the beginning and 881.3 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 34.38 ms. Allocated memory is still 1.0 GB. Free memory was 881.3 MB in the beginning and 870.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1501.18 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 71.8 MB). Free memory was 870.5 MB in the beginning and 773.8 MB in the end (delta: 96.7 MB). Peak memory consumption was 168.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 35.73 ms. Allocated memory is still 1.1 GB. Free memory was 773.8 MB in the beginning and 770.3 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3361.65 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 464.5 MB). Free memory was 770.3 MB in the beginning and 938.2 MB in the end (delta: -167.9 MB). Peak memory consumption was 362.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 272.63 ms. Allocated memory is still 1.6 GB. Free memory was 938.2 MB in the beginning and 774.2 MB in the end (delta: 163.9 MB). Peak memory consumption was 163.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 50703.92 ms. Allocated memory was 1.6 GB in the beginning and 4.0 GB in the end (delta: 2.4 GB). Free memory was 774.2 MB in the beginning and 2.0 GB in the end (delta: -1.2 GB). Peak memory consumption was 2.5 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    4669 locations, 6456 edges
  - StatisticsResult: BuchiProgram size
    11594 locations, 21002 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 17 terminating modules (17 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.17 modules have a trivial ranking function, the largest among these consists of 19 locations. The remainder module has 21435 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 50.6s and 18 iterations.  TraceHistogramMax:8. Analysis of lassos took 15.7s. Construction of modules took 21.2s. BÃ¼chi inclusion checks took 8.1s. Highest rank in rank-based complementation 0. Minimization of det autom 17. Minimization of nondet autom 0. Automata minimization 2.7s AutomataMinimizationTime, 17 MinimizatonAttempts, 14166 StatesRemovedByMinimization, 15 NontrivialMinimizations. Non-live state removal took 1.7s Buchi closure took 0.0s. Biggest automaton had 23236 states and ocurred in iteration 14.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 149235 SDtfs, 119387 SDslu, 453176 SDs, 0 SdLazy, 325427 SolverSat, 18638 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 21.2s Time	LassoAnalysisResults: nont1 unkn0 SFLI1 SFLT0 conc0 concLT0 SILN0 SILU16 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(789885600000000000000000024) = (new ONIT)({from : 789885600000000000000000020});
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
ONIT(789885600000000000000000024).transfer~address~uint256.gas(3979002)({from : 789885600000000000000000020, to : 0, value : 0});
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_Ownable := owner_Ownable;
[L3204]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_ERC20 := _balances_ERC20;
[L3208]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3209]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3214]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3215]               __tmp__implementation_ONIT := implementation_ONIT;
[L3216]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3217]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7612]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7612]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7613]   COND FALSE  !(revert)
[L7616]   COND TRUE   __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false
[L7617]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L7617]   RET         call __var_41 := FreshRefGenerator__fail();
[L7618]   COND FALSE  !(revert)
[L7621]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7622]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] := true;
[L7623]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7624]               assume __tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7625]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7627]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7633]   COND TRUE   __tmp__DType[this] == ONIT
[L7634]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7150]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7150]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7151]   COND FALSE  !(revert)
[L7154]   COND TRUE   __tmp__DType[this] == ONIT
[L7155]   CALL        call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6638]   COND TRUE   __tmp__DType[this] == ONIT
[L6639]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6867]               __var_20 := null;
[L6868]   COND TRUE   !(to_s904 != null)
[L6869]               revert := true;
[L6639]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6640]   COND TRUE   revert
[L7155]   RET         call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7156]   COND TRUE   revert
[L7634]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7635]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);

Loop:
ONIT(789885600000000000000000024).transfer~address~uint256.gas(3979001)({from : 789885600000000000000000020, to : 0, value : 0});
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1288) && msgsender_MSG != to_s1288) && value_s1288 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1288] + value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ONIT0 := true;
[L3]                  call_transfer_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3183]               havoc __exception;
[L3184]               revert := false;
[L3185]   COND TRUE   __exception
[L3186]               __tmp__Balance := Balance;
[L3187]               __tmp__DType := DType;
[L3188]               __tmp__Alloc := Alloc;
[L3189]               __tmp__balance_ADDR := balance_ADDR;
[L3190]               __tmp__M_Ref_bool := M_Ref_bool;
[L3191]               __tmp__sum := sum;
[L3192]               __tmp__M_Ref_int := M_Ref_int;
[L3193]               __tmp__sum__balances0 := sum__balances0;
[L3194]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3195]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3196]               __tmp__sum__allowed1 := sum__allowed1;
[L3197]               __tmp__M_int_Ref := M_int_Ref;
[L3198]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3199]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3200]               __tmp__Length := Length;
[L3201]               __tmp__now := now;
[L3202]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3203]               __tmp__owner_Ownable := owner_Ownable;
[L3204]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3205]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3206]               __tmp___paused_Pausable := _paused_Pausable;
[L3207]               __tmp___balances_ERC20 := _balances_ERC20;
[L3208]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3209]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3210]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3211]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3212]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3213]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3214]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3215]               __tmp__implementation_ONIT := implementation_ONIT;
[L3216]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3217]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3218]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7612]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7612]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7613]   COND FALSE  !(revert)
[L7616]   COND TRUE   __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] == false
[L7617]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L7617]   RET         call __var_41 := FreshRefGenerator__fail();
[L7618]   COND FALSE  !(revert)
[L7621]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7622]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][msgsender_MSG] := true;
[L7623]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7624]               assume __tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7625]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7627]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7633]   COND TRUE   __tmp__DType[this] == ONIT
[L7634]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7150]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7150]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7151]   COND FALSE  !(revert)
[L7154]   COND TRUE   __tmp__DType[this] == ONIT
[L7155]   CALL        call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6638]   COND TRUE   __tmp__DType[this] == ONIT
[L6639]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6867]               __var_20 := null;
[L6868]   COND TRUE   !(to_s904 != null)
[L6869]               revert := true;
[L6639]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6640]   COND TRUE   revert
[L7155]   RET         call __var_30 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7156]   COND TRUE   revert
[L7634]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7635]   COND TRUE   revert
[L3218]   RET         call __ret_0_ := transfer~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3219]               assume revert || gas < 0;
[L12208]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
