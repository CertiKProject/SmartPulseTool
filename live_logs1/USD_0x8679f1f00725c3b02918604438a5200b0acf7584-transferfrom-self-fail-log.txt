This is Ultimate 0.1.24-f1553f5-m
[2020-11-28 09:40:47,780 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-28 09:40:47,781 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-28 09:40:47,793 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-28 09:40:47,793 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-28 09:40:47,795 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-28 09:40:47,796 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-28 09:40:47,797 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-28 09:40:47,799 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-28 09:40:47,800 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-28 09:40:47,801 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-28 09:40:47,801 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-28 09:40:47,801 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-28 09:40:47,803 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-28 09:40:47,804 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-28 09:40:47,804 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-28 09:40:47,805 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-28 09:40:47,806 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-28 09:40:47,808 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-28 09:40:47,809 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-28 09:40:47,810 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-28 09:40:47,811 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-28 09:40:47,813 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-28 09:40:47,813 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-28 09:40:47,813 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-28 09:40:47,814 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-28 09:40:47,814 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-28 09:40:47,815 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-28 09:40:47,815 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-28 09:40:47,816 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-28 09:40:47,816 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-28 09:40:47,817 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-28 09:40:47,817 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-28 09:40:47,818 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-28 09:40:47,819 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-28 09:40:47,819 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-28 09:40:47,819 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-28 09:40:47,819 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-28 09:40:47,820 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-28 09:40:47,820 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-28 09:40:47,821 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-28 09:40:47,821 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-28 09:40:47,829 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-28 09:40:47,829 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-28 09:40:47,830 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-28 09:40:47,830 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-28 09:40:47,830 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-28 09:40:47,831 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-28 09:40:47,831 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-28 09:40:47,831 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-28 09:40:47,831 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-28 09:40:47,831 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-28 09:40:47,831 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-28 09:40:47,831 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-28 09:40:47,831 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-28 09:40:47,831 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-28 09:40:47,832 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-28 09:40:47,832 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-28 09:40:47,832 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-28 09:40:47,832 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-28 09:40:47,832 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-28 09:40:47,832 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-28 09:40:47,832 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-28 09:40:47,832 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-28 09:40:47,832 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-28 09:40:47,832 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-28 09:40:47,833 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-28 09:40:47,833 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-28 09:40:47,855 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-28 09:40:47,865 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-28 09:40:47,868 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-28 09:40:47,869 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-28 09:40:47,870 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-28 09:40:47,871 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/USD_0x8679f1f00725c3b02918604438a5200b0acf7584_transferfrom-self-fail.bpl
[2020-11-28 09:40:47,871 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/USD_0x8679f1f00725c3b02918604438a5200b0acf7584_transferfrom-self-fail.bpl'
[2020-11-28 09:40:47,945 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-28 09:40:47,947 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-28 09:40:47,947 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-28 09:40:47,947 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-28 09:40:47,947 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-28 09:40:47,964 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "USD_0x8679f1f00725c3b02918604438a5200b0acf7584_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 28.11 09:40:47" (1/1) ...
[2020-11-28 09:40:47,966 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "USD_0x8679f1f00725c3b02918604438a5200b0acf7584_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 28.11 09:40:47" (1/1) ...
[2020-11-28 09:40:47,995 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "USD_0x8679f1f00725c3b02918604438a5200b0acf7584_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 28.11 09:40:47" (1/1) ...
[2020-11-28 09:40:47,996 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "USD_0x8679f1f00725c3b02918604438a5200b0acf7584_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 28.11 09:40:47" (1/1) ...
[2020-11-28 09:40:48,013 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "USD_0x8679f1f00725c3b02918604438a5200b0acf7584_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 28.11 09:40:47" (1/1) ...
[2020-11-28 09:40:48,022 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "USD_0x8679f1f00725c3b02918604438a5200b0acf7584_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 28.11 09:40:47" (1/1) ...
[2020-11-28 09:40:48,027 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "USD_0x8679f1f00725c3b02918604438a5200b0acf7584_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 28.11 09:40:47" (1/1) ...
[2020-11-28 09:40:48,035 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-28 09:40:48,036 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-28 09:40:48,036 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-28 09:40:48,038 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-28 09:40:48,042 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "USD_0x8679f1f00725c3b02918604438a5200b0acf7584_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 28.11 09:40:47" (1/1) ...
[2020-11-28 09:40:48,061 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(USD.transferFrom(from, to, value), from == to && (value > _balances_USD[this][from] || value > _allowed_USD[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_USD[this][to] >= 0 && _balances_USD[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_USD[this][from] >= 0 &&  _balances_USD[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_USD[this][from][msg.sender] >= 0 && _allowed_USD[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(USD.transferFrom)))
[2020-11-28 09:40:48,069 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(USD.transferFrom(from, to, value), from == to && (value > _balances_USD[this][from] || value > _allowed_USD[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_USD[this][to] >= 0 && _balances_USD[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_USD[this][from] >= 0 &&  _balances_USD[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_USD[this][from][msg.sender] >= 0 && _allowed_USD[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(USD.transferFrom)))
[2020-11-28 09:40:48,076 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(USD.transferFrom(from, to, value), from == to && (value > _balances_USD[this][from] || value > _allowed_USD[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_USD[this][to] >= 0 && _balances_USD[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_USD[this][from] >= 0 &&  _balances_USD[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_USD[this][from][msg.sender] >= 0 && _allowed_USD[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(USD.transferFrom)))
[2020-11-28 09:40:48,085 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( _from_s499==_to_s499 && ( _value_s499>_balances_USD[this][_from_s499] || _value_s499>_allowed_USD[this][_from_s499][msg.sender] ) ) && _value_s499>=0 ) && _value_s499<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_USD[this][_to_s499]>=0 ) && _balances_USD[this][_to_s499]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_USD[this][_from_s499]>=0 ) && _balances_USD[this][_from_s499]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowed_USD[this][_from_s499][msg.sender]>=0 ) && _allowed_USD[this][_from_s499][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[_from_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_USD>],IdentifierExpression[_to_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_USD>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[_value_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_USD>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_USD,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_USD>]]],[IdentifierExpression[_from_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_USD>]]]],BinaryExpression[COMPGT,IdentifierExpression[_value_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_USD>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_USD,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_USD>]]],[IdentifierExpression[_from_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_USD>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_USD>]]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_USD>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_USD>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_USD,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_USD>]]],[IdentifierExpression[_to_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_USD>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_USD,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_USD>]]],[IdentifierExpression[_to_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_USD>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_USD,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_USD>]]],[IdentifierExpression[_from_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_USD>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_USD,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_USD>]]],[IdentifierExpression[_from_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_USD>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_USD,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_USD>]]],[IdentifierExpression[_from_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_USD>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_USD>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_USD,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_USD>]]],[IdentifierExpression[_from_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_USD>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_USD>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-28 09:40:48,093 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(USD.transferFrom(from, to, value), from == to && (value > _balances_USD[this][from] || value > _allowed_USD[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_USD[this][to] >= 0 && _balances_USD[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_USD[this][from] >= 0 &&  _balances_USD[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_USD[this][from][msg.sender] >= 0 && _allowed_USD[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(USD.transferFrom)))
[2020-11-28 09:40:48,093 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_USD0) ==> ( <>AP(fail_transferFrom_USD0) ) ) )
Executed UtopiaSpecLang
[2020-11-28 09:40:48,099 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 28.11 09:40:48 PropertyContainer
[2020-11-28 09:40:48,100 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-28 09:40:48,100 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-28 09:40:48,101 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-28 09:40:48,101 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-28 09:40:48,102 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "USD_0x8679f1f00725c3b02918604438a5200b0acf7584_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 28.11 09:40:47" (1/2) ...
[2020-11-28 09:40:48,102 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-28 09:40:48,103 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-28 09:40:48,116 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 28.11 09:40:48" (2/2) ...
[2020-11-28 09:40:48,117 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-28 09:40:48,117 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-28 09:40:48,117 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-28 09:40:48,117 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-28 09:40:48,118 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "USD_0x8679f1f00725c3b02918604438a5200b0acf7584_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 28.11 09:40:47" (1/2) ...
[2020-11-28 09:40:48,170 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-28 09:40:48,170 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-28 09:40:48,170 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-28 09:40:48,170 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-28 09:40:48,170 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-28 09:40:48,170 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-28 09:40:48,170 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-28 09:40:48,170 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-28 09:40:48,170 INFO  L130     BoogieDeclarations]: Found specification of procedure _assert~bool_SafeMath__success
[2020-11-28 09:40:48,171 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-28 09:40:48,171 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-28 09:40:48,171 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-28 09:40:48,171 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-28 09:40:48,171 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-28 09:40:48,171 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-28 09:40:48,171 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-28 09:40:48,172 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-28 09:40:48,172 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-28 09:40:48,172 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-28 09:40:48,172 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-28 09:40:48,172 INFO  L130     BoogieDeclarations]: Found specification of procedure USD_USD_NoBaseCtor__success
[2020-11-28 09:40:48,172 INFO  L130     BoogieDeclarations]: Found specification of procedure USD_USD
[2020-11-28 09:40:48,173 INFO  L138     BoogieDeclarations]: Found implementation of procedure USD_USD
[2020-11-28 09:40:48,173 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_USD
[2020-11-28 09:40:48,173 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_USD
[2020-11-28 09:40:48,173 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_USD
[2020-11-28 09:40:48,173 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_USD
[2020-11-28 09:40:48,173 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_USD
[2020-11-28 09:40:48,173 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_USD
[2020-11-28 09:40:48,173 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_USD
[2020-11-28 09:40:48,173 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_USD
[2020-11-28 09:40:48,173 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_USD
[2020-11-28 09:40:48,173 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_USD
[2020-11-28 09:40:48,173 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_USD
[2020-11-28 09:40:48,173 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_USD
[2020-11-28 09:40:48,174 INFO  L130     BoogieDeclarations]: Found specification of procedure name_USD
[2020-11-28 09:40:48,174 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_USD
[2020-11-28 09:40:48,174 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_USD
[2020-11-28 09:40:48,174 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_USD
[2020-11-28 09:40:48,174 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_USD
[2020-11-28 09:40:48,174 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_USD
[2020-11-28 09:40:48,174 INFO  L130     BoogieDeclarations]: Found specification of procedure _allowed~address~address_USD
[2020-11-28 09:40:48,174 INFO  L138     BoogieDeclarations]: Found implementation of procedure _allowed~address~address_USD
[2020-11-28 09:40:48,174 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_USD
[2020-11-28 09:40:48,174 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_USD
[2020-11-28 09:40:48,174 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-28 09:40:48,174 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-28 09:40:48,174 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-28 09:40:48,174 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-28 09:40:48,175 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-28 09:40:48,175 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-28 09:40:48,175 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-28 09:40:48,175 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-28 09:40:48,175 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_USD
[2020-11-28 09:40:48,175 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-28 09:40:48,175 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-28 09:40:48,175 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-28 09:40:48,175 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-28 09:40:48,175 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-28 09:40:48,175 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-28 09:40:48,175 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-28 09:40:48,176 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-28 09:40:48,176 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-28 09:40:48,176 INFO  L130     BoogieDeclarations]: Found specification of procedure _assert~bool_SafeMath__fail
[2020-11-28 09:40:48,176 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-28 09:40:48,176 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-28 09:40:48,176 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-28 09:40:48,176 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-28 09:40:48,176 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-28 09:40:48,176 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-28 09:40:48,176 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-28 09:40:48,176 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-28 09:40:48,176 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-28 09:40:48,176 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-28 09:40:48,177 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-28 09:40:48,177 INFO  L130     BoogieDeclarations]: Found specification of procedure USD_USD_NoBaseCtor__fail
[2020-11-28 09:40:48,177 INFO  L130     BoogieDeclarations]: Found specification of procedure USD_USD__success
[2020-11-28 09:40:48,177 INFO  L130     BoogieDeclarations]: Found specification of procedure USD_USD__fail
[2020-11-28 09:40:48,177 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_USD__success
[2020-11-28 09:40:48,177 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_USD__fail
[2020-11-28 09:40:48,177 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_USD__success
[2020-11-28 09:40:48,177 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_USD__fail
[2020-11-28 09:40:48,177 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_USD__success
[2020-11-28 09:40:48,177 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_USD__fail
[2020-11-28 09:40:48,177 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_USD__success
[2020-11-28 09:40:48,177 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_USD__fail
[2020-11-28 09:40:48,177 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_USD__success
[2020-11-28 09:40:48,178 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_USD__fail
[2020-11-28 09:40:48,178 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_USD__success
[2020-11-28 09:40:48,178 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_USD__fail
[2020-11-28 09:40:48,178 INFO  L130     BoogieDeclarations]: Found specification of procedure name_USD__success
[2020-11-28 09:40:48,178 INFO  L130     BoogieDeclarations]: Found specification of procedure name_USD__fail
[2020-11-28 09:40:48,178 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_USD__success
[2020-11-28 09:40:48,178 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_USD__fail
[2020-11-28 09:40:48,178 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_USD__success
[2020-11-28 09:40:48,178 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_USD__fail
[2020-11-28 09:40:48,178 INFO  L130     BoogieDeclarations]: Found specification of procedure _allowed~address~address_USD__success
[2020-11-28 09:40:48,178 INFO  L130     BoogieDeclarations]: Found specification of procedure _allowed~address~address_USD__fail
[2020-11-28 09:40:48,179 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_USD__success
[2020-11-28 09:40:48,179 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_USD__fail
[2020-11-28 09:40:48,179 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-28 09:40:48,179 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-28 09:40:48,179 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-28 09:40:48,179 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-28 09:40:48,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-28 09:40:48,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-28 09:40:48,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-28 09:40:48,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-28 09:40:48,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-28 09:40:48,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-28 09:40:48,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-28 09:40:48,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-28 09:40:48,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-28 09:40:48,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-28 09:40:48,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-28 09:40:48,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-28 09:40:48,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-28 09:40:48,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-28 09:40:48,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure _assert~bool_SafeMath__fail
[2020-11-28 09:40:48,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure _assert~bool_SafeMath__success
[2020-11-28 09:40:48,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-28 09:40:48,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-28 09:40:48,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-28 09:40:48,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-28 09:40:48,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-28 09:40:48,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-28 09:40:48,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-28 09:40:48,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-28 09:40:48,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-28 09:40:48,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-28 09:40:48,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-28 09:40:48,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-28 09:40:48,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure USD_USD_NoBaseCtor__fail
[2020-11-28 09:40:48,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure USD_USD_NoBaseCtor__success
[2020-11-28 09:40:48,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure USD_USD__fail
[2020-11-28 09:40:48,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure USD_USD__success
[2020-11-28 09:40:48,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_USD__fail
[2020-11-28 09:40:48,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_USD__success
[2020-11-28 09:40:48,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_USD__fail
[2020-11-28 09:40:48,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_USD__success
[2020-11-28 09:40:48,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_USD__fail
[2020-11-28 09:40:48,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_USD__success
[2020-11-28 09:40:48,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_USD__fail
[2020-11-28 09:40:48,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_USD__success
[2020-11-28 09:40:48,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_USD__fail
[2020-11-28 09:40:48,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_USD__success
[2020-11-28 09:40:48,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_USD__fail
[2020-11-28 09:40:48,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_USD__success
[2020-11-28 09:40:48,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_USD__fail
[2020-11-28 09:40:48,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_USD__success
[2020-11-28 09:40:48,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_USD__fail
[2020-11-28 09:40:48,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_USD__success
[2020-11-28 09:40:48,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_USD__fail
[2020-11-28 09:40:48,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_USD__success
[2020-11-28 09:40:48,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure _allowed~address~address_USD__fail
[2020-11-28 09:40:48,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure _allowed~address~address_USD__success
[2020-11-28 09:40:48,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_USD__fail
[2020-11-28 09:40:48,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_USD__success
[2020-11-28 09:40:48,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-28 09:40:48,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-28 09:40:48,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-28 09:40:48,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-28 09:40:48,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-28 09:40:48,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-28 09:40:48,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-28 09:40:48,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-28 09:40:48,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-28 09:40:48,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-28 09:40:48,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-28 09:40:48,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-28 09:40:48,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_USD
[2020-11-28 09:40:48,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-28 09:40:48,184 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-28 09:40:48,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-28 09:40:48,563 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-28 09:40:48,564 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-28 09:40:48,750 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-28 09:40:48,750 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-11-28 09:40:48,752 INFO  L202        PluginConnector]: Adding new model USD_0x8679f1f00725c3b02918604438a5200b0acf7584_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 28.11 09:40:48 BoogieIcfgContainer
[2020-11-28 09:40:48,752 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 28.11 09:40:48" (2/2) ...
[2020-11-28 09:40:48,752 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-28 09:40:48,752 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@2c6c220d and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 28.11 09:40:48, skipping insertion in model container
[2020-11-28 09:40:48,752 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-28 09:40:48,753 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-28 09:40:48,753 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-28 09:40:48,754 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-28 09:40:48,754 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "USD_0x8679f1f00725c3b02918604438a5200b0acf7584_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 28.11 09:40:47" (1/3) ...
[2020-11-28 09:40:48,754 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@2b1b7bdd and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 28.11 09:40:48, skipping insertion in model container
[2020-11-28 09:40:48,755 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 28.11 09:40:48" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-28 09:40:48,784 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 28.11 09:40:48 NWAContainer
[2020-11-28 09:40:48,784 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-28 09:40:48,785 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-28 09:40:48,785 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-28 09:40:48,785 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-28 09:40:48,786 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "USD_0x8679f1f00725c3b02918604438a5200b0acf7584_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 28.11 09:40:48" (3/4) ...
[2020-11-28 09:40:48,786 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@59d2b700 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 28.11 09:40:48, skipping insertion in model container
[2020-11-28 09:40:48,786 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 28.11 09:40:48" (4/4) ...
[2020-11-28 09:40:48,789 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-28 09:40:48,791 INFO  L110   BuchiProductObserver]: Initial RCFG 1233 locations, 1604 edges
[2020-11-28 09:40:48,791 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-28 09:40:48,799 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-28 09:40:49,832 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-28 09:40:49,837 INFO  L110   BuchiProductObserver]: BuchiProgram size 2972 locations, 5213 edges
[2020-11-28 09:40:49,837 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 28.11 09:40:49 BoogieIcfgContainer
[2020-11-28 09:40:49,837 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-28 09:40:49,837 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-28 09:40:49,837 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-28 09:40:49,839 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-28 09:40:49,839 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 28.11 09:40:49" (1/1) ...
[2020-11-28 09:40:49,910 INFO  L313           BlockEncoder]: Initial Icfg 2972 locations, 5213 edges
[2020-11-28 09:40:49,911 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-28 09:40:49,911 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-28 09:40:49,911 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-28 09:40:49,912 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-28 09:40:49,921 INFO  L70    emoveInfeasibleEdges]: Removed 102 edges and 9 locations because of local infeasibility
[2020-11-28 09:40:49,928 INFO  L70        RemoveSinkStates]: Removed 104 edges and 62 locations by removing sink states
[2020-11-28 09:40:49,938 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-28 09:40:49,941 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-28 09:40:49,943 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-28 09:40:49,944 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-28 09:40:49,947 INFO  L313           BlockEncoder]: Encoded RCFG 2883 locations, 4981 edges
[2020-11-28 09:40:49,947 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 28.11 09:40:49 BasicIcfg
[2020-11-28 09:40:49,948 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-28 09:40:49,948 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-28 09:40:49,948 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-28 09:40:49,950 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-28 09:40:49,950 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-28 09:40:49,950 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "USD_0x8679f1f00725c3b02918604438a5200b0acf7584_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 28.11 09:40:47" (1/6) ...
[2020-11-28 09:40:49,952 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5bdc09fe and model type USD_0x8679f1f00725c3b02918604438a5200b0acf7584_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 28.11 09:40:49, skipping insertion in model container
[2020-11-28 09:40:49,952 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-28 09:40:49,952 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 28.11 09:40:48" (2/6) ...
[2020-11-28 09:40:49,952 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5bdc09fe and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 28.11 09:40:49, skipping insertion in model container
[2020-11-28 09:40:49,952 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-28 09:40:49,952 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "USD_0x8679f1f00725c3b02918604438a5200b0acf7584_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 28.11 09:40:48" (3/6) ...
[2020-11-28 09:40:49,952 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5bdc09fe and model type USD_0x8679f1f00725c3b02918604438a5200b0acf7584_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 28.11 09:40:49, skipping insertion in model container
[2020-11-28 09:40:49,952 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-28 09:40:49,953 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 28.11 09:40:48" (4/6) ...
[2020-11-28 09:40:49,953 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5bdc09fe and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 28.11 09:40:49, skipping insertion in model container
[2020-11-28 09:40:49,953 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-28 09:40:49,953 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 28.11 09:40:49" (5/6) ...
[2020-11-28 09:40:49,953 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5bdc09fe and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 28.11 09:40:49, skipping insertion in model container
[2020-11-28 09:40:49,953 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-28 09:40:49,953 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 28.11 09:40:49" (6/6) ...
[2020-11-28 09:40:49,954 INFO  L404   chiAutomizerObserver]: Analyzing ICFG USD_0x8679f1f00725c3b02918604438a5200b0acf7584_transferfrom-self-fail.bpl_BEv2
[2020-11-28 09:40:49,985 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-28 09:40:49,985 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-28 09:40:49,985 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-28 09:40:49,985 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-28 09:40:49,985 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-28 09:40:49,985 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-28 09:40:49,985 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-28 09:40:49,985 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-28 09:40:49,985 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-28 09:40:50,037 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2883 states.
[2020-11-28 09:40:50,081 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-28 09:40:50,081 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-28 09:40:50,081 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-28 09:40:50,087 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-28 09:40:50,088 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-28 09:40:50,088 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-28 09:40:50,088 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2883 states.
[2020-11-28 09:40:50,100 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-28 09:40:50,101 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-28 09:40:50,101 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-28 09:40:50,102 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-28 09:40:50,102 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_USD0 := false;
[L2]                 call_transferFrom_USD0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == USD;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call USD_USD(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call USD_USD__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND TRUE   revert
[L464]   RET         call USD_USD__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call USD_USD(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;

Loop:
[L3225]  CALL        call CorralChoice_USD(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != USD;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_USD(this);

[2020-11-28 09:40:50,118 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-28 09:40:50,118 INFO  L82        PathProgramCache]: Analyzing trace with hash -940816993, now seen corresponding path program 1 times
[2020-11-28 09:40:50,122 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-28 09:40:50,145 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-28 09:40:50,189 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-28 09:40:50,191 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-28 09:40:50,191 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-28 09:40:50,195 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-28 09:40:50,334 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-28 09:40:50,335 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-28 09:40:50,336 INFO  L87              Difference]: Start difference. First operand 2883 states. Second operand 4 states.
[2020-11-28 09:40:50,894 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-28 09:40:50,894 INFO  L93              Difference]: Finished difference Result 2921 states and 4629 transitions.
[2020-11-28 09:40:50,896 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-28 09:40:50,897 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2921 states and 4629 transitions.
[2020-11-28 09:40:50,914 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-28 09:40:50,946 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2921 states to 2781 states and 4393 transitions.
[2020-11-28 09:40:50,947 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 12
[2020-11-28 09:40:50,952 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1000
[2020-11-28 09:40:50,953 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2781 states and 4393 transitions.
[2020-11-28 09:40:50,966 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-28 09:40:50,966 INFO  L728         BuchiCegarLoop]: Abstraction has 2781 states and 4393 transitions.
[2020-11-28 09:40:50,988 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2781 states and 4393 transitions.
[2020-11-28 09:40:51,040 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2781 to 2370.
[2020-11-28 09:40:51,040 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2370 states.
[2020-11-28 09:40:51,047 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2370 states to 2370 states and 3647 transitions.
[2020-11-28 09:40:51,048 INFO  L751         BuchiCegarLoop]: Abstraction has 2370 states and 3647 transitions.
[2020-11-28 09:40:51,048 INFO  L631         BuchiCegarLoop]: Abstraction has 2370 states and 3647 transitions.
[2020-11-28 09:40:51,048 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-28 09:40:51,048 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2370 states and 3647 transitions.
[2020-11-28 09:40:51,056 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-28 09:40:51,057 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-28 09:40:51,057 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-28 09:40:51,058 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-28 09:40:51,058 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_USD0 := false;
[L2]                 call_transferFrom_USD0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == USD;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call USD_USD(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call USD_USD__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call USD_USD_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_USD[this] := -716642523;
[L1845]              symbol_USD[this] := -578635893;
[L1846]              decimals_USD[this] := 18;
[L1847]              _balances_USD[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_USD[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_USD[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_USD[this] := 1000000000000 * (nonlinearPow(10, decimals_USD[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_USD[this][msgsender_MSG];
[L1855]              _balances_USD[this][msgsender_MSG] := totalSupply_USD[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_USD[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_USD" } true;
[L1888]  RET         call USD_USD_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call USD_USD__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call USD_USD(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;

Loop:
[L3225]  CALL        call CorralChoice_USD(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != USD;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_USD(this);

[2020-11-28 09:40:51,062 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-28 09:40:51,062 INFO  L82        PathProgramCache]: Analyzing trace with hash -1774412621, now seen corresponding path program 1 times
[2020-11-28 09:40:51,063 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-28 09:40:51,071 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-28 09:40:51,086 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-28 09:40:51,086 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-28 09:40:51,086 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-28 09:40:51,087 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-28 09:40:51,088 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-28 09:40:51,088 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-28 09:40:51,088 INFO  L87              Difference]: Start difference. First operand 2370 states and 3647 transitions. cyclomatic complexity: 1279 Second operand 4 states.
[2020-11-28 09:40:51,460 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-28 09:40:51,461 INFO  L93              Difference]: Finished difference Result 2147 states and 2329 transitions.
[2020-11-28 09:40:51,461 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-28 09:40:51,461 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2147 states and 2329 transitions.
[2020-11-28 09:40:51,469 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-28 09:40:51,476 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2147 states to 2147 states and 2329 transitions.
[2020-11-28 09:40:51,477 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 682
[2020-11-28 09:40:51,477 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 689
[2020-11-28 09:40:51,477 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2147 states and 2329 transitions.
[2020-11-28 09:40:51,479 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-28 09:40:51,479 INFO  L728         BuchiCegarLoop]: Abstraction has 2147 states and 2329 transitions.
[2020-11-28 09:40:51,481 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2147 states and 2329 transitions.
[2020-11-28 09:40:51,495 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2147 to 2142.
[2020-11-28 09:40:51,496 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2142 states.
[2020-11-28 09:40:51,499 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2142 states to 2142 states and 2324 transitions.
[2020-11-28 09:40:51,500 INFO  L751         BuchiCegarLoop]: Abstraction has 2142 states and 2324 transitions.
[2020-11-28 09:40:51,500 INFO  L631         BuchiCegarLoop]: Abstraction has 2142 states and 2324 transitions.
[2020-11-28 09:40:51,500 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-28 09:40:51,500 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2142 states and 2324 transitions.
[2020-11-28 09:40:51,504 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-28 09:40:51,504 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-28 09:40:51,504 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-28 09:40:51,506 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-28 09:40:51,506 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_USD0 := false;
[L2]                 call_transferFrom_USD0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == USD;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call USD_USD(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call USD_USD__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call USD_USD_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_USD[this] := -716642523;
[L1845]              symbol_USD[this] := -578635893;
[L1846]              decimals_USD[this] := 18;
[L1847]              _balances_USD[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_USD[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_USD[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_USD[this] := 1000000000000 * (nonlinearPow(10, decimals_USD[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_USD[this][msgsender_MSG];
[L1855]              _balances_USD[this][msgsender_MSG] := totalSupply_USD[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_USD[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_USD" } true;
[L1888]  RET         call USD_USD_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call USD_USD__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call USD_USD(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_USD(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != USD;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_USD(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s499 == _to_s499 && (_value_s499 > _balances_USD[this][_from_s499] || _value_s499 > _allowed_USD[this][_from_s499][msgsender_MSG])) && _value_s499 >= 0) && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_USD[this][_to_s499] >= 0) && _balances_USD[this][_to_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_USD[this][_from_s499] >= 0) && _balances_USD[this][_from_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_USD[this][_from_s499][msgsender_MSG] >= 0) && _allowed_USD[this][_from_s499][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_USD0 := true;
[L2]                 call_transferFrom_USD0 := false;
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_USD__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_USD[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_USD[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_USD[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_USD[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == USD
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_USD[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == USD
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_USD[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_USD[this][_to_s499];
[L2172]              _balances_USD[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_USD[this][_to_s499];
[L2174]  COND TRUE   DType[this] == USD
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_USD[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == USD
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_USD[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_USD[this][_from_s499];
[L2183]              _balances_USD[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_USD[this][_from_s499];
[L2185]  COND TRUE   DType[this] == USD
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_USD[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == USD
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_USD[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_USD[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_USD[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_USD[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_USD" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_USD__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_USD(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_USD(this);

Loop:
[L3225]  CALL        call CorralChoice_USD(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != USD;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_USD(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s499 == _to_s499 && (_value_s499 > _balances_USD[this][_from_s499] || _value_s499 > _allowed_USD[this][_from_s499][msgsender_MSG])) && _value_s499 >= 0) && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_USD[this][_to_s499] >= 0) && _balances_USD[this][_to_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_USD[this][_from_s499] >= 0) && _balances_USD[this][_from_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_USD[this][_from_s499][msgsender_MSG] >= 0) && _allowed_USD[this][_from_s499][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_USD0 := true;
[L2]                 call_transferFrom_USD0 := false;
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_USD__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_USD[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_USD[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_USD[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_USD[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == USD
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_USD[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == USD
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_USD[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_USD[this][_to_s499];
[L2172]              _balances_USD[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_USD[this][_to_s499];
[L2174]  COND TRUE   DType[this] == USD
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_USD[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == USD
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_USD[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_USD[this][_from_s499];
[L2183]              _balances_USD[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_USD[this][_from_s499];
[L2185]  COND TRUE   DType[this] == USD
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_USD[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == USD
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_USD[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_USD[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_USD[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_USD[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_USD" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_USD__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_USD(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_USD(this);

[2020-11-28 09:40:51,510 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-28 09:40:51,510 INFO  L82        PathProgramCache]: Analyzing trace with hash -918817498, now seen corresponding path program 1 times
[2020-11-28 09:40:51,511 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-28 09:40:51,530 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-28 09:40:51,670 INFO  L134       CoverageAnalysis]: Checked inductivity of 17 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 8 trivial. 0 not checked.
[2020-11-28 09:40:51,670 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-28 09:40:51,670 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-28 09:40:51,671 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-28 09:40:51,671 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-28 09:40:51,671 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=33, Invalid=177, Unknown=0, NotChecked=0, Total=210
[2020-11-28 09:40:51,671 INFO  L87              Difference]: Start difference. First operand 2142 states and 2324 transitions. cyclomatic complexity: 184 Second operand 15 states.
[2020-11-28 09:40:52,899 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-28 09:40:52,900 INFO  L93              Difference]: Finished difference Result 2175 states and 2369 transitions.
[2020-11-28 09:40:52,900 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-28 09:40:52,900 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2175 states and 2369 transitions.
[2020-11-28 09:40:52,905 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-28 09:40:52,912 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2175 states to 2175 states and 2369 transitions.
[2020-11-28 09:40:52,912 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 696
[2020-11-28 09:40:52,912 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 696
[2020-11-28 09:40:52,912 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2175 states and 2369 transitions.
[2020-11-28 09:40:52,914 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-28 09:40:52,914 INFO  L728         BuchiCegarLoop]: Abstraction has 2175 states and 2369 transitions.
[2020-11-28 09:40:52,916 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2175 states and 2369 transitions.
[2020-11-28 09:40:52,929 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2175 to 2160.
[2020-11-28 09:40:52,929 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2160 states.
[2020-11-28 09:40:52,931 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2160 states to 2160 states and 2344 transitions.
[2020-11-28 09:40:52,931 INFO  L751         BuchiCegarLoop]: Abstraction has 2160 states and 2344 transitions.
[2020-11-28 09:40:52,931 INFO  L631         BuchiCegarLoop]: Abstraction has 2160 states and 2344 transitions.
[2020-11-28 09:40:52,931 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-28 09:40:52,931 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2160 states and 2344 transitions.
[2020-11-28 09:40:52,935 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-28 09:40:52,935 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-28 09:40:52,935 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-28 09:40:52,937 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-28 09:40:52,937 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_USD0 := false;
[L2]                 call_transferFrom_USD0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == USD;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call USD_USD(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND TRUE   __exception
[L442]               __tmp__Balance := Balance;
[L443]               __tmp__DType := DType;
[L444]               __tmp__Alloc := Alloc;
[L445]               __tmp__balance_ADDR := balance_ADDR;
[L446]               __tmp__M_Ref_int := M_Ref_int;
[L447]               __tmp__sum__balances0 := sum__balances0;
[L448]               __tmp__alloc__allowed_USD_lvl0 := alloc__allowed_USD_lvl0;
[L449]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L450]               __tmp__sum__allowed1 := sum__allowed1;
[L451]               __tmp__Length := Length;
[L452]               __tmp__now := now;
[L453]               __tmp__owner_Owned := owner_Owned;
[L454]               __tmp__newOwner_Owned := newOwner_Owned;
[L455]               __tmp__name_USD := name_USD;
[L456]               __tmp__symbol_USD := symbol_USD;
[L457]               __tmp__decimals_USD := decimals_USD;
[L458]               __tmp___balances_USD := _balances_USD;
[L459]               __tmp___allowed_USD := _allowed_USD;
[L460]               __tmp__totalSupply_USD := totalSupply_USD;
[L461]   CALL        call USD_USD__fail(this, msgsender_MSG, msgvalue_MSG);
[L1863]  CALL        call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L1492]  CALL        call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1477]              assume msgsender_MSG != null;
[L1478]              __tmp__Balance[this] := 0;
[L1492]  RET         call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1493]  COND FALSE  !(revert)
[L1863]  RET         call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L1864]  COND FALSE  !(revert)
[L1867]  CALL        call Owned_Owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L1736]  CALL        call Owned_Owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1715]              assume msgsender_MSG != null;
[L1716]              __tmp__Balance[this] := 0;
[L1717]              __tmp__owner_Owned[this] := null;
[L1718]              __tmp__newOwner_Owned[this] := null;
[L1720]              __tmp__owner_Owned[this] := msgsender_MSG;
[L1736]  RET         call Owned_Owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1737]  COND FALSE  !(revert)
[L1867]  RET         call Owned_Owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L1868]  COND FALSE  !(revert)
[L1871]  CALL        call USD_USD_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1821]              assume msgsender_MSG != null;
[L1822]              __tmp__Balance[this] := 0;
[L1823]              __tmp__name_USD[this] := -716642523;
[L1824]              __tmp__symbol_USD[this] := -578635893;
[L1825]              __tmp__decimals_USD[this] := 18;
[L1826]              __tmp___balances_USD[this] := zeroRefintArr();
[L1827]              __tmp__sum__balances0[this] := 0;
[L1828]              __tmp___allowed_USD[this] := zeroRefRefintArr();
[L1829]              __tmp__sum__allowed1[this] := 0;
[L1830]              __var_2 := __tmp__decimals_USD[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1831]              __tmp__totalSupply_USD[this] := 1000000000000 * (nonlinearPow(10, __tmp__decimals_USD[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1833]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_USD[this][msgsender_MSG];
[L1834]              __tmp___balances_USD[this][msgsender_MSG] := __tmp__totalSupply_USD[this];
[L1835]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_USD[this][msgsender_MSG];
[L1871]  RET         call USD_USD_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1872]  COND FALSE  !(revert)
[L461]   RET         call USD_USD__fail(this, msgsender_MSG, msgvalue_MSG);
[L462]               assume revert || gas < 0;
[L3221]  RET         call USD_USD(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_USD(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != USD;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_USD(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s499 == _to_s499 && (_value_s499 > _balances_USD[this][_from_s499] || _value_s499 > _allowed_USD[this][_from_s499][msgsender_MSG])) && _value_s499 >= 0) && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_USD[this][_to_s499] >= 0) && _balances_USD[this][_to_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_USD[this][_from_s499] >= 0) && _balances_USD[this][_from_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_USD[this][_from_s499][msgsender_MSG] >= 0) && _allowed_USD[this][_from_s499][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_USD0 := true;
[L2]                 call_transferFrom_USD0 := false;
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_USD__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_USD[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_USD[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_USD[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_USD[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == USD
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_USD[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == USD
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_USD[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_USD[this][_to_s499];
[L2172]              _balances_USD[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_USD[this][_to_s499];
[L2174]  COND TRUE   DType[this] == USD
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_USD[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == USD
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_USD[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_USD[this][_from_s499];
[L2183]              _balances_USD[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_USD[this][_from_s499];
[L2185]  COND TRUE   DType[this] == USD
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_USD[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == USD
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_USD[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_USD[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_USD[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_USD[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_USD" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_USD__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_USD(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_USD(this);

Loop:
[L3225]  CALL        call CorralChoice_USD(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != USD;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_USD(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s499 == _to_s499 && (_value_s499 > _balances_USD[this][_from_s499] || _value_s499 > _allowed_USD[this][_from_s499][msgsender_MSG])) && _value_s499 >= 0) && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_USD[this][_to_s499] >= 0) && _balances_USD[this][_to_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_USD[this][_from_s499] >= 0) && _balances_USD[this][_from_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_USD[this][_from_s499][msgsender_MSG] >= 0) && _allowed_USD[this][_from_s499][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_USD0 := true;
[L2]                 call_transferFrom_USD0 := false;
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_USD__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_USD[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_USD[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_USD[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_USD[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == USD
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_USD[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == USD
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_USD[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_USD[this][_to_s499];
[L2172]              _balances_USD[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_USD[this][_to_s499];
[L2174]  COND TRUE   DType[this] == USD
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_USD[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == USD
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_USD[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_USD[this][_from_s499];
[L2183]              _balances_USD[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_USD[this][_from_s499];
[L2185]  COND TRUE   DType[this] == USD
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_USD[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == USD
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_USD[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_USD[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_USD[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_USD[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_USD" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_USD__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_USD(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_USD(this);

[2020-11-28 09:40:52,941 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-28 09:40:52,941 INFO  L82        PathProgramCache]: Analyzing trace with hash -1260227221, now seen corresponding path program 1 times
[2020-11-28 09:40:52,941 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-28 09:40:52,948 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-28 09:40:52,993 INFO  L134       CoverageAnalysis]: Checked inductivity of 17 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 17 trivial. 0 not checked.
[2020-11-28 09:40:52,993 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-28 09:40:52,993 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-28 09:40:52,994 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-28 09:40:52,994 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-28 09:40:52,994 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-28 09:40:52,994 INFO  L87              Difference]: Start difference. First operand 2160 states and 2344 transitions. cyclomatic complexity: 187 Second operand 4 states.
[2020-11-28 09:40:53,128 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-28 09:40:53,129 INFO  L93              Difference]: Finished difference Result 2733 states and 3077 transitions.
[2020-11-28 09:40:53,129 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-28 09:40:53,129 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2733 states and 3077 transitions.
[2020-11-28 09:40:53,136 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-28 09:40:53,143 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2733 states to 2653 states and 2997 transitions.
[2020-11-28 09:40:53,143 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 870
[2020-11-28 09:40:53,144 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 870
[2020-11-28 09:40:53,144 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2653 states and 2997 transitions.
[2020-11-28 09:40:53,146 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-28 09:40:53,146 INFO  L728         BuchiCegarLoop]: Abstraction has 2653 states and 2997 transitions.
[2020-11-28 09:40:53,147 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2653 states and 2997 transitions.
[2020-11-28 09:40:53,161 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2653 to 2080.
[2020-11-28 09:40:53,161 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2080 states.
[2020-11-28 09:40:53,163 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2080 states to 2080 states and 2263 transitions.
[2020-11-28 09:40:53,163 INFO  L751         BuchiCegarLoop]: Abstraction has 2080 states and 2263 transitions.
[2020-11-28 09:40:53,163 INFO  L631         BuchiCegarLoop]: Abstraction has 2080 states and 2263 transitions.
[2020-11-28 09:40:53,163 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-28 09:40:53,163 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2080 states and 2263 transitions.
[2020-11-28 09:40:53,165 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-28 09:40:53,166 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-28 09:40:53,166 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-28 09:40:53,167 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-28 09:40:53,167 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_USD0 := false;
[L2]                 call_transferFrom_USD0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == USD;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call USD_USD(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call USD_USD__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call USD_USD_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_USD[this] := -716642523;
[L1845]              symbol_USD[this] := -578635893;
[L1846]              decimals_USD[this] := 18;
[L1847]              _balances_USD[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_USD[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_USD[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_USD[this] := 1000000000000 * (nonlinearPow(10, decimals_USD[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_USD[this][msgsender_MSG];
[L1855]              _balances_USD[this][msgsender_MSG] := totalSupply_USD[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_USD[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_USD" } true;
[L1888]  RET         call USD_USD_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call USD_USD__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call USD_USD(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_USD(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != USD;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_USD(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_USD__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_USD[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_USD[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_USD[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_USD" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_USD__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_USD(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_USD(this);
[L3225]  CALL        call CorralChoice_USD(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != USD;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_USD(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s499 == _to_s499 && (_value_s499 > _balances_USD[this][_from_s499] || _value_s499 > _allowed_USD[this][_from_s499][msgsender_MSG])) && _value_s499 >= 0) && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_USD[this][_to_s499] >= 0) && _balances_USD[this][_to_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_USD[this][_from_s499] >= 0) && _balances_USD[this][_from_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_USD[this][_from_s499][msgsender_MSG] >= 0) && _allowed_USD[this][_from_s499][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_USD0 := true;
[L2]                 call_transferFrom_USD0 := false;
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_USD__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_USD[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_USD[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_USD[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_USD[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == USD
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_USD[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == USD
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_USD[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_USD[this][_to_s499];
[L2172]              _balances_USD[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_USD[this][_to_s499];
[L2174]  COND TRUE   DType[this] == USD
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_USD[this][_from_s499], _value_s499);
[L1637]  COND FALSE  !(DType[this] == USD)
[L1642]  COND TRUE   DType[this] == SafeMath
[L1643]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1643]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1644]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_USD[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_USD[this][_from_s499];
[L2183]              _balances_USD[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_USD[this][_from_s499];
[L2185]  COND TRUE   DType[this] == USD
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_USD[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND FALSE  !(DType[this] == USD)
[L1642]  COND TRUE   DType[this] == SafeMath
[L1643]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1643]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1644]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_USD[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_USD[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_USD[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_USD[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_USD" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_USD__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_USD(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_USD(this);

Loop:
[L3225]  CALL        call CorralChoice_USD(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != USD;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_USD(this);

[2020-11-28 09:40:53,170 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-28 09:40:53,170 INFO  L82        PathProgramCache]: Analyzing trace with hash -1706297733, now seen corresponding path program 1 times
[2020-11-28 09:40:53,170 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-28 09:40:53,181 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-28 09:40:53,227 INFO  L134       CoverageAnalysis]: Checked inductivity of 74 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 67 trivial. 0 not checked.
[2020-11-28 09:40:53,227 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-28 09:40:53,227 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-11-28 09:40:53,228 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-28 09:40:53,228 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-28 09:40:53,228 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-28 09:40:53,228 INFO  L87              Difference]: Start difference. First operand 2080 states and 2263 transitions. cyclomatic complexity: 186 Second operand 7 states.
[2020-11-28 09:40:53,291 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-28 09:40:53,291 INFO  L93              Difference]: Finished difference Result 2130 states and 2318 transitions.
[2020-11-28 09:40:53,291 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-28 09:40:53,291 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2130 states and 2318 transitions.
[2020-11-28 09:40:53,296 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-28 09:40:53,301 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2130 states to 2086 states and 2273 transitions.
[2020-11-28 09:40:53,301 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 691
[2020-11-28 09:40:53,302 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 691
[2020-11-28 09:40:53,302 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2086 states and 2273 transitions.
[2020-11-28 09:40:53,303 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-28 09:40:53,303 INFO  L728         BuchiCegarLoop]: Abstraction has 2086 states and 2273 transitions.
[2020-11-28 09:40:53,305 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2086 states and 2273 transitions.
[2020-11-28 09:40:53,316 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2086 to 2086.
[2020-11-28 09:40:53,316 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2086 states.
[2020-11-28 09:40:53,318 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2086 states to 2086 states and 2273 transitions.
[2020-11-28 09:40:53,318 INFO  L751         BuchiCegarLoop]: Abstraction has 2086 states and 2273 transitions.
[2020-11-28 09:40:53,318 INFO  L631         BuchiCegarLoop]: Abstraction has 2086 states and 2273 transitions.
[2020-11-28 09:40:53,318 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-28 09:40:53,318 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2086 states and 2273 transitions.
[2020-11-28 09:40:53,320 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-28 09:40:53,320 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-28 09:40:53,320 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-28 09:40:53,321 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-28 09:40:53,322 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_USD0 := false;
[L2]                 call_transferFrom_USD0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == USD;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call USD_USD(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call USD_USD__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call USD_USD_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_USD[this] := -716642523;
[L1845]              symbol_USD[this] := -578635893;
[L1846]              decimals_USD[this] := 18;
[L1847]              _balances_USD[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_USD[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_USD[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_USD[this] := 1000000000000 * (nonlinearPow(10, decimals_USD[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_USD[this][msgsender_MSG];
[L1855]              _balances_USD[this][msgsender_MSG] := totalSupply_USD[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_USD[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_USD" } true;
[L1888]  RET         call USD_USD_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call USD_USD__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call USD_USD(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_USD(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != USD;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_USD(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_USD__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_USD[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_USD[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_USD[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_USD" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_USD__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_USD(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_USD(this);
[L3225]  CALL        call CorralChoice_USD(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != USD;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_USD(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s499 == _to_s499 && (_value_s499 > _balances_USD[this][_from_s499] || _value_s499 > _allowed_USD[this][_from_s499][msgsender_MSG])) && _value_s499 >= 0) && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_USD[this][_to_s499] >= 0) && _balances_USD[this][_to_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_USD[this][_from_s499] >= 0) && _balances_USD[this][_from_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_USD[this][_from_s499][msgsender_MSG] >= 0) && _allowed_USD[this][_from_s499][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_USD0 := true;
[L2]                 call_transferFrom_USD0 := false;
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_USD__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_USD[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_USD[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_USD[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_USD[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == USD
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_USD[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == USD
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_USD[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_USD[this][_to_s499];
[L2172]              _balances_USD[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_USD[this][_to_s499];
[L2174]  COND TRUE   DType[this] == USD
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_USD[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == USD
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_USD[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_USD[this][_from_s499];
[L2183]              _balances_USD[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_USD[this][_from_s499];
[L2185]  COND TRUE   DType[this] == USD
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_USD[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == USD
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_USD[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_USD[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_USD[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_USD[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_USD" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_USD__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_USD(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_USD(this);

Loop:
[L3225]  CALL        call CorralChoice_USD(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != USD;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_USD(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s499 == _to_s499 && (_value_s499 > _balances_USD[this][_from_s499] || _value_s499 > _allowed_USD[this][_from_s499][msgsender_MSG])) && _value_s499 >= 0) && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_USD[this][_to_s499] >= 0) && _balances_USD[this][_to_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_USD[this][_from_s499] >= 0) && _balances_USD[this][_from_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_USD[this][_from_s499][msgsender_MSG] >= 0) && _allowed_USD[this][_from_s499][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_USD0 := true;
[L2]                 call_transferFrom_USD0 := false;
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_USD__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_USD[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_USD[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_USD[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_USD[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == USD
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_USD[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == USD
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_USD[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_USD[this][_to_s499];
[L2172]              _balances_USD[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_USD[this][_to_s499];
[L2174]  COND TRUE   DType[this] == USD
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_USD[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == USD
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_USD[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_USD[this][_from_s499];
[L2183]              _balances_USD[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_USD[this][_from_s499];
[L2185]  COND TRUE   DType[this] == USD
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_USD[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == USD
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_USD[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_USD[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_USD[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_USD[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_USD" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_USD__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_USD(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_USD(this);

[2020-11-28 09:40:53,325 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-28 09:40:53,326 INFO  L82        PathProgramCache]: Analyzing trace with hash 572561347, now seen corresponding path program 1 times
[2020-11-28 09:40:53,326 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-28 09:40:53,337 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-28 09:40:53,436 INFO  L134       CoverageAnalysis]: Checked inductivity of 73 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 64 trivial. 0 not checked.
[2020-11-28 09:40:53,436 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-28 09:40:53,436 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-28 09:40:53,437 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-28 09:40:53,437 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-28 09:40:53,437 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=84, Unknown=0, NotChecked=0, Total=110
[2020-11-28 09:40:53,437 INFO  L87              Difference]: Start difference. First operand 2086 states and 2273 transitions. cyclomatic complexity: 190 Second operand 11 states.
[2020-11-28 09:40:54,006 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-28 09:40:54,006 INFO  L93              Difference]: Finished difference Result 1261 states and 1377 transitions.
[2020-11-28 09:40:54,006 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-28 09:40:54,006 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1261 states and 1377 transitions.
[2020-11-28 09:40:54,008 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-28 09:40:54,008 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1261 states to 0 states and 0 transitions.
[2020-11-28 09:40:54,008 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-28 09:40:54,008 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-28 09:40:54,008 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-28 09:40:54,009 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-28 09:40:54,009 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-28 09:40:54,009 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-28 09:40:54,009 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-28 09:40:54,009 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-28 09:40:54,009 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-28 09:40:54,009 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-28 09:40:54,009 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-28 09:40:54,012 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 28.11 09:40:54 BasicIcfg
[2020-11-28 09:40:54,012 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-28 09:40:54,012 INFO  L168              Benchmark]: Toolchain (without parser) took 6066.19 ms. Allocated memory was 1.0 GB in the beginning and 1.6 GB in the end (delta: 533.2 MB). Free memory was 945.9 MB in the beginning and 1.3 GB in the end (delta: -369.6 MB). Peak memory consumption was 163.6 MB. Max. memory is 15.3 GB.
[2020-11-28 09:40:54,013 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.19 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-28 09:40:54,013 INFO  L168              Benchmark]: Boogie Preprocessor took 88.78 ms. Allocated memory is still 1.0 GB. Free memory was 945.9 MB in the beginning and 935.2 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-28 09:40:54,013 INFO  L168              Benchmark]: UtopiaSpecLang took 63.93 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-28 09:40:54,014 INFO  L168              Benchmark]: Boogie Printer took 16.18 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-28 09:40:54,014 INFO  L168              Benchmark]: RCFGBuilder took 635.45 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 843.9 MB in the end (delta: 85.9 MB). Peak memory consumption was 85.9 MB. Max. memory is 15.3 GB.
[2020-11-28 09:40:54,014 INFO  L168              Benchmark]: UtopiaLTL2Aut took 31.95 ms. Allocated memory is still 1.0 GB. Free memory was 843.9 MB in the beginning and 840.3 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-28 09:40:54,014 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1052.40 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 59.8 MB). Free memory was 840.3 MB in the beginning and 745.3 MB in the end (delta: 95.0 MB). Peak memory consumption was 154.8 MB. Max. memory is 15.3 GB.
[2020-11-28 09:40:54,015 INFO  L168              Benchmark]: BlockEncodingV2 took 110.38 ms. Allocated memory is still 1.1 GB. Free memory was 745.3 MB in the beginning and 705.1 MB in the end (delta: 40.2 MB). Peak memory consumption was 40.2 MB. Max. memory is 15.3 GB.
[2020-11-28 09:40:54,015 INFO  L168              Benchmark]: BuchiAutomizer took 4063.87 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 473.4 MB). Free memory was 705.1 MB in the beginning and 1.3 GB in the end (delta: -610.5 MB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-28 09:40:54,017 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2972 locations, 5213 edges
  - StatisticsResult: Encoded RCFG
    2883 locations, 4981 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.19 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 88.78 ms. Allocated memory is still 1.0 GB. Free memory was 945.9 MB in the beginning and 935.2 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 63.93 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 16.18 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 635.45 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 843.9 MB in the end (delta: 85.9 MB). Peak memory consumption was 85.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 31.95 ms. Allocated memory is still 1.0 GB. Free memory was 843.9 MB in the beginning and 840.3 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1052.40 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 59.8 MB). Free memory was 840.3 MB in the beginning and 745.3 MB in the end (delta: 95.0 MB). Peak memory consumption was 154.8 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 110.38 ms. Allocated memory is still 1.1 GB. Free memory was 745.3 MB in the beginning and 705.1 MB in the end (delta: 40.2 MB). Peak memory consumption was 40.2 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 4063.87 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 473.4 MB). Free memory was 705.1 MB in the beginning and 1.3 GB in the end (delta: -610.5 MB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1233 locations, 1604 edges
  - StatisticsResult: BuchiProgram size
    2972 locations, 5213 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 6 terminating modules (6 trivial, 0 deterministic, 0 nondeterministic). 6 modules have a trivial ranking function, the largest among these consists of 15 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 4.0s and 7 iterations.  TraceHistogramMax:3. Analysis of lassos took 0.5s. Construction of modules took 2.1s. BÃ¼chi inclusion checks took 0.8s. Highest rank in rank-based complementation 0. Minimization of det autom 6. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 5 MinimizatonAttempts, 1004 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 2370 states and ocurred in iteration 1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 14344 SDtfs, 11968 SDslu, 26402 SDs, 0 SdLazy, 28925 SolverSat, 1826 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 2.1s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU6 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_USD0) ==> ( <>(fail_transferFrom_USD0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
